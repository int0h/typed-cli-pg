/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "./dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/app.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../cli/index.js":
/*!***********************!*\
  !*** ../cli/index.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar parser_1 = __webpack_require__(/*! ./src/parser */ \"../cli/src/parser.ts\");\nexports.Parser = parser_1.Parser;\nvar printer_1 = __webpack_require__(/*! ./src/printer */ \"../cli/src/printer.ts\");\nexports.Printer = printer_1.Printer;\nvar option_1 = __webpack_require__(/*! ./src/option */ \"../cli/src/option.ts\");\nexports.option = option_1.option;\nvar cli_helper_1 = __webpack_require__(/*! ./src/cli-helper */ \"../cli/src/cli-helper.ts\");\nexports.createCliHelper = cli_helper_1.createCliHelper;\nvar default_cli_1 = __webpack_require__(/*! ./src/default-cli */ \"../cli/src/default-cli.ts\");\nexports.cli = default_cli_1.cli;\nexports.defaultArgvProvider = default_cli_1.defaultArgvProvider;\nexports.defaultExiter = default_cli_1.defaultExiter;\nexports.defaultPrinter = default_cli_1.defaultPrinter;\nexports.defaultWriter = default_cli_1.defaultWriter;\nvar decorator_1 = __webpack_require__(/*! ./src/decorator */ \"../cli/src/decorator.ts\");\nexports.decorators = decorator_1.decorators;\nexports.chalkInstance = decorator_1.chalkInstance;\nvar i18n_1 = __webpack_require__(/*! ./src/i18n */ \"../cli/src/i18n.ts\");\nexports.locales = i18n_1.locales;\nvar completer_1 = __webpack_require__(/*! ./src/completer */ \"../cli/src/completer.ts\");\nexports.completeForCommandSet = completer_1.completeForCommandSet;\nvar command_1 = __webpack_require__(/*! ./src/command */ \"../cli/src/command.ts\");\nexports.createCommandHelper = command_1.createCommandHelper;\nexports.command = command_1.command;\nexports.defaultCommand = command_1.defaultCommand;\nconst presets = __importStar(__webpack_require__(/*! ./presets */ \"../cli/presets/index.ts\"));\nexports.presets = presets;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2xpL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL2NsaS9pbmRleC50cz9lYzNhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7UGFyc2VyfSBmcm9tICcuL3NyYy9wYXJzZXInO1xuZXhwb3J0IHtQcmludGVyfSBmcm9tICcuL3NyYy9wcmludGVyJztcbmV4cG9ydCB7b3B0aW9ufSBmcm9tICcuL3NyYy9vcHRpb24nO1xuZXhwb3J0IHtjcmVhdGVDbGlIZWxwZXIsIFdyaXRlciwgRXhpdGVyLCBBcmd2UHJvdmlkZXIsIENyZWF0ZUNsaUhlbHBlclBhcmFtcywgQ2xpSGVscGVyfSBmcm9tICcuL3NyYy9jbGktaGVscGVyJztcbmV4cG9ydCB7Y2xpLCBkZWZhdWx0QXJndlByb3ZpZGVyLCBkZWZhdWx0RXhpdGVyLCBkZWZhdWx0UHJpbnRlciwgZGVmYXVsdFdyaXRlcn0gZnJvbSAnLi9zcmMvZGVmYXVsdC1jbGknO1xuZXhwb3J0IHtkZWNvcmF0b3JzLCBjaGFsa0luc3RhbmNlfSBmcm9tICcuL3NyYy9kZWNvcmF0b3InO1xuZXhwb3J0IHtsb2NhbGVzfSBmcm9tICcuL3NyYy9pMThuJztcbmV4cG9ydCB7Y29tcGxldGVGb3JDb21tYW5kU2V0fSBmcm9tICcuL3NyYy9jb21wbGV0ZXInO1xuZXhwb3J0IHtjcmVhdGVDb21tYW5kSGVscGVyLCBjb21tYW5kLCBkZWZhdWx0Q29tbWFuZH0gZnJvbSAnLi9zcmMvY29tbWFuZCc7XG5pbXBvcnQgKiBhcyBwcmVzZXRzIGZyb20gJy4vcHJlc2V0cyc7XG5leHBvcnQge3ByZXNldHN9O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../cli/index.js\n");

/***/ }),

/***/ "../cli/node_modules/ansi-styles/index.js":
/*!************************************************!*\
  !*** ../cli/node_modules/ansi-styles/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\nconst colorConvert = __webpack_require__(/*! color-convert */ \"../cli/node_modules/color-convert/index.js\");\n\nconst wrapAnsi16 = (fn, offset) => function () {\n\tconst code = fn.apply(colorConvert, arguments);\n\treturn `\\u001B[${code + offset}m`;\n};\n\nconst wrapAnsi256 = (fn, offset) => function () {\n\tconst code = fn.apply(colorConvert, arguments);\n\treturn `\\u001B[${38 + offset};5;${code}m`;\n};\n\nconst wrapAnsi16m = (fn, offset) => function () {\n\tconst rgb = fn.apply(colorConvert, arguments);\n\treturn `\\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;\n};\n\nfunction assembleStyles() {\n\tconst codes = new Map();\n\tconst styles = {\n\t\tmodifier: {\n\t\t\treset: [0, 0],\n\t\t\t// 21 isn't widely supported and 22 does the same thing\n\t\t\tbold: [1, 22],\n\t\t\tdim: [2, 22],\n\t\t\titalic: [3, 23],\n\t\t\tunderline: [4, 24],\n\t\t\tinverse: [7, 27],\n\t\t\thidden: [8, 28],\n\t\t\tstrikethrough: [9, 29]\n\t\t},\n\t\tcolor: {\n\t\t\tblack: [30, 39],\n\t\t\tred: [31, 39],\n\t\t\tgreen: [32, 39],\n\t\t\tyellow: [33, 39],\n\t\t\tblue: [34, 39],\n\t\t\tmagenta: [35, 39],\n\t\t\tcyan: [36, 39],\n\t\t\twhite: [37, 39],\n\t\t\tgray: [90, 39],\n\n\t\t\t// Bright color\n\t\t\tredBright: [91, 39],\n\t\t\tgreenBright: [92, 39],\n\t\t\tyellowBright: [93, 39],\n\t\t\tblueBright: [94, 39],\n\t\t\tmagentaBright: [95, 39],\n\t\t\tcyanBright: [96, 39],\n\t\t\twhiteBright: [97, 39]\n\t\t},\n\t\tbgColor: {\n\t\t\tbgBlack: [40, 49],\n\t\t\tbgRed: [41, 49],\n\t\t\tbgGreen: [42, 49],\n\t\t\tbgYellow: [43, 49],\n\t\t\tbgBlue: [44, 49],\n\t\t\tbgMagenta: [45, 49],\n\t\t\tbgCyan: [46, 49],\n\t\t\tbgWhite: [47, 49],\n\n\t\t\t// Bright color\n\t\t\tbgBlackBright: [100, 49],\n\t\t\tbgRedBright: [101, 49],\n\t\t\tbgGreenBright: [102, 49],\n\t\t\tbgYellowBright: [103, 49],\n\t\t\tbgBlueBright: [104, 49],\n\t\t\tbgMagentaBright: [105, 49],\n\t\t\tbgCyanBright: [106, 49],\n\t\t\tbgWhiteBright: [107, 49]\n\t\t}\n\t};\n\n\t// Fix humans\n\tstyles.color.grey = styles.color.gray;\n\n\tfor (const groupName of Object.keys(styles)) {\n\t\tconst group = styles[groupName];\n\n\t\tfor (const styleName of Object.keys(group)) {\n\t\t\tconst style = group[styleName];\n\n\t\t\tstyles[styleName] = {\n\t\t\t\topen: `\\u001B[${style[0]}m`,\n\t\t\t\tclose: `\\u001B[${style[1]}m`\n\t\t\t};\n\n\t\t\tgroup[styleName] = styles[styleName];\n\n\t\t\tcodes.set(style[0], style[1]);\n\t\t}\n\n\t\tObject.defineProperty(styles, groupName, {\n\t\t\tvalue: group,\n\t\t\tenumerable: false\n\t\t});\n\n\t\tObject.defineProperty(styles, 'codes', {\n\t\t\tvalue: codes,\n\t\t\tenumerable: false\n\t\t});\n\t}\n\n\tconst ansi2ansi = n => n;\n\tconst rgb2rgb = (r, g, b) => [r, g, b];\n\n\tstyles.color.close = '\\u001B[39m';\n\tstyles.bgColor.close = '\\u001B[49m';\n\n\tstyles.color.ansi = {\n\t\tansi: wrapAnsi16(ansi2ansi, 0)\n\t};\n\tstyles.color.ansi256 = {\n\t\tansi256: wrapAnsi256(ansi2ansi, 0)\n\t};\n\tstyles.color.ansi16m = {\n\t\trgb: wrapAnsi16m(rgb2rgb, 0)\n\t};\n\n\tstyles.bgColor.ansi = {\n\t\tansi: wrapAnsi16(ansi2ansi, 10)\n\t};\n\tstyles.bgColor.ansi256 = {\n\t\tansi256: wrapAnsi256(ansi2ansi, 10)\n\t};\n\tstyles.bgColor.ansi16m = {\n\t\trgb: wrapAnsi16m(rgb2rgb, 10)\n\t};\n\n\tfor (let key of Object.keys(colorConvert)) {\n\t\tif (typeof colorConvert[key] !== 'object') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst suite = colorConvert[key];\n\n\t\tif (key === 'ansi16') {\n\t\t\tkey = 'ansi';\n\t\t}\n\n\t\tif ('ansi16' in suite) {\n\t\t\tstyles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);\n\t\t\tstyles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);\n\t\t}\n\n\t\tif ('ansi256' in suite) {\n\t\t\tstyles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);\n\t\t\tstyles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);\n\t\t}\n\n\t\tif ('rgb' in suite) {\n\t\t\tstyles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);\n\t\t\tstyles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);\n\t\t}\n\t}\n\n\treturn styles;\n}\n\n// Make the export immutable\nObject.defineProperty(module, 'exports', {\n\tenumerable: true,\n\tget: assembleStyles\n});\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../cli-pg/node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2xpL25vZGVfbW9kdWxlcy9hbnNpLXN0eWxlcy9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9jbGkvbm9kZV9tb2R1bGVzL2Fuc2ktc3R5bGVzL2luZGV4LmpzPzhkMGUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgY29sb3JDb252ZXJ0ID0gcmVxdWlyZSgnY29sb3ItY29udmVydCcpO1xuXG5jb25zdCB3cmFwQW5zaTE2ID0gKGZuLCBvZmZzZXQpID0+IGZ1bmN0aW9uICgpIHtcblx0Y29uc3QgY29kZSA9IGZuLmFwcGx5KGNvbG9yQ29udmVydCwgYXJndW1lbnRzKTtcblx0cmV0dXJuIGBcXHUwMDFCWyR7Y29kZSArIG9mZnNldH1tYDtcbn07XG5cbmNvbnN0IHdyYXBBbnNpMjU2ID0gKGZuLCBvZmZzZXQpID0+IGZ1bmN0aW9uICgpIHtcblx0Y29uc3QgY29kZSA9IGZuLmFwcGx5KGNvbG9yQ29udmVydCwgYXJndW1lbnRzKTtcblx0cmV0dXJuIGBcXHUwMDFCWyR7MzggKyBvZmZzZXR9OzU7JHtjb2RlfW1gO1xufTtcblxuY29uc3Qgd3JhcEFuc2kxNm0gPSAoZm4sIG9mZnNldCkgPT4gZnVuY3Rpb24gKCkge1xuXHRjb25zdCByZ2IgPSBmbi5hcHBseShjb2xvckNvbnZlcnQsIGFyZ3VtZW50cyk7XG5cdHJldHVybiBgXFx1MDAxQlskezM4ICsgb2Zmc2V0fTsyOyR7cmdiWzBdfTske3JnYlsxXX07JHtyZ2JbMl19bWA7XG59O1xuXG5mdW5jdGlvbiBhc3NlbWJsZVN0eWxlcygpIHtcblx0Y29uc3QgY29kZXMgPSBuZXcgTWFwKCk7XG5cdGNvbnN0IHN0eWxlcyA9IHtcblx0XHRtb2RpZmllcjoge1xuXHRcdFx0cmVzZXQ6IFswLCAwXSxcblx0XHRcdC8vIDIxIGlzbid0IHdpZGVseSBzdXBwb3J0ZWQgYW5kIDIyIGRvZXMgdGhlIHNhbWUgdGhpbmdcblx0XHRcdGJvbGQ6IFsxLCAyMl0sXG5cdFx0XHRkaW06IFsyLCAyMl0sXG5cdFx0XHRpdGFsaWM6IFszLCAyM10sXG5cdFx0XHR1bmRlcmxpbmU6IFs0LCAyNF0sXG5cdFx0XHRpbnZlcnNlOiBbNywgMjddLFxuXHRcdFx0aGlkZGVuOiBbOCwgMjhdLFxuXHRcdFx0c3RyaWtldGhyb3VnaDogWzksIDI5XVxuXHRcdH0sXG5cdFx0Y29sb3I6IHtcblx0XHRcdGJsYWNrOiBbMzAsIDM5XSxcblx0XHRcdHJlZDogWzMxLCAzOV0sXG5cdFx0XHRncmVlbjogWzMyLCAzOV0sXG5cdFx0XHR5ZWxsb3c6IFszMywgMzldLFxuXHRcdFx0Ymx1ZTogWzM0LCAzOV0sXG5cdFx0XHRtYWdlbnRhOiBbMzUsIDM5XSxcblx0XHRcdGN5YW46IFszNiwgMzldLFxuXHRcdFx0d2hpdGU6IFszNywgMzldLFxuXHRcdFx0Z3JheTogWzkwLCAzOV0sXG5cblx0XHRcdC8vIEJyaWdodCBjb2xvclxuXHRcdFx0cmVkQnJpZ2h0OiBbOTEsIDM5XSxcblx0XHRcdGdyZWVuQnJpZ2h0OiBbOTIsIDM5XSxcblx0XHRcdHllbGxvd0JyaWdodDogWzkzLCAzOV0sXG5cdFx0XHRibHVlQnJpZ2h0OiBbOTQsIDM5XSxcblx0XHRcdG1hZ2VudGFCcmlnaHQ6IFs5NSwgMzldLFxuXHRcdFx0Y3lhbkJyaWdodDogWzk2LCAzOV0sXG5cdFx0XHR3aGl0ZUJyaWdodDogWzk3LCAzOV1cblx0XHR9LFxuXHRcdGJnQ29sb3I6IHtcblx0XHRcdGJnQmxhY2s6IFs0MCwgNDldLFxuXHRcdFx0YmdSZWQ6IFs0MSwgNDldLFxuXHRcdFx0YmdHcmVlbjogWzQyLCA0OV0sXG5cdFx0XHRiZ1llbGxvdzogWzQzLCA0OV0sXG5cdFx0XHRiZ0JsdWU6IFs0NCwgNDldLFxuXHRcdFx0YmdNYWdlbnRhOiBbNDUsIDQ5XSxcblx0XHRcdGJnQ3lhbjogWzQ2LCA0OV0sXG5cdFx0XHRiZ1doaXRlOiBbNDcsIDQ5XSxcblxuXHRcdFx0Ly8gQnJpZ2h0IGNvbG9yXG5cdFx0XHRiZ0JsYWNrQnJpZ2h0OiBbMTAwLCA0OV0sXG5cdFx0XHRiZ1JlZEJyaWdodDogWzEwMSwgNDldLFxuXHRcdFx0YmdHcmVlbkJyaWdodDogWzEwMiwgNDldLFxuXHRcdFx0YmdZZWxsb3dCcmlnaHQ6IFsxMDMsIDQ5XSxcblx0XHRcdGJnQmx1ZUJyaWdodDogWzEwNCwgNDldLFxuXHRcdFx0YmdNYWdlbnRhQnJpZ2h0OiBbMTA1LCA0OV0sXG5cdFx0XHRiZ0N5YW5CcmlnaHQ6IFsxMDYsIDQ5XSxcblx0XHRcdGJnV2hpdGVCcmlnaHQ6IFsxMDcsIDQ5XVxuXHRcdH1cblx0fTtcblxuXHQvLyBGaXggaHVtYW5zXG5cdHN0eWxlcy5jb2xvci5ncmV5ID0gc3R5bGVzLmNvbG9yLmdyYXk7XG5cblx0Zm9yIChjb25zdCBncm91cE5hbWUgb2YgT2JqZWN0LmtleXMoc3R5bGVzKSkge1xuXHRcdGNvbnN0IGdyb3VwID0gc3R5bGVzW2dyb3VwTmFtZV07XG5cblx0XHRmb3IgKGNvbnN0IHN0eWxlTmFtZSBvZiBPYmplY3Qua2V5cyhncm91cCkpIHtcblx0XHRcdGNvbnN0IHN0eWxlID0gZ3JvdXBbc3R5bGVOYW1lXTtcblxuXHRcdFx0c3R5bGVzW3N0eWxlTmFtZV0gPSB7XG5cdFx0XHRcdG9wZW46IGBcXHUwMDFCWyR7c3R5bGVbMF19bWAsXG5cdFx0XHRcdGNsb3NlOiBgXFx1MDAxQlske3N0eWxlWzFdfW1gXG5cdFx0XHR9O1xuXG5cdFx0XHRncm91cFtzdHlsZU5hbWVdID0gc3R5bGVzW3N0eWxlTmFtZV07XG5cblx0XHRcdGNvZGVzLnNldChzdHlsZVswXSwgc3R5bGVbMV0pO1xuXHRcdH1cblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdHlsZXMsIGdyb3VwTmFtZSwge1xuXHRcdFx0dmFsdWU6IGdyb3VwLFxuXHRcdFx0ZW51bWVyYWJsZTogZmFsc2Vcblx0XHR9KTtcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdHlsZXMsICdjb2RlcycsIHtcblx0XHRcdHZhbHVlOiBjb2Rlcyxcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlXG5cdFx0fSk7XG5cdH1cblxuXHRjb25zdCBhbnNpMmFuc2kgPSBuID0+IG47XG5cdGNvbnN0IHJnYjJyZ2IgPSAociwgZywgYikgPT4gW3IsIGcsIGJdO1xuXG5cdHN0eWxlcy5jb2xvci5jbG9zZSA9ICdcXHUwMDFCWzM5bSc7XG5cdHN0eWxlcy5iZ0NvbG9yLmNsb3NlID0gJ1xcdTAwMUJbNDltJztcblxuXHRzdHlsZXMuY29sb3IuYW5zaSA9IHtcblx0XHRhbnNpOiB3cmFwQW5zaTE2KGFuc2kyYW5zaSwgMClcblx0fTtcblx0c3R5bGVzLmNvbG9yLmFuc2kyNTYgPSB7XG5cdFx0YW5zaTI1Njogd3JhcEFuc2kyNTYoYW5zaTJhbnNpLCAwKVxuXHR9O1xuXHRzdHlsZXMuY29sb3IuYW5zaTE2bSA9IHtcblx0XHRyZ2I6IHdyYXBBbnNpMTZtKHJnYjJyZ2IsIDApXG5cdH07XG5cblx0c3R5bGVzLmJnQ29sb3IuYW5zaSA9IHtcblx0XHRhbnNpOiB3cmFwQW5zaTE2KGFuc2kyYW5zaSwgMTApXG5cdH07XG5cdHN0eWxlcy5iZ0NvbG9yLmFuc2kyNTYgPSB7XG5cdFx0YW5zaTI1Njogd3JhcEFuc2kyNTYoYW5zaTJhbnNpLCAxMClcblx0fTtcblx0c3R5bGVzLmJnQ29sb3IuYW5zaTE2bSA9IHtcblx0XHRyZ2I6IHdyYXBBbnNpMTZtKHJnYjJyZ2IsIDEwKVxuXHR9O1xuXG5cdGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyhjb2xvckNvbnZlcnQpKSB7XG5cdFx0aWYgKHR5cGVvZiBjb2xvckNvbnZlcnRba2V5XSAhPT0gJ29iamVjdCcpIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGNvbnN0IHN1aXRlID0gY29sb3JDb252ZXJ0W2tleV07XG5cblx0XHRpZiAoa2V5ID09PSAnYW5zaTE2Jykge1xuXHRcdFx0a2V5ID0gJ2Fuc2knO1xuXHRcdH1cblxuXHRcdGlmICgnYW5zaTE2JyBpbiBzdWl0ZSkge1xuXHRcdFx0c3R5bGVzLmNvbG9yLmFuc2lba2V5XSA9IHdyYXBBbnNpMTYoc3VpdGUuYW5zaTE2LCAwKTtcblx0XHRcdHN0eWxlcy5iZ0NvbG9yLmFuc2lba2V5XSA9IHdyYXBBbnNpMTYoc3VpdGUuYW5zaTE2LCAxMCk7XG5cdFx0fVxuXG5cdFx0aWYgKCdhbnNpMjU2JyBpbiBzdWl0ZSkge1xuXHRcdFx0c3R5bGVzLmNvbG9yLmFuc2kyNTZba2V5XSA9IHdyYXBBbnNpMjU2KHN1aXRlLmFuc2kyNTYsIDApO1xuXHRcdFx0c3R5bGVzLmJnQ29sb3IuYW5zaTI1NltrZXldID0gd3JhcEFuc2kyNTYoc3VpdGUuYW5zaTI1NiwgMTApO1xuXHRcdH1cblxuXHRcdGlmICgncmdiJyBpbiBzdWl0ZSkge1xuXHRcdFx0c3R5bGVzLmNvbG9yLmFuc2kxNm1ba2V5XSA9IHdyYXBBbnNpMTZtKHN1aXRlLnJnYiwgMCk7XG5cdFx0XHRzdHlsZXMuYmdDb2xvci5hbnNpMTZtW2tleV0gPSB3cmFwQW5zaTE2bShzdWl0ZS5yZ2IsIDEwKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG4vLyBNYWtlIHRoZSBleHBvcnQgaW1tdXRhYmxlXG5PYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCAnZXhwb3J0cycsIHtcblx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0Z2V0OiBhc3NlbWJsZVN0eWxlc1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../cli/node_modules/ansi-styles/index.js\n");

/***/ }),

/***/ "../cli/node_modules/camelcase/index.js":
/*!**********************************************!*\
  !*** ../cli/node_modules/camelcase/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2xpL25vZGVfbW9kdWxlcy9jYW1lbGNhc2UvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vY2xpL25vZGVfbW9kdWxlcy9jYW1lbGNhc2UvaW5kZXguanM/MzAzZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHByZXNlcnZlQ2FtZWxDYXNlID0gc3RyaW5nID0+IHtcblx0bGV0IGlzTGFzdENoYXJMb3dlciA9IGZhbHNlO1xuXHRsZXQgaXNMYXN0Q2hhclVwcGVyID0gZmFsc2U7XG5cdGxldCBpc0xhc3RMYXN0Q2hhclVwcGVyID0gZmFsc2U7XG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyBpKyspIHtcblx0XHRjb25zdCBjaGFyYWN0ZXIgPSBzdHJpbmdbaV07XG5cblx0XHRpZiAoaXNMYXN0Q2hhckxvd2VyICYmIC9bYS16QS1aXS8udGVzdChjaGFyYWN0ZXIpICYmIGNoYXJhY3Rlci50b1VwcGVyQ2FzZSgpID09PSBjaGFyYWN0ZXIpIHtcblx0XHRcdHN0cmluZyA9IHN0cmluZy5zbGljZSgwLCBpKSArICctJyArIHN0cmluZy5zbGljZShpKTtcblx0XHRcdGlzTGFzdENoYXJMb3dlciA9IGZhbHNlO1xuXHRcdFx0aXNMYXN0TGFzdENoYXJVcHBlciA9IGlzTGFzdENoYXJVcHBlcjtcblx0XHRcdGlzTGFzdENoYXJVcHBlciA9IHRydWU7XG5cdFx0XHRpKys7XG5cdFx0fSBlbHNlIGlmIChpc0xhc3RDaGFyVXBwZXIgJiYgaXNMYXN0TGFzdENoYXJVcHBlciAmJiAvW2EtekEtWl0vLnRlc3QoY2hhcmFjdGVyKSAmJiBjaGFyYWN0ZXIudG9Mb3dlckNhc2UoKSA9PT0gY2hhcmFjdGVyKSB7XG5cdFx0XHRzdHJpbmcgPSBzdHJpbmcuc2xpY2UoMCwgaSAtIDEpICsgJy0nICsgc3RyaW5nLnNsaWNlKGkgLSAxKTtcblx0XHRcdGlzTGFzdExhc3RDaGFyVXBwZXIgPSBpc0xhc3RDaGFyVXBwZXI7XG5cdFx0XHRpc0xhc3RDaGFyVXBwZXIgPSBmYWxzZTtcblx0XHRcdGlzTGFzdENoYXJMb3dlciA9IHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlzTGFzdENoYXJMb3dlciA9IGNoYXJhY3Rlci50b0xvd2VyQ2FzZSgpID09PSBjaGFyYWN0ZXIgJiYgY2hhcmFjdGVyLnRvVXBwZXJDYXNlKCkgIT09IGNoYXJhY3Rlcjtcblx0XHRcdGlzTGFzdExhc3RDaGFyVXBwZXIgPSBpc0xhc3RDaGFyVXBwZXI7XG5cdFx0XHRpc0xhc3RDaGFyVXBwZXIgPSBjaGFyYWN0ZXIudG9VcHBlckNhc2UoKSA9PT0gY2hhcmFjdGVyICYmIGNoYXJhY3Rlci50b0xvd2VyQ2FzZSgpICE9PSBjaGFyYWN0ZXI7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHN0cmluZztcbn07XG5cbmNvbnN0IGNhbWVsQ2FzZSA9IChpbnB1dCwgb3B0aW9ucykgPT4ge1xuXHRpZiAoISh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnIHx8IEFycmF5LmlzQXJyYXkoaW5wdXQpKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBpbnB1dCB0byBiZSBgc3RyaW5nIHwgc3RyaW5nW11gJyk7XG5cdH1cblxuXHRvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG5cdFx0cGFzY2FsQ2FzZTogZmFsc2Vcblx0fSwgb3B0aW9ucyk7XG5cblx0Y29uc3QgcG9zdFByb2Nlc3MgPSB4ID0+IG9wdGlvbnMucGFzY2FsQ2FzZSA/IHguY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB4LnNsaWNlKDEpIDogeDtcblxuXHRpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcblx0XHRpbnB1dCA9IGlucHV0Lm1hcCh4ID0+IHgudHJpbSgpKVxuXHRcdFx0LmZpbHRlcih4ID0+IHgubGVuZ3RoKVxuXHRcdFx0LmpvaW4oJy0nKTtcblx0fSBlbHNlIHtcblx0XHRpbnB1dCA9IGlucHV0LnRyaW0oKTtcblx0fVxuXG5cdGlmIChpbnB1dC5sZW5ndGggPT09IDApIHtcblx0XHRyZXR1cm4gJyc7XG5cdH1cblxuXHRpZiAoaW5wdXQubGVuZ3RoID09PSAxKSB7XG5cdFx0cmV0dXJuIG9wdGlvbnMucGFzY2FsQ2FzZSA/IGlucHV0LnRvVXBwZXJDYXNlKCkgOiBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuXHR9XG5cblx0Y29uc3QgaGFzVXBwZXJDYXNlID0gaW5wdXQgIT09IGlucHV0LnRvTG93ZXJDYXNlKCk7XG5cblx0aWYgKGhhc1VwcGVyQ2FzZSkge1xuXHRcdGlucHV0ID0gcHJlc2VydmVDYW1lbENhc2UoaW5wdXQpO1xuXHR9XG5cblx0aW5wdXQgPSBpbnB1dFxuXHRcdC5yZXBsYWNlKC9eW18uXFwtIF0rLywgJycpXG5cdFx0LnRvTG93ZXJDYXNlKClcblx0XHQucmVwbGFjZSgvW18uXFwtIF0rKFxcd3wkKS9nLCAoXywgcDEpID0+IHAxLnRvVXBwZXJDYXNlKCkpXG5cdFx0LnJlcGxhY2UoL1xcZCsoXFx3fCQpL2csIG0gPT4gbS50b1VwcGVyQ2FzZSgpKTtcblxuXHRyZXR1cm4gcG9zdFByb2Nlc3MoaW5wdXQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjYW1lbENhc2U7XG4vLyBUT0RPOiBSZW1vdmUgdGhpcyBmb3IgdGhlIG5leHQgbWFqb3IgcmVsZWFzZVxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGNhbWVsQ2FzZTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../cli/node_modules/camelcase/index.js\n");

/***/ }),

/***/ "../cli/node_modules/chalk/index.js":
/*!******************************************!*\
  !*** ../cli/node_modules/chalk/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\nconst escapeStringRegexp = __webpack_require__(/*! escape-string-regexp */ \"../cli/node_modules/escape-string-regexp/index.js\");\nconst ansiStyles = __webpack_require__(/*! ansi-styles */ \"../cli/node_modules/ansi-styles/index.js\");\nconst stdoutColor = __webpack_require__(/*! supports-color */ \"../cli/node_modules/supports-color/browser.js\").stdout;\n\nconst template = __webpack_require__(/*! ./templates.js */ \"../cli/node_modules/chalk/templates.js\");\n\nconst isSimpleWindowsTerm = process.platform === 'win32' && !(process.env.TERM || '').toLowerCase().startsWith('xterm');\n\n// `supportsColor.level` → `ansiStyles.color[name]` mapping\nconst levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m'];\n\n// `color-convert` models to exclude from the Chalk API due to conflicts and such\nconst skipModels = new Set(['gray']);\n\nconst styles = Object.create(null);\n\nfunction applyOptions(obj, options) {\n\toptions = options || {};\n\n\t// Detect level if not set manually\n\tconst scLevel = stdoutColor ? stdoutColor.level : 0;\n\tobj.level = options.level === undefined ? scLevel : options.level;\n\tobj.enabled = 'enabled' in options ? options.enabled : obj.level > 0;\n}\n\nfunction Chalk(options) {\n\t// We check for this.template here since calling `chalk.constructor()`\n\t// by itself will have a `this` of a previously constructed chalk object\n\tif (!this || !(this instanceof Chalk) || this.template) {\n\t\tconst chalk = {};\n\t\tapplyOptions(chalk, options);\n\n\t\tchalk.template = function () {\n\t\t\tconst args = [].slice.call(arguments);\n\t\t\treturn chalkTag.apply(null, [chalk.template].concat(args));\n\t\t};\n\n\t\tObject.setPrototypeOf(chalk, Chalk.prototype);\n\t\tObject.setPrototypeOf(chalk.template, chalk);\n\n\t\tchalk.template.constructor = Chalk;\n\n\t\treturn chalk.template;\n\t}\n\n\tapplyOptions(this, options);\n}\n\n// Use bright blue on Windows as the normal blue color is illegible\nif (isSimpleWindowsTerm) {\n\tansiStyles.blue.open = '\\u001B[94m';\n}\n\nfor (const key of Object.keys(ansiStyles)) {\n\tansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');\n\n\tstyles[key] = {\n\t\tget() {\n\t\t\tconst codes = ansiStyles[key];\n\t\t\treturn build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);\n\t\t}\n\t};\n}\n\nstyles.visible = {\n\tget() {\n\t\treturn build.call(this, this._styles || [], true, 'visible');\n\t}\n};\n\nansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), 'g');\nfor (const model of Object.keys(ansiStyles.color.ansi)) {\n\tif (skipModels.has(model)) {\n\t\tcontinue;\n\t}\n\n\tstyles[model] = {\n\t\tget() {\n\t\t\tconst level = this.level;\n\t\t\treturn function () {\n\t\t\t\tconst open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);\n\t\t\t\tconst codes = {\n\t\t\t\t\topen,\n\t\t\t\t\tclose: ansiStyles.color.close,\n\t\t\t\t\tcloseRe: ansiStyles.color.closeRe\n\t\t\t\t};\n\t\t\t\treturn build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);\n\t\t\t};\n\t\t}\n\t};\n}\n\nansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), 'g');\nfor (const model of Object.keys(ansiStyles.bgColor.ansi)) {\n\tif (skipModels.has(model)) {\n\t\tcontinue;\n\t}\n\n\tconst bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n\tstyles[bgModel] = {\n\t\tget() {\n\t\t\tconst level = this.level;\n\t\t\treturn function () {\n\t\t\t\tconst open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);\n\t\t\t\tconst codes = {\n\t\t\t\t\topen,\n\t\t\t\t\tclose: ansiStyles.bgColor.close,\n\t\t\t\t\tcloseRe: ansiStyles.bgColor.closeRe\n\t\t\t\t};\n\t\t\t\treturn build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);\n\t\t\t};\n\t\t}\n\t};\n}\n\nconst proto = Object.defineProperties(() => {}, styles);\n\nfunction build(_styles, _empty, key) {\n\tconst builder = function () {\n\t\treturn applyStyle.apply(builder, arguments);\n\t};\n\n\tbuilder._styles = _styles;\n\tbuilder._empty = _empty;\n\n\tconst self = this;\n\n\tObject.defineProperty(builder, 'level', {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn self.level;\n\t\t},\n\t\tset(level) {\n\t\t\tself.level = level;\n\t\t}\n\t});\n\n\tObject.defineProperty(builder, 'enabled', {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn self.enabled;\n\t\t},\n\t\tset(enabled) {\n\t\t\tself.enabled = enabled;\n\t\t}\n\t});\n\n\t// See below for fix regarding invisible grey/dim combination on Windows\n\tbuilder.hasGrey = this.hasGrey || key === 'gray' || key === 'grey';\n\n\t// `__proto__` is used because we must return a function, but there is\n\t// no way to create a function with a different prototype\n\tbuilder.__proto__ = proto; // eslint-disable-line no-proto\n\n\treturn builder;\n}\n\nfunction applyStyle() {\n\t// Support varags, but simply cast to string in case there's only one arg\n\tconst args = arguments;\n\tconst argsLen = args.length;\n\tlet str = String(arguments[0]);\n\n\tif (argsLen === 0) {\n\t\treturn '';\n\t}\n\n\tif (argsLen > 1) {\n\t\t// Don't slice `arguments`, it prevents V8 optimizations\n\t\tfor (let a = 1; a < argsLen; a++) {\n\t\t\tstr += ' ' + args[a];\n\t\t}\n\t}\n\n\tif (!this.enabled || this.level <= 0 || !str) {\n\t\treturn this._empty ? '' : str;\n\t}\n\n\t// Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,\n\t// see https://github.com/chalk/chalk/issues/58\n\t// If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.\n\tconst originalDim = ansiStyles.dim.open;\n\tif (isSimpleWindowsTerm && this.hasGrey) {\n\t\tansiStyles.dim.open = '';\n\t}\n\n\tfor (const code of this._styles.slice().reverse()) {\n\t\t// Replace any instances already present with a re-opening code\n\t\t// otherwise only the part of the string until said closing code\n\t\t// will be colored, and the rest will simply be 'plain'.\n\t\tstr = code.open + str.replace(code.closeRe, code.open) + code.close;\n\n\t\t// Close the styling before a linebreak and reopen\n\t\t// after next line to fix a bleed issue on macOS\n\t\t// https://github.com/chalk/chalk/pull/92\n\t\tstr = str.replace(/\\r?\\n/g, `${code.close}$&${code.open}`);\n\t}\n\n\t// Reset the original `dim` if we changed it to work around the Windows dimmed gray issue\n\tansiStyles.dim.open = originalDim;\n\n\treturn str;\n}\n\nfunction chalkTag(chalk, strings) {\n\tif (!Array.isArray(strings)) {\n\t\t// If chalk() was called by itself or with a string,\n\t\t// return the string itself as a string.\n\t\treturn [].slice.call(arguments, 1).join(' ');\n\t}\n\n\tconst args = [].slice.call(arguments, 2);\n\tconst parts = [strings.raw[0]];\n\n\tfor (let i = 1; i < strings.length; i++) {\n\t\tparts.push(String(args[i - 1]).replace(/[{}\\\\]/g, '\\\\$&'));\n\t\tparts.push(String(strings.raw[i]));\n\t}\n\n\treturn template(chalk, parts.join(''));\n}\n\nObject.defineProperties(Chalk.prototype, styles);\n\nmodule.exports = Chalk(); // eslint-disable-line new-cap\nmodule.exports.supportsColor = stdoutColor;\nmodule.exports.default = module.exports; // For TypeScript\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../cli-pg/node_modules/process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../cli/node_modules/chalk/index.js\n");

/***/ }),

/***/ "../cli/node_modules/chalk/templates.js":
/*!**********************************************!*\
  !*** ../cli/node_modules/chalk/templates.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst TEMPLATE_REGEX = /(?:\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\nconst STYLE_REGEX = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\nconst STRING_REGEX = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\nconst ESCAPE_REGEX = /\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.)|([^\\\\])/gi;\n\nconst ESCAPES = new Map([\n\t['n', '\\n'],\n\t['r', '\\r'],\n\t['t', '\\t'],\n\t['b', '\\b'],\n\t['f', '\\f'],\n\t['v', '\\v'],\n\t['0', '\\0'],\n\t['\\\\', '\\\\'],\n\t['e', '\\u001B'],\n\t['a', '\\u0007']\n]);\n\nfunction unescape(c) {\n\tif ((c[0] === 'u' && c.length === 5) || (c[0] === 'x' && c.length === 3)) {\n\t\treturn String.fromCharCode(parseInt(c.slice(1), 16));\n\t}\n\n\treturn ESCAPES.get(c) || c;\n}\n\nfunction parseArguments(name, args) {\n\tconst results = [];\n\tconst chunks = args.trim().split(/\\s*,\\s*/g);\n\tlet matches;\n\n\tfor (const chunk of chunks) {\n\t\tif (!isNaN(chunk)) {\n\t\t\tresults.push(Number(chunk));\n\t\t} else if ((matches = chunk.match(STRING_REGEX))) {\n\t\t\tresults.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr) => escape ? unescape(escape) : chr));\n\t\t} else {\n\t\t\tthrow new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction parseStyle(style) {\n\tSTYLE_REGEX.lastIndex = 0;\n\n\tconst results = [];\n\tlet matches;\n\n\twhile ((matches = STYLE_REGEX.exec(style)) !== null) {\n\t\tconst name = matches[1];\n\n\t\tif (matches[2]) {\n\t\t\tconst args = parseArguments(name, matches[2]);\n\t\t\tresults.push([name].concat(args));\n\t\t} else {\n\t\t\tresults.push([name]);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction buildStyle(chalk, styles) {\n\tconst enabled = {};\n\n\tfor (const layer of styles) {\n\t\tfor (const style of layer.styles) {\n\t\t\tenabled[style[0]] = layer.inverse ? null : style.slice(1);\n\t\t}\n\t}\n\n\tlet current = chalk;\n\tfor (const styleName of Object.keys(enabled)) {\n\t\tif (Array.isArray(enabled[styleName])) {\n\t\t\tif (!(styleName in current)) {\n\t\t\t\tthrow new Error(`Unknown Chalk style: ${styleName}`);\n\t\t\t}\n\n\t\t\tif (enabled[styleName].length > 0) {\n\t\t\t\tcurrent = current[styleName].apply(current, enabled[styleName]);\n\t\t\t} else {\n\t\t\t\tcurrent = current[styleName];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn current;\n}\n\nmodule.exports = (chalk, tmp) => {\n\tconst styles = [];\n\tconst chunks = [];\n\tlet chunk = [];\n\n\t// eslint-disable-next-line max-params\n\ttmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {\n\t\tif (escapeChar) {\n\t\t\tchunk.push(unescape(escapeChar));\n\t\t} else if (style) {\n\t\t\tconst str = chunk.join('');\n\t\t\tchunk = [];\n\t\t\tchunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));\n\t\t\tstyles.push({inverse, styles: parseStyle(style)});\n\t\t} else if (close) {\n\t\t\tif (styles.length === 0) {\n\t\t\t\tthrow new Error('Found extraneous } in Chalk template literal');\n\t\t\t}\n\n\t\t\tchunks.push(buildStyle(chalk, styles)(chunk.join('')));\n\t\t\tchunk = [];\n\t\t\tstyles.pop();\n\t\t} else {\n\t\t\tchunk.push(chr);\n\t\t}\n\t});\n\n\tchunks.push(chunk.join(''));\n\n\tif (styles.length > 0) {\n\t\tconst errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\\`}\\`)`;\n\t\tthrow new Error(errMsg);\n\t}\n\n\treturn chunks.join('');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2xpL25vZGVfbW9kdWxlcy9jaGFsay90ZW1wbGF0ZXMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vY2xpL25vZGVfbW9kdWxlcy9jaGFsay90ZW1wbGF0ZXMuanM/OThlOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBURU1QTEFURV9SRUdFWCA9IC8oPzpcXFxcKHVbYS1mXFxkXXs0fXx4W2EtZlxcZF17Mn18LikpfCg/Olxceyh+KT8oXFx3Kyg/OlxcKFteKV0qXFwpKT8oPzpcXC5cXHcrKD86XFwoW14pXSpcXCkpPykqKSg/OlsgXFx0XXwoPz1cXHI/XFxuKSkpfChcXH0pfCgoPzoufFtcXHJcXG5cXGZdKSs/KS9naTtcbmNvbnN0IFNUWUxFX1JFR0VYID0gLyg/Ol58XFwuKShcXHcrKSg/OlxcKChbXildKilcXCkpPy9nO1xuY29uc3QgU1RSSU5HX1JFR0VYID0gL14oWydcIl0pKCg/OlxcXFwufCg/IVxcMSlbXlxcXFxdKSopXFwxJC87XG5jb25zdCBFU0NBUEVfUkVHRVggPSAvXFxcXCh1W2EtZlxcZF17NH18eFthLWZcXGRdezJ9fC4pfChbXlxcXFxdKS9naTtcblxuY29uc3QgRVNDQVBFUyA9IG5ldyBNYXAoW1xuXHRbJ24nLCAnXFxuJ10sXG5cdFsncicsICdcXHInXSxcblx0Wyd0JywgJ1xcdCddLFxuXHRbJ2InLCAnXFxiJ10sXG5cdFsnZicsICdcXGYnXSxcblx0Wyd2JywgJ1xcdiddLFxuXHRbJzAnLCAnXFwwJ10sXG5cdFsnXFxcXCcsICdcXFxcJ10sXG5cdFsnZScsICdcXHUwMDFCJ10sXG5cdFsnYScsICdcXHUwMDA3J11cbl0pO1xuXG5mdW5jdGlvbiB1bmVzY2FwZShjKSB7XG5cdGlmICgoY1swXSA9PT0gJ3UnICYmIGMubGVuZ3RoID09PSA1KSB8fCAoY1swXSA9PT0gJ3gnICYmIGMubGVuZ3RoID09PSAzKSkge1xuXHRcdHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGMuc2xpY2UoMSksIDE2KSk7XG5cdH1cblxuXHRyZXR1cm4gRVNDQVBFUy5nZXQoYykgfHwgYztcbn1cblxuZnVuY3Rpb24gcGFyc2VBcmd1bWVudHMobmFtZSwgYXJncykge1xuXHRjb25zdCByZXN1bHRzID0gW107XG5cdGNvbnN0IGNodW5rcyA9IGFyZ3MudHJpbSgpLnNwbGl0KC9cXHMqLFxccyovZyk7XG5cdGxldCBtYXRjaGVzO1xuXG5cdGZvciAoY29uc3QgY2h1bmsgb2YgY2h1bmtzKSB7XG5cdFx0aWYgKCFpc05hTihjaHVuaykpIHtcblx0XHRcdHJlc3VsdHMucHVzaChOdW1iZXIoY2h1bmspKTtcblx0XHR9IGVsc2UgaWYgKChtYXRjaGVzID0gY2h1bmsubWF0Y2goU1RSSU5HX1JFR0VYKSkpIHtcblx0XHRcdHJlc3VsdHMucHVzaChtYXRjaGVzWzJdLnJlcGxhY2UoRVNDQVBFX1JFR0VYLCAobSwgZXNjYXBlLCBjaHIpID0+IGVzY2FwZSA/IHVuZXNjYXBlKGVzY2FwZSkgOiBjaHIpKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIENoYWxrIHRlbXBsYXRlIHN0eWxlIGFyZ3VtZW50OiAke2NodW5rfSAoaW4gc3R5bGUgJyR7bmFtZX0nKWApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBwYXJzZVN0eWxlKHN0eWxlKSB7XG5cdFNUWUxFX1JFR0VYLmxhc3RJbmRleCA9IDA7XG5cblx0Y29uc3QgcmVzdWx0cyA9IFtdO1xuXHRsZXQgbWF0Y2hlcztcblxuXHR3aGlsZSAoKG1hdGNoZXMgPSBTVFlMRV9SRUdFWC5leGVjKHN0eWxlKSkgIT09IG51bGwpIHtcblx0XHRjb25zdCBuYW1lID0gbWF0Y2hlc1sxXTtcblxuXHRcdGlmIChtYXRjaGVzWzJdKSB7XG5cdFx0XHRjb25zdCBhcmdzID0gcGFyc2VBcmd1bWVudHMobmFtZSwgbWF0Y2hlc1syXSk7XG5cdFx0XHRyZXN1bHRzLnB1c2goW25hbWVdLmNvbmNhdChhcmdzKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdHMucHVzaChbbmFtZV0pO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBidWlsZFN0eWxlKGNoYWxrLCBzdHlsZXMpIHtcblx0Y29uc3QgZW5hYmxlZCA9IHt9O1xuXG5cdGZvciAoY29uc3QgbGF5ZXIgb2Ygc3R5bGVzKSB7XG5cdFx0Zm9yIChjb25zdCBzdHlsZSBvZiBsYXllci5zdHlsZXMpIHtcblx0XHRcdGVuYWJsZWRbc3R5bGVbMF1dID0gbGF5ZXIuaW52ZXJzZSA/IG51bGwgOiBzdHlsZS5zbGljZSgxKTtcblx0XHR9XG5cdH1cblxuXHRsZXQgY3VycmVudCA9IGNoYWxrO1xuXHRmb3IgKGNvbnN0IHN0eWxlTmFtZSBvZiBPYmplY3Qua2V5cyhlbmFibGVkKSkge1xuXHRcdGlmIChBcnJheS5pc0FycmF5KGVuYWJsZWRbc3R5bGVOYW1lXSkpIHtcblx0XHRcdGlmICghKHN0eWxlTmFtZSBpbiBjdXJyZW50KSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gQ2hhbGsgc3R5bGU6ICR7c3R5bGVOYW1lfWApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZW5hYmxlZFtzdHlsZU5hbWVdLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0Y3VycmVudCA9IGN1cnJlbnRbc3R5bGVOYW1lXS5hcHBseShjdXJyZW50LCBlbmFibGVkW3N0eWxlTmFtZV0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3VycmVudCA9IGN1cnJlbnRbc3R5bGVOYW1lXTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY3VycmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSAoY2hhbGssIHRtcCkgPT4ge1xuXHRjb25zdCBzdHlsZXMgPSBbXTtcblx0Y29uc3QgY2h1bmtzID0gW107XG5cdGxldCBjaHVuayA9IFtdO1xuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtcGFyYW1zXG5cdHRtcC5yZXBsYWNlKFRFTVBMQVRFX1JFR0VYLCAobSwgZXNjYXBlQ2hhciwgaW52ZXJzZSwgc3R5bGUsIGNsb3NlLCBjaHIpID0+IHtcblx0XHRpZiAoZXNjYXBlQ2hhcikge1xuXHRcdFx0Y2h1bmsucHVzaCh1bmVzY2FwZShlc2NhcGVDaGFyKSk7XG5cdFx0fSBlbHNlIGlmIChzdHlsZSkge1xuXHRcdFx0Y29uc3Qgc3RyID0gY2h1bmsuam9pbignJyk7XG5cdFx0XHRjaHVuayA9IFtdO1xuXHRcdFx0Y2h1bmtzLnB1c2goc3R5bGVzLmxlbmd0aCA9PT0gMCA/IHN0ciA6IGJ1aWxkU3R5bGUoY2hhbGssIHN0eWxlcykoc3RyKSk7XG5cdFx0XHRzdHlsZXMucHVzaCh7aW52ZXJzZSwgc3R5bGVzOiBwYXJzZVN0eWxlKHN0eWxlKX0pO1xuXHRcdH0gZWxzZSBpZiAoY2xvc2UpIHtcblx0XHRcdGlmIChzdHlsZXMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignRm91bmQgZXh0cmFuZW91cyB9IGluIENoYWxrIHRlbXBsYXRlIGxpdGVyYWwnKTtcblx0XHRcdH1cblxuXHRcdFx0Y2h1bmtzLnB1c2goYnVpbGRTdHlsZShjaGFsaywgc3R5bGVzKShjaHVuay5qb2luKCcnKSkpO1xuXHRcdFx0Y2h1bmsgPSBbXTtcblx0XHRcdHN0eWxlcy5wb3AoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2h1bmsucHVzaChjaHIpO1xuXHRcdH1cblx0fSk7XG5cblx0Y2h1bmtzLnB1c2goY2h1bmsuam9pbignJykpO1xuXG5cdGlmIChzdHlsZXMubGVuZ3RoID4gMCkge1xuXHRcdGNvbnN0IGVyck1zZyA9IGBDaGFsayB0ZW1wbGF0ZSBsaXRlcmFsIGlzIG1pc3NpbmcgJHtzdHlsZXMubGVuZ3RofSBjbG9zaW5nIGJyYWNrZXQke3N0eWxlcy5sZW5ndGggPT09IDEgPyAnJyA6ICdzJ30gKFxcYH1cXGApYDtcblx0XHR0aHJvdyBuZXcgRXJyb3IoZXJyTXNnKTtcblx0fVxuXG5cdHJldHVybiBjaHVua3Muam9pbignJyk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../cli/node_modules/chalk/templates.js\n");

/***/ }),

/***/ "../cli/node_modules/color-convert/conversions.js":
/*!********************************************************!*\
  !*** ../cli/node_modules/color-convert/conversions.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* MIT license */\nvar cssKeywords = __webpack_require__(/*! color-name */ \"../cli/node_modules/color-name/index.js\");\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nvar reverseKeywords = {};\nfor (var key in cssKeywords) {\n\tif (cssKeywords.hasOwnProperty(key)) {\n\t\treverseKeywords[cssKeywords[key]] = key;\n\t}\n}\n\nvar convert = module.exports = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\n// hide .channels and .labels properties\nfor (var model in convert) {\n\tif (convert.hasOwnProperty(model)) {\n\t\tif (!('channels' in convert[model])) {\n\t\t\tthrow new Error('missing channels property: ' + model);\n\t\t}\n\n\t\tif (!('labels' in convert[model])) {\n\t\t\tthrow new Error('missing channel labels property: ' + model);\n\t\t}\n\n\t\tif (convert[model].labels.length !== convert[model].channels) {\n\t\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t\t}\n\n\t\tvar channels = convert[model].channels;\n\t\tvar labels = convert[model].labels;\n\t\tdelete convert[model].channels;\n\t\tdelete convert[model].labels;\n\t\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\t\tObject.defineProperty(convert[model], 'labels', {value: labels});\n\t}\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar l;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tl = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tvar rdif;\n\tvar gdif;\n\tvar bdif;\n\tvar h;\n\tvar s;\n\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar v = Math.max(r, g, b);\n\tvar diff = v - Math.min(r, g, b);\n\tvar diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = s = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar h = convert.rgb.hsl(rgb)[0];\n\tvar w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar c;\n\tvar m;\n\tvar y;\n\tvar k;\n\n\tk = Math.min(1 - r, 1 - g, 1 - b);\n\tc = (1 - r - k) / (1 - k) || 0;\n\tm = (1 - g - k) / (1 - k) || 0;\n\ty = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\n/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */\nfunction comparativeDistance(x, y) {\n\treturn (\n\t\tMath.pow(x[0] - y[0], 2) +\n\t\tMath.pow(x[1] - y[1], 2) +\n\t\tMath.pow(x[2] - y[2], 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tvar reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tvar currentClosestDistance = Infinity;\n\tvar currentClosestKeyword;\n\n\tfor (var keyword in cssKeywords) {\n\t\tif (cssKeywords.hasOwnProperty(keyword)) {\n\t\t\tvar value = cssKeywords[keyword];\n\n\t\t\t// Compute comparative distance\n\t\t\tvar distance = comparativeDistance(rgb, value);\n\n\t\t\t// Check if its less, if so set as closest\n\t\t\tif (distance < currentClosestDistance) {\n\t\t\t\tcurrentClosestDistance = distance;\n\t\t\t\tcurrentClosestKeyword = keyword;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\n\t// assume sRGB\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n\tvar x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tvar y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tvar z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tvar xyz = convert.rgb.xyz(rgb);\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tvar h = hsl[0] / 360;\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar rgb;\n\tvar val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tt1 = 2 * l - t2;\n\n\trgb = [0, 0, 0];\n\tfor (var i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tvar h = hsl[0];\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar smin = s;\n\tvar lmin = Math.max(l, 0.01);\n\tvar sv;\n\tvar v;\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tv = (l + s) / 2;\n\tsv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tvar h = hsv[0] / 60;\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar hi = Math.floor(h) % 6;\n\n\tvar f = h - Math.floor(h);\n\tvar p = 255 * v * (1 - s);\n\tvar q = 255 * v * (1 - (s * f));\n\tvar t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tvar h = hsv[0];\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar vmin = Math.max(v, 0.01);\n\tvar lmin;\n\tvar sl;\n\tvar l;\n\n\tl = (2 - s) * v;\n\tlmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tvar h = hwb[0] / 360;\n\tvar wh = hwb[1] / 100;\n\tvar bl = hwb[2] / 100;\n\tvar ratio = wh + bl;\n\tvar i;\n\tvar v;\n\tvar f;\n\tvar n;\n\n\t// wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\ti = Math.floor(6 * h);\n\tv = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tn = wh + f * (v - wh); // linear interpolation\n\n\tvar r;\n\tvar g;\n\tvar b;\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v; g = n; b = wh; break;\n\t\tcase 1: r = n; g = v; b = wh; break;\n\t\tcase 2: r = wh; g = v; b = n; break;\n\t\tcase 3: r = wh; g = n; b = v; break;\n\t\tcase 4: r = n; g = wh; b = v; break;\n\t\tcase 5: r = v; g = wh; b = n; break;\n\t}\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tvar c = cmyk[0] / 100;\n\tvar m = cmyk[1] / 100;\n\tvar y = cmyk[2] / 100;\n\tvar k = cmyk[3] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = 1 - Math.min(1, c * (1 - k) + k);\n\tg = 1 - Math.min(1, m * (1 - k) + k);\n\tb = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tvar x = xyz[0] / 100;\n\tvar y = xyz[1] / 100;\n\tvar z = xyz[2] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar x;\n\tvar y;\n\tvar z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tvar y2 = Math.pow(y, 3);\n\tvar x2 = Math.pow(x, 3);\n\tvar z2 = Math.pow(z, 3);\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar hr;\n\tvar h;\n\tvar c;\n\n\thr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tc = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tvar l = lch[0];\n\tvar c = lch[1];\n\tvar h = lch[2];\n\tvar a;\n\tvar b;\n\tvar hr;\n\n\thr = h / 360 * 2 * Math.PI;\n\ta = c * Math.cos(hr);\n\tb = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\tvar value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tvar ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\n\t// we use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tvar ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tvar color = args % 10;\n\n\t// handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tvar mult = (~~(args > 50) + 1) * 0.5;\n\tvar r = ((color & 1) * mult) * 255;\n\tvar g = (((color >> 1) & 1) * mult) * 255;\n\tvar b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// handle greyscale\n\tif (args >= 232) {\n\t\tvar c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tvar rem;\n\tvar r = Math.floor(args / 36) / 5 * 255;\n\tvar g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tvar b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tvar integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tvar match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tvar colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(function (char) {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tvar integer = parseInt(colorString, 16);\n\tvar r = (integer >> 16) & 0xFF;\n\tvar g = (integer >> 8) & 0xFF;\n\tvar b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar max = Math.max(Math.max(r, g), b);\n\tvar min = Math.min(Math.min(r, g), b);\n\tvar chroma = (max - min);\n\tvar grayscale;\n\tvar hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma + 4;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar c = 1;\n\tvar f = 0;\n\n\tif (l < 0.5) {\n\t\tc = 2.0 * s * l;\n\t} else {\n\t\tc = 2.0 * s * (1.0 - l);\n\t}\n\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\n\tvar c = s * v;\n\tvar f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tvar h = hcg[0] / 360;\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tvar pure = [0, 0, 0];\n\tvar hi = (h % 1) * 6;\n\tvar v = hi % 1;\n\tvar w = 1 - v;\n\tvar mg = 0;\n\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar v = c + g * (1.0 - c);\n\tvar f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar l = g * (1.0 - c) + 0.5 * c;\n\tvar s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\tvar v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tvar w = hwb[1] / 100;\n\tvar b = hwb[2] / 100;\n\tvar v = 1 - b;\n\tvar c = v - w;\n\tvar g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = convert.gray.hsv = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tvar val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tvar integer = (val << 16) + (val << 8) + val;\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tvar val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../cli/node_modules/color-convert/conversions.js\n");

/***/ }),

/***/ "../cli/node_modules/color-convert/index.js":
/*!**************************************************!*\
  !*** ../cli/node_modules/color-convert/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var conversions = __webpack_require__(/*! ./conversions */ \"../cli/node_modules/color-convert/conversions.js\");\nvar route = __webpack_require__(/*! ./route */ \"../cli/node_modules/color-convert/route.js\");\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2xpL25vZGVfbW9kdWxlcy9jb2xvci1jb252ZXJ0L2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL2NsaS9ub2RlX21vZHVsZXMvY29sb3ItY29udmVydC9pbmRleC5qcz81OTlhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBjb252ZXJzaW9ucyA9IHJlcXVpcmUoJy4vY29udmVyc2lvbnMnKTtcbnZhciByb3V0ZSA9IHJlcXVpcmUoJy4vcm91dGUnKTtcblxudmFyIGNvbnZlcnQgPSB7fTtcblxudmFyIG1vZGVscyA9IE9iamVjdC5rZXlzKGNvbnZlcnNpb25zKTtcblxuZnVuY3Rpb24gd3JhcFJhdyhmbikge1xuXHR2YXIgd3JhcHBlZEZuID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0XHRpZiAoYXJncyA9PT0gdW5kZWZpbmVkIHx8IGFyZ3MgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBhcmdzO1xuXHRcdH1cblxuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdFx0YXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZuKGFyZ3MpO1xuXHR9O1xuXG5cdC8vIHByZXNlcnZlIC5jb252ZXJzaW9uIHByb3BlcnR5IGlmIHRoZXJlIGlzIG9uZVxuXHRpZiAoJ2NvbnZlcnNpb24nIGluIGZuKSB7XG5cdFx0d3JhcHBlZEZuLmNvbnZlcnNpb24gPSBmbi5jb252ZXJzaW9uO1xuXHR9XG5cblx0cmV0dXJuIHdyYXBwZWRGbjtcbn1cblxuZnVuY3Rpb24gd3JhcFJvdW5kZWQoZm4pIHtcblx0dmFyIHdyYXBwZWRGbiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdFx0aWYgKGFyZ3MgPT09IHVuZGVmaW5lZCB8fCBhcmdzID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gYXJncztcblx0XHR9XG5cblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRcdGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXHRcdH1cblxuXHRcdHZhciByZXN1bHQgPSBmbihhcmdzKTtcblxuXHRcdC8vIHdlJ3JlIGFzc3VtaW5nIHRoZSByZXN1bHQgaXMgYW4gYXJyYXkgaGVyZS5cblx0XHQvLyBzZWUgbm90aWNlIGluIGNvbnZlcnNpb25zLmpzOyBkb24ndCB1c2UgYm94IHR5cGVzXG5cdFx0Ly8gaW4gY29udmVyc2lvbiBmdW5jdGlvbnMuXG5cdFx0aWYgKHR5cGVvZiByZXN1bHQgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRmb3IgKHZhciBsZW4gPSByZXN1bHQubGVuZ3RoLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdHJlc3VsdFtpXSA9IE1hdGgucm91bmQocmVzdWx0W2ldKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdC8vIHByZXNlcnZlIC5jb252ZXJzaW9uIHByb3BlcnR5IGlmIHRoZXJlIGlzIG9uZVxuXHRpZiAoJ2NvbnZlcnNpb24nIGluIGZuKSB7XG5cdFx0d3JhcHBlZEZuLmNvbnZlcnNpb24gPSBmbi5jb252ZXJzaW9uO1xuXHR9XG5cblx0cmV0dXJuIHdyYXBwZWRGbjtcbn1cblxubW9kZWxzLmZvckVhY2goZnVuY3Rpb24gKGZyb21Nb2RlbCkge1xuXHRjb252ZXJ0W2Zyb21Nb2RlbF0gPSB7fTtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udmVydFtmcm9tTW9kZWxdLCAnY2hhbm5lbHMnLCB7dmFsdWU6IGNvbnZlcnNpb25zW2Zyb21Nb2RlbF0uY2hhbm5lbHN9KTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnZlcnRbZnJvbU1vZGVsXSwgJ2xhYmVscycsIHt2YWx1ZTogY29udmVyc2lvbnNbZnJvbU1vZGVsXS5sYWJlbHN9KTtcblxuXHR2YXIgcm91dGVzID0gcm91dGUoZnJvbU1vZGVsKTtcblx0dmFyIHJvdXRlTW9kZWxzID0gT2JqZWN0LmtleXMocm91dGVzKTtcblxuXHRyb3V0ZU1vZGVscy5mb3JFYWNoKGZ1bmN0aW9uICh0b01vZGVsKSB7XG5cdFx0dmFyIGZuID0gcm91dGVzW3RvTW9kZWxdO1xuXG5cdFx0Y29udmVydFtmcm9tTW9kZWxdW3RvTW9kZWxdID0gd3JhcFJvdW5kZWQoZm4pO1xuXHRcdGNvbnZlcnRbZnJvbU1vZGVsXVt0b01vZGVsXS5yYXcgPSB3cmFwUmF3KGZuKTtcblx0fSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb252ZXJ0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../cli/node_modules/color-convert/index.js\n");

/***/ }),

/***/ "../cli/node_modules/color-convert/route.js":
/*!**************************************************!*\
  !*** ../cli/node_modules/color-convert/route.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var conversions = __webpack_require__(/*! ./conversions */ \"../cli/node_modules/color-convert/conversions.js\");\n\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tvar graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tvar models = Object.keys(conversions);\n\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tvar graph = buildGraph();\n\tvar queue = [fromModel]; // unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tvar current = queue.pop();\n\t\tvar adjacents = Object.keys(conversions[current]);\n\n\t\tfor (var len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tvar adjacent = adjacents[i];\n\t\t\tvar node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tvar path = [graph[toModel].parent, toModel];\n\tvar fn = conversions[graph[toModel].parent][toModel];\n\n\tvar cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tvar graph = deriveBFS(fromModel);\n\tvar conversion = {};\n\n\tvar models = Object.keys(graph);\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tvar toModel = models[i];\n\t\tvar node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// no possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2xpL25vZGVfbW9kdWxlcy9jb2xvci1jb252ZXJ0L3JvdXRlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL2NsaS9ub2RlX21vZHVsZXMvY29sb3ItY29udmVydC9yb3V0ZS5qcz8zYmQ5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBjb252ZXJzaW9ucyA9IHJlcXVpcmUoJy4vY29udmVyc2lvbnMnKTtcblxuLypcblx0dGhpcyBmdW5jdGlvbiByb3V0ZXMgYSBtb2RlbCB0byBhbGwgb3RoZXIgbW9kZWxzLlxuXG5cdGFsbCBmdW5jdGlvbnMgdGhhdCBhcmUgcm91dGVkIGhhdmUgYSBwcm9wZXJ0eSBgLmNvbnZlcnNpb25gIGF0dGFjaGVkXG5cdHRvIHRoZSByZXR1cm5lZCBzeW50aGV0aWMgZnVuY3Rpb24uIFRoaXMgcHJvcGVydHkgaXMgYW4gYXJyYXlcblx0b2Ygc3RyaW5ncywgZWFjaCB3aXRoIHRoZSBzdGVwcyBpbiBiZXR3ZWVuIHRoZSAnZnJvbScgYW5kICd0bydcblx0Y29sb3IgbW9kZWxzIChpbmNsdXNpdmUpLlxuXG5cdGNvbnZlcnNpb25zIHRoYXQgYXJlIG5vdCBwb3NzaWJsZSBzaW1wbHkgYXJlIG5vdCBpbmNsdWRlZC5cbiovXG5cbmZ1bmN0aW9uIGJ1aWxkR3JhcGgoKSB7XG5cdHZhciBncmFwaCA9IHt9O1xuXHQvLyBodHRwczovL2pzcGVyZi5jb20vb2JqZWN0LWtleXMtdnMtZm9yLWluLXdpdGgtY2xvc3VyZS8zXG5cdHZhciBtb2RlbHMgPSBPYmplY3Qua2V5cyhjb252ZXJzaW9ucyk7XG5cblx0Zm9yICh2YXIgbGVuID0gbW9kZWxzLmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdGdyYXBoW21vZGVsc1tpXV0gPSB7XG5cdFx0XHQvLyBodHRwOi8vanNwZXJmLmNvbS8xLXZzLWluZmluaXR5XG5cdFx0XHQvLyBtaWNyby1vcHQsIGJ1dCB0aGlzIGlzIHNpbXBsZS5cblx0XHRcdGRpc3RhbmNlOiAtMSxcblx0XHRcdHBhcmVudDogbnVsbFxuXHRcdH07XG5cdH1cblxuXHRyZXR1cm4gZ3JhcGg7XG59XG5cbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0JyZWFkdGgtZmlyc3Rfc2VhcmNoXG5mdW5jdGlvbiBkZXJpdmVCRlMoZnJvbU1vZGVsKSB7XG5cdHZhciBncmFwaCA9IGJ1aWxkR3JhcGgoKTtcblx0dmFyIHF1ZXVlID0gW2Zyb21Nb2RlbF07IC8vIHVuc2hpZnQgLT4gcXVldWUgLT4gcG9wXG5cblx0Z3JhcGhbZnJvbU1vZGVsXS5kaXN0YW5jZSA9IDA7XG5cblx0d2hpbGUgKHF1ZXVlLmxlbmd0aCkge1xuXHRcdHZhciBjdXJyZW50ID0gcXVldWUucG9wKCk7XG5cdFx0dmFyIGFkamFjZW50cyA9IE9iamVjdC5rZXlzKGNvbnZlcnNpb25zW2N1cnJlbnRdKTtcblxuXHRcdGZvciAodmFyIGxlbiA9IGFkamFjZW50cy5sZW5ndGgsIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdHZhciBhZGphY2VudCA9IGFkamFjZW50c1tpXTtcblx0XHRcdHZhciBub2RlID0gZ3JhcGhbYWRqYWNlbnRdO1xuXG5cdFx0XHRpZiAobm9kZS5kaXN0YW5jZSA9PT0gLTEpIHtcblx0XHRcdFx0bm9kZS5kaXN0YW5jZSA9IGdyYXBoW2N1cnJlbnRdLmRpc3RhbmNlICsgMTtcblx0XHRcdFx0bm9kZS5wYXJlbnQgPSBjdXJyZW50O1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KGFkamFjZW50KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZ3JhcGg7XG59XG5cbmZ1bmN0aW9uIGxpbmsoZnJvbSwgdG8pIHtcblx0cmV0dXJuIGZ1bmN0aW9uIChhcmdzKSB7XG5cdFx0cmV0dXJuIHRvKGZyb20oYXJncykpO1xuXHR9O1xufVxuXG5mdW5jdGlvbiB3cmFwQ29udmVyc2lvbih0b01vZGVsLCBncmFwaCkge1xuXHR2YXIgcGF0aCA9IFtncmFwaFt0b01vZGVsXS5wYXJlbnQsIHRvTW9kZWxdO1xuXHR2YXIgZm4gPSBjb252ZXJzaW9uc1tncmFwaFt0b01vZGVsXS5wYXJlbnRdW3RvTW9kZWxdO1xuXG5cdHZhciBjdXIgPSBncmFwaFt0b01vZGVsXS5wYXJlbnQ7XG5cdHdoaWxlIChncmFwaFtjdXJdLnBhcmVudCkge1xuXHRcdHBhdGgudW5zaGlmdChncmFwaFtjdXJdLnBhcmVudCk7XG5cdFx0Zm4gPSBsaW5rKGNvbnZlcnNpb25zW2dyYXBoW2N1cl0ucGFyZW50XVtjdXJdLCBmbik7XG5cdFx0Y3VyID0gZ3JhcGhbY3VyXS5wYXJlbnQ7XG5cdH1cblxuXHRmbi5jb252ZXJzaW9uID0gcGF0aDtcblx0cmV0dXJuIGZuO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmcm9tTW9kZWwpIHtcblx0dmFyIGdyYXBoID0gZGVyaXZlQkZTKGZyb21Nb2RlbCk7XG5cdHZhciBjb252ZXJzaW9uID0ge307XG5cblx0dmFyIG1vZGVscyA9IE9iamVjdC5rZXlzKGdyYXBoKTtcblx0Zm9yICh2YXIgbGVuID0gbW9kZWxzLmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdHZhciB0b01vZGVsID0gbW9kZWxzW2ldO1xuXHRcdHZhciBub2RlID0gZ3JhcGhbdG9Nb2RlbF07XG5cblx0XHRpZiAobm9kZS5wYXJlbnQgPT09IG51bGwpIHtcblx0XHRcdC8vIG5vIHBvc3NpYmxlIGNvbnZlcnNpb24sIG9yIHRoaXMgbm9kZSBpcyB0aGUgc291cmNlIG1vZGVsLlxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29udmVyc2lvblt0b01vZGVsXSA9IHdyYXBDb252ZXJzaW9uKHRvTW9kZWwsIGdyYXBoKTtcblx0fVxuXG5cdHJldHVybiBjb252ZXJzaW9uO1xufTtcblxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../cli/node_modules/color-convert/route.js\n");

/***/ }),

/***/ "../cli/node_modules/color-name/index.js":
/*!***********************************************!*\
  !*** ../cli/node_modules/color-name/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../cli/node_modules/color-name/index.js\n");

/***/ }),

/***/ "../cli/node_modules/decamelize/index.js":
/*!***********************************************!*\
  !*** ../cli/node_modules/decamelize/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = function (str, sep) {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\tsep = typeof sep === 'undefined' ? '_' : sep;\n\n\treturn str\n\t\t.replace(/([a-z\\d])([A-Z])/g, '$1' + sep + '$2')\n\t\t.replace(/([A-Z]+)([A-Z][a-z\\d]+)/g, '$1' + sep + '$2')\n\t\t.toLowerCase();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2xpL25vZGVfbW9kdWxlcy9kZWNhbWVsaXplL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL2NsaS9ub2RlX21vZHVsZXMvZGVjYW1lbGl6ZS9pbmRleC5qcz81MzcwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0ciwgc2VwKSB7XG5cdGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGEgc3RyaW5nJyk7XG5cdH1cblxuXHRzZXAgPSB0eXBlb2Ygc2VwID09PSAndW5kZWZpbmVkJyA/ICdfJyA6IHNlcDtcblxuXHRyZXR1cm4gc3RyXG5cdFx0LnJlcGxhY2UoLyhbYS16XFxkXSkoW0EtWl0pL2csICckMScgKyBzZXAgKyAnJDInKVxuXHRcdC5yZXBsYWNlKC8oW0EtWl0rKShbQS1aXVthLXpcXGRdKykvZywgJyQxJyArIHNlcCArICckMicpXG5cdFx0LnRvTG93ZXJDYXNlKCk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../cli/node_modules/decamelize/index.js\n");

/***/ }),

/***/ "../cli/node_modules/escape-string-regexp/index.js":
/*!*********************************************************!*\
  !*** ../cli/node_modules/escape-string-regexp/index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\n\nmodule.exports = function (str) {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\treturn str.replace(matchOperatorsRe, '\\\\$&');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2xpL25vZGVfbW9kdWxlcy9lc2NhcGUtc3RyaW5nLXJlZ2V4cC9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9jbGkvbm9kZV9tb2R1bGVzL2VzY2FwZS1zdHJpbmctcmVnZXhwL2luZGV4LmpzPzQzNzkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbWF0Y2hPcGVyYXRvcnNSZSA9IC9bfFxcXFx7fSgpW1xcXV4kKyo/Ll0vZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyKSB7XG5cdGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGEgc3RyaW5nJyk7XG5cdH1cblxuXHRyZXR1cm4gc3RyLnJlcGxhY2UobWF0Y2hPcGVyYXRvcnNSZSwgJ1xcXFwkJicpO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../cli/node_modules/escape-string-regexp/index.js\n");

/***/ }),

/***/ "../cli/node_modules/string-argv/index.js":
/*!************************************************!*\
  !*** ../cli/node_modules/string-argv/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nexports.__esModule = true;\r\nfunction parseArgsStringToArgv(value, env, file) {\r\n    // ([^\\s'\"]([^\\s'\"]*(['\"])([^\\3]*?)\\3)+[^\\s'\"]*) Matches nested quotes until the first space outside of quotes\r\n    // [^\\s'\"]+ or Match if not a space ' or \"\r\n    // (['\"])([^\\5]*?)\\5 or Match \"quoted text\" without quotes\r\n    // `\\3` and `\\5` are a backreference to the quote style (' or \") captured\r\n    var myRegexp = /([^\\s'\"]([^\\s'\"]*(['\"])([^\\3]*?)\\3)+[^\\s'\"]*)|[^\\s'\"]+|(['\"])([^\\5]*?)\\5/gi;\r\n    var myString = value;\r\n    var myArray = [];\r\n    if (env) {\r\n        myArray.push(env);\r\n    }\r\n    if (file) {\r\n        myArray.push(file);\r\n    }\r\n    var match;\r\n    do {\r\n        // Each call to exec returns the next regex match as an array\r\n        match = myRegexp.exec(myString);\r\n        if (match !== null) {\r\n            // Index 1 in the array is the captured group if it exists\r\n            // Index 0 is the matched text, which we use if no captured group exists\r\n            myArray.push(firstString(match[1], match[6], match[0]));\r\n        }\r\n    } while (match !== null);\r\n    return myArray;\r\n}\r\nexports[\"default\"] = parseArgsStringToArgv;\r\nexports.parseArgsStringToArgv = parseArgsStringToArgv;\r\n// Accepts any number of arguments, and returns the first one that is a string\r\n// (even an empty string)\r\nfunction firstString() {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    for (var i = 0; i < args.length; i++) {\r\n        var arg = args[i];\r\n        if (typeof arg === \"string\") {\r\n            return arg;\r\n        }\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2xpL25vZGVfbW9kdWxlcy9zdHJpbmctYXJndi9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9jbGkvbm9kZV9tb2R1bGVzL3N0cmluZy1hcmd2L2luZGV4LmpzP2M2NDgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcbmZ1bmN0aW9uIHBhcnNlQXJnc1N0cmluZ1RvQXJndih2YWx1ZSwgZW52LCBmaWxlKSB7XHJcbiAgICAvLyAoW15cXHMnXCJdKFteXFxzJ1wiXSooWydcIl0pKFteXFwzXSo/KVxcMykrW15cXHMnXCJdKikgTWF0Y2hlcyBuZXN0ZWQgcXVvdGVzIHVudGlsIHRoZSBmaXJzdCBzcGFjZSBvdXRzaWRlIG9mIHF1b3Rlc1xyXG4gICAgLy8gW15cXHMnXCJdKyBvciBNYXRjaCBpZiBub3QgYSBzcGFjZSAnIG9yIFwiXHJcbiAgICAvLyAoWydcIl0pKFteXFw1XSo/KVxcNSBvciBNYXRjaCBcInF1b3RlZCB0ZXh0XCIgd2l0aG91dCBxdW90ZXNcclxuICAgIC8vIGBcXDNgIGFuZCBgXFw1YCBhcmUgYSBiYWNrcmVmZXJlbmNlIHRvIHRoZSBxdW90ZSBzdHlsZSAoJyBvciBcIikgY2FwdHVyZWRcclxuICAgIHZhciBteVJlZ2V4cCA9IC8oW15cXHMnXCJdKFteXFxzJ1wiXSooWydcIl0pKFteXFwzXSo/KVxcMykrW15cXHMnXCJdKil8W15cXHMnXCJdK3woWydcIl0pKFteXFw1XSo/KVxcNS9naTtcclxuICAgIHZhciBteVN0cmluZyA9IHZhbHVlO1xyXG4gICAgdmFyIG15QXJyYXkgPSBbXTtcclxuICAgIGlmIChlbnYpIHtcclxuICAgICAgICBteUFycmF5LnB1c2goZW52KTtcclxuICAgIH1cclxuICAgIGlmIChmaWxlKSB7XHJcbiAgICAgICAgbXlBcnJheS5wdXNoKGZpbGUpO1xyXG4gICAgfVxyXG4gICAgdmFyIG1hdGNoO1xyXG4gICAgZG8ge1xyXG4gICAgICAgIC8vIEVhY2ggY2FsbCB0byBleGVjIHJldHVybnMgdGhlIG5leHQgcmVnZXggbWF0Y2ggYXMgYW4gYXJyYXlcclxuICAgICAgICBtYXRjaCA9IG15UmVnZXhwLmV4ZWMobXlTdHJpbmcpO1xyXG4gICAgICAgIGlmIChtYXRjaCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyBJbmRleCAxIGluIHRoZSBhcnJheSBpcyB0aGUgY2FwdHVyZWQgZ3JvdXAgaWYgaXQgZXhpc3RzXHJcbiAgICAgICAgICAgIC8vIEluZGV4IDAgaXMgdGhlIG1hdGNoZWQgdGV4dCwgd2hpY2ggd2UgdXNlIGlmIG5vIGNhcHR1cmVkIGdyb3VwIGV4aXN0c1xyXG4gICAgICAgICAgICBteUFycmF5LnB1c2goZmlyc3RTdHJpbmcobWF0Y2hbMV0sIG1hdGNoWzZdLCBtYXRjaFswXSkpO1xyXG4gICAgICAgIH1cclxuICAgIH0gd2hpbGUgKG1hdGNoICE9PSBudWxsKTtcclxuICAgIHJldHVybiBteUFycmF5O1xyXG59XHJcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gcGFyc2VBcmdzU3RyaW5nVG9Bcmd2O1xyXG5leHBvcnRzLnBhcnNlQXJnc1N0cmluZ1RvQXJndiA9IHBhcnNlQXJnc1N0cmluZ1RvQXJndjtcclxuLy8gQWNjZXB0cyBhbnkgbnVtYmVyIG9mIGFyZ3VtZW50cywgYW5kIHJldHVybnMgdGhlIGZpcnN0IG9uZSB0aGF0IGlzIGEgc3RyaW5nXHJcbi8vIChldmVuIGFuIGVtcHR5IHN0cmluZylcclxuZnVuY3Rpb24gZmlyc3RTdHJpbmcoKSB7XHJcbiAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgYXJnID0gYXJnc1tpXTtcclxuICAgICAgICBpZiAodHlwZW9mIGFyZyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gYXJnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../cli/node_modules/string-argv/index.js\n");

/***/ }),

/***/ "../cli/node_modules/supports-color/browser.js":
/*!*****************************************************!*\
  !*** ../cli/node_modules/supports-color/browser.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = {\n\tstdout: false,\n\tstderr: false\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2xpL25vZGVfbW9kdWxlcy9zdXBwb3J0cy1jb2xvci9icm93c2VyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL2NsaS9ub2RlX21vZHVsZXMvc3VwcG9ydHMtY29sb3IvYnJvd3Nlci5qcz9hNWU4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0ge1xuXHRzdGRvdXQ6IGZhbHNlLFxuXHRzdGRlcnI6IGZhbHNlXG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../cli/node_modules/supports-color/browser.js\n");

/***/ }),

/***/ "../cli/node_modules/yargs-parser sync recursive":
/*!*********************************************!*\
  !*** ../cli/node_modules/yargs-parser sync ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"../cli/node_modules/yargs-parser sync recursive\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2xpL25vZGVfbW9kdWxlcy95YXJncy1wYXJzZXIgc3luYyByZWN1cnNpdmUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vY2xpL25vZGVfbW9kdWxlcy95YXJncy1wYXJzZXIgc3luYz85MTU5Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHdlYnBhY2tFbXB0eUNvbnRleHQocmVxKSB7XG5cdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHR0aHJvdyBlO1xufVxud2VicGFja0VtcHR5Q29udGV4dC5rZXlzID0gZnVuY3Rpb24oKSB7IHJldHVybiBbXTsgfTtcbndlYnBhY2tFbXB0eUNvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tFbXB0eUNvbnRleHQ7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tFbXB0eUNvbnRleHQ7XG53ZWJwYWNrRW1wdHlDb250ZXh0LmlkID0gXCIuLi9jbGkvbm9kZV9tb2R1bGVzL3lhcmdzLXBhcnNlciBzeW5jIHJlY3Vyc2l2ZVwiOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../cli/node_modules/yargs-parser sync recursive\n");

/***/ }),

/***/ "../cli/node_modules/yargs-parser/index.js":
/*!*************************************************!*\
  !*** ../cli/node_modules/yargs-parser/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var camelCase = __webpack_require__(/*! camelcase */ \"../cli/node_modules/camelcase/index.js\")\nvar decamelize = __webpack_require__(/*! decamelize */ \"../cli/node_modules/decamelize/index.js\")\nvar path = __webpack_require__(/*! path */ \"./node_modules/path-browserify/index.js\")\nvar tokenizeArgString = __webpack_require__(/*! ./lib/tokenize-arg-string */ \"../cli/node_modules/yargs-parser/lib/tokenize-arg-string.js\")\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\")\n\nfunction parse (args, opts) {\n  if (!opts) opts = {}\n  // allow a string argument to be passed in rather\n  // than an argv array.\n  args = tokenizeArgString(args)\n\n  // aliases might have transitive relationships, normalize this.\n  var aliases = combineAliases(opts.alias || {})\n  var configuration = Object.assign({\n    'short-option-groups': true,\n    'camel-case-expansion': true,\n    'dot-notation': true,\n    'parse-numbers': true,\n    'boolean-negation': true,\n    'negation-prefix': 'no-',\n    'duplicate-arguments-array': true,\n    'flatten-duplicate-arrays': true,\n    'populate--': false,\n    'combine-arrays': false,\n    'set-placeholder-key': false,\n    'halt-at-non-option': false,\n    'strip-aliased': false,\n    'strip-dashed': false,\n    'collect-unknown-options': false\n  }, opts.configuration)\n  var defaults = opts.default || {}\n  var configObjects = opts.configObjects || []\n  var envPrefix = opts.envPrefix\n  var notFlagsOption = configuration['populate--']\n  var notFlagsArgv = notFlagsOption ? '--' : '_'\n  var newAliases = {}\n  // allow a i18n handler to be passed in, default to a fake one (util.format).\n  var __ = opts.__ || util.format\n  var error = null\n  var flags = {\n    aliases: {},\n    arrays: {},\n    bools: {},\n    strings: {},\n    numbers: {},\n    counts: {},\n    normalize: {},\n    configs: {},\n    nargs: {},\n    coercions: {},\n    keys: []\n  }\n  var negative = /^-[0-9]+(\\.[0-9]+)?/\n  var negatedBoolean = new RegExp('^--' + configuration['negation-prefix'] + '(.+)')\n\n  ;[].concat(opts.array).filter(Boolean).forEach(function (opt) {\n    var key = opt.key || opt\n\n    // assign to flags[bools|strings|numbers]\n    const assignment = Object.keys(opt).map(function (key) {\n      return ({\n        boolean: 'bools',\n        string: 'strings',\n        number: 'numbers'\n      })[key]\n    }).filter(Boolean).pop()\n\n    // assign key to be coerced\n    if (assignment) {\n      flags[assignment][key] = true\n    }\n\n    flags.arrays[key] = true\n    flags.keys.push(key)\n  })\n\n  ;[].concat(opts.boolean).filter(Boolean).forEach(function (key) {\n    flags.bools[key] = true\n    flags.keys.push(key)\n  })\n\n  ;[].concat(opts.string).filter(Boolean).forEach(function (key) {\n    flags.strings[key] = true\n    flags.keys.push(key)\n  })\n\n  ;[].concat(opts.number).filter(Boolean).forEach(function (key) {\n    flags.numbers[key] = true\n    flags.keys.push(key)\n  })\n\n  ;[].concat(opts.count).filter(Boolean).forEach(function (key) {\n    flags.counts[key] = true\n    flags.keys.push(key)\n  })\n\n  ;[].concat(opts.normalize).filter(Boolean).forEach(function (key) {\n    flags.normalize[key] = true\n    flags.keys.push(key)\n  })\n\n  Object.keys(opts.narg || {}).forEach(function (k) {\n    flags.nargs[k] = opts.narg[k]\n    flags.keys.push(k)\n  })\n\n  Object.keys(opts.coerce || {}).forEach(function (k) {\n    flags.coercions[k] = opts.coerce[k]\n    flags.keys.push(k)\n  })\n\n  if (Array.isArray(opts.config) || typeof opts.config === 'string') {\n    ;[].concat(opts.config).filter(Boolean).forEach(function (key) {\n      flags.configs[key] = true\n    })\n  } else {\n    Object.keys(opts.config || {}).forEach(function (k) {\n      flags.configs[k] = opts.config[k]\n    })\n  }\n\n  // create a lookup table that takes into account all\n  // combinations of aliases: {f: ['foo'], foo: ['f']}\n  extendAliases(opts.key, aliases, opts.default, flags.arrays)\n\n  // apply default values to all aliases.\n  Object.keys(defaults).forEach(function (key) {\n    (flags.aliases[key] || []).forEach(function (alias) {\n      defaults[alias] = defaults[key]\n    })\n  })\n\n  var argv = { _: [] }\n  var notFlags = []\n\n  for (var i = 0; i < args.length; i++) {\n    var arg = args[i]\n    var broken\n    var key\n    var letters\n    var m\n    var next\n    var value\n\n    if (configuration['collect-unknown-options'] && isUnknownOption(arg)) {\n      argv._.push(arg)\n    // -- separated by =\n    } else if (arg.match(/^--.+=/) || (\n      !configuration['short-option-groups'] && arg.match(/^-.+=/)\n    )) {\n      // Using [\\s\\S] instead of . because js doesn't support the\n      // 'dotall' regex modifier. See:\n      // http://stackoverflow.com/a/1068308/13216\n      m = arg.match(/^--?([^=]+)=([\\s\\S]*)$/)\n\n      // nargs format = '--f=monkey washing cat'\n      if (checkAllAliases(m[1], flags.nargs)) {\n        args.splice(i + 1, 0, m[2])\n        i = eatNargs(i, m[1], args)\n      // arrays format = '--f=a b c'\n      } else if (checkAllAliases(m[1], flags.arrays)) {\n        args.splice(i + 1, 0, m[2])\n        i = eatArray(i, m[1], args)\n      } else {\n        setArg(m[1], m[2])\n      }\n    } else if (arg.match(negatedBoolean) && configuration['boolean-negation']) {\n      key = arg.match(negatedBoolean)[1]\n      setArg(key, checkAllAliases(key, flags.arrays) ? [false] : false)\n\n    // -- separated by space.\n    } else if (arg.match(/^--.+/) || (\n      !configuration['short-option-groups'] && arg.match(/^-[^-]+/)\n    )) {\n      key = arg.match(/^--?(.+)/)[1]\n\n      // nargs format = '--foo a b c'\n      // should be truthy even if: flags.nargs[key] === 0\n      if (checkAllAliases(key, flags.nargs) !== false) {\n        i = eatNargs(i, key, args)\n      // array format = '--foo a b c'\n      } else if (checkAllAliases(key, flags.arrays)) {\n        i = eatArray(i, key, args)\n      } else {\n        next = args[i + 1]\n\n        if (next !== undefined && (!next.match(/^-/) ||\n          next.match(negative)) &&\n          !checkAllAliases(key, flags.bools) &&\n          !checkAllAliases(key, flags.counts)) {\n          setArg(key, next)\n          i++\n        } else if (/^(true|false)$/.test(next)) {\n          setArg(key, next)\n          i++\n        } else {\n          setArg(key, defaultValue(key))\n        }\n      }\n\n    // dot-notation flag separated by '='.\n    } else if (arg.match(/^-.\\..+=/)) {\n      m = arg.match(/^-([^=]+)=([\\s\\S]*)$/)\n      setArg(m[1], m[2])\n\n    // dot-notation flag separated by space.\n    } else if (arg.match(/^-.\\..+/)) {\n      next = args[i + 1]\n      key = arg.match(/^-(.\\..+)/)[1]\n\n      if (next !== undefined && !next.match(/^-/) &&\n        !checkAllAliases(key, flags.bools) &&\n        !checkAllAliases(key, flags.counts)) {\n        setArg(key, next)\n        i++\n      } else {\n        setArg(key, defaultValue(key))\n      }\n    } else if (arg.match(/^-[^-]+/) && !arg.match(negative)) {\n      letters = arg.slice(1, -1).split('')\n      broken = false\n\n      for (var j = 0; j < letters.length; j++) {\n        next = arg.slice(j + 2)\n\n        if (letters[j + 1] && letters[j + 1] === '=') {\n          value = arg.slice(j + 3)\n          key = letters[j]\n\n          // nargs format = '-f=monkey washing cat'\n          if (checkAllAliases(key, flags.nargs)) {\n            args.splice(i + 1, 0, value)\n            i = eatNargs(i, key, args)\n          // array format = '-f=a b c'\n          } else if (checkAllAliases(key, flags.arrays)) {\n            args.splice(i + 1, 0, value)\n            i = eatArray(i, key, args)\n          } else {\n            setArg(key, value)\n          }\n\n          broken = true\n          break\n        }\n\n        if (next === '-') {\n          setArg(letters[j], next)\n          continue\n        }\n\n        // current letter is an alphabetic character and next value is a number\n        if (/[A-Za-z]/.test(letters[j]) &&\n          /^-?\\d+(\\.\\d*)?(e-?\\d+)?$/.test(next)) {\n          setArg(letters[j], next)\n          broken = true\n          break\n        }\n\n        if (letters[j + 1] && letters[j + 1].match(/\\W/)) {\n          setArg(letters[j], next)\n          broken = true\n          break\n        } else {\n          setArg(letters[j], defaultValue(letters[j]))\n        }\n      }\n\n      key = arg.slice(-1)[0]\n\n      if (!broken && key !== '-') {\n        // nargs format = '-f a b c'\n        // should be truthy even if: flags.nargs[key] === 0\n        if (checkAllAliases(key, flags.nargs) !== false) {\n          i = eatNargs(i, key, args)\n        // array format = '-f a b c'\n        } else if (checkAllAliases(key, flags.arrays)) {\n          i = eatArray(i, key, args)\n        } else {\n          next = args[i + 1]\n\n          if (next !== undefined && (!/^(-|--)[^-]/.test(next) ||\n            next.match(negative)) &&\n            !checkAllAliases(key, flags.bools) &&\n            !checkAllAliases(key, flags.counts)) {\n            setArg(key, next)\n            i++\n          } else if (/^(true|false)$/.test(next)) {\n            setArg(key, next)\n            i++\n          } else {\n            setArg(key, defaultValue(key))\n          }\n        }\n      }\n    } else if (arg === '--') {\n      notFlags = args.slice(i + 1)\n      break\n    } else if (configuration['halt-at-non-option']) {\n      notFlags = args.slice(i)\n      break\n    } else {\n      argv._.push(maybeCoerceNumber('_', arg))\n    }\n  }\n\n  // order of precedence:\n  // 1. command line arg\n  // 2. value from env var\n  // 3. value from config file\n  // 4. value from config objects\n  // 5. configured default value\n  applyEnvVars(argv, true) // special case: check env vars that point to config file\n  applyEnvVars(argv, false)\n  setConfig(argv)\n  setConfigObjects()\n  applyDefaultsAndAliases(argv, flags.aliases, defaults)\n  applyCoercions(argv)\n  if (configuration['set-placeholder-key']) setPlaceholderKeys(argv)\n\n  // for any counts either not in args or without an explicit default, set to 0\n  Object.keys(flags.counts).forEach(function (key) {\n    if (!hasKey(argv, key.split('.'))) setArg(key, 0)\n  })\n\n  // '--' defaults to undefined.\n  if (notFlagsOption && notFlags.length) argv[notFlagsArgv] = []\n  notFlags.forEach(function (key) {\n    argv[notFlagsArgv].push(key)\n  })\n\n  if (configuration['camel-case-expansion'] && configuration['strip-dashed']) {\n    Object.keys(argv).filter(key => key !== '--' && key.includes('-')).forEach(key => {\n      delete argv[key]\n    })\n  }\n\n  if (configuration['strip-aliased']) {\n    // XXX Switch to [].concat(...Object.values(aliases)) once node.js 6 is dropped\n    ;[].concat(...Object.keys(aliases).map(k => aliases[k])).forEach(alias => {\n      if (configuration['camel-case-expansion']) {\n        delete argv[alias.split('.').map(prop => camelCase(prop)).join('.')]\n      }\n\n      delete argv[alias]\n    })\n  }\n\n  // how many arguments should we consume, based\n  // on the nargs option?\n  function eatNargs (i, key, args) {\n    var ii\n    const toEat = checkAllAliases(key, flags.nargs)\n\n    if (toEat === 0) {\n      setArg(key, defaultValue(key))\n      return i\n    }\n\n    // nargs will not consume flag arguments, e.g., -abc, --foo,\n    // and terminates when one is observed.\n    var available = 0\n    for (ii = i + 1; ii < args.length; ii++) {\n      if (!args[ii].match(/^-[^0-9]/)) available++\n      else break\n    }\n\n    if (available < toEat) error = Error(__('Not enough arguments following: %s', key))\n\n    const consumed = Math.min(available, toEat)\n    for (ii = i + 1; ii < (consumed + i + 1); ii++) {\n      setArg(key, args[ii])\n    }\n\n    return (i + consumed)\n  }\n\n  // if an option is an array, eat all non-hyphenated arguments\n  // following it... YUM!\n  // e.g., --foo apple banana cat becomes [\"apple\", \"banana\", \"cat\"]\n  function eatArray (i, key, args) {\n    let argsToSet = []\n    let next = args[i + 1]\n\n    if (checkAllAliases(key, flags.bools) && !(/^(true|false)$/.test(next))) {\n      argsToSet.push(true)\n    } else if (isUndefined(next) || (/^-/.test(next) && !negative.test(next))) {\n      // for keys without value ==> argsToSet remains an empty []\n      // set user default value, if available\n      if (defaults.hasOwnProperty(key)) {\n        argsToSet.push(defaults[key])\n      }\n    } else {\n      for (var ii = i + 1; ii < args.length; ii++) {\n        next = args[ii]\n        if (/^-/.test(next) && !negative.test(next)) break\n        i = ii\n        argsToSet.push(processValue(key, next))\n      }\n    }\n\n    setArg(key, argsToSet)\n    return i\n  }\n\n  function setArg (key, val) {\n    if (/-/.test(key) && configuration['camel-case-expansion']) {\n      var alias = key.split('.').map(function (prop) {\n        return camelCase(prop)\n      }).join('.')\n      addNewAlias(key, alias)\n    }\n\n    var value = processValue(key, val)\n\n    var splitKey = key.split('.')\n    setKey(argv, splitKey, value)\n\n    // handle populating aliases of the full key\n    if (flags.aliases[key]) {\n      flags.aliases[key].forEach(function (x) {\n        x = x.split('.')\n        setKey(argv, x, value)\n      })\n    }\n\n    // handle populating aliases of the first element of the dot-notation key\n    if (splitKey.length > 1 && configuration['dot-notation']) {\n      ;(flags.aliases[splitKey[0]] || []).forEach(function (x) {\n        x = x.split('.')\n\n        // expand alias with nested objects in key\n        var a = [].concat(splitKey)\n        a.shift() // nuke the old key.\n        x = x.concat(a)\n\n        setKey(argv, x, value)\n      })\n    }\n\n    // Set normalize getter and setter when key is in 'normalize' but isn't an array\n    if (checkAllAliases(key, flags.normalize) && !checkAllAliases(key, flags.arrays)) {\n      var keys = [key].concat(flags.aliases[key] || [])\n      keys.forEach(function (key) {\n        argv.__defineSetter__(key, function (v) {\n          val = path.normalize(v)\n        })\n\n        argv.__defineGetter__(key, function () {\n          return typeof val === 'string' ? path.normalize(val) : val\n        })\n      })\n    }\n  }\n\n  function addNewAlias (key, alias) {\n    if (!(flags.aliases[key] && flags.aliases[key].length)) {\n      flags.aliases[key] = [alias]\n      newAliases[alias] = true\n    }\n    if (!(flags.aliases[alias] && flags.aliases[alias].length)) {\n      addNewAlias(alias, key)\n    }\n  }\n\n  function processValue (key, val) {\n    // strings may be quoted, clean this up as we assign values.\n    if (typeof val === 'string' &&\n      (val[0] === \"'\" || val[0] === '\"') &&\n      val[val.length - 1] === val[0]\n    ) {\n      val = val.substring(1, val.length - 1)\n    }\n\n    // handle parsing boolean arguments --foo=true --bar false.\n    if (checkAllAliases(key, flags.bools) || checkAllAliases(key, flags.counts)) {\n      if (typeof val === 'string') val = val === 'true'\n    }\n\n    var value = Array.isArray(val)\n      ? val.map(function (v) { return maybeCoerceNumber(key, v) })\n      : maybeCoerceNumber(key, val)\n\n    // increment a count given as arg (either no value or value parsed as boolean)\n    if (checkAllAliases(key, flags.counts) && (isUndefined(value) || typeof value === 'boolean')) {\n      value = increment\n    }\n\n    // Set normalized value when key is in 'normalize' and in 'arrays'\n    if (checkAllAliases(key, flags.normalize) && checkAllAliases(key, flags.arrays)) {\n      if (Array.isArray(val)) value = val.map(path.normalize)\n      else value = path.normalize(val)\n    }\n    return value\n  }\n\n  function maybeCoerceNumber (key, value) {\n    if (!checkAllAliases(key, flags.strings) && !checkAllAliases(key, flags.bools) && !Array.isArray(value)) {\n      const shouldCoerceNumber = isNumber(value) && configuration['parse-numbers'] && (\n        Number.isSafeInteger(Math.floor(value))\n      )\n      if (shouldCoerceNumber || (!isUndefined(value) && checkAllAliases(key, flags.numbers))) value = Number(value)\n    }\n    return value\n  }\n\n  // set args from config.json file, this should be\n  // applied last so that defaults can be applied.\n  function setConfig (argv) {\n    var configLookup = {}\n\n    // expand defaults/aliases, in-case any happen to reference\n    // the config.json file.\n    applyDefaultsAndAliases(configLookup, flags.aliases, defaults)\n\n    Object.keys(flags.configs).forEach(function (configKey) {\n      var configPath = argv[configKey] || configLookup[configKey]\n      if (configPath) {\n        try {\n          var config = null\n          var resolvedConfigPath = path.resolve(process.cwd(), configPath)\n\n          if (typeof flags.configs[configKey] === 'function') {\n            try {\n              config = flags.configs[configKey](resolvedConfigPath)\n            } catch (e) {\n              config = e\n            }\n            if (config instanceof Error) {\n              error = config\n              return\n            }\n          } else {\n            config = __webpack_require__(\"../cli/node_modules/yargs-parser sync recursive\")(resolvedConfigPath)\n          }\n\n          setConfigObject(config)\n        } catch (ex) {\n          if (argv[configKey]) error = Error(__('Invalid JSON config file: %s', configPath))\n        }\n      }\n    })\n  }\n\n  // set args from config object.\n  // it recursively checks nested objects.\n  function setConfigObject (config, prev) {\n    Object.keys(config).forEach(function (key) {\n      var value = config[key]\n      var fullKey = prev ? prev + '.' + key : key\n\n      // if the value is an inner object and we have dot-notation\n      // enabled, treat inner objects in config the same as\n      // heavily nested dot notations (foo.bar.apple).\n      if (typeof value === 'object' && value !== null && !Array.isArray(value) && configuration['dot-notation']) {\n        // if the value is an object but not an array, check nested object\n        setConfigObject(value, fullKey)\n      } else {\n        // setting arguments via CLI takes precedence over\n        // values within the config file.\n        if (!hasKey(argv, fullKey.split('.')) || (checkAllAliases(fullKey, flags.arrays) && configuration['combine-arrays'])) {\n          setArg(fullKey, value)\n        }\n      }\n    })\n  }\n\n  // set all config objects passed in opts\n  function setConfigObjects () {\n    if (typeof configObjects === 'undefined') return\n    configObjects.forEach(function (configObject) {\n      setConfigObject(configObject)\n    })\n  }\n\n  function applyEnvVars (argv, configOnly) {\n    if (typeof envPrefix === 'undefined') return\n\n    var prefix = typeof envPrefix === 'string' ? envPrefix : ''\n    Object.keys(process.env).forEach(function (envVar) {\n      if (prefix === '' || envVar.lastIndexOf(prefix, 0) === 0) {\n        // get array of nested keys and convert them to camel case\n        var keys = envVar.split('__').map(function (key, i) {\n          if (i === 0) {\n            key = key.substring(prefix.length)\n          }\n          return camelCase(key)\n        })\n\n        if (((configOnly && flags.configs[keys.join('.')]) || !configOnly) && !hasKey(argv, keys)) {\n          setArg(keys.join('.'), process.env[envVar])\n        }\n      }\n    })\n  }\n\n  function applyCoercions (argv) {\n    var coerce\n    var applied = {}\n    Object.keys(argv).forEach(function (key) {\n      if (!applied.hasOwnProperty(key)) { // If we haven't already coerced this option via one of its aliases\n        coerce = checkAllAliases(key, flags.coercions)\n        if (typeof coerce === 'function') {\n          try {\n            var value = maybeCoerceNumber(key, coerce(argv[key]))\n            ;([].concat(flags.aliases[key] || [], key)).forEach(ali => {\n              applied[ali] = argv[ali] = value\n            })\n          } catch (err) {\n            error = err\n          }\n        }\n      }\n    })\n  }\n\n  function setPlaceholderKeys (argv) {\n    flags.keys.forEach((key) => {\n      // don't set placeholder keys for dot notation options 'foo.bar'.\n      if (~key.indexOf('.')) return\n      if (typeof argv[key] === 'undefined') argv[key] = undefined\n    })\n    return argv\n  }\n\n  function applyDefaultsAndAliases (obj, aliases, defaults) {\n    Object.keys(defaults).forEach(function (key) {\n      if (!hasKey(obj, key.split('.'))) {\n        setKey(obj, key.split('.'), defaults[key])\n\n        ;(aliases[key] || []).forEach(function (x) {\n          if (hasKey(obj, x.split('.'))) return\n          setKey(obj, x.split('.'), defaults[key])\n        })\n      }\n    })\n  }\n\n  function hasKey (obj, keys) {\n    var o = obj\n\n    if (!configuration['dot-notation']) keys = [keys.join('.')]\n\n    keys.slice(0, -1).forEach(function (key) {\n      o = (o[key] || {})\n    })\n\n    var key = keys[keys.length - 1]\n\n    if (typeof o !== 'object') return false\n    else return key in o\n  }\n\n  function setKey (obj, keys, value) {\n    var o = obj\n\n    if (!configuration['dot-notation']) keys = [keys.join('.')]\n\n    keys.slice(0, -1).forEach(function (key, index) {\n      if (typeof o === 'object' && o[key] === undefined) {\n        o[key] = {}\n      }\n\n      if (typeof o[key] !== 'object' || Array.isArray(o[key])) {\n        // ensure that o[key] is an array, and that the last item is an empty object.\n        if (Array.isArray(o[key])) {\n          o[key].push({})\n        } else {\n          o[key] = [o[key], {}]\n        }\n\n        // we want to update the empty object at the end of the o[key] array, so set o to that object\n        o = o[key][o[key].length - 1]\n      } else {\n        o = o[key]\n      }\n    })\n\n    var key = keys[keys.length - 1]\n\n    var isTypeArray = checkAllAliases(keys.join('.'), flags.arrays)\n    var isValueArray = Array.isArray(value)\n    var duplicate = configuration['duplicate-arguments-array']\n\n    // nargs has higher priority than duplicate\n    if (!duplicate && checkAllAliases(key, flags.nargs)) {\n      duplicate = true\n      if ((!isUndefined(o[key]) && flags.nargs[key] === 1) || (Array.isArray(o[key]) && o[key].length === flags.nargs[key])) {\n        o[key] = undefined\n      }\n    }\n\n    if (value === increment) {\n      o[key] = increment(o[key])\n    } else if (Array.isArray(o[key])) {\n      if (duplicate && isTypeArray && isValueArray) {\n        o[key] = configuration['flatten-duplicate-arrays'] ? o[key].concat(value) : (Array.isArray(o[key][0]) ? o[key] : [o[key]]).concat([value])\n      } else if (!duplicate && Boolean(isTypeArray) === Boolean(isValueArray)) {\n        o[key] = value\n      } else {\n        o[key] = o[key].concat([value])\n      }\n    } else if (o[key] === undefined && isTypeArray) {\n      o[key] = isValueArray ? value : [value]\n    } else if (duplicate && !(o[key] === undefined || checkAllAliases(key, flags.counts))) {\n      o[key] = [ o[key], value ]\n    } else {\n      o[key] = value\n    }\n  }\n\n  // extend the aliases list with inferred aliases.\n  function extendAliases (...args) {\n    args.forEach(function (obj) {\n      Object.keys(obj || {}).forEach(function (key) {\n        // short-circuit if we've already added a key\n        // to the aliases array, for example it might\n        // exist in both 'opts.default' and 'opts.key'.\n        if (flags.aliases[key]) return\n\n        flags.aliases[key] = [].concat(aliases[key] || [])\n        // For \"--option-name\", also set argv.optionName\n        flags.aliases[key].concat(key).forEach(function (x) {\n          if (/-/.test(x) && configuration['camel-case-expansion']) {\n            var c = camelCase(x)\n            if (c !== key && flags.aliases[key].indexOf(c) === -1) {\n              flags.aliases[key].push(c)\n              newAliases[c] = true\n            }\n          }\n        })\n        // For \"--optionName\", also set argv['option-name']\n        flags.aliases[key].concat(key).forEach(function (x) {\n          if (x.length > 1 && /[A-Z]/.test(x) && configuration['camel-case-expansion']) {\n            var c = decamelize(x, '-')\n            if (c !== key && flags.aliases[key].indexOf(c) === -1) {\n              flags.aliases[key].push(c)\n              newAliases[c] = true\n            }\n          }\n        })\n        flags.aliases[key].forEach(function (x) {\n          flags.aliases[x] = [key].concat(flags.aliases[key].filter(function (y) {\n            return x !== y\n          }))\n        })\n      })\n    })\n  }\n\n  // check if a flag is set for any of a key's aliases.\n  function checkAllAliases (key, flag) {\n    var isSet = false\n    var toCheck = [].concat(flags.aliases[key] || [], key)\n\n    toCheck.forEach(function (key) {\n      if (flag.hasOwnProperty(key)) isSet = flag[key]\n    })\n\n    return isSet\n  }\n\n  function hasAnyFlag (key) {\n    var isSet = false\n    // XXX Switch to [].concat(...Object.values(flags)) once node.js 6 is dropped\n    var toCheck = [].concat(...Object.keys(flags).map(k => flags[k]))\n\n    toCheck.forEach(function (flag) {\n      if (flag[key]) isSet = flag[key]\n    })\n\n    return isSet\n  }\n\n  function hasFlagsMatching (arg, ...patterns) {\n    var hasFlag = false\n    var toCheck = [].concat(...patterns)\n    toCheck.forEach(function (pattern) {\n      var match = arg.match(pattern)\n      if (match && hasAnyFlag(match[1])) {\n        hasFlag = true\n      }\n    })\n    return hasFlag\n  }\n\n  // based on a simplified version of the short flag group parsing logic\n  function hasAllShortFlags (arg) {\n    // if this is a negative number, or doesn't start with a single hyphen, it's not a short flag group\n    if (arg.match(negative) || !arg.match(/^-[^-]+/)) { return false }\n    var hasAllFlags = true\n    var letters = arg.slice(1).split('')\n    var next\n    for (var j = 0; j < letters.length; j++) {\n      next = arg.slice(j + 2)\n\n      if (!hasAnyFlag(letters[j])) {\n        hasAllFlags = false\n        break\n      }\n\n      if ((letters[j + 1] && letters[j + 1] === '=') ||\n        next === '-' ||\n        (/[A-Za-z]/.test(letters[j]) && /^-?\\d+(\\.\\d*)?(e-?\\d+)?$/.test(next)) ||\n        (letters[j + 1] && letters[j + 1].match(/\\W/))) {\n        break\n      }\n    }\n    return hasAllFlags\n  }\n\n  function isUnknownOption (arg) {\n    // ignore negative numbers\n    if (arg.match(negative)) { return false }\n    // if this is a short option group and all of them are configured, it isn't unknown\n    if (hasAllShortFlags(arg)) { return false }\n    // e.g. '--count=2'\n    const flagWithEquals = /^-+([^=]+?)=[\\s\\S]*$/\n    // e.g. '-a' or '--arg'\n    const normalFlag = /^-+([^=]+?)$/\n    // e.g. '-a-'\n    const flagEndingInHyphen = /^-+([^=]+?)-$/\n    // e.g. '-abc123'\n    const flagEndingInDigits = /^-+([^=]+?)\\d+$/\n    // e.g. '-a/usr/local'\n    const flagEndingInNonWordCharacters = /^-+([^=]+?)\\W+.*$/\n    // check the different types of flag styles, including negatedBoolean, a pattern defined near the start of the parse method\n    return !hasFlagsMatching(arg, flagWithEquals, negatedBoolean, normalFlag, flagEndingInHyphen, flagEndingInDigits, flagEndingInNonWordCharacters)\n  }\n\n  // make a best effor to pick a default value\n  // for an option based on name and type.\n  function defaultValue (key) {\n    if (!checkAllAliases(key, flags.bools) &&\n        !checkAllAliases(key, flags.counts) &&\n        `${key}` in defaults) {\n      return defaults[key]\n    } else {\n      return defaultForType(guessType(key))\n    }\n  }\n\n  // return a default value, given the type of a flag.,\n  // e.g., key of type 'string' will default to '', rather than 'true'.\n  function defaultForType (type) {\n    var def = {\n      boolean: true,\n      string: '',\n      number: undefined,\n      array: []\n    }\n\n    return def[type]\n  }\n\n  // given a flag, enforce a default type.\n  function guessType (key) {\n    var type = 'boolean'\n\n    if (checkAllAliases(key, flags.strings)) type = 'string'\n    else if (checkAllAliases(key, flags.numbers)) type = 'number'\n    else if (checkAllAliases(key, flags.bools)) type = 'boolean'\n    else if (checkAllAliases(key, flags.arrays)) type = 'array'\n\n    return type\n  }\n\n  function isNumber (x) {\n    if (x === null || x === undefined) return false\n    // if loaded from config, may already be a number.\n    if (typeof x === 'number') return true\n    // hexadecimal.\n    if (/^0x[0-9a-f]+$/i.test(x)) return true\n    // don't treat 0123 as a number; as it drops the leading '0'.\n    if (x.length > 1 && x[0] === '0') return false\n    return /^[-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(e[-+]?\\d+)?$/.test(x)\n  }\n\n  function isUndefined (num) {\n    return num === undefined\n  }\n\n  return {\n    argv: argv,\n    error: error,\n    aliases: flags.aliases,\n    newAliases: newAliases,\n    configuration: configuration\n  }\n}\n\n// if any aliases reference each other, we should\n// merge them together.\nfunction combineAliases (aliases) {\n  var aliasArrays = []\n  var change = true\n  var combined = {}\n\n  // turn alias lookup hash {key: ['alias1', 'alias2']} into\n  // a simple array ['key', 'alias1', 'alias2']\n  Object.keys(aliases).forEach(function (key) {\n    aliasArrays.push(\n      [].concat(aliases[key], key)\n    )\n  })\n\n  // combine arrays until zero changes are\n  // made in an iteration.\n  while (change) {\n    change = false\n    for (var i = 0; i < aliasArrays.length; i++) {\n      for (var ii = i + 1; ii < aliasArrays.length; ii++) {\n        var intersect = aliasArrays[i].filter(function (v) {\n          return aliasArrays[ii].indexOf(v) !== -1\n        })\n\n        if (intersect.length) {\n          aliasArrays[i] = aliasArrays[i].concat(aliasArrays[ii])\n          aliasArrays.splice(ii, 1)\n          change = true\n          break\n        }\n      }\n    }\n  }\n\n  // map arrays back to the hash-lookup (de-dupe while\n  // we're at it).\n  aliasArrays.forEach(function (aliasArray) {\n    aliasArray = aliasArray.filter(function (v, i, self) {\n      return self.indexOf(v) === i\n    })\n    combined[aliasArray.pop()] = aliasArray\n  })\n\n  return combined\n}\n\n// this function should only be called when a count is given as an arg\n// it is NOT called to set a default value\n// thus we can start the count at 1 instead of 0\nfunction increment (orig) {\n  return orig !== undefined ? orig + 1 : 1\n}\n\nfunction Parser (args, opts) {\n  var result = parse(args.slice(), opts)\n\n  return result.argv\n}\n\n// parse arguments and return detailed\n// meta information, aliases, etc.\nParser.detailed = function (args, opts) {\n  return parse(args.slice(), opts)\n}\n\nmodule.exports = Parser\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../cli-pg/node_modules/process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../cli/node_modules/yargs-parser/index.js\n");

/***/ }),

/***/ "../cli/node_modules/yargs-parser/lib/tokenize-arg-string.js":
/*!*******************************************************************!*\
  !*** ../cli/node_modules/yargs-parser/lib/tokenize-arg-string.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// take an un-split argv string and tokenize it.\nmodule.exports = function (argString) {\n  if (Array.isArray(argString)) {\n    return argString.map(e => typeof e !== 'string' ? e + '' : e)\n  }\n\n  argString = argString.trim()\n\n  var i = 0\n  var prevC = null\n  var c = null\n  var opening = null\n  var args = []\n\n  for (var ii = 0; ii < argString.length; ii++) {\n    prevC = c\n    c = argString.charAt(ii)\n\n    // split on spaces unless we're in quotes.\n    if (c === ' ' && !opening) {\n      if (!(prevC === ' ')) {\n        i++\n      }\n      continue\n    }\n\n    // don't split the string if we're in matching\n    // opening or closing single and double quotes.\n    if (c === opening) {\n      opening = null\n    } else if ((c === \"'\" || c === '\"') && !opening) {\n      opening = c\n    }\n\n    if (!args[i]) args[i] = ''\n    args[i] += c\n  }\n\n  return args\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2xpL25vZGVfbW9kdWxlcy95YXJncy1wYXJzZXIvbGliL3Rva2VuaXplLWFyZy1zdHJpbmcuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vY2xpL25vZGVfbW9kdWxlcy95YXJncy1wYXJzZXIvbGliL3Rva2VuaXplLWFyZy1zdHJpbmcuanM/MDQzYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0YWtlIGFuIHVuLXNwbGl0IGFyZ3Ygc3RyaW5nIGFuZCB0b2tlbml6ZSBpdC5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ1N0cmluZykge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcmdTdHJpbmcpKSB7XG4gICAgcmV0dXJuIGFyZ1N0cmluZy5tYXAoZSA9PiB0eXBlb2YgZSAhPT0gJ3N0cmluZycgPyBlICsgJycgOiBlKVxuICB9XG5cbiAgYXJnU3RyaW5nID0gYXJnU3RyaW5nLnRyaW0oKVxuXG4gIHZhciBpID0gMFxuICB2YXIgcHJldkMgPSBudWxsXG4gIHZhciBjID0gbnVsbFxuICB2YXIgb3BlbmluZyA9IG51bGxcbiAgdmFyIGFyZ3MgPSBbXVxuXG4gIGZvciAodmFyIGlpID0gMDsgaWkgPCBhcmdTdHJpbmcubGVuZ3RoOyBpaSsrKSB7XG4gICAgcHJldkMgPSBjXG4gICAgYyA9IGFyZ1N0cmluZy5jaGFyQXQoaWkpXG5cbiAgICAvLyBzcGxpdCBvbiBzcGFjZXMgdW5sZXNzIHdlJ3JlIGluIHF1b3Rlcy5cbiAgICBpZiAoYyA9PT0gJyAnICYmICFvcGVuaW5nKSB7XG4gICAgICBpZiAoIShwcmV2QyA9PT0gJyAnKSkge1xuICAgICAgICBpKytcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgLy8gZG9uJ3Qgc3BsaXQgdGhlIHN0cmluZyBpZiB3ZSdyZSBpbiBtYXRjaGluZ1xuICAgIC8vIG9wZW5pbmcgb3IgY2xvc2luZyBzaW5nbGUgYW5kIGRvdWJsZSBxdW90ZXMuXG4gICAgaWYgKGMgPT09IG9wZW5pbmcpIHtcbiAgICAgIG9wZW5pbmcgPSBudWxsXG4gICAgfSBlbHNlIGlmICgoYyA9PT0gXCInXCIgfHwgYyA9PT0gJ1wiJykgJiYgIW9wZW5pbmcpIHtcbiAgICAgIG9wZW5pbmcgPSBjXG4gICAgfVxuXG4gICAgaWYgKCFhcmdzW2ldKSBhcmdzW2ldID0gJydcbiAgICBhcmdzW2ldICs9IGNcbiAgfVxuXG4gIHJldHVybiBhcmdzXG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../cli/node_modules/yargs-parser/lib/tokenize-arg-string.js\n");

/***/ }),

/***/ "../cli/presets/index.ts":
/*!*******************************!*\
  !*** ../cli/presets/index.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst one_of_1 = __importDefault(__webpack_require__(/*! ./one-of */ \"../cli/presets/one-of.ts\"));\nexports.oneOf = one_of_1.default;\nconst url_1 = __importDefault(__webpack_require__(/*! ./url */ \"../cli/presets/url.ts\"));\nexports.url = url_1.default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2xpL3ByZXNldHMvaW5kZXgudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vY2xpL3ByZXNldHMvaW5kZXgudHM/MWY2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgb25lT2YgZnJvbSAnLi9vbmUtb2YnO1xuaW1wb3J0IHVybCBmcm9tICcuL3VybCc7XG5cbmV4cG9ydCB7b25lT2YsIHVybH07XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFHQTtBQUZBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../cli/presets/index.ts\n");

/***/ }),

/***/ "../cli/presets/one-of.ts":
/*!********************************!*\
  !*** ../cli/presets/one-of.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst __1 = __webpack_require__(/*! ../ */ \"../cli/index.js\");\nconst utils_1 = __webpack_require__(/*! ../src/utils */ \"../cli/src/utils.ts\");\nconst errors_1 = __webpack_require__(/*! ../src/errors */ \"../cli/src/errors.ts\");\nfunction fromPairs(pairs) {\n    const res = {};\n    for (const [key, value] of pairs) {\n        res[key] = value;\n    }\n    return res;\n}\nfunction normalizeDecl(decl) {\n    if (Array.isArray(decl)) {\n        const pairs = decl.map(key => [key, {\n                description: '',\n                value: key\n            }]);\n        return fromPairs(pairs);\n    }\n    return utils_1.objMap(decl, (value, key) => {\n        if (typeof value === 'string') {\n            return {\n                value,\n                description: ''\n            };\n        }\n        return {\n            value: key,\n            description: '',\n            ...value,\n        };\n    });\n}\nconst oneOf = (decl) => {\n    const normDecl = normalizeDecl(decl);\n    const keys = Object.keys(normDecl);\n    return __1.option('string')\n        .completer(partial => {\n        return keys\n            .filter(key => key.indexOf(partial) === 0)\n            .map(key => {\n            return {\n                completion: key,\n                description: normDecl[key].description\n            };\n        });\n    })\n        .validate(value => {\n        if (keys.includes(value)) {\n            return;\n        }\n        throw new errors_1.allIssues.TypeMismatchError(keys.map(k => `'${k}'`).join(' | '), value);\n    });\n};\nexports.default = oneOf;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2xpL3ByZXNldHMvb25lLW9mLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL2NsaS9wcmVzZXRzL29uZS1vZi50cz84NzEyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9wdGlvbiB9IGZyb20gJy4uLyc7XG5pbXBvcnQgeyBvYmpNYXAgfSBmcm9tICcuLi9zcmMvdXRpbHMnO1xuaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSAnLi4vc3JjL29wdGlvbic7XG5pbXBvcnQgeyBhbGxJc3N1ZXMgfSBmcm9tICcuLi9zcmMvZXJyb3JzJztcblxudHlwZSBPbmVPZkRlY2wgPSByZWFkb25seSBzdHJpbmdbXSB8IHtcbiAgICBba2V5OiBzdHJpbmddOiBhbnkgfCB7XG4gICAgICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICAgICAgICB2YWx1ZT86IGFueTtcbiAgICB9O1xufVxuXG50eXBlIE9uZU9mRGVjbE5vcm0gPSB7XG4gICAgW2tleTogc3RyaW5nXToge1xuICAgICAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgICAgICB2YWx1ZTogYW55O1xuICAgIH07XG59XG5cbnR5cGUgUmVzb2x2ZU9uZU9mRGVjbFR5cGU8VCBleHRlbmRzIE9uZU9mRGVjbD4gPSBUIGV4dGVuZHMgcmVhZG9ubHkgc3RyaW5nW11cbiAgICA/IFRbbnVtYmVyXVxuICAgIDoge1xuICAgICAgICBba2V5IGluIGtleW9mIFRdOiBUW2tleV0gZXh0ZW5kcyB7dmFsdWU6IGluZmVyIFZ9XG4gICAgICAgICAgICA/IFZcbiAgICAgICAgICAgIDogVFtrZXldXG4gICAgfVtrZXlvZiBUXTtcblxuZnVuY3Rpb24gZnJvbVBhaXJzKHBhaXJzOiBbc3RyaW5nLCBhbnldW10pOiBhbnkge1xuICAgIGNvbnN0IHJlczogYW55ID0ge307XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgcGFpcnMpIHtcbiAgICAgICAgcmVzW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplRGVjbChkZWNsOiBPbmVPZkRlY2wpOiBPbmVPZkRlY2xOb3JtIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShkZWNsKSkge1xuICAgICAgICBjb25zdCBwYWlycyA9IGRlY2wubWFwKGtleSA9PiBba2V5LCB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJycsXG4gICAgICAgICAgICB2YWx1ZToga2V5XG4gICAgICAgIH1dKTtcbiAgICAgICAgcmV0dXJuIGZyb21QYWlycyhwYWlycyBhcyBhbnkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqTWFwKGRlY2wsICh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IGtleSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnJyxcbiAgICAgICAgICAgIC4uLnZhbHVlLFxuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmNvbnN0IG9uZU9mID0gPFQgZXh0ZW5kcyBPbmVPZkRlY2w+KGRlY2w6IFQpOiBPcHRpb248J3N0cmluZycsIGZhbHNlLCBmYWxzZSwgUmVzb2x2ZU9uZU9mRGVjbFR5cGU8VD4+ID0+IHtcbiAgICBjb25zdCBub3JtRGVjbCA9IG5vcm1hbGl6ZURlY2woZGVjbCk7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG5vcm1EZWNsKTtcbiAgICByZXR1cm4gb3B0aW9uKCdzdHJpbmcnKVxuICAgICAgICAuY29tcGxldGVyKHBhcnRpYWwgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGtleXNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGtleSA9PiBrZXkuaW5kZXhPZihwYXJ0aWFsKSA9PT0gMClcbiAgICAgICAgICAgICAgICAubWFwKGtleSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0aW9uOiBrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogbm9ybURlY2xba2V5XS5kZXNjcmlwdGlvblxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICAudmFsaWRhdGUodmFsdWUgPT4ge1xuICAgICAgICAgICAgaWYgKGtleXMuaW5jbHVkZXModmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IGFsbElzc3Vlcy5UeXBlTWlzbWF0Y2hFcnJvcihrZXlzLm1hcChrID0+IGAnJHtrfSdgKS5qb2luKCcgfCAnKSwgdmFsdWUpO1xuICAgICAgICB9KSBhcyBhbnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBvbmVPZjtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBRUE7QUF3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../cli/presets/one-of.ts\n");

/***/ }),

/***/ "../cli/presets/url.ts":
/*!*****************************!*\
  !*** ../cli/presets/url.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst url_1 = __importDefault(__webpack_require__(/*! url */ \"./node_modules/url/url.js\"));\nconst __1 = __webpack_require__(/*! ../ */ \"../cli/index.js\");\nconst urlOption = __1.option('string')\n    .label('url')\n    .process('post', str => {\n    return url_1.default.parse(str);\n});\nexports.default = urlOption;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2xpL3ByZXNldHMvdXJsLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL2NsaS9wcmVzZXRzL3VybC50cz9jNWYyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB1cmwgZnJvbSAndXJsJztcblxuaW1wb3J0IHsgb3B0aW9uIH0gZnJvbSAnLi4vJztcblxuY29uc3QgdXJsT3B0aW9uID0gb3B0aW9uKCdzdHJpbmcnKVxuICAgIC5sYWJlbCgndXJsJylcbiAgICAucHJvY2VzcygncG9zdCcsIHN0ciA9PiB7XG4gICAgICAgIHJldHVybiB1cmwucGFyc2Uoc3RyKTtcbiAgICB9KTtcblxuZXhwb3J0IGRlZmF1bHQgdXJsT3B0aW9uO1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../cli/presets/url.ts\n");

/***/ }),

/***/ "../cli/src/cli-helper.ts":
/*!********************************!*\
  !*** ../cli/src/cli-helper.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst parser_1 = __webpack_require__(/*! ./parser */ \"../cli/src/parser.ts\");\nconst report_1 = __webpack_require__(/*! ./report */ \"../cli/src/report.ts\");\nconst completer_1 = __webpack_require__(/*! ./completer */ \"../cli/src/completer.ts\");\nfunction createCliHelper(params) {\n    return (decl) => {\n        const { argvProvider, exiter, printer, writer, helpGeneration, completer } = params;\n        decl = parser_1.prepareCliDeclaration(decl).decl;\n        const parser = new parser_1.Parser(decl);\n        const argv = argvProvider();\n        if (completer) {\n            const { completeCmd } = completer_1.normalizeCompleterOptions(typeof completer === 'boolean' ? {} : completer);\n            if (argv[0] === completeCmd) {\n                completer_1.tabtabCliDeclComplete(decl);\n                exiter(false);\n                throw new Error('exiter has failed');\n            }\n        }\n        if (helpGeneration) {\n            if (argv.includes('--help')) {\n                writer(printer.generateHelp(decl), 'log');\n                exiter(false);\n                throw new Error('exiter has failed');\n            }\n        }\n        const { data, report } = parser.parse(argv);\n        const printedReport = printer.stringifyReport(report);\n        printedReport !== '' && writer(printedReport, 'error');\n        if (report_1.isError(report.issue)) {\n            exiter(true);\n            throw new Error('exiter has failed');\n        }\n        return data;\n    };\n}\nexports.createCliHelper = createCliHelper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2xpL3NyYy9jbGktaGVscGVyLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL2NsaS9zcmMvY2xpLWhlbHBlci50cz8yY2EzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhcnNlciwgcHJlcGFyZUNsaURlY2xhcmF0aW9uIH0gZnJvbSAnLi9wYXJzZXInO1xuaW1wb3J0IHsgUHJpbnRlciB9IGZyb20gJy4vcHJpbnRlcic7XG5pbXBvcnQgeyBDbGlEZWNsYXJhdGlvbiwgUmVzb2x2ZUNsaURlY2xhcmF0aW9uIH0gZnJvbSAnLi90eXBlLWxvZ2ljJztcbmltcG9ydCB7IGlzRXJyb3IgfSBmcm9tICcuL3JlcG9ydCc7XG5pbXBvcnQgeyBDb21wbGV0ZXJPcHRpb25zLCB0YWJ0YWJDbGlEZWNsQ29tcGxldGUsIG5vcm1hbGl6ZUNvbXBsZXRlck9wdGlvbnMgfSBmcm9tICcuL2NvbXBsZXRlcic7XG5cbmV4cG9ydCB0eXBlIFdyaXRlciA9IChzdHI6IHN0cmluZywgbG9nVHlwZTogJ2xvZycgfCAnZXJyb3InKSA9PiB2b2lkO1xuXG5leHBvcnQgdHlwZSBFeGl0ZXIgPSAoaGFzRXJyb3JzOiBib29sZWFuKSA9PiB2b2lkO1xuXG5leHBvcnQgdHlwZSBBcmd2UHJvdmlkZXIgPSAoKSA9PiBzdHJpbmdbXTtcblxuZXhwb3J0IHR5cGUgQ2xpSGVscGVyID0gPEQgZXh0ZW5kcyBDbGlEZWNsYXJhdGlvbj4oZGVjbDogRCkgPT4gUmVzb2x2ZUNsaURlY2xhcmF0aW9uPEQ+O1xuXG5leHBvcnQgdHlwZSBDcmVhdGVDbGlIZWxwZXJQYXJhbXMgPSB7XG4gICAgd3JpdGVyOiBXcml0ZXI7XG4gICAgZXhpdGVyOiBFeGl0ZXI7XG4gICAgYXJndlByb3ZpZGVyOiBBcmd2UHJvdmlkZXI7XG4gICAgcHJpbnRlcjogUHJpbnRlcjtcbiAgICBoZWxwR2VuZXJhdGlvbj86IGJvb2xlYW47XG4gICAgY29tcGxldGVyPzogQ29tcGxldGVyT3B0aW9ucyB8IGJvb2xlYW47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDbGlIZWxwZXIocGFyYW1zOiBDcmVhdGVDbGlIZWxwZXJQYXJhbXMpOiBDbGlIZWxwZXIge1xuICAgIHJldHVybiA8RCBleHRlbmRzIENsaURlY2xhcmF0aW9uPihkZWNsOiBEKTogUmVzb2x2ZUNsaURlY2xhcmF0aW9uPEQ+ID0+IHtcbiAgICAgICAgY29uc3Qge2FyZ3ZQcm92aWRlciwgZXhpdGVyLCBwcmludGVyLCB3cml0ZXIsIGhlbHBHZW5lcmF0aW9uLCBjb21wbGV0ZXJ9ID0gcGFyYW1zO1xuICAgICAgICBkZWNsID0gcHJlcGFyZUNsaURlY2xhcmF0aW9uKGRlY2wpLmRlY2wgYXMgYW55O1xuICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgUGFyc2VyKGRlY2wpO1xuICAgICAgICBjb25zdCBhcmd2ID0gYXJndlByb3ZpZGVyKCk7XG4gICAgICAgIGlmIChjb21wbGV0ZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHtjb21wbGV0ZUNtZH0gPSBub3JtYWxpemVDb21wbGV0ZXJPcHRpb25zKHR5cGVvZiBjb21wbGV0ZXIgPT09ICdib29sZWFuJyA/IHt9IDogY29tcGxldGVyKTtcbiAgICAgICAgICAgIGlmIChhcmd2WzBdID09PSBjb21wbGV0ZUNtZCkge1xuICAgICAgICAgICAgICAgIHRhYnRhYkNsaURlY2xDb21wbGV0ZShkZWNsKTtcbiAgICAgICAgICAgICAgICBleGl0ZXIoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZXhpdGVyIGhhcyBmYWlsZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaGVscEdlbmVyYXRpb24pIHtcbiAgICAgICAgICAgIGlmIChhcmd2LmluY2x1ZGVzKCctLWhlbHAnKSkge1xuICAgICAgICAgICAgICAgIHdyaXRlcihwcmludGVyLmdlbmVyYXRlSGVscChkZWNsKSwgJ2xvZycpO1xuICAgICAgICAgICAgICAgIGV4aXRlcihmYWxzZSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdleGl0ZXIgaGFzIGZhaWxlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHtkYXRhLCByZXBvcnR9ID0gcGFyc2VyLnBhcnNlKGFyZ3YpO1xuICAgICAgICBjb25zdCBwcmludGVkUmVwb3J0ID0gcHJpbnRlci5zdHJpbmdpZnlSZXBvcnQocmVwb3J0KTtcbiAgICAgICAgcHJpbnRlZFJlcG9ydCAhPT0gJycgJiYgd3JpdGVyKHByaW50ZWRSZXBvcnQsICdlcnJvcicpO1xuICAgICAgICBpZiAoaXNFcnJvcihyZXBvcnQuaXNzdWUpKSB7XG4gICAgICAgICAgICBleGl0ZXIodHJ1ZSk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2V4aXRlciBoYXMgZmFpbGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGEgYXMgUmVzb2x2ZUNsaURlY2xhcmF0aW9uPEQ+O1xuICAgIH07XG59XG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFHQTtBQUNBO0FBbUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBOUJBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../cli/src/cli-helper.ts\n");

/***/ }),

/***/ "../cli/src/command.ts":
/*!*****************************!*\
  !*** ../cli/src/command.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar _a, _b, _c, _d;\nObject.defineProperty(exports, \"__esModule\", { value: true });\n\"use strict\";\nconst utils_1 = __webpack_require__(/*! ./utils */ \"../cli/src/utils.ts\");\nconst parser_1 = __webpack_require__(/*! ./parser */ \"../cli/src/parser.ts\");\nconst util_1 = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nconst report_1 = __webpack_require__(/*! ./report */ \"../cli/src/report.ts\");\nconst completer_1 = __webpack_require__(/*! ./completer */ \"../cli/src/completer.ts\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"../cli/src/errors.ts\");\n/**\n * It can be used as a key in command set to set a default command.\n * Such command will be used if no command was provided.\n */\nexports.defaultCommand = Symbol('defaultCommand');\nexports._decl = Symbol('decl');\nexports._subCommandSet = Symbol('subCommandSet');\nexports._fn = Symbol('fn');\nexports._aliases = Symbol('aliases');\nexports._clone = Symbol('clone');\nexports._match = Symbol('match');\nclass CommandBuilder {\n    constructor(decl) {\n        this[_a] = [];\n        this[_b] = {};\n        this[_c] = () => {\n            const cl = new CommandBuilder(this[exports._decl]);\n            cl[exports._fn] = this[exports._fn];\n            cl[exports._aliases] = this[exports._aliases];\n            cl[exports._subCommandSet] = this[exports._subCommandSet];\n            return cl;\n        };\n        this[_d] = (cmdString) => {\n            return this[exports._aliases].includes(cmdString);\n        };\n        this[exports._decl] = decl;\n    }\n    /**\n     * Sets a command handler - a function to be called\n     * if the input string matches against the command.\n     * **Important:** a handler must be provided for a command, if you don't\n     * want your program to do anything, just pass `() => {}`\n     * @param fn - a function to be called for the command\n     */\n    handle(fn) {\n        const cl = this[exports._clone]();\n        cl[exports._fn] = fn;\n        return cl;\n    }\n    /**\n     * Adds aliases to the command\n     * @param aliases - alias list\n     */\n    alias(...aliases) {\n        const cl = this[exports._clone]();\n        cl[exports._aliases] = aliases;\n        return cl;\n    }\n    /**\n     * Sets sub-command for the current command.\n     * The signature is similar to `T` in `cli.commands({}, <T>)`.\n     *\n     * `git remote add` - is a \"sub-command\" where:\n     * `git` - is a program,\n     * `remote` - is a command\n     * `add` - is sub-command of command `remote`\n     * @param subCommandSet - map (dictionary) of sub-commands\n     */\n    subCommands(subCommandSet) {\n        const cl = this[exports._clone]();\n        cl[exports._subCommandSet] = {\n            ...this[exports._subCommandSet],\n            ...subCommandSet\n        };\n        return cl;\n    }\n}\nexports.CommandBuilder = CommandBuilder;\n_a = exports._aliases, _b = exports._subCommandSet, _c = exports._clone, _d = exports._match;\nfunction getCommandSetAliases(cs) {\n    let res = [];\n    for (const key of Object.keys(cs)) {\n        res = res.concat(cs[key][exports._aliases]);\n    }\n    return res;\n}\nfunction prepareCommandSet(cs, namePrefix = '') {\n    const res = {};\n    for (const key of Object.keys(cs).sort()) {\n        const cmd = cs[key][exports._clone]();\n        if (!cmd[exports._fn]) {\n            throw new Error('no handler was set for command <${key}>');\n        }\n        cmd[exports._aliases] = [key, ...cmd[exports._aliases]];\n        const kebab = utils_1.createKebabAlias(key);\n        if (kebab) {\n            cmd[exports._aliases].push(kebab);\n        }\n        cmd[exports._decl] = {\n            ...parser_1.prepareCliDeclaration(cmd[exports._decl]).decl,\n            name: namePrefix + ' ' + key\n        };\n        cmd[exports._subCommandSet] = prepareCommandSet(cmd[exports._subCommandSet], namePrefix + ' ' + key);\n        res[key] = cmd;\n    }\n    const defCmd = cs[exports.defaultCommand];\n    if (defCmd) {\n        const cmd = defCmd[exports._clone]();\n        if (!cmd[exports._fn]) {\n            throw new Error('no handler was set for command <${key}>');\n        }\n        cmd[exports._decl] = {\n            ...parser_1.prepareCliDeclaration(defCmd[exports._decl]).decl,\n            name: namePrefix\n        };\n        res[exports.defaultCommand] = cmd;\n    }\n    const allAliases = getCommandSetAliases(res);\n    const aliasCollision = utils_1.findKeyCollision(allAliases);\n    if (aliasCollision) {\n        throw new Error(`alias colision for comand <${aliasCollision}>`);\n    }\n    return res;\n}\nexports.prepareCommandSet = prepareCommandSet;\nfunction findMatchedCommand(argv, cs) {\n    let matched = undefined;\n    for (const command of Object.values(cs)) {\n        if (command[exports._match](argv[0])) {\n            matched = command;\n            break;\n        }\n    }\n    matched = matched || cs[exports.defaultCommand];\n    if (!matched) {\n        return null;\n    }\n    const childMatch = findMatchedCommand(argv.slice(1), matched[exports._subCommandSet]);\n    return childMatch || matched;\n}\nexports.findMatchedCommand = findMatchedCommand;\nfunction parseCommand(cmd, args, params) {\n    const { onReport, onHelp } = params;\n    const handledByChild = parseCommandSet({\n        cs: cmd[exports._subCommandSet],\n        argv: args,\n        onReport,\n        onHelp\n    });\n    if (handledByChild) {\n        return;\n    }\n    if (onHelp && args.includes('--help')) {\n        onHelp(cmd);\n        return;\n    }\n    const parser = new parser_1.Parser(cmd[exports._decl]);\n    const { report, data } = parser.parse(args);\n    if (report.issue !== null || report.children.length > 0) {\n        onReport(report);\n    }\n    cmd[exports._fn](data);\n    return;\n}\nfunction parseCommandSet(params) {\n    const { cs, argv } = params;\n    const [commandName, ...args] = argv;\n    for (const cmd of Object.values(cs)) {\n        if (cmd[exports._match](commandName)) {\n            parseCommand(cmd, args, params);\n            return true;\n        }\n    }\n    return false;\n}\nexports.parseCommandSet = parseCommandSet;\nexports.createCommandHelper = (params) => (cfg, cs) => {\n    cs = prepareCommandSet(cs, cfg.program);\n    const { writer, exiter, argvProvider, printer, helpGeneration } = params;\n    const argv = argvProvider();\n    if (cfg.completer) {\n        const program = cfg.program;\n        if (!program) {\n            throw new Error('program name must be provided for completions');\n        }\n        completer_1.handleCompleterOptions(argv[0], cfg.completer, program, () => {\n            completer_1.tabtabCommandDeclComplete(cs);\n            exiter(false);\n            throw new Error('exiter has failed');\n        }, (hasErrors) => {\n            exiter(hasErrors);\n            throw new Error('exiter has failed');\n        });\n    }\n    const onReport = (report) => {\n        const printedReport = printer.stringifyReport(report);\n        printedReport !== '' && writer(printedReport, 'error');\n        if (util_1.isError(report.issue)) {\n            exiter(true);\n            throw new Error('exiter has failed');\n        }\n    };\n    const onHelp = (cmd) => {\n        writer(printer.generateHelp(cmd[exports._decl]), 'log');\n    };\n    const handled = parseCommandSet({ cs, argv, onReport, onHelp });\n    if (handled) {\n        return;\n    }\n    if (helpGeneration && argv.includes('--help')) {\n        writer(printer.generateHelpForComands(cfg, cs), 'log');\n        exiter(false);\n        throw new Error('exiter has failed');\n    }\n    const defCmd = cs[exports.defaultCommand];\n    const firstCommand = argv[0];\n    const hasCommand = firstCommand && /^[^-]/.test(firstCommand);\n    if (!hasCommand) {\n        if (defCmd) {\n            parseCommand(defCmd, argv, { cs, argv, onReport, onHelp });\n            return;\n        }\n        else {\n            onReport(report_1.errorToReport(new errors_1.allIssues.NoCommand()));\n        }\n    }\n    onReport(report_1.errorToReport(new errors_1.allIssues.InvalidCommand(firstCommand)));\n};\n/**\n * Defines a program command\n * @param decl - command declaration, which is basicly the same as program declaration passed to `cli()`\n */\nfunction command(decl) {\n    return new CommandBuilder(decl);\n}\nexports.command = command;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../cli/src/command.ts\n");

/***/ }),

/***/ "../cli/src/completer.ts":
/*!*******************************!*\
  !*** ../cli/src/completer.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = __webpack_require__(/*! ./command */ \"../cli/src/command.ts\");\nconst yargs_parser_1 = __importDefault(__webpack_require__(/*! yargs-parser */ \"../cli/node_modules/yargs-parser/index.js\"));\nconst utils_1 = __webpack_require__(/*! ./utils */ \"../cli/src/utils.ts\");\nconst option_1 = __webpack_require__(/*! ./option */ \"../cli/src/option.ts\");\nconst string_argv_1 = __webpack_require__(/*! string-argv */ \"../cli/node_modules/string-argv/index.js\");\nconst tabtab = __importStar(__webpack_require__(/*! tabtab */ \"./tabtab-mock.js\"));\nfunction completeForOptionValue(option, typedText) {\n    if (option.completer) {\n        return option.completer(typedText);\n    }\n    return [];\n}\nfunction genOptionMap(decl) {\n    const res = {};\n    for (const opt of Object.values(decl.options || {})) {\n        const optData = option_1.getOptData(opt);\n        res[opt.name] = optData;\n        for (const alias of optData.aliases) {\n            res[alias] = optData;\n        }\n    }\n    return res;\n}\nfunction completeForCliDecl(decl, argv, typedText) {\n    const parsed = yargs_parser_1.default(argv, {\n        alias: decl.options && utils_1.objMap(decl.options, item => option_1.getOptData(item).aliases)\n    });\n    const lastCmd = argv[argv.length - 1];\n    const optionMap = genOptionMap(decl);\n    // option value\n    if (lastCmd && lastCmd.startsWith('-')) {\n        const optName = lastCmd.startsWith('--')\n            ? lastCmd.slice(2) // removes '--'\n            : lastCmd.slice(1); // removes '-'\n        const option = optionMap[optName];\n        if (!option) {\n            return [];\n        }\n        if (option.type !== 'boolean') {\n            return completeForOptionValue(option, typedText);\n        }\n    }\n    const getOptionNameCompletions = (partialName, longOpt) => {\n        const availableOptions = Object.entries(optionMap)\n            // skip used opts\n            .filter(([, optData]) => {\n            if (optData.isArray) {\n                return true;\n            }\n            return !parsed[optData.name];\n        })\n            // filter by text\n            .filter(([key]) => key.indexOf(partialName) === 0)\n            // skip shorthands if '--' is typed already\n            .filter(([key]) => key.length > 1 || !longOpt);\n        return availableOptions.map(([key, optData]) => {\n            const prefix = key.length > 1 ? '--' : '-';\n            return {\n                completion: prefix + key,\n                description: optData.description\n            };\n        });\n    };\n    const getArgumentCompletions = () => [];\n    if (typedText === '') {\n        return [\n            ...getOptionNameCompletions('', false),\n            ...getArgumentCompletions()\n        ];\n    }\n    else if (typedText.startsWith('-')) {\n        return getOptionNameCompletions(typedText.replace(/^--?/, ''), typedText.startsWith('--'));\n    }\n    else {\n        return getArgumentCompletions();\n    }\n}\nexports.completeForCliDecl = completeForCliDecl;\nfunction completeCommands(cs, typedText) {\n    const res = [];\n    for (const cmd of Object.values(cs)) {\n        for (const alias of cmd[command_1._aliases]) {\n            if (alias.indexOf(typedText) === 0) {\n                res.push({\n                    completion: alias,\n                    description: cmd[command_1._decl].description || ''\n                });\n            }\n        }\n    }\n    return res;\n}\nfunction completeForCommandSet(cs, argv, typedText) {\n    const matchedCommand = command_1.findMatchedCommand(argv, cs);\n    if (!matchedCommand || matchedCommand === cs[command_1.defaultCommand]) {\n        return completeCommands(cs, typedText);\n    }\n    const decl = matchedCommand[command_1._decl];\n    return [\n        ...completeCommands(matchedCommand[command_1._subCommandSet], typedText),\n        ...completeForCliDecl(decl, argv, typedText),\n    ];\n}\nexports.completeForCommandSet = completeForCommandSet;\nfunction tabtabCommandDeclComplete(cs) {\n    const env = tabtab.parseEnv(process.env);\n    const line = env.last.length > 0\n        ? env.line.slice(0, -env.last.length)\n        : env.line;\n    const argv = string_argv_1.parseArgsStringToArgv(line).slice(1);\n    const completions = completeForCommandSet(cs, argv, env.last);\n    tabtab.log(completions.map(c => ({\n        name: c.completion,\n        description: c.description\n    })));\n}\nexports.tabtabCommandDeclComplete = tabtabCommandDeclComplete;\nfunction tabtabCliDeclComplete(decl) {\n    const env = tabtab.parseEnv(process.env);\n    const line = env.last.length > 0\n        ? env.line.slice(0, -env.last.length)\n        : env.line;\n    const argv = string_argv_1.parseArgsStringToArgv(line).slice(1);\n    const completions = completeForCliDecl(decl, argv, env.last);\n    tabtab.log(completions.map(c => ({\n        name: c.completion,\n        description: c.description\n    })));\n}\nexports.tabtabCliDeclComplete = tabtabCliDeclComplete;\nfunction normalizeCompleterOptions(opts) {\n    return {\n        installCmd: 'typed-cli--install-shell-completions',\n        uninstallCmd: 'typed-cli--install-shell-completions',\n        completeCmd: 'typed-cli--complete-input',\n        ...opts\n    };\n}\nexports.normalizeCompleterOptions = normalizeCompleterOptions;\nfunction handleCompleterOptions(cmd, opts, name, onComplete, exiter) {\n    const completerOpts = normalizeCompleterOptions(typeof opts === 'boolean' ? {} : opts);\n    if (cmd === completerOpts.installCmd) {\n        if (!name) {\n            throw new Error('name must be provided for completions');\n        }\n        tabtab\n            .install({\n            name: name,\n            completer: name,\n            completeCmd: completerOpts.completeCmd\n        })\n            .then(() => exiter(false))\n            .catch(err => {\n            console.error('INSTALL ERROR', err);\n            exiter(true);\n        });\n        return true;\n    }\n    if (cmd === completerOpts.uninstallCmd) {\n        if (!name) {\n            throw new Error('name must be provided for completions');\n        }\n        tabtab\n            .uninstall({\n            name: name,\n        })\n            .then(() => exiter(false))\n            .catch(err => {\n            console.error('UNINSTALL ERROR', err);\n            exiter(true);\n        });\n        return true;\n    }\n    if (cmd === completerOpts.completeCmd) {\n        onComplete();\n        return true;\n    }\n    return false;\n}\nexports.handleCompleterOptions = handleCompleterOptions;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../cli-pg/node_modules/process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../cli/src/completer.ts\n");

/***/ }),

/***/ "../cli/src/decorator.ts":
/*!*******************************!*\
  !*** ../cli/src/decorator.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst chalk_1 = __importDefault(__webpack_require__(/*! chalk */ \"../cli/node_modules/chalk/index.js\"));\nexports.chalkInstance = chalk_1.default;\n/** for TS only */\nfunction __definePlainTextDecorator(decorators) {\n    return decorators;\n}\nexports.plain = __definePlainTextDecorator({\n    alias: s => s,\n    type: s => s,\n    optional: s => s,\n    required: s => s,\n    multiple: s => s,\n    optionDescription: s => s,\n    title: s => s,\n    usageOption: s => s,\n    command: s => s,\n    errorLine: s => s,\n    warningLine: s => s,\n    invalidValue: s => s,\n    commandPath: s => s,\n    commandEnding: s => s,\n    commandDescription: s => s,\n});\nfunction defineTextDecorator(decorators) {\n    return decorators;\n}\nexports.defineTextDecorator = defineTextDecorator;\nexports.fancy = defineTextDecorator({\n    alias: s => s,\n    type: s => chalk_1.default.green(s),\n    optional: s => chalk_1.default.yellow(s),\n    required: s => chalk_1.default.redBright(s),\n    multiple: s => chalk_1.default.cyan(s),\n    optionDescription: s => chalk_1.default.dim(s),\n    title: s => chalk_1.default.underline(s),\n    usageOption: s => chalk_1.default.italic(s),\n    command: s => chalk_1.default.bold(s),\n    errorLine: s => '❌  ' + s,\n    warningLine: s => '⚠️  ' + s,\n    invalidValue: s => chalk_1.default.redBright(s),\n    commandPath: s => chalk_1.default.dim(s),\n    commandEnding: s => chalk_1.default.blueBright(s),\n    commandDescription: s => chalk_1.default.reset(s),\n});\nexports.decorators = { fancy: exports.fancy, plain: exports.plain };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2xpL3NyYy9kZWNvcmF0b3IudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vY2xpL3NyYy9kZWNvcmF0b3IudHM/MWQ3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuXG5leHBvcnQge2NoYWxrIGFzIGNoYWxrSW5zdGFuY2V9O1xuXG50eXBlIERlY29yYXRvckZuID0gKHRleHQ6IHN0cmluZykgPT4gc3RyaW5nO1xuXG4vKiogZm9yIFRTIG9ubHkgKi9cbmZ1bmN0aW9uIF9fZGVmaW5lUGxhaW5UZXh0RGVjb3JhdG9yPFQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBEZWNvcmF0b3JGbj4+KGRlY29yYXRvcnM6IFQpOiBUIHtcbiAgICByZXR1cm4gZGVjb3JhdG9ycztcbn1cblxuZXhwb3J0IGNvbnN0IHBsYWluID0gX19kZWZpbmVQbGFpblRleHREZWNvcmF0b3Ioe1xuICAgIGFsaWFzOiBzID0+IHMsXG4gICAgdHlwZTogcyA9PiBzLFxuICAgIG9wdGlvbmFsOiBzID0+IHMsXG4gICAgcmVxdWlyZWQ6IHMgPT4gcyxcbiAgICBtdWx0aXBsZTogcyA9PiBzLFxuICAgIG9wdGlvbkRlc2NyaXB0aW9uOiBzID0+IHMsXG4gICAgdGl0bGU6IHMgPT4gcyxcbiAgICB1c2FnZU9wdGlvbjogcyA9PiBzLFxuICAgIGNvbW1hbmQ6IHMgPT4gcyxcbiAgICBlcnJvckxpbmU6IHMgPT4gcyxcbiAgICB3YXJuaW5nTGluZTogcyA9PiBzLFxuICAgIGludmFsaWRWYWx1ZTogcyA9PiBzLFxuICAgIGNvbW1hbmRQYXRoOiBzID0+IHMsXG4gICAgY29tbWFuZEVuZGluZzogcyA9PiBzLFxuICAgIGNvbW1hbmREZXNjcmlwdGlvbjogcyA9PiBzLFxufSk7XG5cbmV4cG9ydCB0eXBlIFRleHREZWNvcmF0b3IgPSB0eXBlb2YgcGxhaW47XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVUZXh0RGVjb3JhdG9yPFQgZXh0ZW5kcyBSZWNvcmQ8a2V5b2YgdHlwZW9mIHBsYWluLCBEZWNvcmF0b3JGbj4+KGRlY29yYXRvcnM6IFQpOiBUIHtcbiAgICByZXR1cm4gZGVjb3JhdG9ycztcbn1cblxuZXhwb3J0IGNvbnN0IGZhbmN5ID0gZGVmaW5lVGV4dERlY29yYXRvcih7XG4gICAgYWxpYXM6IHMgPT4gcyxcbiAgICB0eXBlOiBzID0+IGNoYWxrLmdyZWVuKHMpLFxuICAgIG9wdGlvbmFsOiBzID0+IGNoYWxrLnllbGxvdyhzKSxcbiAgICByZXF1aXJlZDogcyA9PiBjaGFsay5yZWRCcmlnaHQocyksXG4gICAgbXVsdGlwbGU6IHMgPT4gY2hhbGsuY3lhbihzKSxcbiAgICBvcHRpb25EZXNjcmlwdGlvbjogcyA9PiBjaGFsay5kaW0ocyksXG4gICAgdGl0bGU6IHMgPT4gY2hhbGsudW5kZXJsaW5lKHMpLFxuICAgIHVzYWdlT3B0aW9uOiBzID0+IGNoYWxrLml0YWxpYyhzKSxcbiAgICBjb21tYW5kOiBzID0+IGNoYWxrLmJvbGQocyksXG4gICAgZXJyb3JMaW5lOiBzID0+ICfinYwgICcgKyBzLFxuICAgIHdhcm5pbmdMaW5lOiBzID0+ICfimqDvuI8gICcgKyBzLFxuICAgIGludmFsaWRWYWx1ZTogcyA9PiBjaGFsay5yZWRCcmlnaHQocyksXG4gICAgY29tbWFuZFBhdGg6IHMgPT4gY2hhbGsuZGltKHMpLFxuICAgIGNvbW1hbmRFbmRpbmc6IHMgPT4gY2hhbGsuYmx1ZUJyaWdodChzKSxcbiAgICBjb21tYW5kRGVzY3JpcHRpb246IHMgPT4gY2hhbGsucmVzZXQocyksXG59KTtcblxuZXhwb3J0IGNvbnN0IGRlY29yYXRvcnMgPSB7ZmFuY3ksIHBsYWlufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUVBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../cli/src/decorator.ts\n");

/***/ }),

/***/ "../cli/src/default-cli.ts":
/*!*********************************!*\
  !*** ../cli/src/default-cli.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cli_helper_1 = __webpack_require__(/*! ./cli-helper */ \"../cli/src/cli-helper.ts\");\nconst printer_1 = __webpack_require__(/*! ./printer */ \"../cli/src/printer.ts\");\nconst i18n_1 = __webpack_require__(/*! ./i18n */ \"../cli/src/i18n.ts\");\nconst decorator_1 = __webpack_require__(/*! ./decorator */ \"../cli/src/decorator.ts\");\nconst command_1 = __webpack_require__(/*! ./command */ \"../cli/src/command.ts\");\nexports.defaultPrinter = new printer_1.Printer({ locale: i18n_1.en_US, decorator: decorator_1.fancy });\nexports.defaultArgvProvider = () => process.argv.slice(2);\nexports.defaultExiter = hasErrors => process.exit(hasErrors ? 1 : 0);\nexports.defaultWriter = (text, logType) => {\n    switch (logType) {\n        case 'error':\n            console.error(text);\n            return;\n        case 'log':\n            console.log(text);\n            return;\n        default: throw new Error('unknown logType');\n    }\n};\nconst cliHelper = cli_helper_1.createCliHelper({\n    printer: exports.defaultPrinter,\n    argvProvider: exports.defaultArgvProvider,\n    exiter: exports.defaultExiter,\n    writer: exports.defaultWriter,\n    helpGeneration: true,\n    completer: true\n});\nexports.setupCommands = command_1.createCommandHelper({\n    printer: exports.defaultPrinter,\n    argvProvider: exports.defaultArgvProvider,\n    exiter: exports.defaultExiter,\n    writer: exports.defaultWriter,\n    helpGeneration: true\n});\nfunction cli(decl) {\n    return cliHelper(decl);\n}\nexports.cli = cli;\ncli.commands = exports.setupCommands;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../cli-pg/node_modules/process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2xpL3NyYy9kZWZhdWx0LWNsaS50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9jbGkvc3JjL2RlZmF1bHQtY2xpLnRzP2RkNzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ2xpSGVscGVyLCBBcmd2UHJvdmlkZXIsIEV4aXRlciwgV3JpdGVyIH0gZnJvbSAnLi9jbGktaGVscGVyJztcbmltcG9ydCB7IFByaW50ZXIgfSBmcm9tICcuL3ByaW50ZXInO1xuaW1wb3J0IHsgZW5fVVMgfSBmcm9tICcuL2kxOG4nO1xuaW1wb3J0IHsgZmFuY3kgfSBmcm9tICcuL2RlY29yYXRvcic7XG5pbXBvcnQgeyBjcmVhdGVDb21tYW5kSGVscGVyIH0gZnJvbSAnLi9jb21tYW5kJztcbmltcG9ydCB7IENsaURlY2xhcmF0aW9uLCBSZXNvbHZlQ2xpRGVjbGFyYXRpb24gfSBmcm9tICcuL3R5cGUtbG9naWMnO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdFByaW50ZXIgPSBuZXcgUHJpbnRlcih7bG9jYWxlOiBlbl9VUywgZGVjb3JhdG9yOiBmYW5jeX0pO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdEFyZ3ZQcm92aWRlcjogQXJndlByb3ZpZGVyID0gKCkgPT4gcHJvY2Vzcy5hcmd2LnNsaWNlKDIpO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdEV4aXRlcjogRXhpdGVyID0gaGFzRXJyb3JzID0+IHByb2Nlc3MuZXhpdChoYXNFcnJvcnMgPyAxIDogMCk7XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0V3JpdGVyOiBXcml0ZXIgPSAodGV4dCwgbG9nVHlwZSkgPT4ge1xuICAgIHN3aXRjaCAobG9nVHlwZSkge1xuICAgICAgICBjYXNlICdlcnJvcic6IGNvbnNvbGUuZXJyb3IodGV4dCk7IHJldHVybjtcbiAgICAgICAgY2FzZSAnbG9nJzogY29uc29sZS5sb2codGV4dCk7IHJldHVybjtcbiAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGxvZ1R5cGUnKTtcbiAgICB9XG59O1xuXG5jb25zdCBjbGlIZWxwZXIgPSBjcmVhdGVDbGlIZWxwZXIoe1xuICAgIHByaW50ZXI6IGRlZmF1bHRQcmludGVyLFxuICAgIGFyZ3ZQcm92aWRlcjogZGVmYXVsdEFyZ3ZQcm92aWRlcixcbiAgICBleGl0ZXI6IGRlZmF1bHRFeGl0ZXIsXG4gICAgd3JpdGVyOiBkZWZhdWx0V3JpdGVyLFxuICAgIGhlbHBHZW5lcmF0aW9uOiB0cnVlLFxuICAgIGNvbXBsZXRlcjogdHJ1ZVxufSk7XG5cbmV4cG9ydCBjb25zdCBzZXR1cENvbW1hbmRzID0gY3JlYXRlQ29tbWFuZEhlbHBlcih7XG4gICAgcHJpbnRlcjogZGVmYXVsdFByaW50ZXIsXG4gICAgYXJndlByb3ZpZGVyOiBkZWZhdWx0QXJndlByb3ZpZGVyLFxuICAgIGV4aXRlcjogZGVmYXVsdEV4aXRlcixcbiAgICB3cml0ZXI6IGRlZmF1bHRXcml0ZXIsXG4gICAgaGVscEdlbmVyYXRpb246IHRydWVcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gY2xpPEQgZXh0ZW5kcyBDbGlEZWNsYXJhdGlvbj4oZGVjbDogRCk6IFJlc29sdmVDbGlEZWNsYXJhdGlvbjxEPiB7XG4gICAgcmV0dXJuIGNsaUhlbHBlcihkZWNsKTtcbn1cblxuY2xpLmNvbW1hbmRzID0gc2V0dXBDb21tYW5kcztcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7O0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../cli/src/default-cli.ts\n");

/***/ }),

/***/ "../cli/src/errors.ts":
/*!****************************!*\
  !*** ../cli/src/errors.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass BaseError extends Error {\n}\nexports.BaseError = BaseError;\nclass BaseWarning {\n    constructor() {\n        this.isWarning = true;\n    }\n}\nexports.BaseWarning = BaseWarning;\nclass EmptyRequiredOptionError extends BaseError {\n    constructor(requiredOption) {\n        super();\n        this.className = 'EmptyRequiredOptionError';\n        this.requiredOption = requiredOption;\n    }\n}\nclass TypeMismatchError extends BaseError {\n    constructor(expected, received) {\n        super();\n        this.className = 'TypeMismatchError';\n        this.expected = expected;\n        this.received = received;\n    }\n}\nclass IvalidOptionError extends BaseError {\n    constructor(optionName, value) {\n        super();\n        this.className = 'IvalidOptionError';\n        this.optionName = optionName;\n        this.value = value;\n    }\n}\nclass SomeIvalidOptionsError extends BaseError {\n    constructor() {\n        super(...arguments);\n        this.className = 'SomeIvalidOptionsError';\n    }\n}\nclass IvalidSomeArguemntsError extends BaseError {\n    constructor() {\n        super(...arguments);\n        this.className = 'IvalidSomeArguemntsError';\n    }\n}\nclass IvalidArguemntError extends BaseError {\n    constructor(value) {\n        super();\n        this.className = 'IvalidArguemntError';\n        this.value = value;\n    }\n}\nclass InvalidCommand extends BaseError {\n    constructor(commandName) {\n        super();\n        this.className = 'InvalidCommand';\n        this.commandName = commandName;\n    }\n}\nclass NoCommand extends BaseError {\n    constructor() {\n        super(...arguments);\n        this.className = 'NoCommand';\n    }\n}\nclass IvalidInputError extends BaseError {\n    constructor() {\n        super(...arguments);\n        this.className = 'IvalidInputError';\n    }\n}\nclass UnknownOptionWarning extends BaseWarning {\n    constructor(optionName) {\n        super();\n        this.className = 'UnknownOptionWarning';\n        this.optionName = optionName;\n    }\n}\nexports.allIssues = {\n    UnknownOptionWarning,\n    EmptyRequiredOptionError,\n    IvalidOptionError,\n    IvalidSomeArguemntsError,\n    IvalidArguemntError,\n    SomeIvalidOptionsError,\n    IvalidInputError,\n    TypeMismatchError,\n    InvalidCommand,\n    NoCommand\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2xpL3NyYy9lcnJvcnMudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vY2xpL3NyYy9lcnJvcnMudHM/NGVlZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgQmFzZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNsYXNzTmFtZSE6IGtleW9mIHR5cGVvZiBhbGxJc3N1ZXM7XG59XG5cbmV4cG9ydCBjbGFzcyBCYXNlV2FybmluZyB7XG4gICAgY2xhc3NOYW1lIToga2V5b2YgdHlwZW9mIGFsbElzc3VlcztcbiAgICBpc1dhcm5pbmcgPSB0cnVlO1xufVxuXG5jbGFzcyBFbXB0eVJlcXVpcmVkT3B0aW9uRXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xuICAgIHJlcXVpcmVkT3B0aW9uOiBzdHJpbmc7XG4gICAgY2xhc3NOYW1lID0gJ0VtcHR5UmVxdWlyZWRPcHRpb25FcnJvcicgYXMgY29uc3Q7XG4gICAgY29uc3RydWN0b3IocmVxdWlyZWRPcHRpb246IHN0cmluZykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnJlcXVpcmVkT3B0aW9uID0gcmVxdWlyZWRPcHRpb247XG4gICAgfVxufVxuXG5jbGFzcyBUeXBlTWlzbWF0Y2hFcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgY2xhc3NOYW1lID0gJ1R5cGVNaXNtYXRjaEVycm9yJyBhcyBjb25zdDtcbiAgICBleHBlY3RlZDogc3RyaW5nO1xuICAgIHJlY2VpdmVkOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IoZXhwZWN0ZWQ6IHN0cmluZywgcmVjZWl2ZWQ6IHN0cmluZykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmV4cGVjdGVkID0gZXhwZWN0ZWQ7XG4gICAgICAgIHRoaXMucmVjZWl2ZWQgPSByZWNlaXZlZDtcbiAgICB9XG59XG5cbmNsYXNzIEl2YWxpZE9wdGlvbkVycm9yIGV4dGVuZHMgQmFzZUVycm9yIHtcbiAgICBjbGFzc05hbWUgPSAnSXZhbGlkT3B0aW9uRXJyb3InIGFzIGNvbnN0O1xuICAgIG9wdGlvbk5hbWU6IHN0cmluZztcbiAgICB2YWx1ZTogYW55O1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbk5hbWU6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm9wdGlvbk5hbWUgPSBvcHRpb25OYW1lO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxufVxuXG5jbGFzcyBTb21lSXZhbGlkT3B0aW9uc0Vycm9yIGV4dGVuZHMgQmFzZUVycm9yIHtcbiAgICBjbGFzc05hbWUgPSAnU29tZUl2YWxpZE9wdGlvbnNFcnJvcicgYXMgY29uc3Q7XG59XG5cbmNsYXNzIEl2YWxpZFNvbWVBcmd1ZW1udHNFcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgY2xhc3NOYW1lID0gJ0l2YWxpZFNvbWVBcmd1ZW1udHNFcnJvcicgYXMgY29uc3Q7XG59XG5cbmNsYXNzIEl2YWxpZEFyZ3VlbW50RXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xuICAgIGNsYXNzTmFtZSA9ICdJdmFsaWRBcmd1ZW1udEVycm9yJyBhcyBjb25zdDtcbiAgICB2YWx1ZTogYW55O1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlOiBhbnkpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbn1cblxuY2xhc3MgSW52YWxpZENvbW1hbmQgZXh0ZW5kcyBCYXNlRXJyb3Ige1xuICAgIGNsYXNzTmFtZSA9ICdJbnZhbGlkQ29tbWFuZCcgYXMgY29uc3Q7XG4gICAgY29tbWFuZE5hbWU6IGFueTtcbiAgICBjb25zdHJ1Y3Rvcihjb21tYW5kTmFtZTogYW55KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY29tbWFuZE5hbWUgPSBjb21tYW5kTmFtZTtcbiAgICB9XG59XG5cbmNsYXNzIE5vQ29tbWFuZCBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgY2xhc3NOYW1lID0gJ05vQ29tbWFuZCcgYXMgY29uc3Q7XG59XG5cbmNsYXNzIEl2YWxpZElucHV0RXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xuICAgIGNsYXNzTmFtZSA9ICdJdmFsaWRJbnB1dEVycm9yJyBhcyBjb25zdDtcbn1cblxuY2xhc3MgVW5rbm93bk9wdGlvbldhcm5pbmcgZXh0ZW5kcyBCYXNlV2FybmluZyB7XG4gICAgY2xhc3NOYW1lID0gJ1Vua25vd25PcHRpb25XYXJuaW5nJyBhcyBjb25zdDtcbiAgICBvcHRpb25OYW1lOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3Iob3B0aW9uTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3B0aW9uTmFtZSA9IG9wdGlvbk5hbWU7XG4gICAgfVxufVxuXG5leHBvcnQgdHlwZSBJc3N1ZVR5cGUgPSB7XG4gICAgW2tleSBpbiBrZXlvZiB0eXBlb2YgYWxsSXNzdWVzXTogSW5zdGFuY2VUeXBlPCh0eXBlb2YgYWxsSXNzdWVzKVtrZXldPjtcbn1ba2V5b2YgdHlwZW9mIGFsbElzc3Vlc107XG5cbmV4cG9ydCBjb25zdCBhbGxJc3N1ZXMgPSB7XG4gICAgVW5rbm93bk9wdGlvbldhcm5pbmcsXG4gICAgRW1wdHlSZXF1aXJlZE9wdGlvbkVycm9yLFxuICAgIEl2YWxpZE9wdGlvbkVycm9yLFxuICAgIEl2YWxpZFNvbWVBcmd1ZW1udHNFcnJvcixcbiAgICBJdmFsaWRBcmd1ZW1udEVycm9yLFxuICAgIFNvbWVJdmFsaWRPcHRpb25zRXJyb3IsXG4gICAgSXZhbGlkSW5wdXRFcnJvcixcbiAgICBUeXBlTWlzbWF0Y2hFcnJvcixcbiAgICBJbnZhbGlkQ29tbWFuZCxcbiAgICBOb0NvbW1hbmRcbn1cblxuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBRUE7QUFGQTtBQUlBO0FBQUE7QUFFQTtBQUNBO0FBQUE7QUFIQTtBQUtBO0FBR0E7QUFDQTtBQUZBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFJQTtBQUNBO0FBSkE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBSUE7QUFDQTtBQUpBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBOztBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQUE7O0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFHQTtBQUNBO0FBSEE7QUFJQTtBQUNBO0FBQ0E7QUFFQTtBQUdBO0FBQ0E7QUFIQTtBQUlBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7O0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFBQTs7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUdBO0FBQ0E7QUFIQTtBQUlBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../cli/src/errors.ts\n");

/***/ }),

/***/ "../cli/src/i18n.ts":
/*!**************************!*\
  !*** ../cli/src/i18n.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction __declareEnglishTextsLocale(locale) {\n    return locale;\n}\n/* eslint-disable @typescript-eslint/no-unused-vars */\nexports.en_US = {\n    code: 'en_US',\n    texts: __declareEnglishTextsLocale({\n        title_description: d => d.title('Description'),\n        title_usage: d => d.title('Usage'),\n        title_options: d => d.title('Options'),\n        title_commands: d => d.title('Commands'),\n        hint_commandHint: (d, { command } = {}) => `Type ${d.command(command)} <command> --help for detailed documentation`,\n        opt_required: d => 'required',\n        opt_optional: d => 'optional',\n        opt_multile: d => 'multiple',\n    }),\n    issues: {\n        IvalidOptionError: (e, d) => `option <${d.invalidValue(e.optionName)}> is invalid`,\n        EmptyRequiredOptionError: (e, d) => `it's required`,\n        IvalidInputError: (e, d) => `provided arguments were not correct`,\n        SomeIvalidOptionsError: (e, d) => `some of the options are invalid`,\n        UnknownOptionWarning: (e, d) => `option <${d.invalidValue(e.optionName)}> is not supported`,\n        TypeMismatchError: (e, d) => `expected <${e.expected}>, but received <${d.invalidValue(e.received)}>`,\n        IvalidSomeArguemntsError: (e, d) => `some of the arguments are invalid`,\n        IvalidArguemntError: (e, d) => `provided argument value <${d.invalidValue(e.value)}> is not valid`,\n        InvalidCommand: (e, d) => `command <${d.invalidValue(e.commandName)}> is not supported`,\n        NoCommand: (e, d) => `no command was provided and no default command was set`\n    }\n};\nfunction declareLocale(locale) {\n    return locale;\n}\nexports.declareLocale = declareLocale;\nexports.locales = { en_US: exports.en_US };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2xpL3NyYy9pMThuLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL2NsaS9zcmMvaTE4bi50cz80NGVjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFsbElzc3VlcyB9IGZyb20gJy4vZXJyb3JzJztcbmltcG9ydCB7IFRleHREZWNvcmF0b3IgfSBmcm9tICcuL2RlY29yYXRvcic7XG5pbXBvcnQgeyBJc3N1ZSB9IGZyb20gJy4vcmVwb3J0JztcblxuZXhwb3J0IHR5cGUgTG9jYWxlRm4gPSAoZGVjb3JhdG9yOiBUZXh0RGVjb3JhdG9yLCBkYXRhPzogYW55KSA9PiBzdHJpbmc7XG5cbmV4cG9ydCB0eXBlIElzc3VlTG9jYWxlRm4gPSAoZGVjb3JhdG9yOiBUZXh0RGVjb3JhdG9yLCBpc3N1ZTogSXNzdWUpID0+IHN0cmluZztcblxudHlwZSBJc3N1ZUxvY2FsZSA9IHtcbiAgICBba2V5IGluIGtleW9mIHR5cGVvZiBhbGxJc3N1ZXNdOiAoaXNzdWU6IEluc3RhbmNlVHlwZTwodHlwZW9mIGFsbElzc3Vlcylba2V5XT4sIGRlY29yYXRvcjogVGV4dERlY29yYXRvcikgPT4gc3RyaW5nO1xufVxuXG5mdW5jdGlvbiBfX2RlY2xhcmVFbmdsaXNoVGV4dHNMb2NhbGU8VCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIExvY2FsZUZuPj4obG9jYWxlOiBUKTogVCB7XG4gICAgcmV0dXJuIGxvY2FsZTtcbn1cblxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXG5leHBvcnQgY29uc3QgZW5fVVMgPSB7XG4gICAgY29kZTogJ2VuX1VTJyxcbiAgICB0ZXh0czogX19kZWNsYXJlRW5nbGlzaFRleHRzTG9jYWxlKHtcbiAgICAgICAgdGl0bGVfZGVzY3JpcHRpb246IGQgPT4gZC50aXRsZSgnRGVzY3JpcHRpb24nKSxcbiAgICAgICAgdGl0bGVfdXNhZ2U6IGQgPT4gZC50aXRsZSgnVXNhZ2UnKSxcbiAgICAgICAgdGl0bGVfb3B0aW9uczogZCA9PiBkLnRpdGxlKCdPcHRpb25zJyksXG4gICAgICAgIHRpdGxlX2NvbW1hbmRzOiBkID0+IGQudGl0bGUoJ0NvbW1hbmRzJyksXG4gICAgICAgIGhpbnRfY29tbWFuZEhpbnQ6IChkLCB7Y29tbWFuZH0gPSB7fSkgPT4gYFR5cGUgJHtkLmNvbW1hbmQoY29tbWFuZCl9IDxjb21tYW5kPiAtLWhlbHAgZm9yIGRldGFpbGVkIGRvY3VtZW50YXRpb25gLFxuICAgICAgICBvcHRfcmVxdWlyZWQ6IGQgPT4gJ3JlcXVpcmVkJyxcbiAgICAgICAgb3B0X29wdGlvbmFsOiBkID0+ICdvcHRpb25hbCcsXG4gICAgICAgIG9wdF9tdWx0aWxlOiBkID0+ICdtdWx0aXBsZScsXG4gICAgfSksXG4gICAgaXNzdWVzOiB7XG4gICAgICAgIEl2YWxpZE9wdGlvbkVycm9yOiAoZSwgZCkgPT4gYG9wdGlvbiA8JHtkLmludmFsaWRWYWx1ZShlLm9wdGlvbk5hbWUpfT4gaXMgaW52YWxpZGAsXG4gICAgICAgIEVtcHR5UmVxdWlyZWRPcHRpb25FcnJvcjogKGUsIGQpID0+IGBpdCdzIHJlcXVpcmVkYCxcbiAgICAgICAgSXZhbGlkSW5wdXRFcnJvcjogKGUsIGQpID0+IGBwcm92aWRlZCBhcmd1bWVudHMgd2VyZSBub3QgY29ycmVjdGAsXG4gICAgICAgIFNvbWVJdmFsaWRPcHRpb25zRXJyb3I6IChlLCBkKSA9PiBgc29tZSBvZiB0aGUgb3B0aW9ucyBhcmUgaW52YWxpZGAsXG4gICAgICAgIFVua25vd25PcHRpb25XYXJuaW5nOiAoZSwgZCkgPT4gYG9wdGlvbiA8JHtkLmludmFsaWRWYWx1ZShlLm9wdGlvbk5hbWUpfT4gaXMgbm90IHN1cHBvcnRlZGAsXG4gICAgICAgIFR5cGVNaXNtYXRjaEVycm9yOiAoZSwgZCkgPT4gYGV4cGVjdGVkIDwke2UuZXhwZWN0ZWR9PiwgYnV0IHJlY2VpdmVkIDwke2QuaW52YWxpZFZhbHVlKGUucmVjZWl2ZWQpfT5gLFxuICAgICAgICBJdmFsaWRTb21lQXJndWVtbnRzRXJyb3I6IChlLCBkKSA9PiBgc29tZSBvZiB0aGUgYXJndW1lbnRzIGFyZSBpbnZhbGlkYCxcbiAgICAgICAgSXZhbGlkQXJndWVtbnRFcnJvcjogKGUsIGQpID0+IGBwcm92aWRlZCBhcmd1bWVudCB2YWx1ZSA8JHtkLmludmFsaWRWYWx1ZShlLnZhbHVlKX0+IGlzIG5vdCB2YWxpZGAsXG4gICAgICAgIEludmFsaWRDb21tYW5kOiAoZSwgZCkgPT4gYGNvbW1hbmQgPCR7ZC5pbnZhbGlkVmFsdWUoZS5jb21tYW5kTmFtZSl9PiBpcyBub3Qgc3VwcG9ydGVkYCxcbiAgICAgICAgTm9Db21tYW5kOiAoZSwgZCkgPT4gYG5vIGNvbW1hbmQgd2FzIHByb3ZpZGVkIGFuZCBubyBkZWZhdWx0IGNvbW1hbmQgd2FzIHNldGBcbiAgICB9IGFzIElzc3VlTG9jYWxlXG59O1xuLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMgKi9cblxuZXhwb3J0IHR5cGUgTG9jYWxlID0gdHlwZW9mIGVuX1VTO1xuXG5leHBvcnQgZnVuY3Rpb24gZGVjbGFyZUxvY2FsZShsb2NhbGU6IExvY2FsZSk6IExvY2FsZSB7XG4gICAgcmV0dXJuIGxvY2FsZTtcbn1cblxuZXhwb3J0IGNvbnN0IGxvY2FsZXMgPSB7ZW5fVVN9O1xuIl0sIm1hcHBpbmdzIjoiOztBQVlBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFGQTtBQUlBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../cli/src/i18n.ts\n");

/***/ }),

/***/ "../cli/src/option.ts":
/*!****************************!*\
  !*** ../cli/src/option.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\n\"use strict\";\nconst pipeline_1 = __webpack_require__(/*! ./pipeline */ \"../cli/src/pipeline.ts\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"../cli/src/errors.ts\");\nconst intrinsicPreProcessors = {\n    string: s => typeof s === 'number' ? String(s) : s\n};\nconst intrinsicValidators = {\n    number: n => n * 1 === n,\n    int: n => Number.isInteger(n),\n    string: s => typeof s === 'string',\n    boolean: b => typeof b === 'boolean'\n};\nconst optionDataKey = Symbol('__data');\nfunction getOptData(opt) {\n    return opt[optionDataKey];\n}\nexports.getOptData = getOptData;\nfunction setOptData(opt, data) {\n    opt[optionDataKey] = data;\n}\nexports.setOptData = setOptData;\nfunction cloneOption(opt) {\n    const oldOpt = opt;\n    const oldData = getOptData(oldOpt);\n    opt = new Option(oldData.type);\n    setOptData(opt, oldData);\n    return opt;\n}\nexports.cloneOption = cloneOption;\nfunction updateOptData(opt, data) {\n    return changeOptData(cloneOption(opt), data);\n}\nexports.updateOptData = updateOptData;\nfunction changeOptData(opt, data) {\n    setOptData(opt, {\n        ...getOptData(opt),\n        ...data\n    });\n    return opt;\n}\nexports.changeOptData = changeOptData;\n/**\n * Defines a new option\n * @param type option data type\n */\nfunction option(type) {\n    return new Option(type);\n}\nexports.option = option;\nclass Option {\n    constructor(type) {\n        this.name = '';\n        this[_a] = {\n            name: '',\n            type: 'any',\n            labelName: 'any',\n            description: '',\n            isRequired: false,\n            aliases: [],\n            isArray: false,\n            defaultValue: undefined,\n            validators: [],\n            prePreprocessors: [],\n            postPreprocessors: [],\n        };\n        this[optionDataKey].type = type;\n        this[optionDataKey].labelName = type;\n        const intrinsicValidator = intrinsicValidators[type];\n        if (intrinsicValidator) {\n            changeOptData(this, {\n                validators: [\n                    (value) => {\n                        if (intrinsicValidator(value)) {\n                            return;\n                        }\n                        throw new errors_1.allIssues.TypeMismatchError(this[optionDataKey].labelName, typeof value);\n                    }\n                ]\n            });\n        }\n        const intrinsicPreProcessor = intrinsicPreProcessors[type];\n        if (intrinsicPreProcessor) {\n            changeOptData(this, {\n                prePreprocessors: [intrinsicPreProcessor]\n            });\n        }\n    }\n    /**\n     * Allows to create custom type name.\n     * Useful for presets, allows to get output like:\n     * `expected <MyType> but recieved <string>`\n     * @param name - new label for the type\n     */\n    label(name) {\n        return updateOptData(this, {\n            labelName: name\n        });\n    }\n    /**\n     * Adds one or more aliases to an option.\n     * Used to create short aliases such '-a', '-b' etc.\n     * Could be called multiple times, the alias lists will be\n     * concatenated.\n     * @param aliases - alias list\n     */\n    alias(...aliases) {\n        return updateOptData(this, {\n            aliases: this[optionDataKey].aliases.concat(aliases)\n        });\n    }\n    /**\n     * Sets the compliter for the option.\n     * A completer is a function to be called when\n     * shell completion is computated for an option.\n     * See 'oneOf' preset source code for usage.\n     * @param completer - completer function\n     */\n    completer(completer) {\n        return updateOptData(this, {\n            completer\n        });\n    }\n    /**\n     * Sets the description of the option that is\n     * printed with the rest of the help when '--help' flag\n     * is provided.\n     * @param text - description string\n     */\n    description(text) {\n        return updateOptData(this, {\n            description: text\n        });\n    }\n    /**\n     * Marks the option as required.\n     * Required options must be provided. Otherwise\n     * the program will quit with non-zero code and print an error.\n     * On the other hand required options always accessible so\n     * there is no need to check if they are presented i.e.\n     * no `options.foo && options.foo.toString()` checks.\n     */\n    required() {\n        return updateOptData(this, {\n            isRequired: true\n        });\n    }\n    /**\n     * Marks the option as multiple.\n     * It allows to pass the same option multiple times.\n     * So `-o 1 -o 2 -o 3` will be resolved as `[1, 2, 3]`.\n     * *Important:* result will be an array even if only one value\n     * was presented (or no value at all)\n     * i.e. both `[]` and `[1]` are valid results.\n     */\n    array() {\n        return updateOptData(this, {\n            isArray: true\n        });\n    }\n    /**\n     * Sets the default value for an option.\n     * Option will be resolved to that value if no value was present.\n     * Also removes `nullability` from the result type like `required()` does.\n     * @param value - default value of the option\n     */\n    default(value) {\n        return updateOptData(this, {\n            isRequired: false,\n            defaultValue: value,\n        });\n    }\n    validate(...args) {\n        const validator = args.length === 2\n            ? pipeline_1.makeValidator(args[0], args[1])\n            : args[0];\n        return updateOptData(this, {\n            validators: getOptData(this).validators.concat(validator),\n        });\n    }\n    process(phase, fn) {\n        switch (phase) {\n            case 'pre':\n                return updateOptData(this, {\n                    prePreprocessors: getOptData(this).prePreprocessors.concat(fn),\n                });\n            case 'post':\n                return updateOptData(this, {\n                    postPreprocessors: getOptData(this).postPreprocessors.concat(fn),\n                });\n            default:\n                throw new Error(`invalid phase <${phase}>`);\n        }\n    }\n}\nexports.Option = Option;\n_a = optionDataKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../cli/src/option.ts\n");

/***/ }),

/***/ "../cli/src/parser.ts":
/*!****************************!*\
  !*** ../cli/src/parser.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst yargs_parser_1 = __importDefault(__webpack_require__(/*! yargs-parser */ \"../cli/node_modules/yargs-parser/index.js\"));\nconst option_1 = __webpack_require__(/*! ./option */ \"../cli/src/option.ts\");\nconst pipeline_1 = __webpack_require__(/*! ./pipeline */ \"../cli/src/pipeline.ts\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"../cli/src/utils.ts\");\nconst report_1 = __webpack_require__(/*! ./report */ \"../cli/src/report.ts\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"../cli/src/errors.ts\");\nfunction checkAliasCollisions(opts) {\n    const usedKeys = new Set();\n    const check = (str) => {\n        if (usedKeys.has(str)) {\n            throw new Error(`alias collision for \"${str}\"`);\n        }\n        usedKeys.add(str);\n    };\n    for (const [name, opt] of Object.entries(opts)) {\n        check(name);\n        option_1.getOptData(opt).aliases.forEach(check);\n    }\n    return usedKeys;\n}\nfunction prepareCliDeclaration(decl) {\n    const resDecl = { ...decl };\n    resDecl.options = { ...(decl.options || {}) };\n    for (const [name, opt] of Object.entries(resDecl.options)) {\n        const alias = utils_1.createKebabAlias(name);\n        let resOpt = option_1.updateOptData(opt, { name });\n        if (alias) {\n            resOpt = option_1.updateOptData(resOpt, {\n                aliases: [...option_1.getOptData(opt).aliases, alias]\n            });\n        }\n        resOpt.name = name;\n        resDecl.options[name] = resOpt;\n    }\n    if (decl._) {\n        resDecl._ = option_1.updateOptData(decl._, { name: '#argument#', isArg: true });\n    }\n    const usedKeys = checkAliasCollisions(resDecl.options);\n    return { decl: resDecl, usedKeys };\n}\nexports.prepareCliDeclaration = prepareCliDeclaration;\nfunction extractOptionsFromYargs(data) {\n    const copyData = { ...data };\n    delete copyData.$0;\n    delete copyData._;\n    return copyData;\n}\nclass Parser {\n    constructor(decl) {\n        const { decl: declPrepared, usedKeys } = prepareCliDeclaration(decl);\n        this.usedKeys = usedKeys;\n        this.decl = declPrepared;\n        this.optCfg = utils_1.objMap(declPrepared.options, item => option_1.getOptData(item));\n    }\n    parseOptions(parsed) {\n        return pipeline_1.handleAllOptions(this.optCfg, extractOptionsFromYargs(parsed), this.usedKeys);\n    }\n    normalizeArgs(args) {\n        switch (args.length) {\n            case 0:\n                return undefined;\n            case 1:\n                return args[0];\n            default:\n                return args;\n        }\n    }\n    parseArguments(parsed) {\n        if (this.decl._) {\n            const parsedArgs = option_1.getOptData(this.decl._).isArray\n                ? parsed._\n                : this.normalizeArgs(parsed._);\n            const { value, report } = pipeline_1.handleOption(option_1.getOptData(this.decl._), parsedArgs);\n            if (report_1.isError(report.issue)) {\n                return {\n                    data: value,\n                    report: {\n                        issue: new errors_1.allIssues.IvalidSomeArguemntsError(),\n                        children: [report]\n                    }\n                };\n            }\n            return { data: value, report };\n        }\n        return { data: undefined, report: { issue: null, children: [] } };\n    }\n    parse(argv) {\n        const parsed = yargs_parser_1.default(argv, {\n            alias: this.decl.options && utils_1.objMap(this.decl.options, item => option_1.getOptData(item).aliases),\n            boolean: Object.values(this.decl.options)\n                .filter(opt => option_1.getOptData(opt).type === 'boolean')\n                .map(opt => opt.name)\n        });\n        const { report: optionsReport, data: optionsData } = this.parseOptions(parsed);\n        const { report: argumentsReport, data: argumentsData } = this.parseArguments(parsed);\n        const report = report_1.mergeReports(new errors_1.allIssues.IvalidInputError, optionsReport, argumentsReport);\n        if (report_1.isError(report.issue)) {\n            return { report, data: null };\n        }\n        return {\n            report,\n            data: {\n                options: optionsData,\n                _: argumentsData\n            }\n        };\n    }\n}\nexports.Parser = Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2xpL3NyYy9wYXJzZXIudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vY2xpL3NyYy9wYXJzZXIudHM/OGU2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeWFyZ3NQYXJzZXIgZnJvbSAneWFyZ3MtcGFyc2VyJztcblxuaW1wb3J0IHsgT3B0aW9uU2V0LCBnZXRPcHREYXRhLCB1cGRhdGVPcHREYXRhIH0gZnJvbSAnLi9vcHRpb24nO1xuaW1wb3J0IHsgQ2xpRGVjbGFyYXRpb24sIFJlc29sdmVDbGlEZWNsYXJhdGlvbiB9IGZyb20gJy4vdHlwZS1sb2dpYyc7XG5pbXBvcnQgeyBoYW5kbGVBbGxPcHRpb25zLCBoYW5kbGVPcHRpb24gfSBmcm9tICcuL3BpcGVsaW5lJztcbmltcG9ydCB7IGNyZWF0ZUtlYmFiQWxpYXMsIG9iak1hcCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgUmVwb3J0LCBtZXJnZVJlcG9ydHMsIGlzRXJyb3IgfSBmcm9tICcuL3JlcG9ydCc7XG5pbXBvcnQgeyBhbGxJc3N1ZXMgfSBmcm9tICcuL2Vycm9ycyc7XG5cbmZ1bmN0aW9uIGNoZWNrQWxpYXNDb2xsaXNpb25zKG9wdHM6IE9wdGlvblNldCk6IFNldDxzdHJpbmc+IHtcbiAgICBjb25zdCB1c2VkS2V5cyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuXG4gICAgY29uc3QgY2hlY2sgPSAoc3RyOiBzdHJpbmcpOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKHVzZWRLZXlzLmhhcyhzdHIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGFsaWFzIGNvbGxpc2lvbiBmb3IgXCIke3N0cn1cImApO1xuICAgICAgICB9XG4gICAgICAgIHVzZWRLZXlzLmFkZChzdHIpO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgW25hbWUsIG9wdF0gb2YgT2JqZWN0LmVudHJpZXMob3B0cykpIHtcbiAgICAgICAgY2hlY2sobmFtZSk7XG4gICAgICAgIGdldE9wdERhdGEob3B0KS5hbGlhc2VzLmZvckVhY2goY2hlY2spO1xuICAgIH1cblxuICAgIHJldHVybiB1c2VkS2V5cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVDbGlEZWNsYXJhdGlvbihkZWNsOiBDbGlEZWNsYXJhdGlvbik6IHtkZWNsOiBSZXF1aXJlZDxDbGlEZWNsYXJhdGlvbj47IHVzZWRLZXlzOiBTZXQ8c3RyaW5nPn0ge1xuICAgIGNvbnN0IHJlc0RlY2wgPSB7Li4uZGVjbH07XG4gICAgcmVzRGVjbC5vcHRpb25zID0gey4uLihkZWNsLm9wdGlvbnMgfHwge30pfTtcbiAgICBmb3IgKGNvbnN0IFtuYW1lLCBvcHRdIG9mIE9iamVjdC5lbnRyaWVzKHJlc0RlY2wub3B0aW9ucykpIHtcbiAgICAgICAgY29uc3QgYWxpYXMgPSBjcmVhdGVLZWJhYkFsaWFzKG5hbWUpO1xuICAgICAgICBsZXQgcmVzT3B0ID0gdXBkYXRlT3B0RGF0YShvcHQsIHtuYW1lfSk7XG4gICAgICAgIGlmIChhbGlhcykge1xuICAgICAgICAgICAgcmVzT3B0ID0gdXBkYXRlT3B0RGF0YShyZXNPcHQsIHtcbiAgICAgICAgICAgICAgICBhbGlhc2VzOiBbLi4uZ2V0T3B0RGF0YShvcHQpLmFsaWFzZXMsIGFsaWFzXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzT3B0Lm5hbWUgPSBuYW1lO1xuICAgICAgICByZXNEZWNsLm9wdGlvbnNbbmFtZV0gPSByZXNPcHQ7XG4gICAgfVxuICAgIGlmIChkZWNsLl8pIHtcbiAgICAgICAgcmVzRGVjbC5fID0gdXBkYXRlT3B0RGF0YShkZWNsLl8sIHtuYW1lOiAnI2FyZ3VtZW50IycsIGlzQXJnOiB0cnVlfSlcbiAgICB9XG5cbiAgICBjb25zdCB1c2VkS2V5cyA9IGNoZWNrQWxpYXNDb2xsaXNpb25zKHJlc0RlY2wub3B0aW9ucyk7XG4gICAgcmV0dXJuIHtkZWNsOiByZXNEZWNsIGFzIFJlcXVpcmVkPENsaURlY2xhcmF0aW9uPiwgdXNlZEtleXN9O1xufVxuXG5mdW5jdGlvbiBleHRyYWN0T3B0aW9uc0Zyb21ZYXJncyhkYXRhOiBhbnkpOiBhbnkge1xuICAgIGNvbnN0IGNvcHlEYXRhID0gey4uLmRhdGF9O1xuICAgIGRlbGV0ZSBjb3B5RGF0YS4kMDtcbiAgICBkZWxldGUgY29weURhdGEuXztcbiAgICByZXR1cm4gY29weURhdGE7XG59XG5cbmV4cG9ydCBjbGFzcyBQYXJzZXI8RCBleHRlbmRzIENsaURlY2xhcmF0aW9uPiB7XG4gICAgcHJpdmF0ZSBvcHRDZmc6IFJlY29yZDxzdHJpbmcsIGFueT47XG4gICAgcHJpdmF0ZSBkZWNsOiBEO1xuICAgIHByaXZhdGUgdXNlZEtleXM6IFNldDxzdHJpbmc+O1xuXG4gICAgY29uc3RydWN0b3IoZGVjbDogRCkge1xuICAgICAgICBjb25zdCB7ZGVjbDogZGVjbFByZXBhcmVkLCB1c2VkS2V5c30gPSBwcmVwYXJlQ2xpRGVjbGFyYXRpb24oZGVjbCk7XG4gICAgICAgIHRoaXMudXNlZEtleXMgPSB1c2VkS2V5cztcbiAgICAgICAgdGhpcy5kZWNsID0gZGVjbFByZXBhcmVkIGFzIEQ7XG4gICAgICAgIHRoaXMub3B0Q2ZnID0gb2JqTWFwKGRlY2xQcmVwYXJlZC5vcHRpb25zLCBpdGVtID0+IGdldE9wdERhdGEoaXRlbSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcGFyc2VPcHRpb25zKHBhcnNlZDogYW55KToge2RhdGE6IGFueTsgcmVwb3J0OiBSZXBvcnR9IHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZUFsbE9wdGlvbnModGhpcy5vcHRDZmcsIGV4dHJhY3RPcHRpb25zRnJvbVlhcmdzKHBhcnNlZCksIHRoaXMudXNlZEtleXMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgbm9ybWFsaXplQXJncyhhcmdzOiBhbnlbXSk6IHVuZGVmaW5lZCB8IHVua25vd24gfCB1bmtub3duW10ge1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJnc1swXTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHBhcnNlQXJndW1lbnRzKHBhcnNlZDogYW55KToge2RhdGE6IGFueTsgcmVwb3J0OiBSZXBvcnR9IHtcbiAgICAgICAgaWYgKHRoaXMuZGVjbC5fKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRBcmdzID0gZ2V0T3B0RGF0YSh0aGlzLmRlY2wuXykuaXNBcnJheVxuICAgICAgICAgICAgICAgID8gcGFyc2VkLl9cbiAgICAgICAgICAgICAgICA6IHRoaXMubm9ybWFsaXplQXJncyhwYXJzZWQuXyk7XG4gICAgICAgICAgICBjb25zdCB7dmFsdWUsIHJlcG9ydH0gPSBoYW5kbGVPcHRpb24oZ2V0T3B0RGF0YSh0aGlzLmRlY2wuXyksIHBhcnNlZEFyZ3MpO1xuICAgICAgICAgICAgaWYgKGlzRXJyb3IocmVwb3J0Lmlzc3VlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICByZXBvcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzc3VlOiBuZXcgYWxsSXNzdWVzLkl2YWxpZFNvbWVBcmd1ZW1udHNFcnJvcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtyZXBvcnRdXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge2RhdGE6IHZhbHVlLCByZXBvcnR9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7ZGF0YTogdW5kZWZpbmVkLCByZXBvcnQ6IHtpc3N1ZTogbnVsbCwgY2hpbGRyZW46IFtdfX07XG4gICAgfVxuXG4gICAgcGFyc2UoYXJndjogc3RyaW5nW10gfCBzdHJpbmcpOiB7cmVwb3J0OiBSZXBvcnQ7IGRhdGE6IFJlc29sdmVDbGlEZWNsYXJhdGlvbjxEPiB8IG51bGx9IHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0geWFyZ3NQYXJzZXIoYXJndiwge1xuICAgICAgICAgICAgYWxpYXM6IHRoaXMuZGVjbC5vcHRpb25zICYmIG9iak1hcCh0aGlzLmRlY2wub3B0aW9ucywgaXRlbSA9PiBnZXRPcHREYXRhKGl0ZW0pLmFsaWFzZXMpLFxuICAgICAgICAgICAgYm9vbGVhbjogT2JqZWN0LnZhbHVlcyh0aGlzLmRlY2wub3B0aW9ucyBhcyBPcHRpb25TZXQpXG4gICAgICAgICAgICAgICAgLmZpbHRlcihvcHQgPT4gZ2V0T3B0RGF0YShvcHQpLnR5cGUgPT09ICdib29sZWFuJylcbiAgICAgICAgICAgICAgICAubWFwKG9wdCA9PiBvcHQubmFtZSlcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHtyZXBvcnQ6IG9wdGlvbnNSZXBvcnQsIGRhdGE6IG9wdGlvbnNEYXRhfSA9IHRoaXMucGFyc2VPcHRpb25zKHBhcnNlZCk7XG4gICAgICAgIGNvbnN0IHtyZXBvcnQ6IGFyZ3VtZW50c1JlcG9ydCwgZGF0YTogYXJndW1lbnRzRGF0YX0gPSB0aGlzLnBhcnNlQXJndW1lbnRzKHBhcnNlZCk7XG4gICAgICAgIGNvbnN0IHJlcG9ydCA9IG1lcmdlUmVwb3J0cyhuZXcgYWxsSXNzdWVzLkl2YWxpZElucHV0RXJyb3IsIG9wdGlvbnNSZXBvcnQsIGFyZ3VtZW50c1JlcG9ydCk7XG4gICAgICAgIGlmIChpc0Vycm9yKHJlcG9ydC5pc3N1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7cmVwb3J0LCBkYXRhOiBudWxsfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVwb3J0LFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNEYXRhLFxuICAgICAgICAgICAgICAgIF86IGFyZ3VtZW50c0RhdGFcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFwQkE7QUFzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFwRUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../cli/src/parser.ts\n");

/***/ }),

/***/ "../cli/src/pipeline.ts":
/*!******************************!*\
  !*** ../cli/src/pipeline.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst report_1 = __webpack_require__(/*! ./report */ \"../cli/src/report.ts\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"../cli/src/errors.ts\");\nfunction makeValidator(errorMsg, fn) {\n    return (value) => {\n        if (fn(value)) {\n            return;\n        }\n        throw new Error(errorMsg);\n    };\n}\nexports.makeValidator = makeValidator;\nfunction runValidator(validator, value) {\n    try {\n        validator(value);\n    }\n    catch (e) {\n        return e;\n    }\n}\nfunction validateOption(optCfg, value) {\n    const issues = [];\n    if (value === undefined) {\n        if (optCfg.isRequired) {\n            return {\n                issue: optCfg.isArg\n                    ? new errors_1.allIssues.IvalidArguemntError(value)\n                    : new errors_1.allIssues.IvalidOptionError(optCfg.name, value),\n                children: [{\n                        issue: new errors_1.allIssues.EmptyRequiredOptionError(optCfg.name),\n                        children: []\n                    }]\n            };\n        }\n        return {\n            issue: null,\n            children: []\n        };\n    }\n    const validators = optCfg.validators;\n    validators.forEach(validator => {\n        const error = runValidator(validator, value);\n        if (error) {\n            issues.push(error);\n        }\n    });\n    return report_1.combineIssues(optCfg.isArg\n        ? new errors_1.allIssues.IvalidArguemntError(value)\n        : new errors_1.allIssues.IvalidOptionError(optCfg.name, value), issues);\n}\nfunction runPreprocessors(processors, value) {\n    processors.forEach(fn => {\n        value = fn(value);\n    });\n    return value;\n}\nfunction handleArrayOption(optCfg, value) {\n    value = [].concat(value);\n    let issues = [];\n    const resValue = [];\n    value.forEach((v) => {\n        const res = handleOption(optCfg, v, true);\n        resValue.push(res.value);\n        issues = [...issues, ...res.report.children.map(c => c.issue)];\n    });\n    const report = report_1.combineIssues(new errors_1.allIssues.IvalidOptionError(optCfg.name, value), issues);\n    return {\n        report,\n        value: report_1.isError(report.issue) ? null : resValue\n    };\n}\nfunction handleOption(optCfg, value, iterating) {\n    if (optCfg.isArray && !iterating) {\n        return handleArrayOption(optCfg, value);\n    }\n    value = runPreprocessors(optCfg.prePreprocessors, value);\n    const report = validateOption(optCfg, value);\n    if (report_1.isError(report.issue)) {\n        return { report, value: null };\n    }\n    if (!optCfg.isRequired && value === undefined) {\n        if (optCfg.defaultValue !== undefined) {\n            value = optCfg.defaultValue;\n        }\n        else {\n            return { report, value };\n        }\n    }\n    value = runPreprocessors(optCfg.postPreprocessors, value);\n    return {\n        report,\n        value\n    };\n}\nexports.handleOption = handleOption;\nfunction handleAllOptions(optSchema, rawData, usedKeys) {\n    const data = {};\n    const dataCopy = { ...rawData };\n    let isValid = true;\n    const allReports = [];\n    for (const key of Object.keys(optSchema).sort()) {\n        const optCfg = optSchema[key];\n        const dataValue = dataCopy[key];\n        delete dataCopy[key];\n        const { value, report } = handleOption(optCfg, dataValue);\n        if (report_1.isError(report.issue)) {\n            isValid = false;\n        }\n        report_1.isError(report.issue) && allReports.push(report);\n        data[key] = value;\n    }\n    const report = {\n        issue: isValid ? null : new errors_1.allIssues.SomeIvalidOptionsError(),\n        children: allReports\n    };\n    const warnings = Object.keys(dataCopy)\n        .filter(key => !usedKeys.has(key))\n        .map(key => new errors_1.allIssues.UnknownOptionWarning(key))\n        .map(warning => ({\n        issue: warning,\n        children: []\n    }));\n    report.children = report.children.concat(warnings);\n    if (report_1.isError(report.issue)) {\n        return { data: null, report };\n    }\n    return { data, report };\n}\nexports.handleAllOptions = handleAllOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2xpL3NyYy9waXBlbGluZS50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9jbGkvc3JjL3BpcGVsaW5lLnRzP2UwNGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVwb3J0LCBJc3N1ZSwgY29tYmluZUlzc3VlcywgaXNFcnJvciB9IGZyb20gJy4vcmVwb3J0JztcbmltcG9ydCB7IGFsbElzc3VlcyB9IGZyb20gJy4vZXJyb3JzJztcblxuZXhwb3J0IHR5cGUgVmFsaWRhdG9yPFQ+ID0gKHZhbHVlOiBUKSA9PiB2b2lkO1xuXG5leHBvcnQgdHlwZSBCb29sZWFuVmFsaWRhdG9yPFQ+ID0gKHZhbHVlOiBUKSA9PiBib29sZWFuO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFrZVZhbGlkYXRvcjxUPihlcnJvck1zZzogc3RyaW5nLCBmbjogKHZhbHVlOiBUKSA9PiBib29sZWFuKTogVmFsaWRhdG9yPFQ+IHtcbiAgICByZXR1cm4gKHZhbHVlOiBhbnkpOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKGZuKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1zZyk7XG4gICAgfVxufVxuXG5leHBvcnQgdHlwZSBQcmVwcm9jZXNzb3I8SSA9IGFueSwgTyA9IGFueT4gPSAodmFsdWU6IEkpID0+IE87XG5cbmZ1bmN0aW9uIHJ1blZhbGlkYXRvcih2YWxpZGF0b3I6IFZhbGlkYXRvcjxhbnk+LCB2YWx1ZTogYW55KTogdW5kZWZpbmVkIHwgRXJyb3Ige1xuICAgIHRyeSB7XG4gICAgICAgIHZhbGlkYXRvcih2YWx1ZSk7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHJldHVybiBlO1xuICAgIH1cbn1cblxuaW50ZXJmYWNlIFZhbGlkYXRpb25DZmcge1xuICAgIGlzUmVxdWlyZWQ6IGJvb2xlYW47XG4gICAgdmFsaWRhdG9yczogVmFsaWRhdG9yPGFueT5bXTtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgaXNBcmc/OiBib29sZWFuO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZU9wdGlvbihvcHRDZmc6IFZhbGlkYXRpb25DZmcsIHZhbHVlOiBhbnkpOiBSZXBvcnQge1xuICAgIGNvbnN0IGlzc3VlczogSXNzdWVbXSA9IFtdO1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChvcHRDZmcuaXNSZXF1aXJlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpc3N1ZTogb3B0Q2ZnLmlzQXJnXG4gICAgICAgICAgICAgICAgICAgID8gbmV3IGFsbElzc3Vlcy5JdmFsaWRBcmd1ZW1udEVycm9yKHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICA6IG5ldyBhbGxJc3N1ZXMuSXZhbGlkT3B0aW9uRXJyb3Iob3B0Q2ZnLm5hbWUsIHZhbHVlKSxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgICAgICAgICAgICAgaXNzdWU6IG5ldyBhbGxJc3N1ZXMuRW1wdHlSZXF1aXJlZE9wdGlvbkVycm9yKG9wdENmZy5uYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtdXG4gICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlzc3VlOiBudWxsLFxuICAgICAgICAgICAgY2hpbGRyZW46IFtdXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHZhbGlkYXRvcnMgPSBvcHRDZmcudmFsaWRhdG9ycztcbiAgICB2YWxpZGF0b3JzLmZvckVhY2godmFsaWRhdG9yID0+IHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSBydW5WYWxpZGF0b3IodmFsaWRhdG9yLCB2YWx1ZSk7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgaXNzdWVzLnB1c2goZXJyb3IpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbWJpbmVJc3N1ZXMoXG4gICAgICAgIG9wdENmZy5pc0FyZ1xuICAgICAgICAgICAgPyBuZXcgYWxsSXNzdWVzLkl2YWxpZEFyZ3VlbW50RXJyb3IodmFsdWUpXG4gICAgICAgICAgICA6IG5ldyBhbGxJc3N1ZXMuSXZhbGlkT3B0aW9uRXJyb3Iob3B0Q2ZnLm5hbWUsIHZhbHVlKVxuICAgICwgaXNzdWVzKTtcbn1cblxuZnVuY3Rpb24gcnVuUHJlcHJvY2Vzc29ycyhwcm9jZXNzb3JzOiBQcmVwcm9jZXNzb3JbXSwgdmFsdWU6IGFueSk6IGFueSB7XG4gICAgcHJvY2Vzc29ycy5mb3JFYWNoKGZuID0+IHtcbiAgICAgICAgdmFsdWUgPSBmbih2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5pbnRlcmZhY2UgT3B0Q2ZnIGV4dGVuZHMgVmFsaWRhdGlvbkNmZyB7XG4gICAgcHJlUHJlcHJvY2Vzc29yczogUHJlcHJvY2Vzc29yW107XG4gICAgcG9zdFByZXByb2Nlc3NvcnM6IFByZXByb2Nlc3NvcltdO1xuICAgIGlzQXJyYXk6IGJvb2xlYW47XG4gICAgZGVmYXVsdFZhbHVlPzogYW55O1xuICAgIGlzQXJnPzogYm9vbGVhbjtcbn1cblxuZnVuY3Rpb24gaGFuZGxlQXJyYXlPcHRpb24ob3B0Q2ZnOiBPcHRDZmcsIHZhbHVlOiBhbnkpOiB7dmFsdWU6IGFueVtdIHwgbnVsbDsgcmVwb3J0OiBSZXBvcnR9IHtcbiAgICB2YWx1ZSA9IChbXSBhcyBhbnlbXSkuY29uY2F0KHZhbHVlKTtcbiAgICBsZXQgaXNzdWVzOiBJc3N1ZVtdID0gW107XG4gICAgY29uc3QgcmVzVmFsdWU6IGFueVtdID0gW107XG4gICAgdmFsdWUuZm9yRWFjaCgodjogYW55KSA9PiB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGhhbmRsZU9wdGlvbihvcHRDZmcsIHYsIHRydWUpO1xuICAgICAgICByZXNWYWx1ZS5wdXNoKHJlcy52YWx1ZSk7XG4gICAgICAgIGlzc3VlcyA9IFsuLi5pc3N1ZXMsIC4uLnJlcy5yZXBvcnQuY2hpbGRyZW4ubWFwKGMgPT4gYy5pc3N1ZSldO1xuICAgIH0pO1xuICAgIGNvbnN0IHJlcG9ydCA9IGNvbWJpbmVJc3N1ZXMobmV3IGFsbElzc3Vlcy5JdmFsaWRPcHRpb25FcnJvcihvcHRDZmcubmFtZSwgdmFsdWUpLCBpc3N1ZXMpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlcG9ydCxcbiAgICAgICAgdmFsdWU6IGlzRXJyb3IocmVwb3J0Lmlzc3VlKSA/IG51bGwgOiByZXNWYWx1ZVxuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVPcHRpb24ob3B0Q2ZnOiBPcHRDZmcsIHZhbHVlOiBhbnksIGl0ZXJhdGluZz86IGJvb2xlYW4pOiB7dmFsdWU6IGFueTsgcmVwb3J0OiBSZXBvcnR9IHtcbiAgICBpZiAob3B0Q2ZnLmlzQXJyYXkgJiYgIWl0ZXJhdGluZykge1xuICAgICAgICByZXR1cm4gaGFuZGxlQXJyYXlPcHRpb24ob3B0Q2ZnLCB2YWx1ZSk7XG4gICAgfVxuICAgIHZhbHVlID0gcnVuUHJlcHJvY2Vzc29ycyhvcHRDZmcucHJlUHJlcHJvY2Vzc29ycywgdmFsdWUpO1xuICAgIGNvbnN0IHJlcG9ydCA9IHZhbGlkYXRlT3B0aW9uKG9wdENmZywgdmFsdWUpO1xuICAgIGlmIChpc0Vycm9yKHJlcG9ydC5pc3N1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHtyZXBvcnQsIHZhbHVlOiBudWxsfTtcbiAgICB9XG4gICAgaWYgKCFvcHRDZmcuaXNSZXF1aXJlZCAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChvcHRDZmcuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhbHVlID0gb3B0Q2ZnLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7cmVwb3J0LCB2YWx1ZX07XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFsdWUgPSBydW5QcmVwcm9jZXNzb3JzKG9wdENmZy5wb3N0UHJlcHJvY2Vzc29ycywgdmFsdWUpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlcG9ydCxcbiAgICAgICAgdmFsdWVcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlQWxsT3B0aW9ucyhvcHRTY2hlbWE6IFJlY29yZDxzdHJpbmcsIE9wdENmZz4sIHJhd0RhdGE6IFJlY29yZDxzdHJpbmcsIGFueT4sIHVzZWRLZXlzOiBTZXQ8c3RyaW5nPik6IHtkYXRhOiBhbnk7IHJlcG9ydDogUmVwb3J0fSB7XG4gICAgY29uc3QgZGF0YTogYW55ID0ge307XG4gICAgY29uc3QgZGF0YUNvcHkgPSB7Li4ucmF3RGF0YX07XG4gICAgbGV0IGlzVmFsaWQgPSB0cnVlO1xuICAgIGNvbnN0IGFsbFJlcG9ydHM6IFJlcG9ydFtdID0gW107XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMob3B0U2NoZW1hKS5zb3J0KCkpIHtcbiAgICAgICAgY29uc3Qgb3B0Q2ZnID0gb3B0U2NoZW1hW2tleV07XG4gICAgICAgIGNvbnN0IGRhdGFWYWx1ZSA9IGRhdGFDb3B5W2tleV07XG4gICAgICAgIGRlbGV0ZSBkYXRhQ29weVtrZXldO1xuICAgICAgICBjb25zdCB7dmFsdWUsIHJlcG9ydH0gPSBoYW5kbGVPcHRpb24ob3B0Q2ZnLCBkYXRhVmFsdWUpO1xuICAgICAgICBpZiAoaXNFcnJvcihyZXBvcnQuaXNzdWUpKSB7XG4gICAgICAgICAgICBpc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaXNFcnJvcihyZXBvcnQuaXNzdWUpICYmIGFsbFJlcG9ydHMucHVzaChyZXBvcnQpO1xuICAgICAgICBkYXRhW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3QgcmVwb3J0ID0ge1xuICAgICAgICBpc3N1ZTogaXNWYWxpZCA/IG51bGwgOiBuZXcgYWxsSXNzdWVzLlNvbWVJdmFsaWRPcHRpb25zRXJyb3IoKSxcbiAgICAgICAgY2hpbGRyZW46IGFsbFJlcG9ydHNcbiAgICB9O1xuICAgIGNvbnN0IHdhcm5pbmdzID0gT2JqZWN0LmtleXMoZGF0YUNvcHkpXG4gICAgICAgIC5maWx0ZXIoa2V5ID0+ICF1c2VkS2V5cy5oYXMoa2V5KSlcbiAgICAgICAgLm1hcChrZXkgPT4gbmV3IGFsbElzc3Vlcy5Vbmtub3duT3B0aW9uV2FybmluZyhrZXkpKVxuICAgICAgICAubWFwKHdhcm5pbmcgPT4gKHtcbiAgICAgICAgICAgIGlzc3VlOiB3YXJuaW5nLFxuICAgICAgICAgICAgY2hpbGRyZW46IFtdXG4gICAgICAgIH0pKTtcbiAgICByZXBvcnQuY2hpbGRyZW4gPSByZXBvcnQuY2hpbGRyZW4uY29uY2F0KHdhcm5pbmdzKTtcbiAgICBpZiAoaXNFcnJvcihyZXBvcnQuaXNzdWUpKSB7XG4gICAgICAgIHJldHVybiB7ZGF0YTogbnVsbCwgcmVwb3J0fTtcbiAgICB9XG4gICAgcmV0dXJuIHtkYXRhLCByZXBvcnR9O1xufVxuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUEE7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXJCQTtBQXVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFoQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../cli/src/pipeline.ts\n");

/***/ }),

/***/ "../cli/src/printer.ts":
/*!*****************************!*\
  !*** ../cli/src/printer.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst report_1 = __webpack_require__(/*! ./report */ \"../cli/src/report.ts\");\nconst option_1 = __webpack_require__(/*! ./option */ \"../cli/src/option.ts\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"../cli/src/utils.ts\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"../cli/src/errors.ts\");\nconst parser_1 = __webpack_require__(/*! ./parser */ \"../cli/src/parser.ts\");\nconst command_1 = __webpack_require__(/*! ./command */ \"../cli/src/command.ts\");\nfunction findMinialAlias(opt) {\n    return [opt.name, ...option_1.getOptData(opt).aliases].sort((a, b) => a.length - b.length)[0];\n}\nclass Printer {\n    constructor({ locale, decorator, lineEnding }) {\n        this.locale = locale;\n        this.decorator = decorator;\n        this.lineEnding = lineEnding || '\\n';\n    }\n    generateOptionDescription(config) {\n        const d = this.decorator;\n        const l = this.locale;\n        const options = config.options;\n        const optionTextMatrix = [];\n        for (const [name, optCgf] of Object.entries(options)) {\n            const lineParts = [];\n            const optData = option_1.getOptData(optCgf);\n            // aliases\n            const aliases = [name, ...optData.aliases]\n                .sort((a, b) => a.length - b.length)\n                .map(alias => {\n                return alias.length > 1\n                    ? '--' + alias\n                    : '-' + alias;\n            })\n                .join(', ');\n            lineParts.push(d.alias(aliases));\n            // type\n            lineParts.push(d.type(`<${optData.labelName}>`));\n            // optionality\n            if (optData.isArray) {\n                lineParts.push(d.multiple(`[${l.texts.opt_multile(d)}]`));\n            }\n            else if (optData.defaultValue) {\n                lineParts.push(d.optional(`[=${optData.defaultValue}]`));\n            }\n            else if (!optData.isRequired) {\n                lineParts.push(d.optional(`[${l.texts.opt_optional(d)}]`));\n            }\n            else {\n                lineParts.push(d.required(`[${l.texts.opt_required(d)}]`));\n            }\n            // description\n            lineParts.push(d.optionDescription('- ' + optData.description));\n            optionTextMatrix.push(lineParts);\n        }\n        return utils_1.alignTextMatrix(optionTextMatrix)\n            .map(line => '    ' + line.join('  '))\n            .join('\\n');\n    }\n    generateUsage(config) {\n        const d = this.decorator;\n        const options = config.options;\n        // options:\n        const [requiredOpts, optionalOpts] = utils_1.arrayPartition(Object.values(options), (opt) => {\n            return option_1.getOptData(opt).isRequired;\n        })\n            .map(opts => {\n            const optionStrings = [];\n            const [boolean, rest] = utils_1.arrayPartition(opts, (opt) => {\n                return option_1.getOptData(opt).labelName === 'boolean' && findMinialAlias(opt).length === 1;\n            });\n            const booleanGroup = boolean.map(opt => findMinialAlias(opt)).join('');\n            booleanGroup.length > 0 && optionStrings.push(d.usageOption('-' + booleanGroup));\n            rest.forEach(opt => {\n                const alias = findMinialAlias(opt);\n                const prefix = alias.length === 1 ? '-' : '--';\n                const value = option_1.getOptData(opt).labelName === 'boolean'\n                    ? ''\n                    : ' ' + d.type(`<${option_1.getOptData(opt).labelName}>`);\n                optionStrings.push(d.usageOption(prefix + alias) + value);\n            });\n            return optionStrings.join(' ');\n        });\n        // arguments:\n        let argText = undefined;\n        if (config._) {\n            const arg = option_1.getOptData(config._);\n            const argType = d.type(`<${arg.labelName}>`);\n            if (arg.isArray) {\n                argText = `[${argType} ${argType} ...]`;\n            }\n            else if (!arg.isRequired) {\n                argText = `[${argType}]`;\n            }\n            else {\n                argText = argType;\n            }\n        }\n        return [\n            config.name && d.command(config.name),\n            requiredOpts,\n            optionalOpts.length > 0 && ('[' + optionalOpts + ']'),\n            argText\n        ]\n            .filter(Boolean)\n            .join(' ');\n    }\n    genenrateCommandList(cs) {\n        const d = this.decorator;\n        let res = [];\n        for (const cmd of Object.values(cs)) {\n            const cmdParts = cmd[command_1._decl].name.split(' ');\n            const title = d.commandPath(cmdParts.slice(0, -1).join(' '))\n                + ' '\n                + d.commandEnding(cmdParts[cmdParts.length - 1]);\n            const desc = cmd[command_1._decl].description;\n            const descText = desc ? ('| - ' + desc) : '|';\n            res.push([title, d.commandDescription(descText)]);\n            res = res.concat(this.genenrateCommandList(cmd[command_1._subCommandSet]));\n        }\n        return res;\n    }\n    generateHelpForComands(cfg, cs) {\n        const d = this.decorator;\n        const l = this.locale;\n        const textAbstracts = [];\n        const { description, program } = cfg;\n        description && textAbstracts.push(d.title(l.texts.title_description(d))\n            + '\\n' +\n            description);\n        textAbstracts.push(d.title(l.texts.title_commands(d))\n            + '\\n' +\n            utils_1.alignTextMatrix(this.genenrateCommandList(cs), ['right', 'left'])\n                .map(line => line.join(' '))\n                .join('\\n'));\n        textAbstracts.push(d.usageOption(l.texts.hint_commandHint(d, { command: program })));\n        return textAbstracts\n            .join('\\n\\n')\n            .replace(/[ \\t]+\\n/g, '\\n')\n            .replace(/\\n/g, this.lineEnding);\n    }\n    generateHelp(decl) {\n        decl = parser_1.prepareCliDeclaration(decl).decl;\n        const d = this.decorator;\n        const l = this.locale;\n        const textAbstracts = [];\n        const { description } = decl;\n        description && textAbstracts.push(d.title(l.texts.title_description(d))\n            + '\\n' +\n            description);\n        textAbstracts.push(d.title(l.texts.title_usage(d))\n            + '\\n    ' +\n            this.generateUsage(decl));\n        const optDecription = this.generateOptionDescription(decl);\n        optDecription && textAbstracts.push(d.title(l.texts.title_options(d))\n            + '\\n' +\n            optDecription);\n        return textAbstracts\n            .join('\\n\\n')\n            .replace(/[ \\t]+\\n/g, '\\n')\n            .replace(/\\n/g, this.lineEnding);\n    }\n    printReportLayer(report, level) {\n        const d = this.decorator;\n        const l = this.locale;\n        let text = '';\n        if (report.issue instanceof errors_1.BaseError || report.issue instanceof errors_1.BaseWarning) {\n            text += l.issues[report.issue.className](report.issue, d);\n        }\n        else {\n            if (report.issue.stringify) {\n                text += report.issue.stringify(l.code, d);\n            }\n            else {\n                text += report.issue.message;\n            }\n        }\n        if (level === 0) {\n            text = report_1.isError(report.issue)\n                ? d.errorLine(text)\n                : d.warningLine(text);\n        }\n        const childText = report.children\n            .map(childReport => this.printReportLayer(childReport, level + 1))\n            .join('\\n');\n        return childText.trim() !== ''\n            ? [text, utils_1.tabText(childText, '    - ')].join('\\n')\n            : text;\n    }\n    stringifyReport(report) {\n        return report.children\n            .map(child => this.printReportLayer(child, 0))\n            .join('\\n')\n            .replace(/\\n/g, this.lineEnding);\n    }\n}\nexports.Printer = Printer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../cli/src/printer.ts\n");

/***/ }),

/***/ "../cli/src/report.ts":
/*!****************************!*\
  !*** ../cli/src/report.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst errors_1 = __webpack_require__(/*! ./errors */ \"../cli/src/errors.ts\");\nfunction combineIssues(conclusion, issues) {\n    let isValid = true;\n    const children = issues.map(i => {\n        isValid = isValid && !isError(i);\n        return {\n            issue: i,\n            children: []\n        };\n    });\n    return {\n        issue: isValid ? null : conclusion,\n        children\n    };\n}\nexports.combineIssues = combineIssues;\nfunction isError(issue) {\n    return !(issue instanceof errors_1.BaseWarning)\n        &&\n            (Boolean(issue) || issue instanceof errors_1.BaseError || issue instanceof Error);\n}\nexports.isError = isError;\nfunction mergeReports(conclusion, ...reports) {\n    const res = {\n        issue: null,\n        children: []\n    };\n    let isValid = true;\n    for (const r of reports) {\n        isValid = isValid && !isError(r.issue);\n        res.children = [...res.children, ...r.children];\n    }\n    res.issue = isValid ? null : conclusion;\n    return res;\n}\nexports.mergeReports = mergeReports;\nfunction errorToReport(err) {\n    return {\n        issue: new errors_1.allIssues.IvalidInputError(),\n        children: [{\n                issue: err,\n                children: []\n            }]\n    };\n}\nexports.errorToReport = errorToReport;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2xpL3NyYy9yZXBvcnQudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vY2xpL3NyYy9yZXBvcnQudHM/NmZiMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlV2FybmluZywgQmFzZUVycm9yLCBhbGxJc3N1ZXMgfSBmcm9tICcuL2Vycm9ycyc7XG5cbmV4cG9ydCB0eXBlIElzc3VlID0gKEVycm9yIHwgQmFzZVdhcm5pbmcgfCBudWxsKTtcblxuZXhwb3J0IHR5cGUgUmVwb3J0ID0ge1xuICAgIGlzc3VlOiBJc3N1ZTtcbiAgICBjaGlsZHJlbjogUmVwb3J0W107XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gY29tYmluZUlzc3Vlcyhjb25jbHVzaW9uOiBJc3N1ZSwgaXNzdWVzOiBJc3N1ZVtdKTogUmVwb3J0IHtcbiAgICBsZXQgaXNWYWxpZCA9IHRydWU7XG4gICAgY29uc3QgY2hpbGRyZW4gPSBpc3N1ZXMubWFwKGkgPT4ge1xuICAgICAgICBpc1ZhbGlkID0gaXNWYWxpZCAmJiAhaXNFcnJvcihpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlzc3VlOiBpLFxuICAgICAgICAgICAgY2hpbGRyZW46IFtdXG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXNzdWU6IGlzVmFsaWQgPyBudWxsIDogY29uY2x1c2lvbixcbiAgICAgICAgY2hpbGRyZW5cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Vycm9yKGlzc3VlPzogSXNzdWUpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIShpc3N1ZSBpbnN0YW5jZW9mIEJhc2VXYXJuaW5nKVxuICAgICAgICAmJlxuICAgICAgICAoQm9vbGVhbihpc3N1ZSkgfHwgaXNzdWUgaW5zdGFuY2VvZiBCYXNlRXJyb3IgfHwgaXNzdWUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZVJlcG9ydHMoY29uY2x1c2lvbjogSXNzdWUsIC4uLnJlcG9ydHM6IFJlcG9ydFtdKTogUmVwb3J0IHtcbiAgICBjb25zdCByZXM6IFJlcG9ydCA9IHtcbiAgICAgICAgaXNzdWU6IG51bGwsXG4gICAgICAgIGNoaWxkcmVuOiBbXVxuICAgIH07XG4gICAgbGV0IGlzVmFsaWQgPSB0cnVlO1xuICAgIGZvciAoY29uc3QgciBvZiByZXBvcnRzKSB7XG4gICAgICAgIGlzVmFsaWQgPSBpc1ZhbGlkICYmICFpc0Vycm9yKHIuaXNzdWUpXG4gICAgICAgIHJlcy5jaGlsZHJlbiA9IFsuLi5yZXMuY2hpbGRyZW4sIC4uLnIuY2hpbGRyZW5dO1xuICAgIH1cbiAgICByZXMuaXNzdWUgPSBpc1ZhbGlkID8gbnVsbCA6IGNvbmNsdXNpb247XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVycm9yVG9SZXBvcnQoZXJyOiBFcnJvcik6IFJlcG9ydCB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXNzdWU6IG5ldyBhbGxJc3N1ZXMuSXZhbGlkSW5wdXRFcnJvcigpLFxuICAgICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgICAgIGlzc3VlOiBlcnIsXG4gICAgICAgICAgICBjaGlsZHJlbjogW11cbiAgICAgICAgfV1cbiAgICB9O1xufVxuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWJBO0FBZUE7QUFDQTs7QUFFQTtBQUNBO0FBSkE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVpBO0FBY0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUkE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../cli/src/report.ts\n");

/***/ }),

/***/ "../cli/src/utils.ts":
/*!***************************!*\
  !*** ../cli/src/utils.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction createKebabAlias(str) {\n    if (!/[a-z][A-Z]/.test(str)) {\n        return;\n    }\n    return str.replace(/[a-z][A-Z]/g, subStr => subStr.split('').join('-')).toLowerCase();\n}\nexports.createKebabAlias = createKebabAlias;\nfunction objMap(obj, fn) {\n    const res = {};\n    for (const [name, value] of Object.entries(obj)) {\n        res[name] = fn(value, name);\n    }\n    return res;\n}\nexports.objMap = objMap;\nfunction alignTextMatrix(textMatrix, alignment) {\n    const colSizes = [];\n    textMatrix.forEach(line => {\n        line.forEach((text, index) => colSizes[index] = Math.max(colSizes[index] || 0, text.length));\n    });\n    return textMatrix.map(line => {\n        return line.map((text, index) => {\n            const align = alignment && alignment[index] || 'left';\n            return align === 'left'\n                ? text.padEnd(colSizes[index], ' ')\n                : text.padStart(colSizes[index], ' ');\n        });\n    });\n}\nexports.alignTextMatrix = alignTextMatrix;\nfunction arrayPartition(array, fn) {\n    return [\n        array.filter((item, index, array) => fn(item, index, array)),\n        array.filter((item, index, array) => !fn(item, index, array))\n    ];\n}\nexports.arrayPartition = arrayPartition;\nfunction tabText(text, prefix) {\n    return text.split('\\n')\n        .map(line => prefix + line)\n        .join('\\n');\n}\nexports.tabText = tabText;\nfunction findKeyCollision(keys) {\n    const usedKeys = new Set();\n    for (const key of keys) {\n        if (usedKeys.has(key)) {\n            return key;\n        }\n        usedKeys.add(key);\n    }\n    return null;\n}\nexports.findKeyCollision = findKeyCollision;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2xpL3NyYy91dGlscy50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9jbGkvc3JjL3V0aWxzLnRzP2VjM2EiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUtlYmFiQWxpYXMoc3RyOiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIGlmICghL1thLXpdW0EtWl0vLnRlc3Qoc3RyKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBzdHIucmVwbGFjZSgvW2Etel1bQS1aXS9nLCBzdWJTdHIgPT4gc3ViU3RyLnNwbGl0KCcnKS5qb2luKCctJykpLnRvTG93ZXJDYXNlKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvYmpNYXA8VCwgUj4ob2JqOiBSZWNvcmQ8c3RyaW5nLCBUPiwgZm46IChpdGVtOiBULCBrZXk6IHN0cmluZykgPT4gUik6IFJlY29yZDxzdHJpbmcsIFI+IHtcbiAgICBjb25zdCByZXM6IGFueSA9IHt9O1xuICAgIGZvciAoY29uc3QgW25hbWUsIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhvYmopKSB7XG4gICAgICAgIHJlc1tuYW1lXSA9IGZuKHZhbHVlLCBuYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFsaWduVGV4dE1hdHJpeCh0ZXh0TWF0cml4OiBzdHJpbmdbXVtdLCBhbGlnbm1lbnQ/OiAoJ2xlZnQnIHwgJ3JpZ2h0JylbXSk6IHN0cmluZ1tdW10ge1xuICAgIGNvbnN0IGNvbFNpemVzOiBudW1iZXJbXSA9IFtdO1xuICAgIHRleHRNYXRyaXguZm9yRWFjaChsaW5lID0+IHtcbiAgICAgICAgbGluZS5mb3JFYWNoKCh0ZXh0LCBpbmRleCkgPT4gY29sU2l6ZXNbaW5kZXhdID0gTWF0aC5tYXgoY29sU2l6ZXNbaW5kZXhdIHx8IDAsIHRleHQubGVuZ3RoKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRleHRNYXRyaXgubWFwKGxpbmUgPT4ge1xuICAgICAgICByZXR1cm4gbGluZS5tYXAoKHRleHQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhbGlnbiA9IGFsaWdubWVudCAmJiBhbGlnbm1lbnRbaW5kZXhdIHx8ICdsZWZ0JztcbiAgICAgICAgICAgIHJldHVybiBhbGlnbiA9PT0gJ2xlZnQnXG4gICAgICAgICAgICAgICAgPyB0ZXh0LnBhZEVuZChjb2xTaXplc1tpbmRleF0sICcgJylcbiAgICAgICAgICAgICAgICA6IHRleHQucGFkU3RhcnQoY29sU2l6ZXNbaW5kZXhdLCAnICcpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFycmF5UGFydGl0aW9uPFQ+KGFycmF5OiBUW10sIGZuOiAoaXRlbTogVCwgaW5kZXg6IG51bWJlciwgYXJyYXk6IFRbXSkgPT4gYm9vbGVhbik6IFtUW10sIFRbXV0ge1xuICAgIHJldHVybiBbXG4gICAgICAgIGFycmF5LmZpbHRlcigoaXRlbSwgaW5kZXgsIGFycmF5KSA9PiBmbihpdGVtLCBpbmRleCwgYXJyYXkpKSxcbiAgICAgICAgYXJyYXkuZmlsdGVyKChpdGVtLCBpbmRleCwgYXJyYXkpID0+ICFmbihpdGVtLCBpbmRleCwgYXJyYXkpKVxuICAgIF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0YWJUZXh0KHRleHQ6IHN0cmluZywgcHJlZml4OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB0ZXh0LnNwbGl0KCdcXG4nKVxuICAgICAgICAubWFwKGxpbmUgPT4gcHJlZml4ICsgbGluZSlcbiAgICAgICAgLmpvaW4oJ1xcbicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZEtleUNvbGxpc2lvbihrZXlzOiBzdHJpbmdbXSk6IHN0cmluZyB8IG51bGwge1xuICAgIGNvbnN0IHVzZWRLZXlzID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgICAgICBpZiAodXNlZEtleXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgIH1cbiAgICAgICAgdXNlZEtleXMuYWRkKGtleSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFiQTtBQWVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFUQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../cli/src/utils.ts\n");

/***/ }),

/***/ "./node_modules/ansi-escapes/index.js":
/*!********************************************!*\
  !*** ./node_modules/ansi-escapes/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\nconst ansiEscapes = module.exports;\n// TODO: remove this in the next major version\nmodule.exports.default = ansiEscapes;\n\nconst ESC = '\\u001B[';\nconst OSC = '\\u001B]';\nconst BEL = '\\u0007';\nconst SEP = ';';\nconst isTerminalApp = process.env.TERM_PROGRAM === 'Apple_Terminal';\n\nansiEscapes.cursorTo = (x, y) => {\n\tif (typeof x !== 'number') {\n\t\tthrow new TypeError('The `x` argument is required');\n\t}\n\n\tif (typeof y !== 'number') {\n\t\treturn ESC + (x + 1) + 'G';\n\t}\n\n\treturn ESC + (y + 1) + ';' + (x + 1) + 'H';\n};\n\nansiEscapes.cursorMove = (x, y) => {\n\tif (typeof x !== 'number') {\n\t\tthrow new TypeError('The `x` argument is required');\n\t}\n\n\tlet ret = '';\n\n\tif (x < 0) {\n\t\tret += ESC + (-x) + 'D';\n\t} else if (x > 0) {\n\t\tret += ESC + x + 'C';\n\t}\n\n\tif (y < 0) {\n\t\tret += ESC + (-y) + 'A';\n\t} else if (y > 0) {\n\t\tret += ESC + y + 'B';\n\t}\n\n\treturn ret;\n};\n\nansiEscapes.cursorUp = (count = 1) => ESC + count + 'A';\nansiEscapes.cursorDown = (count = 1) => ESC + count + 'B';\nansiEscapes.cursorForward = (count = 1) => ESC + count + 'C';\nansiEscapes.cursorBackward = (count = 1) => ESC + count + 'D';\n\nansiEscapes.cursorLeft = ESC + 'G';\nansiEscapes.cursorSavePosition = isTerminalApp ? '\\u001B7' : ESC + 's';\nansiEscapes.cursorRestorePosition = isTerminalApp ? '\\u001B8' : ESC + 'u';\nansiEscapes.cursorGetPosition = ESC + '6n';\nansiEscapes.cursorNextLine = ESC + 'E';\nansiEscapes.cursorPrevLine = ESC + 'F';\nansiEscapes.cursorHide = ESC + '?25l';\nansiEscapes.cursorShow = ESC + '?25h';\n\nansiEscapes.eraseLines = count => {\n\tlet clear = '';\n\n\tfor (let i = 0; i < count; i++) {\n\t\tclear += ansiEscapes.eraseLine + (i < count - 1 ? ansiEscapes.cursorUp() : '');\n\t}\n\n\tif (count) {\n\t\tclear += ansiEscapes.cursorLeft;\n\t}\n\n\treturn clear;\n};\n\nansiEscapes.eraseEndLine = ESC + 'K';\nansiEscapes.eraseStartLine = ESC + '1K';\nansiEscapes.eraseLine = ESC + '2K';\nansiEscapes.eraseDown = ESC + 'J';\nansiEscapes.eraseUp = ESC + '1J';\nansiEscapes.eraseScreen = ESC + '2J';\nansiEscapes.scrollUp = ESC + 'S';\nansiEscapes.scrollDown = ESC + 'T';\n\nansiEscapes.clearScreen = '\\u001Bc';\n\nansiEscapes.clearTerminal = process.platform === 'win32' ?\n\t`${ansiEscapes.eraseScreen}${ESC}0f` :\n\t// 1. Erases the screen (Only done in case `2` is not supported)\n\t// 2. Erases the whole screen including scrollback buffer\n\t// 3. Moves cursor to the top-left position\n\t// More info: https://www.real-world-systems.com/docs/ANSIcode.html\n\t`${ansiEscapes.eraseScreen}${ESC}3J${ESC}H`;\n\nansiEscapes.beep = BEL;\n\nansiEscapes.link = (text, url) => {\n\treturn [\n\t\tOSC,\n\t\t'8',\n\t\tSEP,\n\t\tSEP,\n\t\turl,\n\t\tBEL,\n\t\ttext,\n\t\tOSC,\n\t\t'8',\n\t\tSEP,\n\t\tSEP,\n\t\tBEL\n\t].join('');\n};\n\nansiEscapes.image = (buffer, options = {}) => {\n\tlet ret = `${OSC}1337;File=inline=1`;\n\n\tif (options.width) {\n\t\tret += `;width=${options.width}`;\n\t}\n\n\tif (options.height) {\n\t\tret += `;height=${options.height}`;\n\t}\n\n\tif (options.preserveAspectRatio === false) {\n\t\tret += ';preserveAspectRatio=0';\n\t}\n\n\treturn ret + ':' + buffer.toString('base64') + BEL;\n};\n\nansiEscapes.iTerm = {\n\tsetCwd: (cwd = process.cwd()) => `${OSC}50;CurrentDir=${cwd}${BEL}`\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW5zaS1lc2NhcGVzL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fuc2ktZXNjYXBlcy9pbmRleC5qcz8xYThhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IGFuc2lFc2NhcGVzID0gbW9kdWxlLmV4cG9ydHM7XG4vLyBUT0RPOiByZW1vdmUgdGhpcyBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uXG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYW5zaUVzY2FwZXM7XG5cbmNvbnN0IEVTQyA9ICdcXHUwMDFCWyc7XG5jb25zdCBPU0MgPSAnXFx1MDAxQl0nO1xuY29uc3QgQkVMID0gJ1xcdTAwMDcnO1xuY29uc3QgU0VQID0gJzsnO1xuY29uc3QgaXNUZXJtaW5hbEFwcCA9IHByb2Nlc3MuZW52LlRFUk1fUFJPR1JBTSA9PT0gJ0FwcGxlX1Rlcm1pbmFsJztcblxuYW5zaUVzY2FwZXMuY3Vyc29yVG8gPSAoeCwgeSkgPT4ge1xuXHRpZiAodHlwZW9mIHggIT09ICdudW1iZXInKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGB4YCBhcmd1bWVudCBpcyByZXF1aXJlZCcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiB5ICE9PSAnbnVtYmVyJykge1xuXHRcdHJldHVybiBFU0MgKyAoeCArIDEpICsgJ0cnO1xuXHR9XG5cblx0cmV0dXJuIEVTQyArICh5ICsgMSkgKyAnOycgKyAoeCArIDEpICsgJ0gnO1xufTtcblxuYW5zaUVzY2FwZXMuY3Vyc29yTW92ZSA9ICh4LCB5KSA9PiB7XG5cdGlmICh0eXBlb2YgeCAhPT0gJ251bWJlcicpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgYHhgIGFyZ3VtZW50IGlzIHJlcXVpcmVkJyk7XG5cdH1cblxuXHRsZXQgcmV0ID0gJyc7XG5cblx0aWYgKHggPCAwKSB7XG5cdFx0cmV0ICs9IEVTQyArICgteCkgKyAnRCc7XG5cdH0gZWxzZSBpZiAoeCA+IDApIHtcblx0XHRyZXQgKz0gRVNDICsgeCArICdDJztcblx0fVxuXG5cdGlmICh5IDwgMCkge1xuXHRcdHJldCArPSBFU0MgKyAoLXkpICsgJ0EnO1xuXHR9IGVsc2UgaWYgKHkgPiAwKSB7XG5cdFx0cmV0ICs9IEVTQyArIHkgKyAnQic7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuYW5zaUVzY2FwZXMuY3Vyc29yVXAgPSAoY291bnQgPSAxKSA9PiBFU0MgKyBjb3VudCArICdBJztcbmFuc2lFc2NhcGVzLmN1cnNvckRvd24gPSAoY291bnQgPSAxKSA9PiBFU0MgKyBjb3VudCArICdCJztcbmFuc2lFc2NhcGVzLmN1cnNvckZvcndhcmQgPSAoY291bnQgPSAxKSA9PiBFU0MgKyBjb3VudCArICdDJztcbmFuc2lFc2NhcGVzLmN1cnNvckJhY2t3YXJkID0gKGNvdW50ID0gMSkgPT4gRVNDICsgY291bnQgKyAnRCc7XG5cbmFuc2lFc2NhcGVzLmN1cnNvckxlZnQgPSBFU0MgKyAnRyc7XG5hbnNpRXNjYXBlcy5jdXJzb3JTYXZlUG9zaXRpb24gPSBpc1Rlcm1pbmFsQXBwID8gJ1xcdTAwMUI3JyA6IEVTQyArICdzJztcbmFuc2lFc2NhcGVzLmN1cnNvclJlc3RvcmVQb3NpdGlvbiA9IGlzVGVybWluYWxBcHAgPyAnXFx1MDAxQjgnIDogRVNDICsgJ3UnO1xuYW5zaUVzY2FwZXMuY3Vyc29yR2V0UG9zaXRpb24gPSBFU0MgKyAnNm4nO1xuYW5zaUVzY2FwZXMuY3Vyc29yTmV4dExpbmUgPSBFU0MgKyAnRSc7XG5hbnNpRXNjYXBlcy5jdXJzb3JQcmV2TGluZSA9IEVTQyArICdGJztcbmFuc2lFc2NhcGVzLmN1cnNvckhpZGUgPSBFU0MgKyAnPzI1bCc7XG5hbnNpRXNjYXBlcy5jdXJzb3JTaG93ID0gRVNDICsgJz8yNWgnO1xuXG5hbnNpRXNjYXBlcy5lcmFzZUxpbmVzID0gY291bnQgPT4ge1xuXHRsZXQgY2xlYXIgPSAnJztcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcblx0XHRjbGVhciArPSBhbnNpRXNjYXBlcy5lcmFzZUxpbmUgKyAoaSA8IGNvdW50IC0gMSA/IGFuc2lFc2NhcGVzLmN1cnNvclVwKCkgOiAnJyk7XG5cdH1cblxuXHRpZiAoY291bnQpIHtcblx0XHRjbGVhciArPSBhbnNpRXNjYXBlcy5jdXJzb3JMZWZ0O1xuXHR9XG5cblx0cmV0dXJuIGNsZWFyO1xufTtcblxuYW5zaUVzY2FwZXMuZXJhc2VFbmRMaW5lID0gRVNDICsgJ0snO1xuYW5zaUVzY2FwZXMuZXJhc2VTdGFydExpbmUgPSBFU0MgKyAnMUsnO1xuYW5zaUVzY2FwZXMuZXJhc2VMaW5lID0gRVNDICsgJzJLJztcbmFuc2lFc2NhcGVzLmVyYXNlRG93biA9IEVTQyArICdKJztcbmFuc2lFc2NhcGVzLmVyYXNlVXAgPSBFU0MgKyAnMUonO1xuYW5zaUVzY2FwZXMuZXJhc2VTY3JlZW4gPSBFU0MgKyAnMkonO1xuYW5zaUVzY2FwZXMuc2Nyb2xsVXAgPSBFU0MgKyAnUyc7XG5hbnNpRXNjYXBlcy5zY3JvbGxEb3duID0gRVNDICsgJ1QnO1xuXG5hbnNpRXNjYXBlcy5jbGVhclNjcmVlbiA9ICdcXHUwMDFCYyc7XG5cbmFuc2lFc2NhcGVzLmNsZWFyVGVybWluYWwgPSBwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInID9cblx0YCR7YW5zaUVzY2FwZXMuZXJhc2VTY3JlZW59JHtFU0N9MGZgIDpcblx0Ly8gMS4gRXJhc2VzIHRoZSBzY3JlZW4gKE9ubHkgZG9uZSBpbiBjYXNlIGAyYCBpcyBub3Qgc3VwcG9ydGVkKVxuXHQvLyAyLiBFcmFzZXMgdGhlIHdob2xlIHNjcmVlbiBpbmNsdWRpbmcgc2Nyb2xsYmFjayBidWZmZXJcblx0Ly8gMy4gTW92ZXMgY3Vyc29yIHRvIHRoZSB0b3AtbGVmdCBwb3NpdGlvblxuXHQvLyBNb3JlIGluZm86IGh0dHBzOi8vd3d3LnJlYWwtd29ybGQtc3lzdGVtcy5jb20vZG9jcy9BTlNJY29kZS5odG1sXG5cdGAke2Fuc2lFc2NhcGVzLmVyYXNlU2NyZWVufSR7RVNDfTNKJHtFU0N9SGA7XG5cbmFuc2lFc2NhcGVzLmJlZXAgPSBCRUw7XG5cbmFuc2lFc2NhcGVzLmxpbmsgPSAodGV4dCwgdXJsKSA9PiB7XG5cdHJldHVybiBbXG5cdFx0T1NDLFxuXHRcdCc4Jyxcblx0XHRTRVAsXG5cdFx0U0VQLFxuXHRcdHVybCxcblx0XHRCRUwsXG5cdFx0dGV4dCxcblx0XHRPU0MsXG5cdFx0JzgnLFxuXHRcdFNFUCxcblx0XHRTRVAsXG5cdFx0QkVMXG5cdF0uam9pbignJyk7XG59O1xuXG5hbnNpRXNjYXBlcy5pbWFnZSA9IChidWZmZXIsIG9wdGlvbnMgPSB7fSkgPT4ge1xuXHRsZXQgcmV0ID0gYCR7T1NDfTEzMzc7RmlsZT1pbmxpbmU9MWA7XG5cblx0aWYgKG9wdGlvbnMud2lkdGgpIHtcblx0XHRyZXQgKz0gYDt3aWR0aD0ke29wdGlvbnMud2lkdGh9YDtcblx0fVxuXG5cdGlmIChvcHRpb25zLmhlaWdodCkge1xuXHRcdHJldCArPSBgO2hlaWdodD0ke29wdGlvbnMuaGVpZ2h0fWA7XG5cdH1cblxuXHRpZiAob3B0aW9ucy5wcmVzZXJ2ZUFzcGVjdFJhdGlvID09PSBmYWxzZSkge1xuXHRcdHJldCArPSAnO3ByZXNlcnZlQXNwZWN0UmF0aW89MCc7XG5cdH1cblxuXHRyZXR1cm4gcmV0ICsgJzonICsgYnVmZmVyLnRvU3RyaW5nKCdiYXNlNjQnKSArIEJFTDtcbn07XG5cbmFuc2lFc2NhcGVzLmlUZXJtID0ge1xuXHRzZXRDd2Q6IChjd2QgPSBwcm9jZXNzLmN3ZCgpKSA9PiBgJHtPU0N9NTA7Q3VycmVudERpcj0ke2N3ZH0ke0JFTH1gXG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/ansi-escapes/index.js\n");

/***/ }),

/***/ "./node_modules/ansi-styles/index.js":
/*!*******************************************!*\
  !*** ./node_modules/ansi-styles/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\nconst colorConvert = __webpack_require__(/*! color-convert */ \"./node_modules/color-convert/index.js\");\n\nconst wrapAnsi16 = (fn, offset) => function () {\n\tconst code = fn.apply(colorConvert, arguments);\n\treturn `\\u001B[${code + offset}m`;\n};\n\nconst wrapAnsi256 = (fn, offset) => function () {\n\tconst code = fn.apply(colorConvert, arguments);\n\treturn `\\u001B[${38 + offset};5;${code}m`;\n};\n\nconst wrapAnsi16m = (fn, offset) => function () {\n\tconst rgb = fn.apply(colorConvert, arguments);\n\treturn `\\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;\n};\n\nfunction assembleStyles() {\n\tconst codes = new Map();\n\tconst styles = {\n\t\tmodifier: {\n\t\t\treset: [0, 0],\n\t\t\t// 21 isn't widely supported and 22 does the same thing\n\t\t\tbold: [1, 22],\n\t\t\tdim: [2, 22],\n\t\t\titalic: [3, 23],\n\t\t\tunderline: [4, 24],\n\t\t\tinverse: [7, 27],\n\t\t\thidden: [8, 28],\n\t\t\tstrikethrough: [9, 29]\n\t\t},\n\t\tcolor: {\n\t\t\tblack: [30, 39],\n\t\t\tred: [31, 39],\n\t\t\tgreen: [32, 39],\n\t\t\tyellow: [33, 39],\n\t\t\tblue: [34, 39],\n\t\t\tmagenta: [35, 39],\n\t\t\tcyan: [36, 39],\n\t\t\twhite: [37, 39],\n\t\t\tgray: [90, 39],\n\n\t\t\t// Bright color\n\t\t\tredBright: [91, 39],\n\t\t\tgreenBright: [92, 39],\n\t\t\tyellowBright: [93, 39],\n\t\t\tblueBright: [94, 39],\n\t\t\tmagentaBright: [95, 39],\n\t\t\tcyanBright: [96, 39],\n\t\t\twhiteBright: [97, 39]\n\t\t},\n\t\tbgColor: {\n\t\t\tbgBlack: [40, 49],\n\t\t\tbgRed: [41, 49],\n\t\t\tbgGreen: [42, 49],\n\t\t\tbgYellow: [43, 49],\n\t\t\tbgBlue: [44, 49],\n\t\t\tbgMagenta: [45, 49],\n\t\t\tbgCyan: [46, 49],\n\t\t\tbgWhite: [47, 49],\n\n\t\t\t// Bright color\n\t\t\tbgBlackBright: [100, 49],\n\t\t\tbgRedBright: [101, 49],\n\t\t\tbgGreenBright: [102, 49],\n\t\t\tbgYellowBright: [103, 49],\n\t\t\tbgBlueBright: [104, 49],\n\t\t\tbgMagentaBright: [105, 49],\n\t\t\tbgCyanBright: [106, 49],\n\t\t\tbgWhiteBright: [107, 49]\n\t\t}\n\t};\n\n\t// Fix humans\n\tstyles.color.grey = styles.color.gray;\n\n\tfor (const groupName of Object.keys(styles)) {\n\t\tconst group = styles[groupName];\n\n\t\tfor (const styleName of Object.keys(group)) {\n\t\t\tconst style = group[styleName];\n\n\t\t\tstyles[styleName] = {\n\t\t\t\topen: `\\u001B[${style[0]}m`,\n\t\t\t\tclose: `\\u001B[${style[1]}m`\n\t\t\t};\n\n\t\t\tgroup[styleName] = styles[styleName];\n\n\t\t\tcodes.set(style[0], style[1]);\n\t\t}\n\n\t\tObject.defineProperty(styles, groupName, {\n\t\t\tvalue: group,\n\t\t\tenumerable: false\n\t\t});\n\n\t\tObject.defineProperty(styles, 'codes', {\n\t\t\tvalue: codes,\n\t\t\tenumerable: false\n\t\t});\n\t}\n\n\tconst ansi2ansi = n => n;\n\tconst rgb2rgb = (r, g, b) => [r, g, b];\n\n\tstyles.color.close = '\\u001B[39m';\n\tstyles.bgColor.close = '\\u001B[49m';\n\n\tstyles.color.ansi = {\n\t\tansi: wrapAnsi16(ansi2ansi, 0)\n\t};\n\tstyles.color.ansi256 = {\n\t\tansi256: wrapAnsi256(ansi2ansi, 0)\n\t};\n\tstyles.color.ansi16m = {\n\t\trgb: wrapAnsi16m(rgb2rgb, 0)\n\t};\n\n\tstyles.bgColor.ansi = {\n\t\tansi: wrapAnsi16(ansi2ansi, 10)\n\t};\n\tstyles.bgColor.ansi256 = {\n\t\tansi256: wrapAnsi256(ansi2ansi, 10)\n\t};\n\tstyles.bgColor.ansi16m = {\n\t\trgb: wrapAnsi16m(rgb2rgb, 10)\n\t};\n\n\tfor (let key of Object.keys(colorConvert)) {\n\t\tif (typeof colorConvert[key] !== 'object') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst suite = colorConvert[key];\n\n\t\tif (key === 'ansi16') {\n\t\t\tkey = 'ansi';\n\t\t}\n\n\t\tif ('ansi16' in suite) {\n\t\t\tstyles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);\n\t\t\tstyles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);\n\t\t}\n\n\t\tif ('ansi256' in suite) {\n\t\t\tstyles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);\n\t\t\tstyles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);\n\t\t}\n\n\t\tif ('rgb' in suite) {\n\t\t\tstyles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);\n\t\t\tstyles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);\n\t\t}\n\t}\n\n\treturn styles;\n}\n\n// Make the export immutable\nObject.defineProperty(module, 'exports', {\n\tenumerable: true,\n\tget: assembleStyles\n});\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW5zaS1zdHlsZXMvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW5zaS1zdHlsZXMvaW5kZXguanM/NjBhYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBjb2xvckNvbnZlcnQgPSByZXF1aXJlKCdjb2xvci1jb252ZXJ0Jyk7XG5cbmNvbnN0IHdyYXBBbnNpMTYgPSAoZm4sIG9mZnNldCkgPT4gZnVuY3Rpb24gKCkge1xuXHRjb25zdCBjb2RlID0gZm4uYXBwbHkoY29sb3JDb252ZXJ0LCBhcmd1bWVudHMpO1xuXHRyZXR1cm4gYFxcdTAwMUJbJHtjb2RlICsgb2Zmc2V0fW1gO1xufTtcblxuY29uc3Qgd3JhcEFuc2kyNTYgPSAoZm4sIG9mZnNldCkgPT4gZnVuY3Rpb24gKCkge1xuXHRjb25zdCBjb2RlID0gZm4uYXBwbHkoY29sb3JDb252ZXJ0LCBhcmd1bWVudHMpO1xuXHRyZXR1cm4gYFxcdTAwMUJbJHszOCArIG9mZnNldH07NTske2NvZGV9bWA7XG59O1xuXG5jb25zdCB3cmFwQW5zaTE2bSA9IChmbiwgb2Zmc2V0KSA9PiBmdW5jdGlvbiAoKSB7XG5cdGNvbnN0IHJnYiA9IGZuLmFwcGx5KGNvbG9yQ29udmVydCwgYXJndW1lbnRzKTtcblx0cmV0dXJuIGBcXHUwMDFCWyR7MzggKyBvZmZzZXR9OzI7JHtyZ2JbMF19OyR7cmdiWzFdfTske3JnYlsyXX1tYDtcbn07XG5cbmZ1bmN0aW9uIGFzc2VtYmxlU3R5bGVzKCkge1xuXHRjb25zdCBjb2RlcyA9IG5ldyBNYXAoKTtcblx0Y29uc3Qgc3R5bGVzID0ge1xuXHRcdG1vZGlmaWVyOiB7XG5cdFx0XHRyZXNldDogWzAsIDBdLFxuXHRcdFx0Ly8gMjEgaXNuJ3Qgd2lkZWx5IHN1cHBvcnRlZCBhbmQgMjIgZG9lcyB0aGUgc2FtZSB0aGluZ1xuXHRcdFx0Ym9sZDogWzEsIDIyXSxcblx0XHRcdGRpbTogWzIsIDIyXSxcblx0XHRcdGl0YWxpYzogWzMsIDIzXSxcblx0XHRcdHVuZGVybGluZTogWzQsIDI0XSxcblx0XHRcdGludmVyc2U6IFs3LCAyN10sXG5cdFx0XHRoaWRkZW46IFs4LCAyOF0sXG5cdFx0XHRzdHJpa2V0aHJvdWdoOiBbOSwgMjldXG5cdFx0fSxcblx0XHRjb2xvcjoge1xuXHRcdFx0YmxhY2s6IFszMCwgMzldLFxuXHRcdFx0cmVkOiBbMzEsIDM5XSxcblx0XHRcdGdyZWVuOiBbMzIsIDM5XSxcblx0XHRcdHllbGxvdzogWzMzLCAzOV0sXG5cdFx0XHRibHVlOiBbMzQsIDM5XSxcblx0XHRcdG1hZ2VudGE6IFszNSwgMzldLFxuXHRcdFx0Y3lhbjogWzM2LCAzOV0sXG5cdFx0XHR3aGl0ZTogWzM3LCAzOV0sXG5cdFx0XHRncmF5OiBbOTAsIDM5XSxcblxuXHRcdFx0Ly8gQnJpZ2h0IGNvbG9yXG5cdFx0XHRyZWRCcmlnaHQ6IFs5MSwgMzldLFxuXHRcdFx0Z3JlZW5CcmlnaHQ6IFs5MiwgMzldLFxuXHRcdFx0eWVsbG93QnJpZ2h0OiBbOTMsIDM5XSxcblx0XHRcdGJsdWVCcmlnaHQ6IFs5NCwgMzldLFxuXHRcdFx0bWFnZW50YUJyaWdodDogWzk1LCAzOV0sXG5cdFx0XHRjeWFuQnJpZ2h0OiBbOTYsIDM5XSxcblx0XHRcdHdoaXRlQnJpZ2h0OiBbOTcsIDM5XVxuXHRcdH0sXG5cdFx0YmdDb2xvcjoge1xuXHRcdFx0YmdCbGFjazogWzQwLCA0OV0sXG5cdFx0XHRiZ1JlZDogWzQxLCA0OV0sXG5cdFx0XHRiZ0dyZWVuOiBbNDIsIDQ5XSxcblx0XHRcdGJnWWVsbG93OiBbNDMsIDQ5XSxcblx0XHRcdGJnQmx1ZTogWzQ0LCA0OV0sXG5cdFx0XHRiZ01hZ2VudGE6IFs0NSwgNDldLFxuXHRcdFx0YmdDeWFuOiBbNDYsIDQ5XSxcblx0XHRcdGJnV2hpdGU6IFs0NywgNDldLFxuXG5cdFx0XHQvLyBCcmlnaHQgY29sb3Jcblx0XHRcdGJnQmxhY2tCcmlnaHQ6IFsxMDAsIDQ5XSxcblx0XHRcdGJnUmVkQnJpZ2h0OiBbMTAxLCA0OV0sXG5cdFx0XHRiZ0dyZWVuQnJpZ2h0OiBbMTAyLCA0OV0sXG5cdFx0XHRiZ1llbGxvd0JyaWdodDogWzEwMywgNDldLFxuXHRcdFx0YmdCbHVlQnJpZ2h0OiBbMTA0LCA0OV0sXG5cdFx0XHRiZ01hZ2VudGFCcmlnaHQ6IFsxMDUsIDQ5XSxcblx0XHRcdGJnQ3lhbkJyaWdodDogWzEwNiwgNDldLFxuXHRcdFx0YmdXaGl0ZUJyaWdodDogWzEwNywgNDldXG5cdFx0fVxuXHR9O1xuXG5cdC8vIEZpeCBodW1hbnNcblx0c3R5bGVzLmNvbG9yLmdyZXkgPSBzdHlsZXMuY29sb3IuZ3JheTtcblxuXHRmb3IgKGNvbnN0IGdyb3VwTmFtZSBvZiBPYmplY3Qua2V5cyhzdHlsZXMpKSB7XG5cdFx0Y29uc3QgZ3JvdXAgPSBzdHlsZXNbZ3JvdXBOYW1lXTtcblxuXHRcdGZvciAoY29uc3Qgc3R5bGVOYW1lIG9mIE9iamVjdC5rZXlzKGdyb3VwKSkge1xuXHRcdFx0Y29uc3Qgc3R5bGUgPSBncm91cFtzdHlsZU5hbWVdO1xuXG5cdFx0XHRzdHlsZXNbc3R5bGVOYW1lXSA9IHtcblx0XHRcdFx0b3BlbjogYFxcdTAwMUJbJHtzdHlsZVswXX1tYCxcblx0XHRcdFx0Y2xvc2U6IGBcXHUwMDFCWyR7c3R5bGVbMV19bWBcblx0XHRcdH07XG5cblx0XHRcdGdyb3VwW3N0eWxlTmFtZV0gPSBzdHlsZXNbc3R5bGVOYW1lXTtcblxuXHRcdFx0Y29kZXMuc2V0KHN0eWxlWzBdLCBzdHlsZVsxXSk7XG5cdFx0fVxuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHN0eWxlcywgZ3JvdXBOYW1lLCB7XG5cdFx0XHR2YWx1ZTogZ3JvdXAsXG5cdFx0XHRlbnVtZXJhYmxlOiBmYWxzZVxuXHRcdH0pO1xuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHN0eWxlcywgJ2NvZGVzJywge1xuXHRcdFx0dmFsdWU6IGNvZGVzLFxuXHRcdFx0ZW51bWVyYWJsZTogZmFsc2Vcblx0XHR9KTtcblx0fVxuXG5cdGNvbnN0IGFuc2kyYW5zaSA9IG4gPT4gbjtcblx0Y29uc3QgcmdiMnJnYiA9IChyLCBnLCBiKSA9PiBbciwgZywgYl07XG5cblx0c3R5bGVzLmNvbG9yLmNsb3NlID0gJ1xcdTAwMUJbMzltJztcblx0c3R5bGVzLmJnQ29sb3IuY2xvc2UgPSAnXFx1MDAxQls0OW0nO1xuXG5cdHN0eWxlcy5jb2xvci5hbnNpID0ge1xuXHRcdGFuc2k6IHdyYXBBbnNpMTYoYW5zaTJhbnNpLCAwKVxuXHR9O1xuXHRzdHlsZXMuY29sb3IuYW5zaTI1NiA9IHtcblx0XHRhbnNpMjU2OiB3cmFwQW5zaTI1NihhbnNpMmFuc2ksIDApXG5cdH07XG5cdHN0eWxlcy5jb2xvci5hbnNpMTZtID0ge1xuXHRcdHJnYjogd3JhcEFuc2kxNm0ocmdiMnJnYiwgMClcblx0fTtcblxuXHRzdHlsZXMuYmdDb2xvci5hbnNpID0ge1xuXHRcdGFuc2k6IHdyYXBBbnNpMTYoYW5zaTJhbnNpLCAxMClcblx0fTtcblx0c3R5bGVzLmJnQ29sb3IuYW5zaTI1NiA9IHtcblx0XHRhbnNpMjU2OiB3cmFwQW5zaTI1NihhbnNpMmFuc2ksIDEwKVxuXHR9O1xuXHRzdHlsZXMuYmdDb2xvci5hbnNpMTZtID0ge1xuXHRcdHJnYjogd3JhcEFuc2kxNm0ocmdiMnJnYiwgMTApXG5cdH07XG5cblx0Zm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKGNvbG9yQ29udmVydCkpIHtcblx0XHRpZiAodHlwZW9mIGNvbG9yQ29udmVydFtrZXldICE9PSAnb2JqZWN0Jykge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29uc3Qgc3VpdGUgPSBjb2xvckNvbnZlcnRba2V5XTtcblxuXHRcdGlmIChrZXkgPT09ICdhbnNpMTYnKSB7XG5cdFx0XHRrZXkgPSAnYW5zaSc7XG5cdFx0fVxuXG5cdFx0aWYgKCdhbnNpMTYnIGluIHN1aXRlKSB7XG5cdFx0XHRzdHlsZXMuY29sb3IuYW5zaVtrZXldID0gd3JhcEFuc2kxNihzdWl0ZS5hbnNpMTYsIDApO1xuXHRcdFx0c3R5bGVzLmJnQ29sb3IuYW5zaVtrZXldID0gd3JhcEFuc2kxNihzdWl0ZS5hbnNpMTYsIDEwKTtcblx0XHR9XG5cblx0XHRpZiAoJ2Fuc2kyNTYnIGluIHN1aXRlKSB7XG5cdFx0XHRzdHlsZXMuY29sb3IuYW5zaTI1NltrZXldID0gd3JhcEFuc2kyNTYoc3VpdGUuYW5zaTI1NiwgMCk7XG5cdFx0XHRzdHlsZXMuYmdDb2xvci5hbnNpMjU2W2tleV0gPSB3cmFwQW5zaTI1NihzdWl0ZS5hbnNpMjU2LCAxMCk7XG5cdFx0fVxuXG5cdFx0aWYgKCdyZ2InIGluIHN1aXRlKSB7XG5cdFx0XHRzdHlsZXMuY29sb3IuYW5zaTE2bVtrZXldID0gd3JhcEFuc2kxNm0oc3VpdGUucmdiLCAwKTtcblx0XHRcdHN0eWxlcy5iZ0NvbG9yLmFuc2kxNm1ba2V5XSA9IHdyYXBBbnNpMTZtKHN1aXRlLnJnYiwgMTApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbi8vIE1ha2UgdGhlIGV4cG9ydCBpbW11dGFibGVcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsICdleHBvcnRzJywge1xuXHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRnZXQ6IGFzc2VtYmxlU3R5bGVzXG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/ansi-styles/index.js\n");

/***/ }),

/***/ "./node_modules/chalk/index.js":
/*!*************************************!*\
  !*** ./node_modules/chalk/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\nconst escapeStringRegexp = __webpack_require__(/*! escape-string-regexp */ \"./node_modules/escape-string-regexp/index.js\");\nconst ansiStyles = __webpack_require__(/*! ansi-styles */ \"./node_modules/ansi-styles/index.js\");\nconst stdoutColor = __webpack_require__(/*! supports-color */ \"./node_modules/supports-color/browser.js\").stdout;\n\nconst template = __webpack_require__(/*! ./templates.js */ \"./node_modules/chalk/templates.js\");\n\nconst isSimpleWindowsTerm = process.platform === 'win32' && !(process.env.TERM || '').toLowerCase().startsWith('xterm');\n\n// `supportsColor.level` → `ansiStyles.color[name]` mapping\nconst levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m'];\n\n// `color-convert` models to exclude from the Chalk API due to conflicts and such\nconst skipModels = new Set(['gray']);\n\nconst styles = Object.create(null);\n\nfunction applyOptions(obj, options) {\n\toptions = options || {};\n\n\t// Detect level if not set manually\n\tconst scLevel = stdoutColor ? stdoutColor.level : 0;\n\tobj.level = options.level === undefined ? scLevel : options.level;\n\tobj.enabled = 'enabled' in options ? options.enabled : obj.level > 0;\n}\n\nfunction Chalk(options) {\n\t// We check for this.template here since calling `chalk.constructor()`\n\t// by itself will have a `this` of a previously constructed chalk object\n\tif (!this || !(this instanceof Chalk) || this.template) {\n\t\tconst chalk = {};\n\t\tapplyOptions(chalk, options);\n\n\t\tchalk.template = function () {\n\t\t\tconst args = [].slice.call(arguments);\n\t\t\treturn chalkTag.apply(null, [chalk.template].concat(args));\n\t\t};\n\n\t\tObject.setPrototypeOf(chalk, Chalk.prototype);\n\t\tObject.setPrototypeOf(chalk.template, chalk);\n\n\t\tchalk.template.constructor = Chalk;\n\n\t\treturn chalk.template;\n\t}\n\n\tapplyOptions(this, options);\n}\n\n// Use bright blue on Windows as the normal blue color is illegible\nif (isSimpleWindowsTerm) {\n\tansiStyles.blue.open = '\\u001B[94m';\n}\n\nfor (const key of Object.keys(ansiStyles)) {\n\tansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');\n\n\tstyles[key] = {\n\t\tget() {\n\t\t\tconst codes = ansiStyles[key];\n\t\t\treturn build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);\n\t\t}\n\t};\n}\n\nstyles.visible = {\n\tget() {\n\t\treturn build.call(this, this._styles || [], true, 'visible');\n\t}\n};\n\nansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), 'g');\nfor (const model of Object.keys(ansiStyles.color.ansi)) {\n\tif (skipModels.has(model)) {\n\t\tcontinue;\n\t}\n\n\tstyles[model] = {\n\t\tget() {\n\t\t\tconst level = this.level;\n\t\t\treturn function () {\n\t\t\t\tconst open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);\n\t\t\t\tconst codes = {\n\t\t\t\t\topen,\n\t\t\t\t\tclose: ansiStyles.color.close,\n\t\t\t\t\tcloseRe: ansiStyles.color.closeRe\n\t\t\t\t};\n\t\t\t\treturn build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);\n\t\t\t};\n\t\t}\n\t};\n}\n\nansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), 'g');\nfor (const model of Object.keys(ansiStyles.bgColor.ansi)) {\n\tif (skipModels.has(model)) {\n\t\tcontinue;\n\t}\n\n\tconst bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n\tstyles[bgModel] = {\n\t\tget() {\n\t\t\tconst level = this.level;\n\t\t\treturn function () {\n\t\t\t\tconst open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);\n\t\t\t\tconst codes = {\n\t\t\t\t\topen,\n\t\t\t\t\tclose: ansiStyles.bgColor.close,\n\t\t\t\t\tcloseRe: ansiStyles.bgColor.closeRe\n\t\t\t\t};\n\t\t\t\treturn build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);\n\t\t\t};\n\t\t}\n\t};\n}\n\nconst proto = Object.defineProperties(() => {}, styles);\n\nfunction build(_styles, _empty, key) {\n\tconst builder = function () {\n\t\treturn applyStyle.apply(builder, arguments);\n\t};\n\n\tbuilder._styles = _styles;\n\tbuilder._empty = _empty;\n\n\tconst self = this;\n\n\tObject.defineProperty(builder, 'level', {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn self.level;\n\t\t},\n\t\tset(level) {\n\t\t\tself.level = level;\n\t\t}\n\t});\n\n\tObject.defineProperty(builder, 'enabled', {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn self.enabled;\n\t\t},\n\t\tset(enabled) {\n\t\t\tself.enabled = enabled;\n\t\t}\n\t});\n\n\t// See below for fix regarding invisible grey/dim combination on Windows\n\tbuilder.hasGrey = this.hasGrey || key === 'gray' || key === 'grey';\n\n\t// `__proto__` is used because we must return a function, but there is\n\t// no way to create a function with a different prototype\n\tbuilder.__proto__ = proto; // eslint-disable-line no-proto\n\n\treturn builder;\n}\n\nfunction applyStyle() {\n\t// Support varags, but simply cast to string in case there's only one arg\n\tconst args = arguments;\n\tconst argsLen = args.length;\n\tlet str = String(arguments[0]);\n\n\tif (argsLen === 0) {\n\t\treturn '';\n\t}\n\n\tif (argsLen > 1) {\n\t\t// Don't slice `arguments`, it prevents V8 optimizations\n\t\tfor (let a = 1; a < argsLen; a++) {\n\t\t\tstr += ' ' + args[a];\n\t\t}\n\t}\n\n\tif (!this.enabled || this.level <= 0 || !str) {\n\t\treturn this._empty ? '' : str;\n\t}\n\n\t// Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,\n\t// see https://github.com/chalk/chalk/issues/58\n\t// If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.\n\tconst originalDim = ansiStyles.dim.open;\n\tif (isSimpleWindowsTerm && this.hasGrey) {\n\t\tansiStyles.dim.open = '';\n\t}\n\n\tfor (const code of this._styles.slice().reverse()) {\n\t\t// Replace any instances already present with a re-opening code\n\t\t// otherwise only the part of the string until said closing code\n\t\t// will be colored, and the rest will simply be 'plain'.\n\t\tstr = code.open + str.replace(code.closeRe, code.open) + code.close;\n\n\t\t// Close the styling before a linebreak and reopen\n\t\t// after next line to fix a bleed issue on macOS\n\t\t// https://github.com/chalk/chalk/pull/92\n\t\tstr = str.replace(/\\r?\\n/g, `${code.close}$&${code.open}`);\n\t}\n\n\t// Reset the original `dim` if we changed it to work around the Windows dimmed gray issue\n\tansiStyles.dim.open = originalDim;\n\n\treturn str;\n}\n\nfunction chalkTag(chalk, strings) {\n\tif (!Array.isArray(strings)) {\n\t\t// If chalk() was called by itself or with a string,\n\t\t// return the string itself as a string.\n\t\treturn [].slice.call(arguments, 1).join(' ');\n\t}\n\n\tconst args = [].slice.call(arguments, 2);\n\tconst parts = [strings.raw[0]];\n\n\tfor (let i = 1; i < strings.length; i++) {\n\t\tparts.push(String(args[i - 1]).replace(/[{}\\\\]/g, '\\\\$&'));\n\t\tparts.push(String(strings.raw[i]));\n\t}\n\n\treturn template(chalk, parts.join(''));\n}\n\nObject.defineProperties(Chalk.prototype, styles);\n\nmodule.exports = Chalk(); // eslint-disable-line new-cap\nmodule.exports.supportsColor = stdoutColor;\nmodule.exports.default = module.exports; // For TypeScript\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/chalk/index.js\n");

/***/ }),

/***/ "./node_modules/chalk/templates.js":
/*!*****************************************!*\
  !*** ./node_modules/chalk/templates.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst TEMPLATE_REGEX = /(?:\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\nconst STYLE_REGEX = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\nconst STRING_REGEX = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\nconst ESCAPE_REGEX = /\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.)|([^\\\\])/gi;\n\nconst ESCAPES = new Map([\n\t['n', '\\n'],\n\t['r', '\\r'],\n\t['t', '\\t'],\n\t['b', '\\b'],\n\t['f', '\\f'],\n\t['v', '\\v'],\n\t['0', '\\0'],\n\t['\\\\', '\\\\'],\n\t['e', '\\u001B'],\n\t['a', '\\u0007']\n]);\n\nfunction unescape(c) {\n\tif ((c[0] === 'u' && c.length === 5) || (c[0] === 'x' && c.length === 3)) {\n\t\treturn String.fromCharCode(parseInt(c.slice(1), 16));\n\t}\n\n\treturn ESCAPES.get(c) || c;\n}\n\nfunction parseArguments(name, args) {\n\tconst results = [];\n\tconst chunks = args.trim().split(/\\s*,\\s*/g);\n\tlet matches;\n\n\tfor (const chunk of chunks) {\n\t\tif (!isNaN(chunk)) {\n\t\t\tresults.push(Number(chunk));\n\t\t} else if ((matches = chunk.match(STRING_REGEX))) {\n\t\t\tresults.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr) => escape ? unescape(escape) : chr));\n\t\t} else {\n\t\t\tthrow new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction parseStyle(style) {\n\tSTYLE_REGEX.lastIndex = 0;\n\n\tconst results = [];\n\tlet matches;\n\n\twhile ((matches = STYLE_REGEX.exec(style)) !== null) {\n\t\tconst name = matches[1];\n\n\t\tif (matches[2]) {\n\t\t\tconst args = parseArguments(name, matches[2]);\n\t\t\tresults.push([name].concat(args));\n\t\t} else {\n\t\t\tresults.push([name]);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction buildStyle(chalk, styles) {\n\tconst enabled = {};\n\n\tfor (const layer of styles) {\n\t\tfor (const style of layer.styles) {\n\t\t\tenabled[style[0]] = layer.inverse ? null : style.slice(1);\n\t\t}\n\t}\n\n\tlet current = chalk;\n\tfor (const styleName of Object.keys(enabled)) {\n\t\tif (Array.isArray(enabled[styleName])) {\n\t\t\tif (!(styleName in current)) {\n\t\t\t\tthrow new Error(`Unknown Chalk style: ${styleName}`);\n\t\t\t}\n\n\t\t\tif (enabled[styleName].length > 0) {\n\t\t\t\tcurrent = current[styleName].apply(current, enabled[styleName]);\n\t\t\t} else {\n\t\t\t\tcurrent = current[styleName];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn current;\n}\n\nmodule.exports = (chalk, tmp) => {\n\tconst styles = [];\n\tconst chunks = [];\n\tlet chunk = [];\n\n\t// eslint-disable-next-line max-params\n\ttmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {\n\t\tif (escapeChar) {\n\t\t\tchunk.push(unescape(escapeChar));\n\t\t} else if (style) {\n\t\t\tconst str = chunk.join('');\n\t\t\tchunk = [];\n\t\t\tchunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));\n\t\t\tstyles.push({inverse, styles: parseStyle(style)});\n\t\t} else if (close) {\n\t\t\tif (styles.length === 0) {\n\t\t\t\tthrow new Error('Found extraneous } in Chalk template literal');\n\t\t\t}\n\n\t\t\tchunks.push(buildStyle(chalk, styles)(chunk.join('')));\n\t\t\tchunk = [];\n\t\t\tstyles.pop();\n\t\t} else {\n\t\t\tchunk.push(chr);\n\t\t}\n\t});\n\n\tchunks.push(chunk.join(''));\n\n\tif (styles.length > 0) {\n\t\tconst errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\\`}\\`)`;\n\t\tthrow new Error(errMsg);\n\t}\n\n\treturn chunks.join('');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hhbGsvdGVtcGxhdGVzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NoYWxrL3RlbXBsYXRlcy5qcz83NmZiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFRFTVBMQVRFX1JFR0VYID0gLyg/OlxcXFwodVthLWZcXGRdezR9fHhbYS1mXFxkXXsyfXwuKSl8KD86XFx7KH4pPyhcXHcrKD86XFwoW14pXSpcXCkpPyg/OlxcLlxcdysoPzpcXChbXildKlxcKSk/KSopKD86WyBcXHRdfCg/PVxccj9cXG4pKSl8KFxcfSl8KCg/Oi58W1xcclxcblxcZl0pKz8pL2dpO1xuY29uc3QgU1RZTEVfUkVHRVggPSAvKD86XnxcXC4pKFxcdyspKD86XFwoKFteKV0qKVxcKSk/L2c7XG5jb25zdCBTVFJJTkdfUkVHRVggPSAvXihbJ1wiXSkoKD86XFxcXC58KD8hXFwxKVteXFxcXF0pKilcXDEkLztcbmNvbnN0IEVTQ0FQRV9SRUdFWCA9IC9cXFxcKHVbYS1mXFxkXXs0fXx4W2EtZlxcZF17Mn18Lil8KFteXFxcXF0pL2dpO1xuXG5jb25zdCBFU0NBUEVTID0gbmV3IE1hcChbXG5cdFsnbicsICdcXG4nXSxcblx0WydyJywgJ1xcciddLFxuXHRbJ3QnLCAnXFx0J10sXG5cdFsnYicsICdcXGInXSxcblx0WydmJywgJ1xcZiddLFxuXHRbJ3YnLCAnXFx2J10sXG5cdFsnMCcsICdcXDAnXSxcblx0WydcXFxcJywgJ1xcXFwnXSxcblx0WydlJywgJ1xcdTAwMUInXSxcblx0WydhJywgJ1xcdTAwMDcnXVxuXSk7XG5cbmZ1bmN0aW9uIHVuZXNjYXBlKGMpIHtcblx0aWYgKChjWzBdID09PSAndScgJiYgYy5sZW5ndGggPT09IDUpIHx8IChjWzBdID09PSAneCcgJiYgYy5sZW5ndGggPT09IDMpKSB7XG5cdFx0cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoYy5zbGljZSgxKSwgMTYpKTtcblx0fVxuXG5cdHJldHVybiBFU0NBUEVTLmdldChjKSB8fCBjO1xufVxuXG5mdW5jdGlvbiBwYXJzZUFyZ3VtZW50cyhuYW1lLCBhcmdzKSB7XG5cdGNvbnN0IHJlc3VsdHMgPSBbXTtcblx0Y29uc3QgY2h1bmtzID0gYXJncy50cmltKCkuc3BsaXQoL1xccyosXFxzKi9nKTtcblx0bGV0IG1hdGNoZXM7XG5cblx0Zm9yIChjb25zdCBjaHVuayBvZiBjaHVua3MpIHtcblx0XHRpZiAoIWlzTmFOKGNodW5rKSkge1xuXHRcdFx0cmVzdWx0cy5wdXNoKE51bWJlcihjaHVuaykpO1xuXHRcdH0gZWxzZSBpZiAoKG1hdGNoZXMgPSBjaHVuay5tYXRjaChTVFJJTkdfUkVHRVgpKSkge1xuXHRcdFx0cmVzdWx0cy5wdXNoKG1hdGNoZXNbMl0ucmVwbGFjZShFU0NBUEVfUkVHRVgsIChtLCBlc2NhcGUsIGNocikgPT4gZXNjYXBlID8gdW5lc2NhcGUoZXNjYXBlKSA6IGNocikpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgQ2hhbGsgdGVtcGxhdGUgc3R5bGUgYXJndW1lbnQ6ICR7Y2h1bmt9IChpbiBzdHlsZSAnJHtuYW1lfScpYCk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIHBhcnNlU3R5bGUoc3R5bGUpIHtcblx0U1RZTEVfUkVHRVgubGFzdEluZGV4ID0gMDtcblxuXHRjb25zdCByZXN1bHRzID0gW107XG5cdGxldCBtYXRjaGVzO1xuXG5cdHdoaWxlICgobWF0Y2hlcyA9IFNUWUxFX1JFR0VYLmV4ZWMoc3R5bGUpKSAhPT0gbnVsbCkge1xuXHRcdGNvbnN0IG5hbWUgPSBtYXRjaGVzWzFdO1xuXG5cdFx0aWYgKG1hdGNoZXNbMl0pIHtcblx0XHRcdGNvbnN0IGFyZ3MgPSBwYXJzZUFyZ3VtZW50cyhuYW1lLCBtYXRjaGVzWzJdKTtcblx0XHRcdHJlc3VsdHMucHVzaChbbmFtZV0uY29uY2F0KGFyZ3MpKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0cy5wdXNoKFtuYW1lXSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkU3R5bGUoY2hhbGssIHN0eWxlcykge1xuXHRjb25zdCBlbmFibGVkID0ge307XG5cblx0Zm9yIChjb25zdCBsYXllciBvZiBzdHlsZXMpIHtcblx0XHRmb3IgKGNvbnN0IHN0eWxlIG9mIGxheWVyLnN0eWxlcykge1xuXHRcdFx0ZW5hYmxlZFtzdHlsZVswXV0gPSBsYXllci5pbnZlcnNlID8gbnVsbCA6IHN0eWxlLnNsaWNlKDEpO1xuXHRcdH1cblx0fVxuXG5cdGxldCBjdXJyZW50ID0gY2hhbGs7XG5cdGZvciAoY29uc3Qgc3R5bGVOYW1lIG9mIE9iamVjdC5rZXlzKGVuYWJsZWQpKSB7XG5cdFx0aWYgKEFycmF5LmlzQXJyYXkoZW5hYmxlZFtzdHlsZU5hbWVdKSkge1xuXHRcdFx0aWYgKCEoc3R5bGVOYW1lIGluIGN1cnJlbnQpKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5rbm93biBDaGFsayBzdHlsZTogJHtzdHlsZU5hbWV9YCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChlbmFibGVkW3N0eWxlTmFtZV0ubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRjdXJyZW50ID0gY3VycmVudFtzdHlsZU5hbWVdLmFwcGx5KGN1cnJlbnQsIGVuYWJsZWRbc3R5bGVOYW1lXSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjdXJyZW50ID0gY3VycmVudFtzdHlsZU5hbWVdO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjdXJyZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IChjaGFsaywgdG1wKSA9PiB7XG5cdGNvbnN0IHN0eWxlcyA9IFtdO1xuXHRjb25zdCBjaHVua3MgPSBbXTtcblx0bGV0IGNodW5rID0gW107XG5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1wYXJhbXNcblx0dG1wLnJlcGxhY2UoVEVNUExBVEVfUkVHRVgsIChtLCBlc2NhcGVDaGFyLCBpbnZlcnNlLCBzdHlsZSwgY2xvc2UsIGNocikgPT4ge1xuXHRcdGlmIChlc2NhcGVDaGFyKSB7XG5cdFx0XHRjaHVuay5wdXNoKHVuZXNjYXBlKGVzY2FwZUNoYXIpKTtcblx0XHR9IGVsc2UgaWYgKHN0eWxlKSB7XG5cdFx0XHRjb25zdCBzdHIgPSBjaHVuay5qb2luKCcnKTtcblx0XHRcdGNodW5rID0gW107XG5cdFx0XHRjaHVua3MucHVzaChzdHlsZXMubGVuZ3RoID09PSAwID8gc3RyIDogYnVpbGRTdHlsZShjaGFsaywgc3R5bGVzKShzdHIpKTtcblx0XHRcdHN0eWxlcy5wdXNoKHtpbnZlcnNlLCBzdHlsZXM6IHBhcnNlU3R5bGUoc3R5bGUpfSk7XG5cdFx0fSBlbHNlIGlmIChjbG9zZSkge1xuXHRcdFx0aWYgKHN0eWxlcy5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdGb3VuZCBleHRyYW5lb3VzIH0gaW4gQ2hhbGsgdGVtcGxhdGUgbGl0ZXJhbCcpO1xuXHRcdFx0fVxuXG5cdFx0XHRjaHVua3MucHVzaChidWlsZFN0eWxlKGNoYWxrLCBzdHlsZXMpKGNodW5rLmpvaW4oJycpKSk7XG5cdFx0XHRjaHVuayA9IFtdO1xuXHRcdFx0c3R5bGVzLnBvcCgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjaHVuay5wdXNoKGNocik7XG5cdFx0fVxuXHR9KTtcblxuXHRjaHVua3MucHVzaChjaHVuay5qb2luKCcnKSk7XG5cblx0aWYgKHN0eWxlcy5sZW5ndGggPiAwKSB7XG5cdFx0Y29uc3QgZXJyTXNnID0gYENoYWxrIHRlbXBsYXRlIGxpdGVyYWwgaXMgbWlzc2luZyAke3N0eWxlcy5sZW5ndGh9IGNsb3NpbmcgYnJhY2tldCR7c3R5bGVzLmxlbmd0aCA9PT0gMSA/ICcnIDogJ3MnfSAoXFxgfVxcYClgO1xuXHRcdHRocm93IG5ldyBFcnJvcihlcnJNc2cpO1xuXHR9XG5cblx0cmV0dXJuIGNodW5rcy5qb2luKCcnKTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/chalk/templates.js\n");

/***/ }),

/***/ "./node_modules/color-convert/conversions.js":
/*!***************************************************!*\
  !*** ./node_modules/color-convert/conversions.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* MIT license */\nvar cssKeywords = __webpack_require__(/*! color-name */ \"./node_modules/color-name/index.js\");\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nvar reverseKeywords = {};\nfor (var key in cssKeywords) {\n\tif (cssKeywords.hasOwnProperty(key)) {\n\t\treverseKeywords[cssKeywords[key]] = key;\n\t}\n}\n\nvar convert = module.exports = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\n// hide .channels and .labels properties\nfor (var model in convert) {\n\tif (convert.hasOwnProperty(model)) {\n\t\tif (!('channels' in convert[model])) {\n\t\t\tthrow new Error('missing channels property: ' + model);\n\t\t}\n\n\t\tif (!('labels' in convert[model])) {\n\t\t\tthrow new Error('missing channel labels property: ' + model);\n\t\t}\n\n\t\tif (convert[model].labels.length !== convert[model].channels) {\n\t\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t\t}\n\n\t\tvar channels = convert[model].channels;\n\t\tvar labels = convert[model].labels;\n\t\tdelete convert[model].channels;\n\t\tdelete convert[model].labels;\n\t\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\t\tObject.defineProperty(convert[model], 'labels', {value: labels});\n\t}\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar l;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tl = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tvar rdif;\n\tvar gdif;\n\tvar bdif;\n\tvar h;\n\tvar s;\n\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar v = Math.max(r, g, b);\n\tvar diff = v - Math.min(r, g, b);\n\tvar diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = s = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar h = convert.rgb.hsl(rgb)[0];\n\tvar w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar c;\n\tvar m;\n\tvar y;\n\tvar k;\n\n\tk = Math.min(1 - r, 1 - g, 1 - b);\n\tc = (1 - r - k) / (1 - k) || 0;\n\tm = (1 - g - k) / (1 - k) || 0;\n\ty = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\n/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */\nfunction comparativeDistance(x, y) {\n\treturn (\n\t\tMath.pow(x[0] - y[0], 2) +\n\t\tMath.pow(x[1] - y[1], 2) +\n\t\tMath.pow(x[2] - y[2], 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tvar reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tvar currentClosestDistance = Infinity;\n\tvar currentClosestKeyword;\n\n\tfor (var keyword in cssKeywords) {\n\t\tif (cssKeywords.hasOwnProperty(keyword)) {\n\t\t\tvar value = cssKeywords[keyword];\n\n\t\t\t// Compute comparative distance\n\t\t\tvar distance = comparativeDistance(rgb, value);\n\n\t\t\t// Check if its less, if so set as closest\n\t\t\tif (distance < currentClosestDistance) {\n\t\t\t\tcurrentClosestDistance = distance;\n\t\t\t\tcurrentClosestKeyword = keyword;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\n\t// assume sRGB\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n\tvar x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tvar y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tvar z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tvar xyz = convert.rgb.xyz(rgb);\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tvar h = hsl[0] / 360;\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar rgb;\n\tvar val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tt1 = 2 * l - t2;\n\n\trgb = [0, 0, 0];\n\tfor (var i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tvar h = hsl[0];\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar smin = s;\n\tvar lmin = Math.max(l, 0.01);\n\tvar sv;\n\tvar v;\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tv = (l + s) / 2;\n\tsv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tvar h = hsv[0] / 60;\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar hi = Math.floor(h) % 6;\n\n\tvar f = h - Math.floor(h);\n\tvar p = 255 * v * (1 - s);\n\tvar q = 255 * v * (1 - (s * f));\n\tvar t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tvar h = hsv[0];\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar vmin = Math.max(v, 0.01);\n\tvar lmin;\n\tvar sl;\n\tvar l;\n\n\tl = (2 - s) * v;\n\tlmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tvar h = hwb[0] / 360;\n\tvar wh = hwb[1] / 100;\n\tvar bl = hwb[2] / 100;\n\tvar ratio = wh + bl;\n\tvar i;\n\tvar v;\n\tvar f;\n\tvar n;\n\n\t// wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\ti = Math.floor(6 * h);\n\tv = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tn = wh + f * (v - wh); // linear interpolation\n\n\tvar r;\n\tvar g;\n\tvar b;\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v; g = n; b = wh; break;\n\t\tcase 1: r = n; g = v; b = wh; break;\n\t\tcase 2: r = wh; g = v; b = n; break;\n\t\tcase 3: r = wh; g = n; b = v; break;\n\t\tcase 4: r = n; g = wh; b = v; break;\n\t\tcase 5: r = v; g = wh; b = n; break;\n\t}\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tvar c = cmyk[0] / 100;\n\tvar m = cmyk[1] / 100;\n\tvar y = cmyk[2] / 100;\n\tvar k = cmyk[3] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = 1 - Math.min(1, c * (1 - k) + k);\n\tg = 1 - Math.min(1, m * (1 - k) + k);\n\tb = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tvar x = xyz[0] / 100;\n\tvar y = xyz[1] / 100;\n\tvar z = xyz[2] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar x;\n\tvar y;\n\tvar z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tvar y2 = Math.pow(y, 3);\n\tvar x2 = Math.pow(x, 3);\n\tvar z2 = Math.pow(z, 3);\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar hr;\n\tvar h;\n\tvar c;\n\n\thr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tc = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tvar l = lch[0];\n\tvar c = lch[1];\n\tvar h = lch[2];\n\tvar a;\n\tvar b;\n\tvar hr;\n\n\thr = h / 360 * 2 * Math.PI;\n\ta = c * Math.cos(hr);\n\tb = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\tvar value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tvar ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\n\t// we use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tvar ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tvar color = args % 10;\n\n\t// handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tvar mult = (~~(args > 50) + 1) * 0.5;\n\tvar r = ((color & 1) * mult) * 255;\n\tvar g = (((color >> 1) & 1) * mult) * 255;\n\tvar b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// handle greyscale\n\tif (args >= 232) {\n\t\tvar c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tvar rem;\n\tvar r = Math.floor(args / 36) / 5 * 255;\n\tvar g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tvar b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tvar integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tvar match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tvar colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(function (char) {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tvar integer = parseInt(colorString, 16);\n\tvar r = (integer >> 16) & 0xFF;\n\tvar g = (integer >> 8) & 0xFF;\n\tvar b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar max = Math.max(Math.max(r, g), b);\n\tvar min = Math.min(Math.min(r, g), b);\n\tvar chroma = (max - min);\n\tvar grayscale;\n\tvar hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma + 4;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar c = 1;\n\tvar f = 0;\n\n\tif (l < 0.5) {\n\t\tc = 2.0 * s * l;\n\t} else {\n\t\tc = 2.0 * s * (1.0 - l);\n\t}\n\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\n\tvar c = s * v;\n\tvar f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tvar h = hcg[0] / 360;\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tvar pure = [0, 0, 0];\n\tvar hi = (h % 1) * 6;\n\tvar v = hi % 1;\n\tvar w = 1 - v;\n\tvar mg = 0;\n\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar v = c + g * (1.0 - c);\n\tvar f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar l = g * (1.0 - c) + 0.5 * c;\n\tvar s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\tvar v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tvar w = hwb[1] / 100;\n\tvar b = hwb[2] / 100;\n\tvar v = 1 - b;\n\tvar c = v - w;\n\tvar g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = convert.gray.hsv = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tvar val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tvar integer = (val << 16) + (val << 8) + val;\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tvar val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/color-convert/conversions.js\n");

/***/ }),

/***/ "./node_modules/color-convert/index.js":
/*!*********************************************!*\
  !*** ./node_modules/color-convert/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var conversions = __webpack_require__(/*! ./conversions */ \"./node_modules/color-convert/conversions.js\");\nvar route = __webpack_require__(/*! ./route */ \"./node_modules/color-convert/route.js\");\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY29sb3ItY29udmVydC9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb2xvci1jb252ZXJ0L2luZGV4LmpzPzIyMjYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbnZlcnNpb25zID0gcmVxdWlyZSgnLi9jb252ZXJzaW9ucycpO1xudmFyIHJvdXRlID0gcmVxdWlyZSgnLi9yb3V0ZScpO1xuXG52YXIgY29udmVydCA9IHt9O1xuXG52YXIgbW9kZWxzID0gT2JqZWN0LmtleXMoY29udmVyc2lvbnMpO1xuXG5mdW5jdGlvbiB3cmFwUmF3KGZuKSB7XG5cdHZhciB3cmFwcGVkRm4gPSBmdW5jdGlvbiAoYXJncykge1xuXHRcdGlmIChhcmdzID09PSB1bmRlZmluZWQgfHwgYXJncyA9PT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIGFyZ3M7XG5cdFx0fVxuXG5cdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG5cdFx0XHRhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZm4oYXJncyk7XG5cdH07XG5cblx0Ly8gcHJlc2VydmUgLmNvbnZlcnNpb24gcHJvcGVydHkgaWYgdGhlcmUgaXMgb25lXG5cdGlmICgnY29udmVyc2lvbicgaW4gZm4pIHtcblx0XHR3cmFwcGVkRm4uY29udmVyc2lvbiA9IGZuLmNvbnZlcnNpb247XG5cdH1cblxuXHRyZXR1cm4gd3JhcHBlZEZuO1xufVxuXG5mdW5jdGlvbiB3cmFwUm91bmRlZChmbikge1xuXHR2YXIgd3JhcHBlZEZuID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0XHRpZiAoYXJncyA9PT0gdW5kZWZpbmVkIHx8IGFyZ3MgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBhcmdzO1xuXHRcdH1cblxuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdFx0YXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlc3VsdCA9IGZuKGFyZ3MpO1xuXG5cdFx0Ly8gd2UncmUgYXNzdW1pbmcgdGhlIHJlc3VsdCBpcyBhbiBhcnJheSBoZXJlLlxuXHRcdC8vIHNlZSBub3RpY2UgaW4gY29udmVyc2lvbnMuanM7IGRvbid0IHVzZSBib3ggdHlwZXNcblx0XHQvLyBpbiBjb252ZXJzaW9uIGZ1bmN0aW9ucy5cblx0XHRpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcpIHtcblx0XHRcdGZvciAodmFyIGxlbiA9IHJlc3VsdC5sZW5ndGgsIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0cmVzdWx0W2ldID0gTWF0aC5yb3VuZChyZXN1bHRbaV0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0Ly8gcHJlc2VydmUgLmNvbnZlcnNpb24gcHJvcGVydHkgaWYgdGhlcmUgaXMgb25lXG5cdGlmICgnY29udmVyc2lvbicgaW4gZm4pIHtcblx0XHR3cmFwcGVkRm4uY29udmVyc2lvbiA9IGZuLmNvbnZlcnNpb247XG5cdH1cblxuXHRyZXR1cm4gd3JhcHBlZEZuO1xufVxuXG5tb2RlbHMuZm9yRWFjaChmdW5jdGlvbiAoZnJvbU1vZGVsKSB7XG5cdGNvbnZlcnRbZnJvbU1vZGVsXSA9IHt9O1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb252ZXJ0W2Zyb21Nb2RlbF0sICdjaGFubmVscycsIHt2YWx1ZTogY29udmVyc2lvbnNbZnJvbU1vZGVsXS5jaGFubmVsc30pO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udmVydFtmcm9tTW9kZWxdLCAnbGFiZWxzJywge3ZhbHVlOiBjb252ZXJzaW9uc1tmcm9tTW9kZWxdLmxhYmVsc30pO1xuXG5cdHZhciByb3V0ZXMgPSByb3V0ZShmcm9tTW9kZWwpO1xuXHR2YXIgcm91dGVNb2RlbHMgPSBPYmplY3Qua2V5cyhyb3V0ZXMpO1xuXG5cdHJvdXRlTW9kZWxzLmZvckVhY2goZnVuY3Rpb24gKHRvTW9kZWwpIHtcblx0XHR2YXIgZm4gPSByb3V0ZXNbdG9Nb2RlbF07XG5cblx0XHRjb252ZXJ0W2Zyb21Nb2RlbF1bdG9Nb2RlbF0gPSB3cmFwUm91bmRlZChmbik7XG5cdFx0Y29udmVydFtmcm9tTW9kZWxdW3RvTW9kZWxdLnJhdyA9IHdyYXBSYXcoZm4pO1xuXHR9KTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnZlcnQ7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/color-convert/index.js\n");

/***/ }),

/***/ "./node_modules/color-convert/route.js":
/*!*********************************************!*\
  !*** ./node_modules/color-convert/route.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var conversions = __webpack_require__(/*! ./conversions */ \"./node_modules/color-convert/conversions.js\");\n\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tvar graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tvar models = Object.keys(conversions);\n\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tvar graph = buildGraph();\n\tvar queue = [fromModel]; // unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tvar current = queue.pop();\n\t\tvar adjacents = Object.keys(conversions[current]);\n\n\t\tfor (var len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tvar adjacent = adjacents[i];\n\t\t\tvar node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tvar path = [graph[toModel].parent, toModel];\n\tvar fn = conversions[graph[toModel].parent][toModel];\n\n\tvar cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tvar graph = deriveBFS(fromModel);\n\tvar conversion = {};\n\n\tvar models = Object.keys(graph);\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tvar toModel = models[i];\n\t\tvar node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// no possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY29sb3ItY29udmVydC9yb3V0ZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb2xvci1jb252ZXJ0L3JvdXRlLmpzPzQwMmIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbnZlcnNpb25zID0gcmVxdWlyZSgnLi9jb252ZXJzaW9ucycpO1xuXG4vKlxuXHR0aGlzIGZ1bmN0aW9uIHJvdXRlcyBhIG1vZGVsIHRvIGFsbCBvdGhlciBtb2RlbHMuXG5cblx0YWxsIGZ1bmN0aW9ucyB0aGF0IGFyZSByb3V0ZWQgaGF2ZSBhIHByb3BlcnR5IGAuY29udmVyc2lvbmAgYXR0YWNoZWRcblx0dG8gdGhlIHJldHVybmVkIHN5bnRoZXRpYyBmdW5jdGlvbi4gVGhpcyBwcm9wZXJ0eSBpcyBhbiBhcnJheVxuXHRvZiBzdHJpbmdzLCBlYWNoIHdpdGggdGhlIHN0ZXBzIGluIGJldHdlZW4gdGhlICdmcm9tJyBhbmQgJ3RvJ1xuXHRjb2xvciBtb2RlbHMgKGluY2x1c2l2ZSkuXG5cblx0Y29udmVyc2lvbnMgdGhhdCBhcmUgbm90IHBvc3NpYmxlIHNpbXBseSBhcmUgbm90IGluY2x1ZGVkLlxuKi9cblxuZnVuY3Rpb24gYnVpbGRHcmFwaCgpIHtcblx0dmFyIGdyYXBoID0ge307XG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS9vYmplY3Qta2V5cy12cy1mb3ItaW4td2l0aC1jbG9zdXJlLzNcblx0dmFyIG1vZGVscyA9IE9iamVjdC5rZXlzKGNvbnZlcnNpb25zKTtcblxuXHRmb3IgKHZhciBsZW4gPSBtb2RlbHMubGVuZ3RoLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0Z3JhcGhbbW9kZWxzW2ldXSA9IHtcblx0XHRcdC8vIGh0dHA6Ly9qc3BlcmYuY29tLzEtdnMtaW5maW5pdHlcblx0XHRcdC8vIG1pY3JvLW9wdCwgYnV0IHRoaXMgaXMgc2ltcGxlLlxuXHRcdFx0ZGlzdGFuY2U6IC0xLFxuXHRcdFx0cGFyZW50OiBudWxsXG5cdFx0fTtcblx0fVxuXG5cdHJldHVybiBncmFwaDtcbn1cblxuLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQnJlYWR0aC1maXJzdF9zZWFyY2hcbmZ1bmN0aW9uIGRlcml2ZUJGUyhmcm9tTW9kZWwpIHtcblx0dmFyIGdyYXBoID0gYnVpbGRHcmFwaCgpO1xuXHR2YXIgcXVldWUgPSBbZnJvbU1vZGVsXTsgLy8gdW5zaGlmdCAtPiBxdWV1ZSAtPiBwb3BcblxuXHRncmFwaFtmcm9tTW9kZWxdLmRpc3RhbmNlID0gMDtcblxuXHR3aGlsZSAocXVldWUubGVuZ3RoKSB7XG5cdFx0dmFyIGN1cnJlbnQgPSBxdWV1ZS5wb3AoKTtcblx0XHR2YXIgYWRqYWNlbnRzID0gT2JqZWN0LmtleXMoY29udmVyc2lvbnNbY3VycmVudF0pO1xuXG5cdFx0Zm9yICh2YXIgbGVuID0gYWRqYWNlbnRzLmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0dmFyIGFkamFjZW50ID0gYWRqYWNlbnRzW2ldO1xuXHRcdFx0dmFyIG5vZGUgPSBncmFwaFthZGphY2VudF07XG5cblx0XHRcdGlmIChub2RlLmRpc3RhbmNlID09PSAtMSkge1xuXHRcdFx0XHRub2RlLmRpc3RhbmNlID0gZ3JhcGhbY3VycmVudF0uZGlzdGFuY2UgKyAxO1xuXHRcdFx0XHRub2RlLnBhcmVudCA9IGN1cnJlbnQ7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoYWRqYWNlbnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBncmFwaDtcbn1cblxuZnVuY3Rpb24gbGluayhmcm9tLCB0bykge1xuXHRyZXR1cm4gZnVuY3Rpb24gKGFyZ3MpIHtcblx0XHRyZXR1cm4gdG8oZnJvbShhcmdzKSk7XG5cdH07XG59XG5cbmZ1bmN0aW9uIHdyYXBDb252ZXJzaW9uKHRvTW9kZWwsIGdyYXBoKSB7XG5cdHZhciBwYXRoID0gW2dyYXBoW3RvTW9kZWxdLnBhcmVudCwgdG9Nb2RlbF07XG5cdHZhciBmbiA9IGNvbnZlcnNpb25zW2dyYXBoW3RvTW9kZWxdLnBhcmVudF1bdG9Nb2RlbF07XG5cblx0dmFyIGN1ciA9IGdyYXBoW3RvTW9kZWxdLnBhcmVudDtcblx0d2hpbGUgKGdyYXBoW2N1cl0ucGFyZW50KSB7XG5cdFx0cGF0aC51bnNoaWZ0KGdyYXBoW2N1cl0ucGFyZW50KTtcblx0XHRmbiA9IGxpbmsoY29udmVyc2lvbnNbZ3JhcGhbY3VyXS5wYXJlbnRdW2N1cl0sIGZuKTtcblx0XHRjdXIgPSBncmFwaFtjdXJdLnBhcmVudDtcblx0fVxuXG5cdGZuLmNvbnZlcnNpb24gPSBwYXRoO1xuXHRyZXR1cm4gZm47XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZyb21Nb2RlbCkge1xuXHR2YXIgZ3JhcGggPSBkZXJpdmVCRlMoZnJvbU1vZGVsKTtcblx0dmFyIGNvbnZlcnNpb24gPSB7fTtcblxuXHR2YXIgbW9kZWxzID0gT2JqZWN0LmtleXMoZ3JhcGgpO1xuXHRmb3IgKHZhciBsZW4gPSBtb2RlbHMubGVuZ3RoLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0dmFyIHRvTW9kZWwgPSBtb2RlbHNbaV07XG5cdFx0dmFyIG5vZGUgPSBncmFwaFt0b01vZGVsXTtcblxuXHRcdGlmIChub2RlLnBhcmVudCA9PT0gbnVsbCkge1xuXHRcdFx0Ly8gbm8gcG9zc2libGUgY29udmVyc2lvbiwgb3IgdGhpcyBub2RlIGlzIHRoZSBzb3VyY2UgbW9kZWwuXG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRjb252ZXJzaW9uW3RvTW9kZWxdID0gd3JhcENvbnZlcnNpb24odG9Nb2RlbCwgZ3JhcGgpO1xuXHR9XG5cblx0cmV0dXJuIGNvbnZlcnNpb247XG59O1xuXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/color-convert/route.js\n");

/***/ }),

/***/ "./node_modules/color-name/index.js":
/*!******************************************!*\
  !*** ./node_modules/color-name/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/color-name/index.js\n");

/***/ }),

/***/ "./node_modules/escape-string-regexp/index.js":
/*!****************************************************!*\
  !*** ./node_modules/escape-string-regexp/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\n\nmodule.exports = function (str) {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\treturn str.replace(matchOperatorsRe, '\\\\$&');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXNjYXBlLXN0cmluZy1yZWdleHAvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXNjYXBlLXN0cmluZy1yZWdleHAvaW5kZXguanM/MjRhOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBtYXRjaE9wZXJhdG9yc1JlID0gL1t8XFxcXHt9KClbXFxdXiQrKj8uXS9nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIpIHtcblx0aWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYSBzdHJpbmcnKTtcblx0fVxuXG5cdHJldHVybiBzdHIucmVwbGFjZShtYXRjaE9wZXJhdG9yc1JlLCAnXFxcXCQmJyk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/escape-string-regexp/index.js\n");

/***/ }),

/***/ "./node_modules/lines-and-columns/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/lines-and-columns/dist/index.mjs ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar LF = '\\n';\nvar CR = '\\r';\nvar LinesAndColumns = (function () {\n    function LinesAndColumns(string) {\n        this.string = string;\n        var offsets = [0];\n        for (var offset = 0; offset < string.length;) {\n            switch (string[offset]) {\n                case LF:\n                    offset += LF.length;\n                    offsets.push(offset);\n                    break;\n                case CR:\n                    offset += CR.length;\n                    if (string[offset] === LF) {\n                        offset += LF.length;\n                    }\n                    offsets.push(offset);\n                    break;\n                default:\n                    offset++;\n                    break;\n            }\n        }\n        this.offsets = offsets;\n    }\n    LinesAndColumns.prototype.locationForIndex = function (index) {\n        if (index < 0 || index > this.string.length) {\n            return null;\n        }\n        var line = 0;\n        var offsets = this.offsets;\n        while (offsets[line + 1] <= index) {\n            line++;\n        }\n        var column = index - offsets[line];\n        return { line: line, column: column };\n    };\n    LinesAndColumns.prototype.indexForLocation = function (location) {\n        var line = location.line, column = location.column;\n        if (line < 0 || line >= this.offsets.length) {\n            return null;\n        }\n        if (column < 0 || column > this.lengthOfLine(line)) {\n            return null;\n        }\n        return this.offsets[line] + column;\n    };\n    LinesAndColumns.prototype.lengthOfLine = function (line) {\n        var offset = this.offsets[line];\n        var nextOffset = line === this.offsets.length - 1 ? this.string.length : this.offsets[line + 1];\n        return nextOffset - offset;\n    };\n    return LinesAndColumns;\n}());\n/* harmony default export */ __webpack_exports__[\"default\"] = (LinesAndColumns);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbGluZXMtYW5kLWNvbHVtbnMvZGlzdC9pbmRleC5tanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbGluZXMtYW5kLWNvbHVtbnMvZGlzdC9pbmRleC5tanM/OWY0NiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgTEYgPSAnXFxuJztcbnZhciBDUiA9ICdcXHInO1xudmFyIExpbmVzQW5kQ29sdW1ucyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGluZXNBbmRDb2x1bW5zKHN0cmluZykge1xuICAgICAgICB0aGlzLnN0cmluZyA9IHN0cmluZztcbiAgICAgICAgdmFyIG9mZnNldHMgPSBbMF07XG4gICAgICAgIGZvciAodmFyIG9mZnNldCA9IDA7IG9mZnNldCA8IHN0cmluZy5sZW5ndGg7KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHN0cmluZ1tvZmZzZXRdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBMRjpcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9IExGLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0cy5wdXNoKG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgQ1I6XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSBDUi5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHJpbmdbb2Zmc2V0XSA9PT0gTEYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSBMRi5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0cy5wdXNoKG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCsrO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9mZnNldHMgPSBvZmZzZXRzO1xuICAgIH1cbiAgICBMaW5lc0FuZENvbHVtbnMucHJvdG90eXBlLmxvY2F0aW9uRm9ySW5kZXggPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IHRoaXMuc3RyaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxpbmUgPSAwO1xuICAgICAgICB2YXIgb2Zmc2V0cyA9IHRoaXMub2Zmc2V0cztcbiAgICAgICAgd2hpbGUgKG9mZnNldHNbbGluZSArIDFdIDw9IGluZGV4KSB7XG4gICAgICAgICAgICBsaW5lKys7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbHVtbiA9IGluZGV4IC0gb2Zmc2V0c1tsaW5lXTtcbiAgICAgICAgcmV0dXJuIHsgbGluZTogbGluZSwgY29sdW1uOiBjb2x1bW4gfTtcbiAgICB9O1xuICAgIExpbmVzQW5kQ29sdW1ucy5wcm90b3R5cGUuaW5kZXhGb3JMb2NhdGlvbiA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICB2YXIgbGluZSA9IGxvY2F0aW9uLmxpbmUsIGNvbHVtbiA9IGxvY2F0aW9uLmNvbHVtbjtcbiAgICAgICAgaWYgKGxpbmUgPCAwIHx8IGxpbmUgPj0gdGhpcy5vZmZzZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbHVtbiA8IDAgfHwgY29sdW1uID4gdGhpcy5sZW5ndGhPZkxpbmUobGluZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm9mZnNldHNbbGluZV0gKyBjb2x1bW47XG4gICAgfTtcbiAgICBMaW5lc0FuZENvbHVtbnMucHJvdG90eXBlLmxlbmd0aE9mTGluZSA9IGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLm9mZnNldHNbbGluZV07XG4gICAgICAgIHZhciBuZXh0T2Zmc2V0ID0gbGluZSA9PT0gdGhpcy5vZmZzZXRzLmxlbmd0aCAtIDEgPyB0aGlzLnN0cmluZy5sZW5ndGggOiB0aGlzLm9mZnNldHNbbGluZSArIDFdO1xuICAgICAgICByZXR1cm4gbmV4dE9mZnNldCAtIG9mZnNldDtcbiAgICB9O1xuICAgIHJldHVybiBMaW5lc0FuZENvbHVtbnM7XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgTGluZXNBbmRDb2x1bW5zO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lines-and-columns/dist/index.mjs\n");

/***/ }),

/***/ "./node_modules/node-libs-browser/node_modules/punycode/punycode.js":
/*!**************************************************************************!*\
  !*** ./node_modules/node-libs-browser/node_modules/punycode/punycode.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports =  true && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule =  true && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttrue\n\t) {\n\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\t\treturn punycode;\n\t\t}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n\n}(this));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module), __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbm9kZS1saWJzLWJyb3dzZXIvbm9kZV9tb2R1bGVzL3B1bnljb2RlL3B1bnljb2RlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vZGUtbGlicy1icm93c2VyL25vZGVfbW9kdWxlcy9wdW55Y29kZS9wdW55Y29kZS5qcz8xOGNhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBodHRwczovL210aHMuYmUvcHVueWNvZGUgdjEuNC4xIGJ5IEBtYXRoaWFzICovXG47KGZ1bmN0aW9uKHJvb3QpIHtcblxuXHQvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGVzICovXG5cdHZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiZcblx0XHQhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXHR2YXIgZnJlZU1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmXG5cdFx0IW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cdHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWw7XG5cdGlmIChcblx0XHRmcmVlR2xvYmFsLmdsb2JhbCA9PT0gZnJlZUdsb2JhbCB8fFxuXHRcdGZyZWVHbG9iYWwud2luZG93ID09PSBmcmVlR2xvYmFsIHx8XG5cdFx0ZnJlZUdsb2JhbC5zZWxmID09PSBmcmVlR2xvYmFsXG5cdCkge1xuXHRcdHJvb3QgPSBmcmVlR2xvYmFsO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBgcHVueWNvZGVgIG9iamVjdC5cblx0ICogQG5hbWUgcHVueWNvZGVcblx0ICogQHR5cGUgT2JqZWN0XG5cdCAqL1xuXHR2YXIgcHVueWNvZGUsXG5cblx0LyoqIEhpZ2hlc3QgcG9zaXRpdmUgc2lnbmVkIDMyLWJpdCBmbG9hdCB2YWx1ZSAqL1xuXHRtYXhJbnQgPSAyMTQ3NDgzNjQ3LCAvLyBha2EuIDB4N0ZGRkZGRkYgb3IgMl4zMS0xXG5cblx0LyoqIEJvb3RzdHJpbmcgcGFyYW1ldGVycyAqL1xuXHRiYXNlID0gMzYsXG5cdHRNaW4gPSAxLFxuXHR0TWF4ID0gMjYsXG5cdHNrZXcgPSAzOCxcblx0ZGFtcCA9IDcwMCxcblx0aW5pdGlhbEJpYXMgPSA3Mixcblx0aW5pdGlhbE4gPSAxMjgsIC8vIDB4ODBcblx0ZGVsaW1pdGVyID0gJy0nLCAvLyAnXFx4MkQnXG5cblx0LyoqIFJlZ3VsYXIgZXhwcmVzc2lvbnMgKi9cblx0cmVnZXhQdW55Y29kZSA9IC9eeG4tLS8sXG5cdHJlZ2V4Tm9uQVNDSUkgPSAvW15cXHgyMC1cXHg3RV0vLCAvLyB1bnByaW50YWJsZSBBU0NJSSBjaGFycyArIG5vbi1BU0NJSSBjaGFyc1xuXHRyZWdleFNlcGFyYXRvcnMgPSAvW1xceDJFXFx1MzAwMlxcdUZGMEVcXHVGRjYxXS9nLCAvLyBSRkMgMzQ5MCBzZXBhcmF0b3JzXG5cblx0LyoqIEVycm9yIG1lc3NhZ2VzICovXG5cdGVycm9ycyA9IHtcblx0XHQnb3ZlcmZsb3cnOiAnT3ZlcmZsb3c6IGlucHV0IG5lZWRzIHdpZGVyIGludGVnZXJzIHRvIHByb2Nlc3MnLFxuXHRcdCdub3QtYmFzaWMnOiAnSWxsZWdhbCBpbnB1dCA+PSAweDgwIChub3QgYSBiYXNpYyBjb2RlIHBvaW50KScsXG5cdFx0J2ludmFsaWQtaW5wdXQnOiAnSW52YWxpZCBpbnB1dCdcblx0fSxcblxuXHQvKiogQ29udmVuaWVuY2Ugc2hvcnRjdXRzICovXG5cdGJhc2VNaW51c1RNaW4gPSBiYXNlIC0gdE1pbixcblx0Zmxvb3IgPSBNYXRoLmZsb29yLFxuXHRzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLFxuXG5cdC8qKiBUZW1wb3JhcnkgdmFyaWFibGUgKi9cblx0a2V5O1xuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdC8qKlxuXHQgKiBBIGdlbmVyaWMgZXJyb3IgdXRpbGl0eSBmdW5jdGlvbi5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIGVycm9yIHR5cGUuXG5cdCAqIEByZXR1cm5zIHtFcnJvcn0gVGhyb3dzIGEgYFJhbmdlRXJyb3JgIHdpdGggdGhlIGFwcGxpY2FibGUgZXJyb3IgbWVzc2FnZS5cblx0ICovXG5cdGZ1bmN0aW9uIGVycm9yKHR5cGUpIHtcblx0XHR0aHJvdyBuZXcgUmFuZ2VFcnJvcihlcnJvcnNbdHlwZV0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEEgZ2VuZXJpYyBgQXJyYXkjbWFwYCB1dGlsaXR5IGZ1bmN0aW9uLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnkgYXJyYXlcblx0ICogaXRlbS5cblx0ICogQHJldHVybnMge0FycmF5fSBBIG5ldyBhcnJheSBvZiB2YWx1ZXMgcmV0dXJuZWQgYnkgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuXHQgKi9cblx0ZnVuY3Rpb24gbWFwKGFycmF5LCBmbikge1xuXHRcdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xuXHRcdHdoaWxlIChsZW5ndGgtLSkge1xuXHRcdFx0cmVzdWx0W2xlbmd0aF0gPSBmbihhcnJheVtsZW5ndGhdKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIHNpbXBsZSBgQXJyYXkjbWFwYC1saWtlIHdyYXBwZXIgdG8gd29yayB3aXRoIGRvbWFpbiBuYW1lIHN0cmluZ3Mgb3IgZW1haWxcblx0ICogYWRkcmVzc2VzLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gZG9tYWluIFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnlcblx0ICogY2hhcmFjdGVyLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IHN0cmluZyBvZiBjaGFyYWN0ZXJzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFja1xuXHQgKiBmdW5jdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIG1hcERvbWFpbihzdHJpbmcsIGZuKSB7XG5cdFx0dmFyIHBhcnRzID0gc3RyaW5nLnNwbGl0KCdAJyk7XG5cdFx0dmFyIHJlc3VsdCA9ICcnO1xuXHRcdGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG5cdFx0XHQvLyBJbiBlbWFpbCBhZGRyZXNzZXMsIG9ubHkgdGhlIGRvbWFpbiBuYW1lIHNob3VsZCBiZSBwdW55Y29kZWQuIExlYXZlXG5cdFx0XHQvLyB0aGUgbG9jYWwgcGFydCAoaS5lLiBldmVyeXRoaW5nIHVwIHRvIGBAYCkgaW50YWN0LlxuXHRcdFx0cmVzdWx0ID0gcGFydHNbMF0gKyAnQCc7XG5cdFx0XHRzdHJpbmcgPSBwYXJ0c1sxXTtcblx0XHR9XG5cdFx0Ly8gQXZvaWQgYHNwbGl0KHJlZ2V4KWAgZm9yIElFOCBjb21wYXRpYmlsaXR5LiBTZWUgIzE3LlxuXHRcdHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJlZ2V4U2VwYXJhdG9ycywgJ1xceDJFJyk7XG5cdFx0dmFyIGxhYmVscyA9IHN0cmluZy5zcGxpdCgnLicpO1xuXHRcdHZhciBlbmNvZGVkID0gbWFwKGxhYmVscywgZm4pLmpvaW4oJy4nKTtcblx0XHRyZXR1cm4gcmVzdWx0ICsgZW5jb2RlZDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG51bWVyaWMgY29kZSBwb2ludHMgb2YgZWFjaCBVbmljb2RlXG5cdCAqIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nLiBXaGlsZSBKYXZhU2NyaXB0IHVzZXMgVUNTLTIgaW50ZXJuYWxseSxcblx0ICogdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnZlcnQgYSBwYWlyIG9mIHN1cnJvZ2F0ZSBoYWx2ZXMgKGVhY2ggb2Ygd2hpY2hcblx0ICogVUNTLTIgZXhwb3NlcyBhcyBzZXBhcmF0ZSBjaGFyYWN0ZXJzKSBpbnRvIGEgc2luZ2xlIGNvZGUgcG9pbnQsXG5cdCAqIG1hdGNoaW5nIFVURi0xNi5cblx0ICogQHNlZSBgcHVueWNvZGUudWNzMi5lbmNvZGVgXG5cdCAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuXHQgKiBAbmFtZSBkZWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyBUaGUgVW5pY29kZSBpbnB1dCBzdHJpbmcgKFVDUy0yKS5cblx0ICogQHJldHVybnMge0FycmF5fSBUaGUgbmV3IGFycmF5IG9mIGNvZGUgcG9pbnRzLlxuXHQgKi9cblx0ZnVuY3Rpb24gdWNzMmRlY29kZShzdHJpbmcpIHtcblx0XHR2YXIgb3V0cHV0ID0gW10sXG5cdFx0ICAgIGNvdW50ZXIgPSAwLFxuXHRcdCAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoLFxuXHRcdCAgICB2YWx1ZSxcblx0XHQgICAgZXh0cmE7XG5cdFx0d2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdGlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdFx0Ly8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG5cdFx0XHRcdGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdFx0aWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIGxvdyBzdXJyb2dhdGVcblx0XHRcdFx0XHRvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZSBuZXh0XG5cdFx0XHRcdFx0Ly8gY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0XHRcdGNvdW50ZXItLTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBzdHJpbmcgYmFzZWQgb24gYW4gYXJyYXkgb2YgbnVtZXJpYyBjb2RlIHBvaW50cy5cblx0ICogQHNlZSBgcHVueWNvZGUudWNzMi5kZWNvZGVgXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG5cdCAqIEBuYW1lIGVuY29kZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBjb2RlUG9pbnRzIFRoZSBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgbmV3IFVuaWNvZGUgc3RyaW5nIChVQ1MtMikuXG5cdCAqL1xuXHRmdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7XG5cdFx0cmV0dXJuIG1hcChhcnJheSwgZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdHZhciBvdXRwdXQgPSAnJztcblx0XHRcdGlmICh2YWx1ZSA+IDB4RkZGRikge1xuXHRcdFx0XHR2YWx1ZSAtPSAweDEwMDAwO1xuXHRcdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKTtcblx0XHRcdFx0dmFsdWUgPSAweERDMDAgfCB2YWx1ZSAmIDB4M0ZGO1xuXHRcdFx0fVxuXHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSk7XG5cdFx0XHRyZXR1cm4gb3V0cHV0O1xuXHRcdH0pLmpvaW4oJycpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgYmFzaWMgY29kZSBwb2ludCBpbnRvIGEgZGlnaXQvaW50ZWdlci5cblx0ICogQHNlZSBgZGlnaXRUb0Jhc2ljKClgXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlUG9pbnQgVGhlIGJhc2ljIG51bWVyaWMgY29kZSBwb2ludCB2YWx1ZS5cblx0ICogQHJldHVybnMge051bWJlcn0gVGhlIG51bWVyaWMgdmFsdWUgb2YgYSBiYXNpYyBjb2RlIHBvaW50IChmb3IgdXNlIGluXG5cdCAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaW4gdGhlIHJhbmdlIGAwYCB0byBgYmFzZSAtIDFgLCBvciBgYmFzZWAgaWZcblx0ICogdGhlIGNvZGUgcG9pbnQgZG9lcyBub3QgcmVwcmVzZW50IGEgdmFsdWUuXG5cdCAqL1xuXHRmdW5jdGlvbiBiYXNpY1RvRGlnaXQoY29kZVBvaW50KSB7XG5cdFx0aWYgKGNvZGVQb2ludCAtIDQ4IDwgMTApIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSAyMjtcblx0XHR9XG5cdFx0aWYgKGNvZGVQb2ludCAtIDY1IDwgMjYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSA2NTtcblx0XHR9XG5cdFx0aWYgKGNvZGVQb2ludCAtIDk3IDwgMjYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSA5Nztcblx0XHR9XG5cdFx0cmV0dXJuIGJhc2U7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBkaWdpdC9pbnRlZ2VyIGludG8gYSBiYXNpYyBjb2RlIHBvaW50LlxuXHQgKiBAc2VlIGBiYXNpY1RvRGlnaXQoKWBcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGRpZ2l0IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludC5cblx0ICogQHJldHVybnMge051bWJlcn0gVGhlIGJhc2ljIGNvZGUgcG9pbnQgd2hvc2UgdmFsdWUgKHdoZW4gdXNlZCBmb3Jcblx0ICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpcyBgZGlnaXRgLCB3aGljaCBuZWVkcyB0byBiZSBpbiB0aGUgcmFuZ2Vcblx0ICogYDBgIHRvIGBiYXNlIC0gMWAuIElmIGBmbGFnYCBpcyBub24temVybywgdGhlIHVwcGVyY2FzZSBmb3JtIGlzXG5cdCAqIHVzZWQ7IGVsc2UsIHRoZSBsb3dlcmNhc2UgZm9ybSBpcyB1c2VkLiBUaGUgYmVoYXZpb3IgaXMgdW5kZWZpbmVkXG5cdCAqIGlmIGBmbGFnYCBpcyBub24temVybyBhbmQgYGRpZ2l0YCBoYXMgbm8gdXBwZXJjYXNlIGZvcm0uXG5cdCAqL1xuXHRmdW5jdGlvbiBkaWdpdFRvQmFzaWMoZGlnaXQsIGZsYWcpIHtcblx0XHQvLyAgMC4uMjUgbWFwIHRvIEFTQ0lJIGEuLnogb3IgQS4uWlxuXHRcdC8vIDI2Li4zNSBtYXAgdG8gQVNDSUkgMC4uOVxuXHRcdHJldHVybiBkaWdpdCArIDIyICsgNzUgKiAoZGlnaXQgPCAyNikgLSAoKGZsYWcgIT0gMCkgPDwgNSk7XG5cdH1cblxuXHQvKipcblx0ICogQmlhcyBhZGFwdGF0aW9uIGZ1bmN0aW9uIGFzIHBlciBzZWN0aW9uIDMuNCBvZiBSRkMgMzQ5Mi5cblx0ICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0OTIjc2VjdGlvbi0zLjRcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGZ1bmN0aW9uIGFkYXB0KGRlbHRhLCBudW1Qb2ludHMsIGZpcnN0VGltZSkge1xuXHRcdHZhciBrID0gMDtcblx0XHRkZWx0YSA9IGZpcnN0VGltZSA/IGZsb29yKGRlbHRhIC8gZGFtcCkgOiBkZWx0YSA+PiAxO1xuXHRcdGRlbHRhICs9IGZsb29yKGRlbHRhIC8gbnVtUG9pbnRzKTtcblx0XHRmb3IgKC8qIG5vIGluaXRpYWxpemF0aW9uICovOyBkZWx0YSA+IGJhc2VNaW51c1RNaW4gKiB0TWF4ID4+IDE7IGsgKz0gYmFzZSkge1xuXHRcdFx0ZGVsdGEgPSBmbG9vcihkZWx0YSAvIGJhc2VNaW51c1RNaW4pO1xuXHRcdH1cblx0XHRyZXR1cm4gZmxvb3IoayArIChiYXNlTWludXNUTWluICsgMSkgKiBkZWx0YSAvIChkZWx0YSArIHNrZXcpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMgdG8gYSBzdHJpbmcgb2YgVW5pY29kZVxuXHQgKiBzeW1ib2xzLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVzdWx0aW5nIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG5cdCAqL1xuXHRmdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHtcblx0XHQvLyBEb24ndCB1c2UgVUNTLTJcblx0XHR2YXIgb3V0cHV0ID0gW10sXG5cdFx0ICAgIGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoLFxuXHRcdCAgICBvdXQsXG5cdFx0ICAgIGkgPSAwLFxuXHRcdCAgICBuID0gaW5pdGlhbE4sXG5cdFx0ICAgIGJpYXMgPSBpbml0aWFsQmlhcyxcblx0XHQgICAgYmFzaWMsXG5cdFx0ICAgIGosXG5cdFx0ICAgIGluZGV4LFxuXHRcdCAgICBvbGRpLFxuXHRcdCAgICB3LFxuXHRcdCAgICBrLFxuXHRcdCAgICBkaWdpdCxcblx0XHQgICAgdCxcblx0XHQgICAgLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovXG5cdFx0ICAgIGJhc2VNaW51c1Q7XG5cblx0XHQvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzOiBsZXQgYGJhc2ljYCBiZSB0aGUgbnVtYmVyIG9mIGlucHV0IGNvZGVcblx0XHQvLyBwb2ludHMgYmVmb3JlIHRoZSBsYXN0IGRlbGltaXRlciwgb3IgYDBgIGlmIHRoZXJlIGlzIG5vbmUsIHRoZW4gY29weVxuXHRcdC8vIHRoZSBmaXJzdCBiYXNpYyBjb2RlIHBvaW50cyB0byB0aGUgb3V0cHV0LlxuXG5cdFx0YmFzaWMgPSBpbnB1dC5sYXN0SW5kZXhPZihkZWxpbWl0ZXIpO1xuXHRcdGlmIChiYXNpYyA8IDApIHtcblx0XHRcdGJhc2ljID0gMDtcblx0XHR9XG5cblx0XHRmb3IgKGogPSAwOyBqIDwgYmFzaWM7ICsraikge1xuXHRcdFx0Ly8gaWYgaXQncyBub3QgYSBiYXNpYyBjb2RlIHBvaW50XG5cdFx0XHRpZiAoaW5wdXQuY2hhckNvZGVBdChqKSA+PSAweDgwKSB7XG5cdFx0XHRcdGVycm9yKCdub3QtYmFzaWMnKTtcblx0XHRcdH1cblx0XHRcdG91dHB1dC5wdXNoKGlucHV0LmNoYXJDb2RlQXQoaikpO1xuXHRcdH1cblxuXHRcdC8vIE1haW4gZGVjb2RpbmcgbG9vcDogc3RhcnQganVzdCBhZnRlciB0aGUgbGFzdCBkZWxpbWl0ZXIgaWYgYW55IGJhc2ljIGNvZGVcblx0XHQvLyBwb2ludHMgd2VyZSBjb3BpZWQ7IHN0YXJ0IGF0IHRoZSBiZWdpbm5pbmcgb3RoZXJ3aXNlLlxuXG5cdFx0Zm9yIChpbmRleCA9IGJhc2ljID4gMCA/IGJhc2ljICsgMSA6IDA7IGluZGV4IDwgaW5wdXRMZW5ndGg7IC8qIG5vIGZpbmFsIGV4cHJlc3Npb24gKi8pIHtcblxuXHRcdFx0Ly8gYGluZGV4YCBpcyB0aGUgaW5kZXggb2YgdGhlIG5leHQgY2hhcmFjdGVyIHRvIGJlIGNvbnN1bWVkLlxuXHRcdFx0Ly8gRGVjb2RlIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXIgaW50byBgZGVsdGFgLFxuXHRcdFx0Ly8gd2hpY2ggZ2V0cyBhZGRlZCB0byBgaWAuIFRoZSBvdmVyZmxvdyBjaGVja2luZyBpcyBlYXNpZXJcblx0XHRcdC8vIGlmIHdlIGluY3JlYXNlIGBpYCBhcyB3ZSBnbywgdGhlbiBzdWJ0cmFjdCBvZmYgaXRzIHN0YXJ0aW5nXG5cdFx0XHQvLyB2YWx1ZSBhdCB0aGUgZW5kIHRvIG9idGFpbiBgZGVsdGFgLlxuXHRcdFx0Zm9yIChvbGRpID0gaSwgdyA9IDEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuXG5cdFx0XHRcdGlmIChpbmRleCA+PSBpbnB1dExlbmd0aCkge1xuXHRcdFx0XHRcdGVycm9yKCdpbnZhbGlkLWlucHV0Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkaWdpdCA9IGJhc2ljVG9EaWdpdChpbnB1dC5jaGFyQ29kZUF0KGluZGV4KyspKTtcblxuXHRcdFx0XHRpZiAoZGlnaXQgPj0gYmFzZSB8fCBkaWdpdCA+IGZsb29yKChtYXhJbnQgLSBpKSAvIHcpKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpICs9IGRpZ2l0ICogdztcblx0XHRcdFx0dCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG5cblx0XHRcdFx0aWYgKGRpZ2l0IDwgdCkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuXHRcdFx0XHRpZiAodyA+IGZsb29yKG1heEludCAvIGJhc2VNaW51c1QpKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR3ICo9IGJhc2VNaW51c1Q7XG5cblx0XHRcdH1cblxuXHRcdFx0b3V0ID0gb3V0cHV0Lmxlbmd0aCArIDE7XG5cdFx0XHRiaWFzID0gYWRhcHQoaSAtIG9sZGksIG91dCwgb2xkaSA9PSAwKTtcblxuXHRcdFx0Ly8gYGlgIHdhcyBzdXBwb3NlZCB0byB3cmFwIGFyb3VuZCBmcm9tIGBvdXRgIHRvIGAwYCxcblx0XHRcdC8vIGluY3JlbWVudGluZyBgbmAgZWFjaCB0aW1lLCBzbyB3ZSdsbCBmaXggdGhhdCBub3c6XG5cdFx0XHRpZiAoZmxvb3IoaSAvIG91dCkgPiBtYXhJbnQgLSBuKSB7XG5cdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0fVxuXG5cdFx0XHRuICs9IGZsb29yKGkgLyBvdXQpO1xuXHRcdFx0aSAlPSBvdXQ7XG5cblx0XHRcdC8vIEluc2VydCBgbmAgYXQgcG9zaXRpb24gYGlgIG9mIHRoZSBvdXRwdXRcblx0XHRcdG91dHB1dC5zcGxpY2UoaSsrLCAwLCBuKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB1Y3MyZW5jb2RlKG91dHB1dCk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzIChlLmcuIGEgZG9tYWluIG5hbWUgbGFiZWwpIHRvIGFcblx0ICogUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKi9cblx0ZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7XG5cdFx0dmFyIG4sXG5cdFx0ICAgIGRlbHRhLFxuXHRcdCAgICBoYW5kbGVkQ1BDb3VudCxcblx0XHQgICAgYmFzaWNMZW5ndGgsXG5cdFx0ICAgIGJpYXMsXG5cdFx0ICAgIGosXG5cdFx0ICAgIG0sXG5cdFx0ICAgIHEsXG5cdFx0ICAgIGssXG5cdFx0ICAgIHQsXG5cdFx0ICAgIGN1cnJlbnRWYWx1ZSxcblx0XHQgICAgb3V0cHV0ID0gW10sXG5cdFx0ICAgIC8qKiBgaW5wdXRMZW5ndGhgIHdpbGwgaG9sZCB0aGUgbnVtYmVyIG9mIGNvZGUgcG9pbnRzIGluIGBpbnB1dGAuICovXG5cdFx0ICAgIGlucHV0TGVuZ3RoLFxuXHRcdCAgICAvKiogQ2FjaGVkIGNhbGN1bGF0aW9uIHJlc3VsdHMgKi9cblx0XHQgICAgaGFuZGxlZENQQ291bnRQbHVzT25lLFxuXHRcdCAgICBiYXNlTWludXNULFxuXHRcdCAgICBxTWludXNUO1xuXG5cdFx0Ly8gQ29udmVydCB0aGUgaW5wdXQgaW4gVUNTLTIgdG8gVW5pY29kZVxuXHRcdGlucHV0ID0gdWNzMmRlY29kZShpbnB1dCk7XG5cblx0XHQvLyBDYWNoZSB0aGUgbGVuZ3RoXG5cdFx0aW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cblx0XHQvLyBJbml0aWFsaXplIHRoZSBzdGF0ZVxuXHRcdG4gPSBpbml0aWFsTjtcblx0XHRkZWx0YSA9IDA7XG5cdFx0YmlhcyA9IGluaXRpYWxCaWFzO1xuXG5cdFx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50c1xuXHRcdGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblx0XHRcdGlmIChjdXJyZW50VmFsdWUgPCAweDgwKSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShjdXJyZW50VmFsdWUpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRoYW5kbGVkQ1BDb3VudCA9IGJhc2ljTGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDtcblxuXHRcdC8vIGBoYW5kbGVkQ1BDb3VudGAgaXMgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyB0aGF0IGhhdmUgYmVlbiBoYW5kbGVkO1xuXHRcdC8vIGBiYXNpY0xlbmd0aGAgaXMgdGhlIG51bWJlciBvZiBiYXNpYyBjb2RlIHBvaW50cy5cblxuXHRcdC8vIEZpbmlzaCB0aGUgYmFzaWMgc3RyaW5nIC0gaWYgaXQgaXMgbm90IGVtcHR5IC0gd2l0aCBhIGRlbGltaXRlclxuXHRcdGlmIChiYXNpY0xlbmd0aCkge1xuXHRcdFx0b3V0cHV0LnB1c2goZGVsaW1pdGVyKTtcblx0XHR9XG5cblx0XHQvLyBNYWluIGVuY29kaW5nIGxvb3A6XG5cdFx0d2hpbGUgKGhhbmRsZWRDUENvdW50IDwgaW5wdXRMZW5ndGgpIHtcblxuXHRcdFx0Ly8gQWxsIG5vbi1iYXNpYyBjb2RlIHBvaW50cyA8IG4gaGF2ZSBiZWVuIGhhbmRsZWQgYWxyZWFkeS4gRmluZCB0aGUgbmV4dFxuXHRcdFx0Ly8gbGFyZ2VyIG9uZTpcblx0XHRcdGZvciAobSA9IG1heEludCwgaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlID49IG4gJiYgY3VycmVudFZhbHVlIDwgbSkge1xuXHRcdFx0XHRcdG0gPSBjdXJyZW50VmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gSW5jcmVhc2UgYGRlbHRhYCBlbm91Z2ggdG8gYWR2YW5jZSB0aGUgZGVjb2RlcidzIDxuLGk+IHN0YXRlIHRvIDxtLDA+LFxuXHRcdFx0Ly8gYnV0IGd1YXJkIGFnYWluc3Qgb3ZlcmZsb3dcblx0XHRcdGhhbmRsZWRDUENvdW50UGx1c09uZSA9IGhhbmRsZWRDUENvdW50ICsgMTtcblx0XHRcdGlmIChtIC0gbiA+IGZsb29yKChtYXhJbnQgLSBkZWx0YSkgLyBoYW5kbGVkQ1BDb3VudFBsdXNPbmUpKSB7XG5cdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWx0YSArPSAobSAtIG4pICogaGFuZGxlZENQQ291bnRQbHVzT25lO1xuXHRcdFx0biA9IG07XG5cblx0XHRcdGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPCBuICYmICsrZGVsdGEgPiBtYXhJbnQpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPT0gbikge1xuXHRcdFx0XHRcdC8vIFJlcHJlc2VudCBkZWx0YSBhcyBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyXG5cdFx0XHRcdFx0Zm9yIChxID0gZGVsdGEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuXHRcdFx0XHRcdFx0dCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG5cdFx0XHRcdFx0XHRpZiAocSA8IHQpIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRxTWludXNUID0gcSAtIHQ7XG5cdFx0XHRcdFx0XHRiYXNlTWludXNUID0gYmFzZSAtIHQ7XG5cdFx0XHRcdFx0XHRvdXRwdXQucHVzaChcblx0XHRcdFx0XHRcdFx0c3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyh0ICsgcU1pbnVzVCAlIGJhc2VNaW51c1QsIDApKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHEgPSBmbG9vcihxTWludXNUIC8gYmFzZU1pbnVzVCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyhxLCAwKSkpO1xuXHRcdFx0XHRcdGJpYXMgPSBhZGFwdChkZWx0YSwgaGFuZGxlZENQQ291bnRQbHVzT25lLCBoYW5kbGVkQ1BDb3VudCA9PSBiYXNpY0xlbmd0aCk7XG5cdFx0XHRcdFx0ZGVsdGEgPSAwO1xuXHRcdFx0XHRcdCsraGFuZGxlZENQQ291bnQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0KytkZWx0YTtcblx0XHRcdCsrbjtcblxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3Ncblx0ICogdG8gVW5pY29kZS4gT25seSB0aGUgUHVueWNvZGVkIHBhcnRzIG9mIHRoZSBpbnB1dCB3aWxsIGJlIGNvbnZlcnRlZCwgaS5lLlxuXHQgKiBpdCBkb2Vzbid0IG1hdHRlciBpZiB5b3UgY2FsbCBpdCBvbiBhIHN0cmluZyB0aGF0IGhhcyBhbHJlYWR5IGJlZW5cblx0ICogY29udmVydGVkIHRvIFVuaWNvZGUuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFB1bnljb2RlZCBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzIHRvXG5cdCAqIGNvbnZlcnQgdG8gVW5pY29kZS5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIFVuaWNvZGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIFB1bnljb2RlXG5cdCAqIHN0cmluZy5cblx0ICovXG5cdGZ1bmN0aW9uIHRvVW5pY29kZShpbnB1dCkge1xuXHRcdHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykge1xuXHRcdFx0cmV0dXJuIHJlZ2V4UHVueWNvZGUudGVzdChzdHJpbmcpXG5cdFx0XHRcdD8gZGVjb2RlKHN0cmluZy5zbGljZSg0KS50b0xvd2VyQ2FzZSgpKVxuXHRcdFx0XHQ6IHN0cmluZztcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFVuaWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3MgdG9cblx0ICogUHVueWNvZGUuIE9ubHkgdGhlIG5vbi1BU0NJSSBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgd2lsbCBiZSBjb252ZXJ0ZWQsXG5cdCAqIGkuZS4gaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0J3MgYWxyZWFkeSBpblxuXHQgKiBBU0NJSS5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0byBjb252ZXJ0LCBhcyBhXG5cdCAqIFVuaWNvZGUgc3RyaW5nLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgUHVueWNvZGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIGRvbWFpbiBuYW1lIG9yXG5cdCAqIGVtYWlsIGFkZHJlc3MuXG5cdCAqL1xuXHRmdW5jdGlvbiB0b0FTQ0lJKGlucHV0KSB7XG5cdFx0cmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRyZXR1cm4gcmVnZXhOb25BU0NJSS50ZXN0KHN0cmluZylcblx0XHRcdFx0PyAneG4tLScgKyBlbmNvZGUoc3RyaW5nKVxuXHRcdFx0XHQ6IHN0cmluZztcblx0XHR9KTtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdC8qKiBEZWZpbmUgdGhlIHB1YmxpYyBBUEkgKi9cblx0cHVueWNvZGUgPSB7XG5cdFx0LyoqXG5cdFx0ICogQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IFB1bnljb2RlLmpzIHZlcnNpb24gbnVtYmVyLlxuXHRcdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHRcdCAqIEB0eXBlIFN0cmluZ1xuXHRcdCAqL1xuXHRcdCd2ZXJzaW9uJzogJzEuNC4xJyxcblx0XHQvKipcblx0XHQgKiBBbiBvYmplY3Qgb2YgbWV0aG9kcyB0byBjb252ZXJ0IGZyb20gSmF2YVNjcmlwdCdzIGludGVybmFsIGNoYXJhY3RlclxuXHRcdCAqIHJlcHJlc2VudGF0aW9uIChVQ1MtMikgdG8gVW5pY29kZSBjb2RlIHBvaW50cywgYW5kIGJhY2suXG5cdFx0ICogQHNlZSA8aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG5cdFx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdFx0ICogQHR5cGUgT2JqZWN0XG5cdFx0ICovXG5cdFx0J3VjczInOiB7XG5cdFx0XHQnZGVjb2RlJzogdWNzMmRlY29kZSxcblx0XHRcdCdlbmNvZGUnOiB1Y3MyZW5jb2RlXG5cdFx0fSxcblx0XHQnZGVjb2RlJzogZGVjb2RlLFxuXHRcdCdlbmNvZGUnOiBlbmNvZGUsXG5cdFx0J3RvQVNDSUknOiB0b0FTQ0lJLFxuXHRcdCd0b1VuaWNvZGUnOiB0b1VuaWNvZGVcblx0fTtcblxuXHQvKiogRXhwb3NlIGBwdW55Y29kZWAgKi9cblx0Ly8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3Igc3BlY2lmaWMgY29uZGl0aW9uIHBhdHRlcm5zXG5cdC8vIGxpa2UgdGhlIGZvbGxvd2luZzpcblx0aWYgKFxuXHRcdHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmXG5cdFx0ZGVmaW5lLmFtZFxuXHQpIHtcblx0XHRkZWZpbmUoJ3B1bnljb2RlJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gcHVueWNvZGU7XG5cdFx0fSk7XG5cdH0gZWxzZSBpZiAoZnJlZUV4cG9ydHMgJiYgZnJlZU1vZHVsZSkge1xuXHRcdGlmIChtb2R1bGUuZXhwb3J0cyA9PSBmcmVlRXhwb3J0cykge1xuXHRcdFx0Ly8gaW4gTm9kZS5qcywgaW8uanMsIG9yIFJpbmdvSlMgdjAuOC4wK1xuXHRcdFx0ZnJlZU1vZHVsZS5leHBvcnRzID0gcHVueWNvZGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGluIE5hcndoYWwgb3IgUmluZ29KUyB2MC43LjAtXG5cdFx0XHRmb3IgKGtleSBpbiBwdW55Y29kZSkge1xuXHRcdFx0XHRwdW55Y29kZS5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIChmcmVlRXhwb3J0c1trZXldID0gcHVueWNvZGVba2V5XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdC8vIGluIFJoaW5vIG9yIGEgd2ViIGJyb3dzZXJcblx0XHRyb290LnB1bnljb2RlID0gcHVueWNvZGU7XG5cdH1cblxufSh0aGlzKSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0EsVUFhQTtBQUNBO0FBQ0E7O0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/node-libs-browser/node_modules/punycode/punycode.js\n");

/***/ }),

/***/ "./node_modules/path-browserify/index.js":
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/path-browserify/index.js\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/querystring-es3/decode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/decode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2RlY29kZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy1lczMvZGVjb2RlLmpzPzcxYTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gSWYgb2JqLmhhc093blByb3BlcnR5IGhhcyBiZWVuIG92ZXJyaWRkZW4sIHRoZW4gY2FsbGluZ1xuLy8gb2JqLmhhc093blByb3BlcnR5KHByb3ApIHdpbGwgYnJlYWsuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9pc3N1ZXMvMTcwN1xuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihxcywgc2VwLCBlcSwgb3B0aW9ucykge1xuICBzZXAgPSBzZXAgfHwgJyYnO1xuICBlcSA9IGVxIHx8ICc9JztcbiAgdmFyIG9iaiA9IHt9O1xuXG4gIGlmICh0eXBlb2YgcXMgIT09ICdzdHJpbmcnIHx8IHFzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICB2YXIgcmVnZXhwID0gL1xcKy9nO1xuICBxcyA9IHFzLnNwbGl0KHNlcCk7XG5cbiAgdmFyIG1heEtleXMgPSAxMDAwO1xuICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5tYXhLZXlzID09PSAnbnVtYmVyJykge1xuICAgIG1heEtleXMgPSBvcHRpb25zLm1heEtleXM7XG4gIH1cblxuICB2YXIgbGVuID0gcXMubGVuZ3RoO1xuICAvLyBtYXhLZXlzIDw9IDAgbWVhbnMgdGhhdCB3ZSBzaG91bGQgbm90IGxpbWl0IGtleXMgY291bnRcbiAgaWYgKG1heEtleXMgPiAwICYmIGxlbiA+IG1heEtleXMpIHtcbiAgICBsZW4gPSBtYXhLZXlzO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIHZhciB4ID0gcXNbaV0ucmVwbGFjZShyZWdleHAsICclMjAnKSxcbiAgICAgICAgaWR4ID0geC5pbmRleE9mKGVxKSxcbiAgICAgICAga3N0ciwgdnN0ciwgaywgdjtcblxuICAgIGlmIChpZHggPj0gMCkge1xuICAgICAga3N0ciA9IHguc3Vic3RyKDAsIGlkeCk7XG4gICAgICB2c3RyID0geC5zdWJzdHIoaWR4ICsgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtzdHIgPSB4O1xuICAgICAgdnN0ciA9ICcnO1xuICAgIH1cblxuICAgIGsgPSBkZWNvZGVVUklDb21wb25lbnQoa3N0cik7XG4gICAgdiA9IGRlY29kZVVSSUNvbXBvbmVudCh2c3RyKTtcblxuICAgIGlmICghaGFzT3duUHJvcGVydHkob2JqLCBrKSkge1xuICAgICAgb2JqW2tdID0gdjtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkob2JqW2tdKSkge1xuICAgICAgb2JqW2tdLnB1c2godik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrXSA9IFtvYmpba10sIHZdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHhzKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeHMpID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/querystring-es3/decode.js\n");

/***/ }),

/***/ "./node_modules/querystring-es3/encode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/encode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2VuY29kZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy1lczMvZW5jb2RlLmpzP2U0ZWMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHN0cmluZ2lmeVByaW1pdGl2ZSA9IGZ1bmN0aW9uKHYpIHtcbiAgc3dpdGNoICh0eXBlb2Ygdikge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gdjtcblxuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuIHYgPyAndHJ1ZScgOiAnZmFsc2UnO1xuXG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIHJldHVybiBpc0Zpbml0ZSh2KSA/IHYgOiAnJztcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJyc7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBzZXAsIGVxLCBuYW1lKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgb2JqID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG1hcChvYmplY3RLZXlzKG9iaiksIGZ1bmN0aW9uKGspIHtcbiAgICAgIHZhciBrcyA9IGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUoaykpICsgZXE7XG4gICAgICBpZiAoaXNBcnJheShvYmpba10pKSB7XG4gICAgICAgIHJldHVybiBtYXAob2JqW2tdLCBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZSh2KSk7XG4gICAgICAgIH0pLmpvaW4oc2VwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqW2tdKSk7XG4gICAgICB9XG4gICAgfSkuam9pbihzZXApO1xuXG4gIH1cblxuICBpZiAoIW5hbWUpIHJldHVybiAnJztcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUobmFtZSkpICsgZXEgK1xuICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmopKTtcbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoeHMpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG5mdW5jdGlvbiBtYXAgKHhzLCBmKSB7XG4gIGlmICh4cy5tYXApIHJldHVybiB4cy5tYXAoZik7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgIHJlcy5wdXNoKGYoeHNbaV0sIGkpKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHJlcy5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/querystring-es3/encode.js\n");

/***/ }),

/***/ "./node_modules/querystring-es3/index.js":
/*!***********************************************!*\
  !*** ./node_modules/querystring-es3/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.decode = exports.parse = __webpack_require__(/*! ./decode */ \"./node_modules/querystring-es3/decode.js\");\nexports.encode = exports.stringify = __webpack_require__(/*! ./encode */ \"./node_modules/querystring-es3/encode.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nLWVzMy9pbmRleC5qcz82MjdhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5kZWNvZGUgPSBleHBvcnRzLnBhcnNlID0gcmVxdWlyZSgnLi9kZWNvZGUnKTtcbmV4cG9ydHMuZW5jb2RlID0gZXhwb3J0cy5zdHJpbmdpZnkgPSByZXF1aXJlKCcuL2VuY29kZScpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/querystring-es3/index.js\n");

/***/ }),

/***/ "./node_modules/string-argv/index.js":
/*!*******************************************!*\
  !*** ./node_modules/string-argv/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nexports.__esModule = true;\r\nfunction parseArgsStringToArgv(value, env, file) {\r\n    // ([^\\s'\"]([^\\s'\"]*(['\"])([^\\3]*?)\\3)+[^\\s'\"]*) Matches nested quotes until the first space outside of quotes\r\n    // [^\\s'\"]+ or Match if not a space ' or \"\r\n    // (['\"])([^\\5]*?)\\5 or Match \"quoted text\" without quotes\r\n    // `\\3` and `\\5` are a backreference to the quote style (' or \") captured\r\n    var myRegexp = /([^\\s'\"]([^\\s'\"]*(['\"])([^\\3]*?)\\3)+[^\\s'\"]*)|[^\\s'\"]+|(['\"])([^\\5]*?)\\5/gi;\r\n    var myString = value;\r\n    var myArray = [];\r\n    if (env) {\r\n        myArray.push(env);\r\n    }\r\n    if (file) {\r\n        myArray.push(file);\r\n    }\r\n    var match;\r\n    do {\r\n        // Each call to exec returns the next regex match as an array\r\n        match = myRegexp.exec(myString);\r\n        if (match !== null) {\r\n            // Index 1 in the array is the captured group if it exists\r\n            // Index 0 is the matched text, which we use if no captured group exists\r\n            myArray.push(firstString(match[1], match[6], match[0]));\r\n        }\r\n    } while (match !== null);\r\n    return myArray;\r\n}\r\nexports[\"default\"] = parseArgsStringToArgv;\r\nexports.parseArgsStringToArgv = parseArgsStringToArgv;\r\n// Accepts any number of arguments, and returns the first one that is a string\r\n// (even an empty string)\r\nfunction firstString() {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    for (var i = 0; i < args.length; i++) {\r\n        var arg = args[i];\r\n        if (typeof arg === \"string\") {\r\n            return arg;\r\n        }\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3RyaW5nLWFyZ3YvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyaW5nLWFyZ3YvaW5kZXguanM/MTRkOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuZnVuY3Rpb24gcGFyc2VBcmdzU3RyaW5nVG9Bcmd2KHZhbHVlLCBlbnYsIGZpbGUpIHtcclxuICAgIC8vIChbXlxccydcIl0oW15cXHMnXCJdKihbJ1wiXSkoW15cXDNdKj8pXFwzKStbXlxccydcIl0qKSBNYXRjaGVzIG5lc3RlZCBxdW90ZXMgdW50aWwgdGhlIGZpcnN0IHNwYWNlIG91dHNpZGUgb2YgcXVvdGVzXHJcbiAgICAvLyBbXlxccydcIl0rIG9yIE1hdGNoIGlmIG5vdCBhIHNwYWNlICcgb3IgXCJcclxuICAgIC8vIChbJ1wiXSkoW15cXDVdKj8pXFw1IG9yIE1hdGNoIFwicXVvdGVkIHRleHRcIiB3aXRob3V0IHF1b3Rlc1xyXG4gICAgLy8gYFxcM2AgYW5kIGBcXDVgIGFyZSBhIGJhY2tyZWZlcmVuY2UgdG8gdGhlIHF1b3RlIHN0eWxlICgnIG9yIFwiKSBjYXB0dXJlZFxyXG4gICAgdmFyIG15UmVnZXhwID0gLyhbXlxccydcIl0oW15cXHMnXCJdKihbJ1wiXSkoW15cXDNdKj8pXFwzKStbXlxccydcIl0qKXxbXlxccydcIl0rfChbJ1wiXSkoW15cXDVdKj8pXFw1L2dpO1xyXG4gICAgdmFyIG15U3RyaW5nID0gdmFsdWU7XHJcbiAgICB2YXIgbXlBcnJheSA9IFtdO1xyXG4gICAgaWYgKGVudikge1xyXG4gICAgICAgIG15QXJyYXkucHVzaChlbnYpO1xyXG4gICAgfVxyXG4gICAgaWYgKGZpbGUpIHtcclxuICAgICAgICBteUFycmF5LnB1c2goZmlsZSk7XHJcbiAgICB9XHJcbiAgICB2YXIgbWF0Y2g7XHJcbiAgICBkbyB7XHJcbiAgICAgICAgLy8gRWFjaCBjYWxsIHRvIGV4ZWMgcmV0dXJucyB0aGUgbmV4dCByZWdleCBtYXRjaCBhcyBhbiBhcnJheVxyXG4gICAgICAgIG1hdGNoID0gbXlSZWdleHAuZXhlYyhteVN0cmluZyk7XHJcbiAgICAgICAgaWYgKG1hdGNoICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIEluZGV4IDEgaW4gdGhlIGFycmF5IGlzIHRoZSBjYXB0dXJlZCBncm91cCBpZiBpdCBleGlzdHNcclxuICAgICAgICAgICAgLy8gSW5kZXggMCBpcyB0aGUgbWF0Y2hlZCB0ZXh0LCB3aGljaCB3ZSB1c2UgaWYgbm8gY2FwdHVyZWQgZ3JvdXAgZXhpc3RzXHJcbiAgICAgICAgICAgIG15QXJyYXkucHVzaChmaXJzdFN0cmluZyhtYXRjaFsxXSwgbWF0Y2hbNl0sIG1hdGNoWzBdKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSB3aGlsZSAobWF0Y2ggIT09IG51bGwpO1xyXG4gICAgcmV0dXJuIG15QXJyYXk7XHJcbn1cclxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBwYXJzZUFyZ3NTdHJpbmdUb0FyZ3Y7XHJcbmV4cG9ydHMucGFyc2VBcmdzU3RyaW5nVG9Bcmd2ID0gcGFyc2VBcmdzU3RyaW5nVG9Bcmd2O1xyXG4vLyBBY2NlcHRzIGFueSBudW1iZXIgb2YgYXJndW1lbnRzLCBhbmQgcmV0dXJucyB0aGUgZmlyc3Qgb25lIHRoYXQgaXMgYSBzdHJpbmdcclxuLy8gKGV2ZW4gYW4gZW1wdHkgc3RyaW5nKVxyXG5mdW5jdGlvbiBmaXJzdFN0cmluZygpIHtcclxuICAgIHZhciBhcmdzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhciBhcmcgPSBhcmdzW2ldO1xyXG4gICAgICAgIGlmICh0eXBlb2YgYXJnID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhcmc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/string-argv/index.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/CJSImportProcessor.js":
/*!*********************************************************!*\
  !*** ./node_modules/sucrase/dist/CJSImportProcessor.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, \"__esModule\", {value: true});var _HelperManager = __webpack_require__(/*! ./HelperManager */ \"./node_modules/sucrase/dist/HelperManager.js\");\n\n\nvar _tokenizer = __webpack_require__(/*! ./parser/tokenizer */ \"./node_modules/sucrase/dist/parser/tokenizer/index.js\");\nvar _keywords = __webpack_require__(/*! ./parser/tokenizer/keywords */ \"./node_modules/sucrase/dist/parser/tokenizer/keywords.js\");\nvar _types = __webpack_require__(/*! ./parser/tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\n\nvar _getNonTypeIdentifiers = __webpack_require__(/*! ./util/getNonTypeIdentifiers */ \"./node_modules/sucrase/dist/util/getNonTypeIdentifiers.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Class responsible for preprocessing and bookkeeping import and export declarations within the\n * file.\n *\n * TypeScript uses a simpler mechanism that does not use functions like interopRequireDefault and\n * interopRequireWildcard, so we also allow that mode for compatibility.\n */\n class CJSImportProcessor {\n   __init() {this.nonTypeIdentifiers = new Set()}\n   __init2() {this.importInfoByPath = new Map()}\n   __init3() {this.importsToReplace = new Map()}\n   __init4() {this.identifierReplacements = new Map()}\n   __init5() {this.exportBindingsByLocalName = new Map()}\n  \n\n  constructor(\n     nameManager,\n     tokens,\n     enableLegacyTypeScriptModuleInterop,\n     options,\n     isTypeScriptTransformEnabled,\n  ) {;this.nameManager = nameManager;this.tokens = tokens;this.enableLegacyTypeScriptModuleInterop = enableLegacyTypeScriptModuleInterop;this.options = options;this.isTypeScriptTransformEnabled = isTypeScriptTransformEnabled;CJSImportProcessor.prototype.__init.call(this);CJSImportProcessor.prototype.__init2.call(this);CJSImportProcessor.prototype.__init3.call(this);CJSImportProcessor.prototype.__init4.call(this);CJSImportProcessor.prototype.__init5.call(this);\n    this.helpers = new (0, _HelperManager.HelperManager)(nameManager);\n  }\n\n  getPrefixCode() {\n    return this.helpers.emitHelpers();\n  }\n\n  preprocessTokens() {\n    for (let i = 0; i < this.tokens.tokens.length; i++) {\n      if (\n        this.tokens.matches1AtIndex(i, _types.TokenType._import) &&\n        !this.tokens.matches3AtIndex(i, _types.TokenType._import, _types.TokenType.name, _types.TokenType.eq)\n      ) {\n        this.preprocessImportAtIndex(i);\n      }\n      if (\n        this.tokens.matches1AtIndex(i, _types.TokenType._export) &&\n        !this.tokens.matches2AtIndex(i, _types.TokenType._export, _types.TokenType.eq)\n      ) {\n        this.preprocessExportAtIndex(i);\n      }\n    }\n    this.generateImportReplacements();\n  }\n\n  /**\n   * In TypeScript, import statements that only import types should be removed. This does not count\n   * bare imports.\n   */\n  pruneTypeOnlyImports() {\n    this.nonTypeIdentifiers = _getNonTypeIdentifiers.getNonTypeIdentifiers.call(void 0, this.tokens, this.options);\n    for (const [path, importInfo] of this.importInfoByPath.entries()) {\n      if (\n        importInfo.hasBareImport ||\n        importInfo.hasStarExport ||\n        importInfo.exportStarNames.length > 0 ||\n        importInfo.namedExports.length > 0\n      ) {\n        continue;\n      }\n      const names = [\n        ...importInfo.defaultNames,\n        ...importInfo.wildcardNames,\n        ...importInfo.namedImports.map(({localName}) => localName),\n      ];\n      if (names.every((name) => this.isTypeName(name))) {\n        this.importsToReplace.set(path, \"\");\n      }\n    }\n  }\n\n  isTypeName(name) {\n    return this.isTypeScriptTransformEnabled && !this.nonTypeIdentifiers.has(name);\n  }\n\n   generateImportReplacements() {\n    for (const [path, importInfo] of this.importInfoByPath.entries()) {\n      const {\n        defaultNames,\n        wildcardNames,\n        namedImports,\n        namedExports,\n        exportStarNames,\n        hasStarExport,\n      } = importInfo;\n\n      if (\n        defaultNames.length === 0 &&\n        wildcardNames.length === 0 &&\n        namedImports.length === 0 &&\n        namedExports.length === 0 &&\n        exportStarNames.length === 0 &&\n        !hasStarExport\n      ) {\n        // Import is never used, so don't even assign a name.\n        this.importsToReplace.set(path, `require('${path}');`);\n        continue;\n      }\n\n      const primaryImportName = this.getFreeIdentifierForPath(path);\n      let secondaryImportName;\n      if (this.enableLegacyTypeScriptModuleInterop) {\n        secondaryImportName = primaryImportName;\n      } else {\n        secondaryImportName =\n          wildcardNames.length > 0 ? wildcardNames[0] : this.getFreeIdentifierForPath(path);\n      }\n      let requireCode = `var ${primaryImportName} = require('${path}');`;\n      if (wildcardNames.length > 0) {\n        for (const wildcardName of wildcardNames) {\n          const moduleExpr = this.enableLegacyTypeScriptModuleInterop\n            ? primaryImportName\n            : `${this.helpers.getHelperName(\"interopRequireWildcard\")}(${primaryImportName})`;\n          requireCode += ` var ${wildcardName} = ${moduleExpr};`;\n        }\n      } else if (exportStarNames.length > 0 && secondaryImportName !== primaryImportName) {\n        requireCode += ` var ${secondaryImportName} = ${this.helpers.getHelperName(\n          \"interopRequireWildcard\",\n        )}(${primaryImportName});`;\n      } else if (defaultNames.length > 0 && secondaryImportName !== primaryImportName) {\n        requireCode += ` var ${secondaryImportName} = ${this.helpers.getHelperName(\n          \"interopRequireDefault\",\n        )}(${primaryImportName});`;\n      }\n\n      for (const {importedName, localName} of namedExports) {\n        requireCode += ` ${this.helpers.getHelperName(\n          \"createNamedExportFrom\",\n        )}(${primaryImportName}, '${localName}', '${importedName}');`;\n      }\n      for (const exportStarName of exportStarNames) {\n        requireCode += ` exports.${exportStarName} = ${secondaryImportName};`;\n      }\n      if (hasStarExport) {\n        requireCode += ` ${this.helpers.getHelperName(\"createStarExport\")}(${primaryImportName});`;\n      }\n\n      this.importsToReplace.set(path, requireCode);\n\n      for (const defaultName of defaultNames) {\n        this.identifierReplacements.set(defaultName, `${secondaryImportName}.default`);\n      }\n      for (const {importedName, localName} of namedImports) {\n        this.identifierReplacements.set(localName, `${primaryImportName}.${importedName}`);\n      }\n    }\n  }\n\n   getFreeIdentifierForPath(path) {\n    const components = path.split(\"/\");\n    const lastComponent = components[components.length - 1];\n    const baseName = lastComponent.replace(/\\W/g, \"\");\n    return this.nameManager.claimFreeName(`_${baseName}`);\n  }\n\n   preprocessImportAtIndex(index) {\n    const defaultNames = [];\n    const wildcardNames = [];\n    let namedImports = [];\n\n    index++;\n    if (\n      (this.tokens.matchesContextualAtIndex(index, _keywords.ContextualKeyword._type) ||\n        this.tokens.matches1AtIndex(index, _types.TokenType._typeof)) &&\n      !this.tokens.matches1AtIndex(index + 1, _types.TokenType.comma) &&\n      !this.tokens.matchesContextualAtIndex(index + 1, _keywords.ContextualKeyword._from)\n    ) {\n      // import type declaration, so no need to process anything.\n      return;\n    }\n\n    if (this.tokens.matches1AtIndex(index, _types.TokenType.parenL)) {\n      // Dynamic import, so nothing to do\n      return;\n    }\n\n    if (this.tokens.matches1AtIndex(index, _types.TokenType.name)) {\n      defaultNames.push(this.tokens.identifierNameAtIndex(index));\n      index++;\n      if (this.tokens.matches1AtIndex(index, _types.TokenType.comma)) {\n        index++;\n      }\n    }\n\n    if (this.tokens.matches1AtIndex(index, _types.TokenType.star)) {\n      // * as\n      index += 2;\n      wildcardNames.push(this.tokens.identifierNameAtIndex(index));\n      index++;\n    }\n\n    if (this.tokens.matches1AtIndex(index, _types.TokenType.braceL)) {\n      index++;\n      ({newIndex: index, namedImports} = this.getNamedImports(index));\n    }\n\n    if (this.tokens.matchesContextualAtIndex(index, _keywords.ContextualKeyword._from)) {\n      index++;\n    }\n\n    if (!this.tokens.matches1AtIndex(index, _types.TokenType.string)) {\n      throw new Error(\"Expected string token at the end of import statement.\");\n    }\n    const path = this.tokens.stringValueAtIndex(index);\n    const importInfo = this.getImportInfo(path);\n    importInfo.defaultNames.push(...defaultNames);\n    importInfo.wildcardNames.push(...wildcardNames);\n    importInfo.namedImports.push(...namedImports);\n    if (defaultNames.length === 0 && wildcardNames.length === 0 && namedImports.length === 0) {\n      importInfo.hasBareImport = true;\n    }\n  }\n\n   preprocessExportAtIndex(index) {\n    if (\n      this.tokens.matches2AtIndex(index, _types.TokenType._export, _types.TokenType._var) ||\n      this.tokens.matches2AtIndex(index, _types.TokenType._export, _types.TokenType._let) ||\n      this.tokens.matches2AtIndex(index, _types.TokenType._export, _types.TokenType._const)\n    ) {\n      this.preprocessVarExportAtIndex(index);\n    } else if (\n      this.tokens.matches2AtIndex(index, _types.TokenType._export, _types.TokenType._function) ||\n      this.tokens.matches2AtIndex(index, _types.TokenType._export, _types.TokenType._class)\n    ) {\n      const exportName = this.tokens.identifierNameAtIndex(index + 2);\n      this.addExportBinding(exportName, exportName);\n    } else if (this.tokens.matches3AtIndex(index, _types.TokenType._export, _types.TokenType.name, _types.TokenType._function)) {\n      const exportName = this.tokens.identifierNameAtIndex(index + 3);\n      this.addExportBinding(exportName, exportName);\n    } else if (this.tokens.matches2AtIndex(index, _types.TokenType._export, _types.TokenType.braceL)) {\n      this.preprocessNamedExportAtIndex(index);\n    } else if (this.tokens.matches2AtIndex(index, _types.TokenType._export, _types.TokenType.star)) {\n      this.preprocessExportStarAtIndex(index);\n    }\n  }\n\n   preprocessVarExportAtIndex(index) {\n    let depth = 0;\n    // Handle cases like `export let {x} = y;`, starting at the open-brace in that case.\n    for (let i = index + 2; ; i++) {\n      if (\n        this.tokens.matches1AtIndex(i, _types.TokenType.braceL) ||\n        this.tokens.matches1AtIndex(i, _types.TokenType.dollarBraceL) ||\n        this.tokens.matches1AtIndex(i, _types.TokenType.bracketL)\n      ) {\n        depth++;\n      } else if (\n        this.tokens.matches1AtIndex(i, _types.TokenType.braceR) ||\n        this.tokens.matches1AtIndex(i, _types.TokenType.bracketR)\n      ) {\n        depth--;\n      } else if (depth === 0 && !this.tokens.matches1AtIndex(i, _types.TokenType.name)) {\n        break;\n      } else if (this.tokens.matches1AtIndex(1, _types.TokenType.eq)) {\n        const endIndex = this.tokens.currentToken().rhsEndIndex;\n        if (endIndex == null) {\n          throw new Error(\"Expected = token with an end index.\");\n        }\n        i = endIndex - 1;\n      } else {\n        const token = this.tokens.tokens[i];\n        if (_tokenizer.isDeclaration.call(void 0, token)) {\n          const exportName = this.tokens.identifierNameAtIndex(i);\n          this.identifierReplacements.set(exportName, `exports.${exportName}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Walk this export statement just in case it's an export...from statement.\n   * If it is, combine it into the import info for that path. Otherwise, just\n   * bail out; it'll be handled later.\n   */\n   preprocessNamedExportAtIndex(index) {\n    // export {\n    index += 2;\n    const {newIndex, namedImports} = this.getNamedImports(index);\n    index = newIndex;\n\n    if (this.tokens.matchesContextualAtIndex(index, _keywords.ContextualKeyword._from)) {\n      index++;\n    } else {\n      // Reinterpret \"a as b\" to be local/exported rather than imported/local.\n      for (const {importedName: localName, localName: exportedName} of namedImports) {\n        this.addExportBinding(localName, exportedName);\n      }\n      return;\n    }\n\n    if (!this.tokens.matches1AtIndex(index, _types.TokenType.string)) {\n      throw new Error(\"Expected string token at the end of import statement.\");\n    }\n    const path = this.tokens.stringValueAtIndex(index);\n    const importInfo = this.getImportInfo(path);\n    importInfo.namedExports.push(...namedImports);\n  }\n\n   preprocessExportStarAtIndex(index) {\n    let exportedName = null;\n    if (this.tokens.matches3AtIndex(index, _types.TokenType._export, _types.TokenType.star, _types.TokenType._as)) {\n      // export * as\n      index += 3;\n      exportedName = this.tokens.identifierNameAtIndex(index);\n      // foo from\n      index += 2;\n    } else {\n      // export * from\n      index += 3;\n    }\n    if (!this.tokens.matches1AtIndex(index, _types.TokenType.string)) {\n      throw new Error(\"Expected string token at the end of star export statement.\");\n    }\n    const path = this.tokens.stringValueAtIndex(index);\n    const importInfo = this.getImportInfo(path);\n    if (exportedName !== null) {\n      importInfo.exportStarNames.push(exportedName);\n    } else {\n      importInfo.hasStarExport = true;\n    }\n  }\n\n   getNamedImports(index) {\n    const namedImports = [];\n    while (true) {\n      if (this.tokens.matches1AtIndex(index, _types.TokenType.braceR)) {\n        index++;\n        break;\n      }\n\n      // Flow type imports should just be ignored.\n      let isTypeImport = false;\n      if (\n        (this.tokens.matchesContextualAtIndex(index, _keywords.ContextualKeyword._type) ||\n          this.tokens.matches1AtIndex(index, _types.TokenType._typeof)) &&\n        this.tokens.matches1AtIndex(index + 1, _types.TokenType.name) &&\n        !this.tokens.matchesContextualAtIndex(index + 1, _keywords.ContextualKeyword._as)\n      ) {\n        isTypeImport = true;\n        index++;\n      }\n\n      const importedName = this.tokens.identifierNameAtIndex(index);\n      let localName;\n      index++;\n      if (this.tokens.matchesContextualAtIndex(index, _keywords.ContextualKeyword._as)) {\n        index++;\n        localName = this.tokens.identifierNameAtIndex(index);\n        index++;\n      } else {\n        localName = importedName;\n      }\n      if (!isTypeImport) {\n        namedImports.push({importedName, localName});\n      }\n      if (this.tokens.matches2AtIndex(index, _types.TokenType.comma, _types.TokenType.braceR)) {\n        index += 2;\n        break;\n      } else if (this.tokens.matches1AtIndex(index, _types.TokenType.braceR)) {\n        index++;\n        break;\n      } else if (this.tokens.matches1AtIndex(index, _types.TokenType.comma)) {\n        index++;\n      } else {\n        throw new Error(`Unexpected token: ${JSON.stringify(this.tokens.tokens[index])}`);\n      }\n    }\n    return {newIndex: index, namedImports};\n  }\n\n  /**\n   * Get a mutable import info object for this path, creating one if it doesn't\n   * exist yet.\n   */\n   getImportInfo(path) {\n    const existingInfo = this.importInfoByPath.get(path);\n    if (existingInfo) {\n      return existingInfo;\n    }\n    const newInfo = {\n      defaultNames: [],\n      wildcardNames: [],\n      namedImports: [],\n      namedExports: [],\n      hasBareImport: false,\n      exportStarNames: [],\n      hasStarExport: false,\n    };\n    this.importInfoByPath.set(path, newInfo);\n    return newInfo;\n  }\n\n   addExportBinding(localName, exportedName) {\n    if (!this.exportBindingsByLocalName.has(localName)) {\n      this.exportBindingsByLocalName.set(localName, []);\n    }\n    this.exportBindingsByLocalName.get(localName).push(exportedName);\n  }\n\n  /**\n   * Return the code to use for the import for this path, or the empty string if\n   * the code has already been \"claimed\" by a previous import.\n   */\n  claimImportCode(importPath) {\n    const result = this.importsToReplace.get(importPath);\n    this.importsToReplace.set(importPath, \"\");\n    return result || \"\";\n  }\n\n  getIdentifierReplacement(identifierName) {\n    return this.identifierReplacements.get(identifierName) || null;\n  }\n\n  /**\n   * Return a string like `exports.foo = exports.bar`.\n   */\n  resolveExportBinding(assignedName) {\n    const exportedNames = this.exportBindingsByLocalName.get(assignedName);\n    if (!exportedNames || exportedNames.length === 0) {\n      return null;\n    }\n    return exportedNames.map((exportedName) => `exports.${exportedName}`).join(\" = \");\n  }\n\n  /**\n   * Return all imported/exported names where we might be interested in whether usages of those\n   * names are shadowed.\n   */\n  getGlobalNames() {\n    return new Set([\n      ...this.identifierReplacements.keys(),\n      ...this.exportBindingsByLocalName.keys(),\n    ]);\n  }\n} exports.default = CJSImportProcessor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/CJSImportProcessor.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/HelperManager.js":
/*!****************************************************!*\
  !*** ./node_modules/sucrase/dist/HelperManager.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, \"__esModule\", {value: true});\n\nconst HELPERS = {\n  interopRequireWildcard: `\n    function interopRequireWildcard(obj) {\n      if (obj && obj.__esModule) {\n        return obj;\n      } else {\n        var newObj = {};\n        if (obj != null) {\n          for (var key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n              newObj[key] = obj[key];\n            }\n          }\n        }\n        newObj.default = obj;\n        return newObj;\n      }\n    }\n  `,\n  interopRequireDefault: `\n    function interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : { default: obj };\n    }\n  `,\n  createNamedExportFrom: `\n    function createNamedExportFrom(obj, localName, importedName) {\n      Object.defineProperty(exports, localName, {enumerable: true, get: () => obj[importedName]});\n    }\n  `,\n  // Note that TypeScript and Babel do this differently; TypeScript does a simple existence\n  // check in the exports object and does a plain assignment, whereas Babel uses\n  // defineProperty and builds an object of explicitly-exported names so that star exports can\n  // always take lower precedence. For now, we do the easier TypeScript thing.\n  createStarExport: `\n    function createStarExport(obj) {\n      Object.keys(obj)\n        .filter((key) => key !== \"default\" && key !== \"__esModule\")\n        .forEach((key) => {\n          if (exports.hasOwnProperty(key)) {\n            return;\n          }\n          Object.defineProperty(exports, key, {enumerable: true, get: () => obj[key]});\n        });\n    }\n  `,\n};\n\n class HelperManager {\n  __init() {this.helperNames = {}}\n  constructor( nameManager) {;this.nameManager = nameManager;HelperManager.prototype.__init.call(this);}\n\n  getHelperName(baseName) {\n    let helperName = this.helperNames[baseName];\n    if (helperName) {\n      return helperName;\n    }\n    helperName = this.nameManager.claimFreeName(`_${baseName}`);\n    this.helperNames[baseName] = helperName;\n    return helperName;\n  }\n\n  emitHelpers() {\n    let resultCode = \"\";\n    for (const [baseName, helperCode] of Object.entries(HELPERS)) {\n      const helperName = this.helperNames[baseName];\n      if (helperName) {\n        resultCode += \" \";\n        resultCode += helperCode\n          .replace(baseName, helperName)\n          .replace(/\\s+/g, \" \")\n          .trim();\n      }\n    }\n    return resultCode;\n  }\n} exports.HelperManager = HelperManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L0hlbHBlck1hbmFnZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L0hlbHBlck1hbmFnZXIuanM/YmI0ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjsgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogdHJ1ZX0pO1xuXG5jb25zdCBIRUxQRVJTID0ge1xuICBpbnRlcm9wUmVxdWlyZVdpbGRjYXJkOiBgXG4gICAgZnVuY3Rpb24gaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHtcbiAgICAgIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBuZXdPYmogPSB7fTtcbiAgICAgICAgaWYgKG9iaiAhPSBudWxsKSB7XG4gICAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7XG4gICAgICAgIHJldHVybiBuZXdPYmo7XG4gICAgICB9XG4gICAgfVxuICBgLFxuICBpbnRlcm9wUmVxdWlyZURlZmF1bHQ6IGBcbiAgICBmdW5jdGlvbiBpbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTtcbiAgICB9XG4gIGAsXG4gIGNyZWF0ZU5hbWVkRXhwb3J0RnJvbTogYFxuICAgIGZ1bmN0aW9uIGNyZWF0ZU5hbWVkRXhwb3J0RnJvbShvYmosIGxvY2FsTmFtZSwgaW1wb3J0ZWROYW1lKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbG9jYWxOYW1lLCB7ZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiAoKSA9PiBvYmpbaW1wb3J0ZWROYW1lXX0pO1xuICAgIH1cbiAgYCxcbiAgLy8gTm90ZSB0aGF0IFR5cGVTY3JpcHQgYW5kIEJhYmVsIGRvIHRoaXMgZGlmZmVyZW50bHk7IFR5cGVTY3JpcHQgZG9lcyBhIHNpbXBsZSBleGlzdGVuY2VcbiAgLy8gY2hlY2sgaW4gdGhlIGV4cG9ydHMgb2JqZWN0IGFuZCBkb2VzIGEgcGxhaW4gYXNzaWdubWVudCwgd2hlcmVhcyBCYWJlbCB1c2VzXG4gIC8vIGRlZmluZVByb3BlcnR5IGFuZCBidWlsZHMgYW4gb2JqZWN0IG9mIGV4cGxpY2l0bHktZXhwb3J0ZWQgbmFtZXMgc28gdGhhdCBzdGFyIGV4cG9ydHMgY2FuXG4gIC8vIGFsd2F5cyB0YWtlIGxvd2VyIHByZWNlZGVuY2UuIEZvciBub3csIHdlIGRvIHRoZSBlYXNpZXIgVHlwZVNjcmlwdCB0aGluZy5cbiAgY3JlYXRlU3RhckV4cG9ydDogYFxuICAgIGZ1bmN0aW9uIGNyZWF0ZVN0YXJFeHBvcnQob2JqKSB7XG4gICAgICBPYmplY3Qua2V5cyhvYmopXG4gICAgICAgIC5maWx0ZXIoKGtleSkgPT4ga2V5ICE9PSBcImRlZmF1bHRcIiAmJiBrZXkgIT09IFwiX19lc01vZHVsZVwiKVxuICAgICAgICAuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgaWYgKGV4cG9ydHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7ZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiAoKSA9PiBvYmpba2V5XX0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gIGAsXG59O1xuXG4gY2xhc3MgSGVscGVyTWFuYWdlciB7XG4gIF9faW5pdCgpIHt0aGlzLmhlbHBlck5hbWVzID0ge319XG4gIGNvbnN0cnVjdG9yKCBuYW1lTWFuYWdlcikgezt0aGlzLm5hbWVNYW5hZ2VyID0gbmFtZU1hbmFnZXI7SGVscGVyTWFuYWdlci5wcm90b3R5cGUuX19pbml0LmNhbGwodGhpcyk7fVxuXG4gIGdldEhlbHBlck5hbWUoYmFzZU5hbWUpIHtcbiAgICBsZXQgaGVscGVyTmFtZSA9IHRoaXMuaGVscGVyTmFtZXNbYmFzZU5hbWVdO1xuICAgIGlmIChoZWxwZXJOYW1lKSB7XG4gICAgICByZXR1cm4gaGVscGVyTmFtZTtcbiAgICB9XG4gICAgaGVscGVyTmFtZSA9IHRoaXMubmFtZU1hbmFnZXIuY2xhaW1GcmVlTmFtZShgXyR7YmFzZU5hbWV9YCk7XG4gICAgdGhpcy5oZWxwZXJOYW1lc1tiYXNlTmFtZV0gPSBoZWxwZXJOYW1lO1xuICAgIHJldHVybiBoZWxwZXJOYW1lO1xuICB9XG5cbiAgZW1pdEhlbHBlcnMoKSB7XG4gICAgbGV0IHJlc3VsdENvZGUgPSBcIlwiO1xuICAgIGZvciAoY29uc3QgW2Jhc2VOYW1lLCBoZWxwZXJDb2RlXSBvZiBPYmplY3QuZW50cmllcyhIRUxQRVJTKSkge1xuICAgICAgY29uc3QgaGVscGVyTmFtZSA9IHRoaXMuaGVscGVyTmFtZXNbYmFzZU5hbWVdO1xuICAgICAgaWYgKGhlbHBlck5hbWUpIHtcbiAgICAgICAgcmVzdWx0Q29kZSArPSBcIiBcIjtcbiAgICAgICAgcmVzdWx0Q29kZSArPSBoZWxwZXJDb2RlXG4gICAgICAgICAgLnJlcGxhY2UoYmFzZU5hbWUsIGhlbHBlck5hbWUpXG4gICAgICAgICAgLnJlcGxhY2UoL1xccysvZywgXCIgXCIpXG4gICAgICAgICAgLnRyaW0oKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdENvZGU7XG4gIH1cbn0gZXhwb3J0cy5IZWxwZXJNYW5hZ2VyID0gSGVscGVyTWFuYWdlcjtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/HelperManager.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/NameManager.js":
/*!**************************************************!*\
  !*** ./node_modules/sucrase/dist/NameManager.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, \"__esModule\", {value: true});var _types = __webpack_require__(/*! ./parser/tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\n\n\n class NameManager {\n    __init() {this.usedNames = new Set()}\n\n  constructor( tokens) {;this.tokens = tokens;NameManager.prototype.__init.call(this);}\n\n  preprocessNames() {\n    for (let i = 0; i < this.tokens.tokens.length; i++) {\n      if (this.tokens.matches1AtIndex(i, _types.TokenType.name)) {\n        this.usedNames.add(this.tokens.identifierNameAtIndex(i));\n      }\n    }\n  }\n\n  claimFreeName(name) {\n    const newName = this.findFreeName(name);\n    this.usedNames.add(newName);\n    return newName;\n  }\n\n  findFreeName(name) {\n    if (!this.usedNames.has(name)) {\n      return name;\n    }\n    let suffixNum = 2;\n    while (this.usedNames.has(name + suffixNum)) {\n      suffixNum++;\n    }\n    return name + suffixNum;\n  }\n} exports.default = NameManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L05hbWVNYW5hZ2VyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N1Y3Jhc2UvZGlzdC9OYW1lTWFuYWdlci5qcz85ZmZhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiOyBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiB0cnVlfSk7dmFyIF90eXBlcyA9IHJlcXVpcmUoJy4vcGFyc2VyL3Rva2VuaXplci90eXBlcycpO1xuXG5cbiBjbGFzcyBOYW1lTWFuYWdlciB7XG4gICAgX19pbml0KCkge3RoaXMudXNlZE5hbWVzID0gbmV3IFNldCgpfVxuXG4gIGNvbnN0cnVjdG9yKCB0b2tlbnMpIHs7dGhpcy50b2tlbnMgPSB0b2tlbnM7TmFtZU1hbmFnZXIucHJvdG90eXBlLl9faW5pdC5jYWxsKHRoaXMpO31cblxuICBwcmVwcm9jZXNzTmFtZXMoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRva2Vucy50b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLnRva2Vucy5tYXRjaGVzMUF0SW5kZXgoaSwgX3R5cGVzLlRva2VuVHlwZS5uYW1lKSkge1xuICAgICAgICB0aGlzLnVzZWROYW1lcy5hZGQodGhpcy50b2tlbnMuaWRlbnRpZmllck5hbWVBdEluZGV4KGkpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjbGFpbUZyZWVOYW1lKG5hbWUpIHtcbiAgICBjb25zdCBuZXdOYW1lID0gdGhpcy5maW5kRnJlZU5hbWUobmFtZSk7XG4gICAgdGhpcy51c2VkTmFtZXMuYWRkKG5ld05hbWUpO1xuICAgIHJldHVybiBuZXdOYW1lO1xuICB9XG5cbiAgZmluZEZyZWVOYW1lKG5hbWUpIHtcbiAgICBpZiAoIXRoaXMudXNlZE5hbWVzLmhhcyhuYW1lKSkge1xuICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuICAgIGxldCBzdWZmaXhOdW0gPSAyO1xuICAgIHdoaWxlICh0aGlzLnVzZWROYW1lcy5oYXMobmFtZSArIHN1ZmZpeE51bSkpIHtcbiAgICAgIHN1ZmZpeE51bSsrO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZSArIHN1ZmZpeE51bTtcbiAgfVxufSBleHBvcnRzLmRlZmF1bHQgPSBOYW1lTWFuYWdlcjtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/NameManager.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/TokenProcessor.js":
/*!*****************************************************!*\
  !*** ./node_modules/sucrase/dist/TokenProcessor.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _types = __webpack_require__(/*! ./parser/tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\n\n\n\n\n\n\n class TokenProcessor {\n   __init() {this.resultCode = \"\"}\n   __init2() {this.tokenIndex = 0}\n\n  constructor(\n     code,\n     tokens,\n     isFlowEnabled,\n  ) {;this.code = code;this.tokens = tokens;this.isFlowEnabled = isFlowEnabled;TokenProcessor.prototype.__init.call(this);TokenProcessor.prototype.__init2.call(this);}\n\n  /**\n   * Make a new TokenProcessor for things like lookahead.\n   */\n  snapshot() {\n    return {resultCode: this.resultCode, tokenIndex: this.tokenIndex};\n  }\n\n  restoreToSnapshot(snapshot) {\n    this.resultCode = snapshot.resultCode;\n    this.tokenIndex = snapshot.tokenIndex;\n  }\n\n  getResultCodeIndex() {\n    return this.resultCode.length;\n  }\n\n  reset() {\n    this.resultCode = \"\";\n    this.tokenIndex = 0;\n  }\n\n  matchesContextualAtIndex(index, contextualKeyword) {\n    return (\n      this.matches1AtIndex(index, _types.TokenType.name) &&\n      this.tokens[index].contextualKeyword === contextualKeyword\n    );\n  }\n\n  identifierNameAtIndex(index) {\n    // TODO: We need to process escapes since technically you can have unicode escapes in variable\n    // names.\n    return this.identifierNameForToken(this.tokens[index]);\n  }\n\n  identifierName() {\n    return this.identifierNameForToken(this.currentToken());\n  }\n\n  identifierNameForToken(token) {\n    return this.code.slice(token.start, token.end);\n  }\n\n  rawCodeForToken(token) {\n    return this.code.slice(token.start, token.end);\n  }\n\n  stringValueAtIndex(index) {\n    return this.stringValueForToken(this.tokens[index]);\n  }\n\n  stringValue() {\n    return this.stringValueForToken(this.currentToken());\n  }\n\n  stringValueForToken(token) {\n    // This is used to identify when two imports are the same and to resolve TypeScript enum keys.\n    // Ideally we'd process escapes within the strings, but for now we pretty much take the raw\n    // code.\n    return this.code.slice(token.start + 1, token.end - 1);\n  }\n\n  matches1AtIndex(index, t1) {\n    return this.tokens[index].type === t1;\n  }\n\n  matches2AtIndex(index, t1, t2) {\n    return this.tokens[index].type === t1 && this.tokens[index + 1].type === t2;\n  }\n\n  matches3AtIndex(index, t1, t2, t3) {\n    return (\n      this.tokens[index].type === t1 &&\n      this.tokens[index + 1].type === t2 &&\n      this.tokens[index + 2].type === t3\n    );\n  }\n\n  matches1(t1) {\n    return this.tokens[this.tokenIndex].type === t1;\n  }\n\n  matches2(t1, t2) {\n    return this.tokens[this.tokenIndex].type === t1 && this.tokens[this.tokenIndex + 1].type === t2;\n  }\n\n  matches3(t1, t2, t3) {\n    return (\n      this.tokens[this.tokenIndex].type === t1 &&\n      this.tokens[this.tokenIndex + 1].type === t2 &&\n      this.tokens[this.tokenIndex + 2].type === t3\n    );\n  }\n\n  matches4(t1, t2, t3, t4) {\n    return (\n      this.tokens[this.tokenIndex].type === t1 &&\n      this.tokens[this.tokenIndex + 1].type === t2 &&\n      this.tokens[this.tokenIndex + 2].type === t3 &&\n      this.tokens[this.tokenIndex + 3].type === t4\n    );\n  }\n\n  matches5(t1, t2, t3, t4, t5) {\n    return (\n      this.tokens[this.tokenIndex].type === t1 &&\n      this.tokens[this.tokenIndex + 1].type === t2 &&\n      this.tokens[this.tokenIndex + 2].type === t3 &&\n      this.tokens[this.tokenIndex + 3].type === t4 &&\n      this.tokens[this.tokenIndex + 4].type === t5\n    );\n  }\n\n  matchesContextual(contextualKeyword) {\n    return this.matchesContextualAtIndex(this.tokenIndex, contextualKeyword);\n  }\n\n  matchesContextIdAndLabel(type, contextId) {\n    return this.matches1(type) && this.currentToken().contextId === contextId;\n  }\n\n  previousWhitespaceAndComments() {\n    let whitespaceAndComments = this.code.slice(\n      this.tokenIndex > 0 ? this.tokens[this.tokenIndex - 1].end : 0,\n      this.tokenIndex < this.tokens.length ? this.tokens[this.tokenIndex].start : this.code.length,\n    );\n    if (this.isFlowEnabled) {\n      whitespaceAndComments = whitespaceAndComments.replace(/@flow/g, \"\");\n    }\n    return whitespaceAndComments;\n  }\n\n  replaceToken(newCode) {\n    this.resultCode += this.previousWhitespaceAndComments();\n    this.resultCode += newCode;\n    this.tokenIndex++;\n  }\n\n  replaceTokenTrimmingLeftWhitespace(newCode) {\n    this.resultCode += this.previousWhitespaceAndComments().replace(/[^\\r\\n]/g, \"\");\n    this.resultCode += newCode;\n    this.tokenIndex++;\n  }\n\n  removeInitialToken() {\n    this.replaceToken(\"\");\n  }\n\n  removeToken() {\n    this.replaceTokenTrimmingLeftWhitespace(\"\");\n  }\n\n  copyExpectedToken(tokenType) {\n    if (this.tokens[this.tokenIndex].type !== tokenType) {\n      throw new Error(`Expected token ${tokenType}`);\n    }\n    this.copyToken();\n  }\n\n  copyToken() {\n    this.resultCode += this.previousWhitespaceAndComments();\n    this.resultCode += this.code.slice(\n      this.tokens[this.tokenIndex].start,\n      this.tokens[this.tokenIndex].end,\n    );\n    this.tokenIndex++;\n  }\n\n  copyTokenWithPrefix(prefix) {\n    this.resultCode += this.previousWhitespaceAndComments();\n    this.resultCode += prefix;\n    this.resultCode += this.code.slice(\n      this.tokens[this.tokenIndex].start,\n      this.tokens[this.tokenIndex].end,\n    );\n    this.tokenIndex++;\n  }\n\n  appendCode(code) {\n    this.resultCode += code;\n  }\n\n  currentToken() {\n    return this.tokens[this.tokenIndex];\n  }\n\n  currentTokenCode() {\n    const token = this.currentToken();\n    return this.code.slice(token.start, token.end);\n  }\n\n  tokenAtRelativeIndex(relativeIndex) {\n    return this.tokens[this.tokenIndex + relativeIndex];\n  }\n\n  currentIndex() {\n    return this.tokenIndex;\n  }\n\n  /**\n   * Move to the next token. Only suitable in preprocessing steps. When\n   * generating new code, you should use copyToken or removeToken.\n   */\n  nextToken() {\n    if (this.tokenIndex === this.tokens.length) {\n      throw new Error(\"Unexpectedly reached end of input.\");\n    }\n    this.tokenIndex++;\n  }\n\n  previousToken() {\n    this.tokenIndex--;\n  }\n\n  finish() {\n    if (this.tokenIndex !== this.tokens.length) {\n      throw new Error(\"Tried to finish processing tokens before reaching the end.\");\n    }\n    this.resultCode += this.previousWhitespaceAndComments();\n    return this.resultCode;\n  }\n\n  isAtEnd() {\n    return this.tokenIndex === this.tokens.length;\n  }\n} exports.default = TokenProcessor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/TokenProcessor.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/computeSourceMap.js":
/*!*******************************************************!*\
  !*** ./node_modules/sucrase/dist/computeSourceMap.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", {value: true});\nvar _charcodes = __webpack_require__(/*! ./parser/util/charcodes */ \"./node_modules/sucrase/dist/parser/util/charcodes.js\");\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Generate a simple source map indicating that each line maps directly to the original line.\n */\n function computeSourceMap(\n  code,\n  filePath,\n  {compiledFilename},\n) {\n  let mappings = \"AAAA\";\n  for (let i = 0; i < code.length; i++) {\n    if (code.charCodeAt(i) === _charcodes.charCodes.lineFeed) {\n      mappings += \";AACA\";\n    }\n  }\n  return {\n    version: 3,\n    file: compiledFilename || \"\",\n    sources: [filePath],\n    mappings,\n    names: [],\n  };\n} exports.default = computeSourceMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2NvbXB1dGVTb3VyY2VNYXAuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2NvbXB1dGVTb3VyY2VNYXAuanM/YmNkOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogdHJ1ZX0pO1xudmFyIF9jaGFyY29kZXMgPSByZXF1aXJlKCcuL3BhcnNlci91dGlsL2NoYXJjb2RlcycpO1xuXG5cblxuXG5cblxuXG5cblxuXG5cbi8qKlxuICogR2VuZXJhdGUgYSBzaW1wbGUgc291cmNlIG1hcCBpbmRpY2F0aW5nIHRoYXQgZWFjaCBsaW5lIG1hcHMgZGlyZWN0bHkgdG8gdGhlIG9yaWdpbmFsIGxpbmUuXG4gKi9cbiBmdW5jdGlvbiBjb21wdXRlU291cmNlTWFwKFxuICBjb2RlLFxuICBmaWxlUGF0aCxcbiAge2NvbXBpbGVkRmlsZW5hbWV9LFxuKSB7XG4gIGxldCBtYXBwaW5ncyA9IFwiQUFBQVwiO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNvZGUubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoY29kZS5jaGFyQ29kZUF0KGkpID09PSBfY2hhcmNvZGVzLmNoYXJDb2Rlcy5saW5lRmVlZCkge1xuICAgICAgbWFwcGluZ3MgKz0gXCI7QUFDQVwiO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIHZlcnNpb246IDMsXG4gICAgZmlsZTogY29tcGlsZWRGaWxlbmFtZSB8fCBcIlwiLFxuICAgIHNvdXJjZXM6IFtmaWxlUGF0aF0sXG4gICAgbWFwcGluZ3MsXG4gICAgbmFtZXM6IFtdLFxuICB9O1xufSBleHBvcnRzLmRlZmF1bHQgPSBjb21wdXRlU291cmNlTWFwO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/computeSourceMap.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/identifyShadowedGlobals.js":
/*!**************************************************************!*\
  !*** ./node_modules/sucrase/dist/identifyShadowedGlobals.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\nvar _tokenizer = __webpack_require__(/*! ./parser/tokenizer */ \"./node_modules/sucrase/dist/parser/tokenizer/index.js\");\n\nvar _types = __webpack_require__(/*! ./parser/tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\n\n\n/**\n * Traverse the given tokens and modify them if necessary to indicate that some names shadow global\n * variables.\n */\n function identifyShadowedGlobals(\n  tokens,\n  scopes,\n  globalNames,\n) {\n  if (!hasShadowedGlobals(tokens, globalNames)) {\n    return;\n  }\n  markShadowedGlobals(tokens, scopes, globalNames);\n} exports.default = identifyShadowedGlobals;\n\n/**\n * We can do a fast up-front check to see if there are any declarations to global names. If not,\n * then there's no point in computing scope assignments.\n */\n// Exported for testing.\n function hasShadowedGlobals(tokens, globalNames) {\n  for (const token of tokens.tokens) {\n    if (\n      token.type === _types.TokenType.name &&\n      _tokenizer.isNonTopLevelDeclaration.call(void 0, token) &&\n      globalNames.has(tokens.identifierNameForToken(token))\n    ) {\n      return true;\n    }\n  }\n  return false;\n} exports.hasShadowedGlobals = hasShadowedGlobals;\n\nfunction markShadowedGlobals(\n  tokens,\n  scopes,\n  globalNames,\n) {\n  const scopeStack = [];\n  let scopeIndex = scopes.length - 1;\n  // Scopes were generated at completion time, so they're sorted by end index, so we can maintain a\n  // good stack by going backwards through them.\n  for (let i = tokens.tokens.length - 1; ; i--) {\n    while (scopeStack.length > 0 && scopeStack[scopeStack.length - 1].startTokenIndex === i + 1) {\n      scopeStack.pop();\n    }\n    while (scopeIndex >= 0 && scopes[scopeIndex].endTokenIndex === i + 1) {\n      scopeStack.push(scopes[scopeIndex]);\n      scopeIndex--;\n    }\n    // Process scopes after the last iteration so we can make sure we pop all of them.\n    if (i < 0) {\n      break;\n    }\n\n    const token = tokens.tokens[i];\n    const name = tokens.identifierNameForToken(token);\n    if (scopeStack.length > 1 && token.type === _types.TokenType.name && globalNames.has(name)) {\n      if (_tokenizer.isBlockScopedDeclaration.call(void 0, token)) {\n        markShadowedForScope(scopeStack[scopeStack.length - 1], tokens, name);\n      } else if (_tokenizer.isFunctionScopedDeclaration.call(void 0, token)) {\n        let stackIndex = scopeStack.length - 1;\n        while (stackIndex > 0 && !scopeStack[stackIndex].isFunctionScope) {\n          stackIndex--;\n        }\n        if (stackIndex < 0) {\n          throw new Error(\"Did not find parent function scope.\");\n        }\n        markShadowedForScope(scopeStack[stackIndex], tokens, name);\n      }\n    }\n  }\n  if (scopeStack.length > 0) {\n    throw new Error(\"Expected empty scope stack after processing file.\");\n  }\n}\n\nfunction markShadowedForScope(scope, tokens, name) {\n  for (let i = scope.startTokenIndex; i < scope.endTokenIndex; i++) {\n    const token = tokens.tokens[i];\n    if (token.type === _types.TokenType.name && tokens.identifierNameForToken(token) === name) {\n      token.shadowsGlobal = true;\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2lkZW50aWZ5U2hhZG93ZWRHbG9iYWxzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N1Y3Jhc2UvZGlzdC9pZGVudGlmeVNoYWRvd2VkR2xvYmFscy5qcz9lNGUyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiOyBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiB0cnVlfSk7XG5cblxuXG52YXIgX3Rva2VuaXplciA9IHJlcXVpcmUoJy4vcGFyc2VyL3Rva2VuaXplcicpO1xuXG52YXIgX3R5cGVzID0gcmVxdWlyZSgnLi9wYXJzZXIvdG9rZW5pemVyL3R5cGVzJyk7XG5cblxuLyoqXG4gKiBUcmF2ZXJzZSB0aGUgZ2l2ZW4gdG9rZW5zIGFuZCBtb2RpZnkgdGhlbSBpZiBuZWNlc3NhcnkgdG8gaW5kaWNhdGUgdGhhdCBzb21lIG5hbWVzIHNoYWRvdyBnbG9iYWxcbiAqIHZhcmlhYmxlcy5cbiAqL1xuIGZ1bmN0aW9uIGlkZW50aWZ5U2hhZG93ZWRHbG9iYWxzKFxuICB0b2tlbnMsXG4gIHNjb3BlcyxcbiAgZ2xvYmFsTmFtZXMsXG4pIHtcbiAgaWYgKCFoYXNTaGFkb3dlZEdsb2JhbHModG9rZW5zLCBnbG9iYWxOYW1lcykpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbWFya1NoYWRvd2VkR2xvYmFscyh0b2tlbnMsIHNjb3BlcywgZ2xvYmFsTmFtZXMpO1xufSBleHBvcnRzLmRlZmF1bHQgPSBpZGVudGlmeVNoYWRvd2VkR2xvYmFscztcblxuLyoqXG4gKiBXZSBjYW4gZG8gYSBmYXN0IHVwLWZyb250IGNoZWNrIHRvIHNlZSBpZiB0aGVyZSBhcmUgYW55IGRlY2xhcmF0aW9ucyB0byBnbG9iYWwgbmFtZXMuIElmIG5vdCxcbiAqIHRoZW4gdGhlcmUncyBubyBwb2ludCBpbiBjb21wdXRpbmcgc2NvcGUgYXNzaWdubWVudHMuXG4gKi9cbi8vIEV4cG9ydGVkIGZvciB0ZXN0aW5nLlxuIGZ1bmN0aW9uIGhhc1NoYWRvd2VkR2xvYmFscyh0b2tlbnMsIGdsb2JhbE5hbWVzKSB7XG4gIGZvciAoY29uc3QgdG9rZW4gb2YgdG9rZW5zLnRva2Vucykge1xuICAgIGlmIChcbiAgICAgIHRva2VuLnR5cGUgPT09IF90eXBlcy5Ub2tlblR5cGUubmFtZSAmJlxuICAgICAgX3Rva2VuaXplci5pc05vblRvcExldmVsRGVjbGFyYXRpb24uY2FsbCh2b2lkIDAsIHRva2VuKSAmJlxuICAgICAgZ2xvYmFsTmFtZXMuaGFzKHRva2Vucy5pZGVudGlmaWVyTmFtZUZvclRva2VuKHRva2VuKSlcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59IGV4cG9ydHMuaGFzU2hhZG93ZWRHbG9iYWxzID0gaGFzU2hhZG93ZWRHbG9iYWxzO1xuXG5mdW5jdGlvbiBtYXJrU2hhZG93ZWRHbG9iYWxzKFxuICB0b2tlbnMsXG4gIHNjb3BlcyxcbiAgZ2xvYmFsTmFtZXMsXG4pIHtcbiAgY29uc3Qgc2NvcGVTdGFjayA9IFtdO1xuICBsZXQgc2NvcGVJbmRleCA9IHNjb3Blcy5sZW5ndGggLSAxO1xuICAvLyBTY29wZXMgd2VyZSBnZW5lcmF0ZWQgYXQgY29tcGxldGlvbiB0aW1lLCBzbyB0aGV5J3JlIHNvcnRlZCBieSBlbmQgaW5kZXgsIHNvIHdlIGNhbiBtYWludGFpbiBhXG4gIC8vIGdvb2Qgc3RhY2sgYnkgZ29pbmcgYmFja3dhcmRzIHRocm91Z2ggdGhlbS5cbiAgZm9yIChsZXQgaSA9IHRva2Vucy50b2tlbnMubGVuZ3RoIC0gMTsgOyBpLS0pIHtcbiAgICB3aGlsZSAoc2NvcGVTdGFjay5sZW5ndGggPiAwICYmIHNjb3BlU3RhY2tbc2NvcGVTdGFjay5sZW5ndGggLSAxXS5zdGFydFRva2VuSW5kZXggPT09IGkgKyAxKSB7XG4gICAgICBzY29wZVN0YWNrLnBvcCgpO1xuICAgIH1cbiAgICB3aGlsZSAoc2NvcGVJbmRleCA+PSAwICYmIHNjb3Blc1tzY29wZUluZGV4XS5lbmRUb2tlbkluZGV4ID09PSBpICsgMSkge1xuICAgICAgc2NvcGVTdGFjay5wdXNoKHNjb3Blc1tzY29wZUluZGV4XSk7XG4gICAgICBzY29wZUluZGV4LS07XG4gICAgfVxuICAgIC8vIFByb2Nlc3Mgc2NvcGVzIGFmdGVyIHRoZSBsYXN0IGl0ZXJhdGlvbiBzbyB3ZSBjYW4gbWFrZSBzdXJlIHdlIHBvcCBhbGwgb2YgdGhlbS5cbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNvbnN0IHRva2VuID0gdG9rZW5zLnRva2Vuc1tpXTtcbiAgICBjb25zdCBuYW1lID0gdG9rZW5zLmlkZW50aWZpZXJOYW1lRm9yVG9rZW4odG9rZW4pO1xuICAgIGlmIChzY29wZVN0YWNrLmxlbmd0aCA+IDEgJiYgdG9rZW4udHlwZSA9PT0gX3R5cGVzLlRva2VuVHlwZS5uYW1lICYmIGdsb2JhbE5hbWVzLmhhcyhuYW1lKSkge1xuICAgICAgaWYgKF90b2tlbml6ZXIuaXNCbG9ja1Njb3BlZERlY2xhcmF0aW9uLmNhbGwodm9pZCAwLCB0b2tlbikpIHtcbiAgICAgICAgbWFya1NoYWRvd2VkRm9yU2NvcGUoc2NvcGVTdGFja1tzY29wZVN0YWNrLmxlbmd0aCAtIDFdLCB0b2tlbnMsIG5hbWUpO1xuICAgICAgfSBlbHNlIGlmIChfdG9rZW5pemVyLmlzRnVuY3Rpb25TY29wZWREZWNsYXJhdGlvbi5jYWxsKHZvaWQgMCwgdG9rZW4pKSB7XG4gICAgICAgIGxldCBzdGFja0luZGV4ID0gc2NvcGVTdGFjay5sZW5ndGggLSAxO1xuICAgICAgICB3aGlsZSAoc3RhY2tJbmRleCA+IDAgJiYgIXNjb3BlU3RhY2tbc3RhY2tJbmRleF0uaXNGdW5jdGlvblNjb3BlKSB7XG4gICAgICAgICAgc3RhY2tJbmRleC0tO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFja0luZGV4IDwgMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRpZCBub3QgZmluZCBwYXJlbnQgZnVuY3Rpb24gc2NvcGUuXCIpO1xuICAgICAgICB9XG4gICAgICAgIG1hcmtTaGFkb3dlZEZvclNjb3BlKHNjb3BlU3RhY2tbc3RhY2tJbmRleF0sIHRva2VucywgbmFtZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChzY29wZVN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBlbXB0eSBzY29wZSBzdGFjayBhZnRlciBwcm9jZXNzaW5nIGZpbGUuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtTaGFkb3dlZEZvclNjb3BlKHNjb3BlLCB0b2tlbnMsIG5hbWUpIHtcbiAgZm9yIChsZXQgaSA9IHNjb3BlLnN0YXJ0VG9rZW5JbmRleDsgaSA8IHNjb3BlLmVuZFRva2VuSW5kZXg7IGkrKykge1xuICAgIGNvbnN0IHRva2VuID0gdG9rZW5zLnRva2Vuc1tpXTtcbiAgICBpZiAodG9rZW4udHlwZSA9PT0gX3R5cGVzLlRva2VuVHlwZS5uYW1lICYmIHRva2Vucy5pZGVudGlmaWVyTmFtZUZvclRva2VuKHRva2VuKSA9PT0gbmFtZSkge1xuICAgICAgdG9rZW4uc2hhZG93c0dsb2JhbCA9IHRydWU7XG4gICAgfVxuICB9XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/identifyShadowedGlobals.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/index.mjs":
/*!*********************************************!*\
  !*** ./node_modules/sucrase/dist/index.mjs ***!
  \*********************************************/
/*! exports provided: getVersion, transform, getFormattedTokens */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getVersion\", function() { return getVersion; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return transform; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getFormattedTokens\", function() { return getFormattedTokens; });\n/* harmony import */ var _CJSImportProcessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CJSImportProcessor */ \"./node_modules/sucrase/dist/CJSImportProcessor.js\");\n/* harmony import */ var _CJSImportProcessor__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_CJSImportProcessor__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _computeSourceMap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./computeSourceMap */ \"./node_modules/sucrase/dist/computeSourceMap.js\");\n/* harmony import */ var _computeSourceMap__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_computeSourceMap__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _identifyShadowedGlobals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./identifyShadowedGlobals */ \"./node_modules/sucrase/dist/identifyShadowedGlobals.js\");\n/* harmony import */ var _identifyShadowedGlobals__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_identifyShadowedGlobals__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _NameManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./NameManager */ \"./node_modules/sucrase/dist/NameManager.js\");\n/* harmony import */ var _NameManager__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_NameManager__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parser */ \"./node_modules/sucrase/dist/parser/index.js\");\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_parser__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _TokenProcessor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./TokenProcessor */ \"./node_modules/sucrase/dist/TokenProcessor.js\");\n/* harmony import */ var _TokenProcessor__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_TokenProcessor__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _transformers_RootTransformer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./transformers/RootTransformer */ \"./node_modules/sucrase/dist/transformers/RootTransformer.js\");\n/* harmony import */ var _transformers_RootTransformer__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_transformers_RootTransformer__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _util_formatTokens__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util/formatTokens */ \"./node_modules/sucrase/dist/util/formatTokens.js\");\n/* harmony import */ var _util_formatTokens__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_util_formatTokens__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _util_getTSImportedNames__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./util/getTSImportedNames */ \"./node_modules/sucrase/dist/util/getTSImportedNames.js\");\n/* harmony import */ var _util_getTSImportedNames__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_util_getTSImportedNames__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction getVersion() {\n  // eslint-disable-next-line\n  return __webpack_require__(/*! ../package.json */ \"./node_modules/sucrase/package.json\").version;\n}\n\nfunction transform(code, options) {\n  try {\n    const sucraseContext = getSucraseContext(code, options);\n    const transformer = new _transformers_RootTransformer__WEBPACK_IMPORTED_MODULE_6___default.a(\n      sucraseContext,\n      options.transforms,\n      Boolean(options.enableLegacyBabel5ModuleInterop),\n      options,\n    );\n    let result = {code: transformer.transform()};\n    if (options.sourceMapOptions) {\n      if (!options.filePath) {\n        throw new Error(\"filePath must be specified when generating a source map.\");\n      }\n      result = {\n        ...result,\n        sourceMap: _computeSourceMap__WEBPACK_IMPORTED_MODULE_1___default()(result.code, options.filePath, options.sourceMapOptions),\n      };\n    }\n    return result;\n  } catch (e) {\n    if (options.filePath) {\n      e.message = `Error transforming ${options.filePath}: ${e.message}`;\n    }\n    throw e;\n  }\n}\n\n/**\n * Return a string representation of the sucrase tokens, mostly useful for\n * diagnostic purposes.\n */\nfunction getFormattedTokens(code, options) {\n  const tokens = getSucraseContext(code, options).tokenProcessor.tokens;\n  return _util_formatTokens__WEBPACK_IMPORTED_MODULE_7___default()(code, tokens);\n}\n\n/**\n * Call into the parser/tokenizer and do some further preprocessing:\n * - Come up with a set of used names so that we can assign new names.\n * - Preprocess all import/export statements so we know which globals we are interested in.\n * - Compute situations where any of those globals are shadowed.\n *\n * In the future, some of these preprocessing steps can be skipped based on what actual work is\n * being done.\n */\nfunction getSucraseContext(code, options) {\n  const isJSXEnabled = options.transforms.includes(\"jsx\");\n  const isTypeScriptEnabled = options.transforms.includes(\"typescript\");\n  const isFlowEnabled = options.transforms.includes(\"flow\");\n  const file = Object(_parser__WEBPACK_IMPORTED_MODULE_4__[\"parse\"])(code, isJSXEnabled, isTypeScriptEnabled, isFlowEnabled);\n  const tokens = file.tokens;\n  const scopes = file.scopes;\n\n  const tokenProcessor = new _TokenProcessor__WEBPACK_IMPORTED_MODULE_5___default.a(code, tokens, isFlowEnabled);\n  const nameManager = new _NameManager__WEBPACK_IMPORTED_MODULE_3___default.a(tokenProcessor);\n  nameManager.preprocessNames();\n  const enableLegacyTypeScriptModuleInterop = Boolean(options.enableLegacyTypeScriptModuleInterop);\n\n  let importProcessor = null;\n  if (options.transforms.includes(\"imports\")) {\n    importProcessor = new _CJSImportProcessor__WEBPACK_IMPORTED_MODULE_0___default.a(\n      nameManager,\n      tokenProcessor,\n      enableLegacyTypeScriptModuleInterop,\n      options,\n      options.transforms.includes(\"typescript\"),\n    );\n    importProcessor.preprocessTokens();\n    // We need to mark shadowed globals after processing imports so we know that the globals are,\n    // but before type-only import pruning, since that relies on shadowing information.\n    _identifyShadowedGlobals__WEBPACK_IMPORTED_MODULE_2___default()(tokenProcessor, scopes, importProcessor.getGlobalNames());\n    if (options.transforms.includes(\"typescript\")) {\n      importProcessor.pruneTypeOnlyImports();\n    }\n  } else if (options.transforms.includes(\"typescript\")) {\n    _identifyShadowedGlobals__WEBPACK_IMPORTED_MODULE_2___default()(tokenProcessor, scopes, _util_getTSImportedNames__WEBPACK_IMPORTED_MODULE_8___default()(tokenProcessor));\n  }\n  return {tokenProcessor, scopes, nameManager, importProcessor};\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2luZGV4Lm1qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvaW5kZXgubWpzP2JhZDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENKU0ltcG9ydFByb2Nlc3NvciBmcm9tIFwiLi9DSlNJbXBvcnRQcm9jZXNzb3JcIjtcbmltcG9ydCBjb21wdXRlU291cmNlTWFwLCB7fSBmcm9tIFwiLi9jb21wdXRlU291cmNlTWFwXCI7XG5pbXBvcnQgaWRlbnRpZnlTaGFkb3dlZEdsb2JhbHMgZnJvbSBcIi4vaWRlbnRpZnlTaGFkb3dlZEdsb2JhbHNcIjtcbmltcG9ydCBOYW1lTWFuYWdlciBmcm9tIFwiLi9OYW1lTWFuYWdlclwiO1xuaW1wb3J0IHtwYXJzZX0gZnJvbSBcIi4vcGFyc2VyXCI7XG5cbmltcG9ydCBUb2tlblByb2Nlc3NvciBmcm9tIFwiLi9Ub2tlblByb2Nlc3NvclwiO1xuaW1wb3J0IFJvb3RUcmFuc2Zvcm1lciBmcm9tIFwiLi90cmFuc2Zvcm1lcnMvUm9vdFRyYW5zZm9ybWVyXCI7XG5pbXBvcnQgZm9ybWF0VG9rZW5zIGZyb20gXCIuL3V0aWwvZm9ybWF0VG9rZW5zXCI7XG5pbXBvcnQgZ2V0VFNJbXBvcnRlZE5hbWVzIGZyb20gXCIuL3V0aWwvZ2V0VFNJbXBvcnRlZE5hbWVzXCI7XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmVyc2lvbigpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIHJldHVybiByZXF1aXJlKFwiLi4vcGFja2FnZS5qc29uXCIpLnZlcnNpb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm0oY29kZSwgb3B0aW9ucykge1xuICB0cnkge1xuICAgIGNvbnN0IHN1Y3Jhc2VDb250ZXh0ID0gZ2V0U3VjcmFzZUNvbnRleHQoY29kZSwgb3B0aW9ucyk7XG4gICAgY29uc3QgdHJhbnNmb3JtZXIgPSBuZXcgUm9vdFRyYW5zZm9ybWVyKFxuICAgICAgc3VjcmFzZUNvbnRleHQsXG4gICAgICBvcHRpb25zLnRyYW5zZm9ybXMsXG4gICAgICBCb29sZWFuKG9wdGlvbnMuZW5hYmxlTGVnYWN5QmFiZWw1TW9kdWxlSW50ZXJvcCksXG4gICAgICBvcHRpb25zLFxuICAgICk7XG4gICAgbGV0IHJlc3VsdCA9IHtjb2RlOiB0cmFuc2Zvcm1lci50cmFuc2Zvcm0oKX07XG4gICAgaWYgKG9wdGlvbnMuc291cmNlTWFwT3B0aW9ucykge1xuICAgICAgaWYgKCFvcHRpb25zLmZpbGVQYXRoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImZpbGVQYXRoIG11c3QgYmUgc3BlY2lmaWVkIHdoZW4gZ2VuZXJhdGluZyBhIHNvdXJjZSBtYXAuXCIpO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgIHNvdXJjZU1hcDogY29tcHV0ZVNvdXJjZU1hcChyZXN1bHQuY29kZSwgb3B0aW9ucy5maWxlUGF0aCwgb3B0aW9ucy5zb3VyY2VNYXBPcHRpb25zKSxcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAob3B0aW9ucy5maWxlUGF0aCkge1xuICAgICAgZS5tZXNzYWdlID0gYEVycm9yIHRyYW5zZm9ybWluZyAke29wdGlvbnMuZmlsZVBhdGh9OiAke2UubWVzc2FnZX1gO1xuICAgIH1cbiAgICB0aHJvdyBlO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBzdWNyYXNlIHRva2VucywgbW9zdGx5IHVzZWZ1bCBmb3JcbiAqIGRpYWdub3N0aWMgcHVycG9zZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRGb3JtYXR0ZWRUb2tlbnMoY29kZSwgb3B0aW9ucykge1xuICBjb25zdCB0b2tlbnMgPSBnZXRTdWNyYXNlQ29udGV4dChjb2RlLCBvcHRpb25zKS50b2tlblByb2Nlc3Nvci50b2tlbnM7XG4gIHJldHVybiBmb3JtYXRUb2tlbnMoY29kZSwgdG9rZW5zKTtcbn1cblxuLyoqXG4gKiBDYWxsIGludG8gdGhlIHBhcnNlci90b2tlbml6ZXIgYW5kIGRvIHNvbWUgZnVydGhlciBwcmVwcm9jZXNzaW5nOlxuICogLSBDb21lIHVwIHdpdGggYSBzZXQgb2YgdXNlZCBuYW1lcyBzbyB0aGF0IHdlIGNhbiBhc3NpZ24gbmV3IG5hbWVzLlxuICogLSBQcmVwcm9jZXNzIGFsbCBpbXBvcnQvZXhwb3J0IHN0YXRlbWVudHMgc28gd2Uga25vdyB3aGljaCBnbG9iYWxzIHdlIGFyZSBpbnRlcmVzdGVkIGluLlxuICogLSBDb21wdXRlIHNpdHVhdGlvbnMgd2hlcmUgYW55IG9mIHRob3NlIGdsb2JhbHMgYXJlIHNoYWRvd2VkLlxuICpcbiAqIEluIHRoZSBmdXR1cmUsIHNvbWUgb2YgdGhlc2UgcHJlcHJvY2Vzc2luZyBzdGVwcyBjYW4gYmUgc2tpcHBlZCBiYXNlZCBvbiB3aGF0IGFjdHVhbCB3b3JrIGlzXG4gKiBiZWluZyBkb25lLlxuICovXG5mdW5jdGlvbiBnZXRTdWNyYXNlQ29udGV4dChjb2RlLCBvcHRpb25zKSB7XG4gIGNvbnN0IGlzSlNYRW5hYmxlZCA9IG9wdGlvbnMudHJhbnNmb3Jtcy5pbmNsdWRlcyhcImpzeFwiKTtcbiAgY29uc3QgaXNUeXBlU2NyaXB0RW5hYmxlZCA9IG9wdGlvbnMudHJhbnNmb3Jtcy5pbmNsdWRlcyhcInR5cGVzY3JpcHRcIik7XG4gIGNvbnN0IGlzRmxvd0VuYWJsZWQgPSBvcHRpb25zLnRyYW5zZm9ybXMuaW5jbHVkZXMoXCJmbG93XCIpO1xuICBjb25zdCBmaWxlID0gcGFyc2UoY29kZSwgaXNKU1hFbmFibGVkLCBpc1R5cGVTY3JpcHRFbmFibGVkLCBpc0Zsb3dFbmFibGVkKTtcbiAgY29uc3QgdG9rZW5zID0gZmlsZS50b2tlbnM7XG4gIGNvbnN0IHNjb3BlcyA9IGZpbGUuc2NvcGVzO1xuXG4gIGNvbnN0IHRva2VuUHJvY2Vzc29yID0gbmV3IFRva2VuUHJvY2Vzc29yKGNvZGUsIHRva2VucywgaXNGbG93RW5hYmxlZCk7XG4gIGNvbnN0IG5hbWVNYW5hZ2VyID0gbmV3IE5hbWVNYW5hZ2VyKHRva2VuUHJvY2Vzc29yKTtcbiAgbmFtZU1hbmFnZXIucHJlcHJvY2Vzc05hbWVzKCk7XG4gIGNvbnN0IGVuYWJsZUxlZ2FjeVR5cGVTY3JpcHRNb2R1bGVJbnRlcm9wID0gQm9vbGVhbihvcHRpb25zLmVuYWJsZUxlZ2FjeVR5cGVTY3JpcHRNb2R1bGVJbnRlcm9wKTtcblxuICBsZXQgaW1wb3J0UHJvY2Vzc29yID0gbnVsbDtcbiAgaWYgKG9wdGlvbnMudHJhbnNmb3Jtcy5pbmNsdWRlcyhcImltcG9ydHNcIikpIHtcbiAgICBpbXBvcnRQcm9jZXNzb3IgPSBuZXcgQ0pTSW1wb3J0UHJvY2Vzc29yKFxuICAgICAgbmFtZU1hbmFnZXIsXG4gICAgICB0b2tlblByb2Nlc3NvcixcbiAgICAgIGVuYWJsZUxlZ2FjeVR5cGVTY3JpcHRNb2R1bGVJbnRlcm9wLFxuICAgICAgb3B0aW9ucyxcbiAgICAgIG9wdGlvbnMudHJhbnNmb3Jtcy5pbmNsdWRlcyhcInR5cGVzY3JpcHRcIiksXG4gICAgKTtcbiAgICBpbXBvcnRQcm9jZXNzb3IucHJlcHJvY2Vzc1Rva2VucygpO1xuICAgIC8vIFdlIG5lZWQgdG8gbWFyayBzaGFkb3dlZCBnbG9iYWxzIGFmdGVyIHByb2Nlc3NpbmcgaW1wb3J0cyBzbyB3ZSBrbm93IHRoYXQgdGhlIGdsb2JhbHMgYXJlLFxuICAgIC8vIGJ1dCBiZWZvcmUgdHlwZS1vbmx5IGltcG9ydCBwcnVuaW5nLCBzaW5jZSB0aGF0IHJlbGllcyBvbiBzaGFkb3dpbmcgaW5mb3JtYXRpb24uXG4gICAgaWRlbnRpZnlTaGFkb3dlZEdsb2JhbHModG9rZW5Qcm9jZXNzb3IsIHNjb3BlcywgaW1wb3J0UHJvY2Vzc29yLmdldEdsb2JhbE5hbWVzKCkpO1xuICAgIGlmIChvcHRpb25zLnRyYW5zZm9ybXMuaW5jbHVkZXMoXCJ0eXBlc2NyaXB0XCIpKSB7XG4gICAgICBpbXBvcnRQcm9jZXNzb3IucHJ1bmVUeXBlT25seUltcG9ydHMoKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAob3B0aW9ucy50cmFuc2Zvcm1zLmluY2x1ZGVzKFwidHlwZXNjcmlwdFwiKSkge1xuICAgIGlkZW50aWZ5U2hhZG93ZWRHbG9iYWxzKHRva2VuUHJvY2Vzc29yLCBzY29wZXMsIGdldFRTSW1wb3J0ZWROYW1lcyh0b2tlblByb2Nlc3NvcikpO1xuICB9XG4gIHJldHVybiB7dG9rZW5Qcm9jZXNzb3IsIHNjb3BlcywgbmFtZU1hbmFnZXIsIGltcG9ydFByb2Nlc3Nvcn07XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/index.mjs\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/parser/index.js":
/*!***************************************************!*\
  !*** ./node_modules/sucrase/dist/parser/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _base = __webpack_require__(/*! ./traverser/base */ \"./node_modules/sucrase/dist/parser/traverser/base.js\");\nvar _index3 = __webpack_require__(/*! ./traverser/index */ \"./node_modules/sucrase/dist/parser/traverser/index.js\");\n\n class File {\n  \n  \n\n  constructor(tokens, scopes) {\n    this.tokens = tokens;\n    this.scopes = scopes;\n  }\n} exports.File = File;\n\n function parse(\n  input,\n  isJSXEnabled,\n  isTypeScriptEnabled,\n  isFlowEnabled,\n) {\n  if (isFlowEnabled && isTypeScriptEnabled) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n  _base.initParser.call(void 0, input, isJSXEnabled, isTypeScriptEnabled, isFlowEnabled);\n  const result = _index3.parseFile.call(void 0, );\n  if (_base.state.error) {\n    throw _base.augmentError.call(void 0, _base.state.error);\n  }\n  return result;\n} exports.parse = parse;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3BhcnNlci9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvcGFyc2VyL2luZGV4LmpzPzBhMjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7dmFsdWU6IHRydWV9KTtcblxudmFyIF9iYXNlID0gcmVxdWlyZSgnLi90cmF2ZXJzZXIvYmFzZScpO1xudmFyIF9pbmRleDMgPSByZXF1aXJlKCcuL3RyYXZlcnNlci9pbmRleCcpO1xuXG4gY2xhc3MgRmlsZSB7XG4gIFxuICBcblxuICBjb25zdHJ1Y3Rvcih0b2tlbnMsIHNjb3Blcykge1xuICAgIHRoaXMudG9rZW5zID0gdG9rZW5zO1xuICAgIHRoaXMuc2NvcGVzID0gc2NvcGVzO1xuICB9XG59IGV4cG9ydHMuRmlsZSA9IEZpbGU7XG5cbiBmdW5jdGlvbiBwYXJzZShcbiAgaW5wdXQsXG4gIGlzSlNYRW5hYmxlZCxcbiAgaXNUeXBlU2NyaXB0RW5hYmxlZCxcbiAgaXNGbG93RW5hYmxlZCxcbikge1xuICBpZiAoaXNGbG93RW5hYmxlZCAmJiBpc1R5cGVTY3JpcHRFbmFibGVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNvbWJpbmUgZmxvdyBhbmQgdHlwZXNjcmlwdCBwbHVnaW5zLlwiKTtcbiAgfVxuICBfYmFzZS5pbml0UGFyc2VyLmNhbGwodm9pZCAwLCBpbnB1dCwgaXNKU1hFbmFibGVkLCBpc1R5cGVTY3JpcHRFbmFibGVkLCBpc0Zsb3dFbmFibGVkKTtcbiAgY29uc3QgcmVzdWx0ID0gX2luZGV4My5wYXJzZUZpbGUuY2FsbCh2b2lkIDAsICk7XG4gIGlmIChfYmFzZS5zdGF0ZS5lcnJvcikge1xuICAgIHRocm93IF9iYXNlLmF1Z21lbnRFcnJvci5jYWxsKHZvaWQgMCwgX2Jhc2Uuc3RhdGUuZXJyb3IpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59IGV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/parser/index.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/parser/plugins/flow.js":
/*!**********************************************************!*\
  !*** ./node_modules/sucrase/dist/parser/plugins/flow.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", {value: true});/* eslint max-len: 0 */\n\n\n\n\n\n\n\n\n\n\nvar _index = __webpack_require__(/*! ../tokenizer/index */ \"./node_modules/sucrase/dist/parser/tokenizer/index.js\");\nvar _keywords = __webpack_require__(/*! ../tokenizer/keywords */ \"./node_modules/sucrase/dist/parser/tokenizer/keywords.js\");\nvar _types = __webpack_require__(/*! ../tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\nvar _base = __webpack_require__(/*! ../traverser/base */ \"./node_modules/sucrase/dist/parser/traverser/base.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _expression = __webpack_require__(/*! ../traverser/expression */ \"./node_modules/sucrase/dist/parser/traverser/expression.js\");\n\n\n\n\n\n\n\n\nvar _statement = __webpack_require__(/*! ../traverser/statement */ \"./node_modules/sucrase/dist/parser/traverser/statement.js\");\n\n\n\n\n\n\n\n\n\nvar _util = __webpack_require__(/*! ../traverser/util */ \"./node_modules/sucrase/dist/parser/traverser/util.js\");\n\nfunction isMaybeDefaultImport(lookahead) {\n  return (\n    (lookahead.type === _types.TokenType.name || !!(lookahead.type & _types.TokenType.IS_KEYWORD)) &&\n    lookahead.contextualKeyword !== _keywords.ContextualKeyword._from\n  );\n}\n\nfunction flowParseTypeInitialiser(tok) {\n  const oldIsType = _index.pushTypeContext.call(void 0, 0);\n  _util.expect.call(void 0, tok || _types.TokenType.colon);\n  flowParseType();\n  _index.popTypeContext.call(void 0, oldIsType);\n}\n\nfunction flowParsePredicate() {\n  _util.expect.call(void 0, _types.TokenType.modulo);\n  _util.expectContextual.call(void 0, _keywords.ContextualKeyword._checks);\n  if (_index.eat.call(void 0, _types.TokenType.parenL)) {\n    _expression.parseExpression.call(void 0, );\n    _util.expect.call(void 0, _types.TokenType.parenR);\n  }\n}\n\nfunction flowParseTypeAndPredicateInitialiser() {\n  const oldIsType = _index.pushTypeContext.call(void 0, 0);\n  _util.expect.call(void 0, _types.TokenType.colon);\n  if (_index.match.call(void 0, _types.TokenType.modulo)) {\n    flowParsePredicate();\n  } else {\n    flowParseType();\n    if (_index.match.call(void 0, _types.TokenType.modulo)) {\n      flowParsePredicate();\n    }\n  }\n  _index.popTypeContext.call(void 0, oldIsType);\n}\n\nfunction flowParseDeclareClass() {\n  _index.next.call(void 0, );\n  flowParseInterfaceish(/* isClass */ true);\n}\n\nfunction flowParseDeclareFunction() {\n  _index.next.call(void 0, );\n  _expression.parseIdentifier.call(void 0, );\n\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    flowParseTypeParameterDeclaration();\n  }\n\n  _util.expect.call(void 0, _types.TokenType.parenL);\n  flowParseFunctionTypeParams();\n  _util.expect.call(void 0, _types.TokenType.parenR);\n\n  flowParseTypeAndPredicateInitialiser();\n\n  _util.semicolon.call(void 0, );\n}\n\nfunction flowParseDeclare() {\n  if (_index.match.call(void 0, _types.TokenType._class)) {\n    flowParseDeclareClass();\n  } else if (_index.match.call(void 0, _types.TokenType._function)) {\n    flowParseDeclareFunction();\n  } else if (_index.match.call(void 0, _types.TokenType._var)) {\n    flowParseDeclareVariable();\n  } else if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._module)) {\n    if (_index.lookaheadType.call(void 0, ) === _types.TokenType.dot) {\n      flowParseDeclareModuleExports();\n    } else {\n      flowParseDeclareModule();\n    }\n  } else if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._type)) {\n    flowParseDeclareTypeAlias();\n  } else if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._opaque)) {\n    flowParseDeclareOpaqueType();\n  } else if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._interface)) {\n    flowParseDeclareInterface();\n  } else if (_index.match.call(void 0, _types.TokenType._export)) {\n    flowParseDeclareExportDeclaration();\n  } else {\n    _util.unexpected.call(void 0, );\n  }\n}\n\nfunction flowParseDeclareVariable() {\n  _index.next.call(void 0, );\n  flowParseTypeAnnotatableIdentifier();\n  _util.semicolon.call(void 0, );\n}\n\nfunction flowParseDeclareModule() {\n  _index.next.call(void 0, );\n\n  if (_index.match.call(void 0, _types.TokenType.string)) {\n    _expression.parseExprAtom.call(void 0, );\n  } else {\n    _expression.parseIdentifier.call(void 0, );\n  }\n\n  _util.expect.call(void 0, _types.TokenType.braceL);\n  while (!_index.match.call(void 0, _types.TokenType.braceR) && !_base.state.error) {\n    if (_index.match.call(void 0, _types.TokenType._import)) {\n      _index.next.call(void 0, );\n      _statement.parseImport.call(void 0, );\n    } else {\n      _util.unexpected.call(void 0, );\n    }\n  }\n  _util.expect.call(void 0, _types.TokenType.braceR);\n}\n\nfunction flowParseDeclareExportDeclaration() {\n  _util.expect.call(void 0, _types.TokenType._export);\n\n  if (_index.eat.call(void 0, _types.TokenType._default)) {\n    if (_index.match.call(void 0, _types.TokenType._function) || _index.match.call(void 0, _types.TokenType._class)) {\n      // declare export default class ...\n      // declare export default function ...\n      flowParseDeclare();\n    } else {\n      // declare export default [type];\n      flowParseType();\n      _util.semicolon.call(void 0, );\n    }\n  } else if (\n    _index.match.call(void 0, _types.TokenType._var) || // declare export var ...\n    _index.match.call(void 0, _types.TokenType._function) || // declare export function ...\n    _index.match.call(void 0, _types.TokenType._class) || // declare export class ...\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._opaque) // declare export opaque ..\n  ) {\n    flowParseDeclare();\n  } else if (\n    _index.match.call(void 0, _types.TokenType.star) || // declare export * from ''\n    _index.match.call(void 0, _types.TokenType.braceL) || // declare export {} ...\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._interface) || // declare export interface ...\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._type) || // declare export type ...\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._opaque) // declare export opaque type ...\n  ) {\n    _statement.parseExport.call(void 0, );\n  } else {\n    _util.unexpected.call(void 0, );\n  }\n}\n\nfunction flowParseDeclareModuleExports() {\n  _util.expectContextual.call(void 0, _keywords.ContextualKeyword._module);\n  _util.expect.call(void 0, _types.TokenType.dot);\n  _util.expectContextual.call(void 0, _keywords.ContextualKeyword._exports);\n  flowParseTypeAnnotation();\n  _util.semicolon.call(void 0, );\n}\n\nfunction flowParseDeclareTypeAlias() {\n  _index.next.call(void 0, );\n  flowParseTypeAlias();\n}\n\nfunction flowParseDeclareOpaqueType() {\n  _index.next.call(void 0, );\n  flowParseOpaqueType(true);\n}\n\nfunction flowParseDeclareInterface() {\n  _index.next.call(void 0, );\n  flowParseInterfaceish();\n}\n\n// Interfaces\n\nfunction flowParseInterfaceish(isClass = false) {\n  flowParseRestrictedIdentifier();\n\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    flowParseTypeParameterDeclaration();\n  }\n\n  if (_index.eat.call(void 0, _types.TokenType._extends)) {\n    do {\n      flowParseInterfaceExtends();\n    } while (!isClass && _index.eat.call(void 0, _types.TokenType.comma));\n  }\n\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._mixins)) {\n    _index.next.call(void 0, );\n    do {\n      flowParseInterfaceExtends();\n    } while (_index.eat.call(void 0, _types.TokenType.comma));\n  }\n\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._implements)) {\n    _index.next.call(void 0, );\n    do {\n      flowParseInterfaceExtends();\n    } while (_index.eat.call(void 0, _types.TokenType.comma));\n  }\n\n  flowParseObjectType(isClass, false, isClass);\n}\n\nfunction flowParseInterfaceExtends() {\n  flowParseQualifiedTypeIdentifier(false);\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    flowParseTypeParameterInstantiation();\n  }\n}\n\nfunction flowParseInterface() {\n  flowParseInterfaceish();\n}\n\nfunction flowParseRestrictedIdentifier() {\n  _expression.parseIdentifier.call(void 0, );\n}\n\nfunction flowParseTypeAlias() {\n  flowParseRestrictedIdentifier();\n\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    flowParseTypeParameterDeclaration();\n  }\n\n  flowParseTypeInitialiser(_types.TokenType.eq);\n  _util.semicolon.call(void 0, );\n}\n\nfunction flowParseOpaqueType(declare) {\n  _util.expectContextual.call(void 0, _keywords.ContextualKeyword._type);\n  flowParseRestrictedIdentifier();\n\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    flowParseTypeParameterDeclaration();\n  }\n\n  // Parse the supertype\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    flowParseTypeInitialiser(_types.TokenType.colon);\n  }\n\n  if (!declare) {\n    flowParseTypeInitialiser(_types.TokenType.eq);\n  }\n  _util.semicolon.call(void 0, );\n}\n\nfunction flowParseTypeParameter() {\n  flowParseVariance();\n  flowParseTypeAnnotatableIdentifier();\n\n  if (_index.eat.call(void 0, _types.TokenType.eq)) {\n    flowParseType();\n  }\n}\n\n function flowParseTypeParameterDeclaration() {\n  const oldIsType = _index.pushTypeContext.call(void 0, 0);\n  // istanbul ignore else: this condition is already checked at all call sites\n  if (_index.match.call(void 0, _types.TokenType.lessThan) || _index.match.call(void 0, _types.TokenType.typeParameterStart)) {\n    _index.next.call(void 0, );\n  } else {\n    _util.unexpected.call(void 0, );\n  }\n\n  do {\n    flowParseTypeParameter();\n    if (!_index.match.call(void 0, _types.TokenType.greaterThan)) {\n      _util.expect.call(void 0, _types.TokenType.comma);\n    }\n  } while (!_index.match.call(void 0, _types.TokenType.greaterThan) && !_base.state.error);\n  _util.expect.call(void 0, _types.TokenType.greaterThan);\n  _index.popTypeContext.call(void 0, oldIsType);\n} exports.flowParseTypeParameterDeclaration = flowParseTypeParameterDeclaration;\n\nfunction flowParseTypeParameterInstantiation() {\n  const oldIsType = _index.pushTypeContext.call(void 0, 0);\n  _util.expect.call(void 0, _types.TokenType.lessThan);\n  while (!_index.match.call(void 0, _types.TokenType.greaterThan) && !_base.state.error) {\n    flowParseType();\n    if (!_index.match.call(void 0, _types.TokenType.greaterThan)) {\n      _util.expect.call(void 0, _types.TokenType.comma);\n    }\n  }\n  _util.expect.call(void 0, _types.TokenType.greaterThan);\n  _index.popTypeContext.call(void 0, oldIsType);\n}\n\nfunction flowParseInterfaceType() {\n  _util.expectContextual.call(void 0, _keywords.ContextualKeyword._interface);\n  if (_index.eat.call(void 0, _types.TokenType._extends)) {\n    do {\n      flowParseInterfaceExtends();\n    } while (_index.eat.call(void 0, _types.TokenType.comma));\n  }\n  flowParseObjectType(false, false, false);\n}\n\nfunction flowParseObjectPropertyKey() {\n  if (_index.match.call(void 0, _types.TokenType.num) || _index.match.call(void 0, _types.TokenType.string)) {\n    _expression.parseExprAtom.call(void 0, );\n  } else {\n    _expression.parseIdentifier.call(void 0, );\n  }\n}\n\nfunction flowParseObjectTypeIndexer() {\n  // Note: bracketL has already been consumed\n  if (_index.lookaheadType.call(void 0, ) === _types.TokenType.colon) {\n    flowParseObjectPropertyKey();\n    flowParseTypeInitialiser();\n  } else {\n    flowParseType();\n  }\n  _util.expect.call(void 0, _types.TokenType.bracketR);\n  flowParseTypeInitialiser();\n}\n\nfunction flowParseObjectTypeInternalSlot() {\n  // Note: both bracketL have already been consumed\n  flowParseObjectPropertyKey();\n  _util.expect.call(void 0, _types.TokenType.bracketR);\n  _util.expect.call(void 0, _types.TokenType.bracketR);\n  if (_index.match.call(void 0, _types.TokenType.lessThan) || _index.match.call(void 0, _types.TokenType.parenL)) {\n    flowParseObjectTypeMethodish();\n  } else {\n    _index.eat.call(void 0, _types.TokenType.question);\n    flowParseTypeInitialiser();\n  }\n}\n\nfunction flowParseObjectTypeMethodish() {\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    flowParseTypeParameterDeclaration();\n  }\n\n  _util.expect.call(void 0, _types.TokenType.parenL);\n  while (!_index.match.call(void 0, _types.TokenType.parenR) && !_index.match.call(void 0, _types.TokenType.ellipsis) && !_base.state.error) {\n    flowParseFunctionTypeParam();\n    if (!_index.match.call(void 0, _types.TokenType.parenR)) {\n      _util.expect.call(void 0, _types.TokenType.comma);\n    }\n  }\n\n  if (_index.eat.call(void 0, _types.TokenType.ellipsis)) {\n    flowParseFunctionTypeParam();\n  }\n  _util.expect.call(void 0, _types.TokenType.parenR);\n  flowParseTypeInitialiser();\n}\n\nfunction flowParseObjectTypeCallProperty() {\n  flowParseObjectTypeMethodish();\n}\n\nfunction flowParseObjectType(allowStatic, allowExact, allowProto) {\n  let endDelim;\n  if (allowExact && _index.match.call(void 0, _types.TokenType.braceBarL)) {\n    _util.expect.call(void 0, _types.TokenType.braceBarL);\n    endDelim = _types.TokenType.braceBarR;\n  } else {\n    _util.expect.call(void 0, _types.TokenType.braceL);\n    endDelim = _types.TokenType.braceR;\n  }\n\n  while (!_index.match.call(void 0, endDelim) && !_base.state.error) {\n    if (allowProto && _util.isContextual.call(void 0, _keywords.ContextualKeyword._proto)) {\n      const lookahead = _index.lookaheadType.call(void 0, );\n      if (lookahead !== _types.TokenType.colon && lookahead !== _types.TokenType.question) {\n        _index.next.call(void 0, );\n        allowStatic = false;\n      }\n    }\n    if (allowStatic && _util.isContextual.call(void 0, _keywords.ContextualKeyword._static)) {\n      const lookahead = _index.lookaheadType.call(void 0, );\n      if (lookahead !== _types.TokenType.colon && lookahead !== _types.TokenType.question) {\n        _index.next.call(void 0, );\n      }\n    }\n\n    flowParseVariance();\n\n    if (_index.eat.call(void 0, _types.TokenType.bracketL)) {\n      if (_index.eat.call(void 0, _types.TokenType.bracketL)) {\n        flowParseObjectTypeInternalSlot();\n      } else {\n        flowParseObjectTypeIndexer();\n      }\n    } else if (_index.match.call(void 0, _types.TokenType.parenL) || _index.match.call(void 0, _types.TokenType.lessThan)) {\n      flowParseObjectTypeCallProperty();\n    } else {\n      if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._get) || _util.isContextual.call(void 0, _keywords.ContextualKeyword._set)) {\n        const lookahead = _index.lookaheadType.call(void 0, );\n        if (lookahead === _types.TokenType.name || lookahead === _types.TokenType.string || lookahead === _types.TokenType.num) {\n          _index.next.call(void 0, );\n        }\n      }\n\n      flowParseObjectTypeProperty();\n    }\n\n    flowObjectTypeSemicolon();\n  }\n\n  _util.expect.call(void 0, endDelim);\n}\n\nfunction flowParseObjectTypeProperty() {\n  if (_index.match.call(void 0, _types.TokenType.ellipsis)) {\n    _util.expect.call(void 0, _types.TokenType.ellipsis);\n    if (!_index.eat.call(void 0, _types.TokenType.comma)) {\n      _index.eat.call(void 0, _types.TokenType.semi);\n    }\n    // Explicit inexact object syntax.\n    if (_index.match.call(void 0, _types.TokenType.braceR)) {\n      return;\n    }\n    flowParseType();\n  } else {\n    flowParseObjectPropertyKey();\n    if (_index.match.call(void 0, _types.TokenType.lessThan) || _index.match.call(void 0, _types.TokenType.parenL)) {\n      // This is a method property\n      flowParseObjectTypeMethodish();\n    } else {\n      _index.eat.call(void 0, _types.TokenType.question);\n      flowParseTypeInitialiser();\n    }\n  }\n}\n\nfunction flowObjectTypeSemicolon() {\n  if (!_index.eat.call(void 0, _types.TokenType.semi) && !_index.eat.call(void 0, _types.TokenType.comma) && !_index.match.call(void 0, _types.TokenType.braceR) && !_index.match.call(void 0, _types.TokenType.braceBarR)) {\n    _util.unexpected.call(void 0, );\n  }\n}\n\nfunction flowParseQualifiedTypeIdentifier(initialIdAlreadyParsed) {\n  if (!initialIdAlreadyParsed) {\n    _expression.parseIdentifier.call(void 0, );\n  }\n  while (_index.eat.call(void 0, _types.TokenType.dot)) {\n    _expression.parseIdentifier.call(void 0, );\n  }\n}\n\nfunction flowParseGenericType() {\n  flowParseQualifiedTypeIdentifier(true);\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    flowParseTypeParameterInstantiation();\n  }\n}\n\nfunction flowParseTypeofType() {\n  _util.expect.call(void 0, _types.TokenType._typeof);\n  flowParsePrimaryType();\n}\n\nfunction flowParseTupleType() {\n  _util.expect.call(void 0, _types.TokenType.bracketL);\n  // We allow trailing commas\n  while (_base.state.pos < _base.input.length && !_index.match.call(void 0, _types.TokenType.bracketR)) {\n    flowParseType();\n    if (_index.match.call(void 0, _types.TokenType.bracketR)) {\n      break;\n    }\n    _util.expect.call(void 0, _types.TokenType.comma);\n  }\n  _util.expect.call(void 0, _types.TokenType.bracketR);\n}\n\nfunction flowParseFunctionTypeParam() {\n  const lookahead = _index.lookaheadType.call(void 0, );\n  if (lookahead === _types.TokenType.colon || lookahead === _types.TokenType.question) {\n    _expression.parseIdentifier.call(void 0, );\n    _index.eat.call(void 0, _types.TokenType.question);\n    flowParseTypeInitialiser();\n  } else {\n    flowParseType();\n  }\n}\n\nfunction flowParseFunctionTypeParams() {\n  while (!_index.match.call(void 0, _types.TokenType.parenR) && !_index.match.call(void 0, _types.TokenType.ellipsis) && !_base.state.error) {\n    flowParseFunctionTypeParam();\n    if (!_index.match.call(void 0, _types.TokenType.parenR)) {\n      _util.expect.call(void 0, _types.TokenType.comma);\n    }\n  }\n  if (_index.eat.call(void 0, _types.TokenType.ellipsis)) {\n    flowParseFunctionTypeParam();\n  }\n}\n\n// The parsing of types roughly parallels the parsing of expressions, and\n// primary types are kind of like primary expressions...they're the\n// primitives with which other types are constructed.\nfunction flowParsePrimaryType() {\n  let isGroupedType = false;\n  const oldNoAnonFunctionType = _base.state.noAnonFunctionType;\n\n  switch (_base.state.type) {\n    case _types.TokenType.name: {\n      if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._interface)) {\n        flowParseInterfaceType();\n        return;\n      }\n      _expression.parseIdentifier.call(void 0, );\n      flowParseGenericType();\n      return;\n    }\n\n    case _types.TokenType.braceL:\n      flowParseObjectType(false, false, false);\n      return;\n\n    case _types.TokenType.braceBarL:\n      flowParseObjectType(false, true, false);\n      return;\n\n    case _types.TokenType.bracketL:\n      flowParseTupleType();\n      return;\n\n    case _types.TokenType.lessThan:\n      flowParseTypeParameterDeclaration();\n      _util.expect.call(void 0, _types.TokenType.parenL);\n      flowParseFunctionTypeParams();\n      _util.expect.call(void 0, _types.TokenType.parenR);\n      _util.expect.call(void 0, _types.TokenType.arrow);\n      flowParseType();\n      return;\n\n    case _types.TokenType.parenL:\n      _index.next.call(void 0, );\n\n      // Check to see if this is actually a grouped type\n      if (!_index.match.call(void 0, _types.TokenType.parenR) && !_index.match.call(void 0, _types.TokenType.ellipsis)) {\n        if (_index.match.call(void 0, _types.TokenType.name)) {\n          const token = _index.lookaheadType.call(void 0, );\n          isGroupedType = token !== _types.TokenType.question && token !== _types.TokenType.colon;\n        } else {\n          isGroupedType = true;\n        }\n      }\n\n      if (isGroupedType) {\n        _base.state.noAnonFunctionType = false;\n        flowParseType();\n        _base.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n        // A `,` or a `) =>` means this is an anonymous function type\n        if (\n          _base.state.noAnonFunctionType ||\n          !(_index.match.call(void 0, _types.TokenType.comma) || (_index.match.call(void 0, _types.TokenType.parenR) && _index.lookaheadType.call(void 0, ) === _types.TokenType.arrow))\n        ) {\n          _util.expect.call(void 0, _types.TokenType.parenR);\n          return;\n        } else {\n          // Eat a comma if there is one\n          _index.eat.call(void 0, _types.TokenType.comma);\n        }\n      }\n\n      flowParseFunctionTypeParams();\n\n      _util.expect.call(void 0, _types.TokenType.parenR);\n      _util.expect.call(void 0, _types.TokenType.arrow);\n      flowParseType();\n      return;\n\n    case _types.TokenType.minus:\n      _index.next.call(void 0, );\n      _expression.parseLiteral.call(void 0, );\n      return;\n\n    case _types.TokenType.string:\n    case _types.TokenType.num:\n    case _types.TokenType._true:\n    case _types.TokenType._false:\n    case _types.TokenType._null:\n    case _types.TokenType._this:\n    case _types.TokenType._void:\n    case _types.TokenType.star:\n      _index.next.call(void 0, );\n      return;\n\n    default:\n      if (_base.state.type === _types.TokenType._typeof) {\n        flowParseTypeofType();\n        return;\n      } else if (_base.state.type & _types.TokenType.IS_KEYWORD) {\n        _index.next.call(void 0, );\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType.name;\n        return;\n      }\n  }\n\n  _util.unexpected.call(void 0, );\n}\n\nfunction flowParsePostfixType() {\n  flowParsePrimaryType();\n  while (!_util.canInsertSemicolon.call(void 0, ) && _index.match.call(void 0, _types.TokenType.bracketL)) {\n    _util.expect.call(void 0, _types.TokenType.bracketL);\n    _util.expect.call(void 0, _types.TokenType.bracketR);\n  }\n}\n\nfunction flowParsePrefixType() {\n  if (_index.eat.call(void 0, _types.TokenType.question)) {\n    flowParsePrefixType();\n  } else {\n    flowParsePostfixType();\n  }\n}\n\nfunction flowParseAnonFunctionWithoutParens() {\n  flowParsePrefixType();\n  if (!_base.state.noAnonFunctionType && _index.eat.call(void 0, _types.TokenType.arrow)) {\n    flowParseType();\n  }\n}\n\nfunction flowParseIntersectionType() {\n  _index.eat.call(void 0, _types.TokenType.bitwiseAND);\n  flowParseAnonFunctionWithoutParens();\n  while (_index.eat.call(void 0, _types.TokenType.bitwiseAND)) {\n    flowParseAnonFunctionWithoutParens();\n  }\n}\n\nfunction flowParseUnionType() {\n  _index.eat.call(void 0, _types.TokenType.bitwiseOR);\n  flowParseIntersectionType();\n  while (_index.eat.call(void 0, _types.TokenType.bitwiseOR)) {\n    flowParseIntersectionType();\n  }\n}\n\nfunction flowParseType() {\n  flowParseUnionType();\n}\n\n function flowParseTypeAnnotation() {\n  flowParseTypeInitialiser();\n} exports.flowParseTypeAnnotation = flowParseTypeAnnotation;\n\nfunction flowParseTypeAnnotatableIdentifier() {\n  _expression.parseIdentifier.call(void 0, );\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    flowParseTypeAnnotation();\n  }\n}\n\n function flowParseVariance() {\n  if (_index.match.call(void 0, _types.TokenType.plus) || _index.match.call(void 0, _types.TokenType.minus)) {\n    _index.next.call(void 0, );\n  }\n} exports.flowParseVariance = flowParseVariance;\n\n// ==================================\n// Overrides\n// ==================================\n\n function flowParseFunctionBodyAndFinish(funcContextId) {\n  // For arrow functions, `parseArrow` handles the return type itself.\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    flowParseTypeAndPredicateInitialiser();\n  }\n\n  _expression.parseFunctionBody.call(void 0, false, funcContextId);\n} exports.flowParseFunctionBodyAndFinish = flowParseFunctionBodyAndFinish;\n\n function flowParseSubscript(startPos, noCalls, stopState) {\n  if (_index.match.call(void 0, _types.TokenType.questionDot) && _index.lookaheadType.call(void 0, ) === _types.TokenType.lessThan) {\n    if (noCalls) {\n      stopState.stop = true;\n      return;\n    }\n    _index.next.call(void 0, );\n    flowParseTypeParameterInstantiation();\n    _util.expect.call(void 0, _types.TokenType.parenL);\n    _expression.parseCallExpressionArguments.call(void 0, );\n    return;\n  } else if (!noCalls && _index.match.call(void 0, _types.TokenType.lessThan)) {\n    const snapshot = _base.state.snapshot();\n    flowParseTypeParameterInstantiation();\n    _util.expect.call(void 0, _types.TokenType.parenL);\n    _expression.parseCallExpressionArguments.call(void 0, );\n    if (_base.state.error) {\n      _base.state.restoreFromSnapshot(snapshot);\n    } else {\n      return;\n    }\n  }\n  _expression.baseParseSubscript.call(void 0, startPos, noCalls, stopState);\n} exports.flowParseSubscript = flowParseSubscript;\n\n function flowStartParseNewArguments() {\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    const snapshot = _base.state.snapshot();\n    flowParseTypeParameterInstantiation();\n    if (_base.state.error) {\n      _base.state.restoreFromSnapshot(snapshot);\n    }\n  }\n} exports.flowStartParseNewArguments = flowStartParseNewArguments;\n\n// interfaces\n function flowTryParseStatement() {\n  if (_index.match.call(void 0, _types.TokenType.name) && _base.state.contextualKeyword === _keywords.ContextualKeyword._interface) {\n    const oldIsType = _index.pushTypeContext.call(void 0, 0);\n    _index.next.call(void 0, );\n    flowParseInterface();\n    _index.popTypeContext.call(void 0, oldIsType);\n    return true;\n  } else {\n    return false;\n  }\n} exports.flowTryParseStatement = flowTryParseStatement;\n\n// declares, interfaces and type aliases\n function flowParseIdentifierStatement(contextualKeyword) {\n  if (contextualKeyword === _keywords.ContextualKeyword._declare) {\n    if (\n      _index.match.call(void 0, _types.TokenType._class) ||\n      _index.match.call(void 0, _types.TokenType.name) ||\n      _index.match.call(void 0, _types.TokenType._function) ||\n      _index.match.call(void 0, _types.TokenType._var) ||\n      _index.match.call(void 0, _types.TokenType._export)\n    ) {\n      const oldIsType = _index.pushTypeContext.call(void 0, 1);\n      flowParseDeclare();\n      _index.popTypeContext.call(void 0, oldIsType);\n    }\n  } else if (_index.match.call(void 0, _types.TokenType.name)) {\n    if (contextualKeyword === _keywords.ContextualKeyword._interface) {\n      const oldIsType = _index.pushTypeContext.call(void 0, 1);\n      flowParseInterface();\n      _index.popTypeContext.call(void 0, oldIsType);\n    } else if (contextualKeyword === _keywords.ContextualKeyword._type) {\n      const oldIsType = _index.pushTypeContext.call(void 0, 1);\n      flowParseTypeAlias();\n      _index.popTypeContext.call(void 0, oldIsType);\n    } else if (contextualKeyword === _keywords.ContextualKeyword._opaque) {\n      const oldIsType = _index.pushTypeContext.call(void 0, 1);\n      flowParseOpaqueType(false);\n      _index.popTypeContext.call(void 0, oldIsType);\n    }\n  }\n  _util.semicolon.call(void 0, );\n} exports.flowParseIdentifierStatement = flowParseIdentifierStatement;\n\n// export type\n function flowShouldParseExportDeclaration() {\n  return (\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._type) ||\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._interface) ||\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._opaque)\n  );\n} exports.flowShouldParseExportDeclaration = flowShouldParseExportDeclaration;\n\n function flowShouldDisallowExportDefaultSpecifier() {\n  return (\n    _index.match.call(void 0, _types.TokenType.name) &&\n    (_base.state.contextualKeyword === _keywords.ContextualKeyword._type ||\n      _base.state.contextualKeyword === _keywords.ContextualKeyword._interface ||\n      _base.state.contextualKeyword === _keywords.ContextualKeyword._opaque)\n  );\n} exports.flowShouldDisallowExportDefaultSpecifier = flowShouldDisallowExportDefaultSpecifier;\n\n function flowParseExportDeclaration() {\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._type)) {\n    const oldIsType = _index.pushTypeContext.call(void 0, 1);\n    _index.next.call(void 0, );\n\n    if (_index.match.call(void 0, _types.TokenType.braceL)) {\n      // export type { foo, bar };\n      _statement.parseExportSpecifiers.call(void 0, );\n      _statement.parseExportFrom.call(void 0, );\n    } else {\n      // export type Foo = Bar;\n      flowParseTypeAlias();\n    }\n    _index.popTypeContext.call(void 0, oldIsType);\n  } else if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._opaque)) {\n    const oldIsType = _index.pushTypeContext.call(void 0, 1);\n    _index.next.call(void 0, );\n    // export opaque type Foo = Bar;\n    flowParseOpaqueType(false);\n    _index.popTypeContext.call(void 0, oldIsType);\n  } else if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._interface)) {\n    const oldIsType = _index.pushTypeContext.call(void 0, 1);\n    _index.next.call(void 0, );\n    flowParseInterface();\n    _index.popTypeContext.call(void 0, oldIsType);\n  } else {\n    _statement.parseStatement.call(void 0, true);\n  }\n} exports.flowParseExportDeclaration = flowParseExportDeclaration;\n\n function flowShouldParseExportStar() {\n  return _index.match.call(void 0, _types.TokenType.star) || (_util.isContextual.call(void 0, _keywords.ContextualKeyword._type) && _index.lookaheadType.call(void 0, ) === _types.TokenType.star);\n} exports.flowShouldParseExportStar = flowShouldParseExportStar;\n\n function flowParseExportStar() {\n  if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._type)) {\n    const oldIsType = _index.pushTypeContext.call(void 0, 2);\n    _statement.baseParseExportStar.call(void 0, );\n    _index.popTypeContext.call(void 0, oldIsType);\n  } else {\n    _statement.baseParseExportStar.call(void 0, );\n  }\n} exports.flowParseExportStar = flowParseExportStar;\n\n// parse a the super class type parameters and implements\n function flowAfterParseClassSuper(hasSuper) {\n  if (hasSuper && _index.match.call(void 0, _types.TokenType.lessThan)) {\n    flowParseTypeParameterInstantiation();\n  }\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._implements)) {\n    const oldIsType = _index.pushTypeContext.call(void 0, 0);\n    _index.next.call(void 0, );\n    _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._implements;\n    do {\n      flowParseRestrictedIdentifier();\n      if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n        flowParseTypeParameterInstantiation();\n      }\n    } while (_index.eat.call(void 0, _types.TokenType.comma));\n    _index.popTypeContext.call(void 0, oldIsType);\n  }\n} exports.flowAfterParseClassSuper = flowAfterParseClassSuper;\n\n// parse type parameters for object method shorthand\n function flowStartParseObjPropValue() {\n  // method shorthand\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    flowParseTypeParameterDeclaration();\n    if (!_index.match.call(void 0, _types.TokenType.parenL)) _util.unexpected.call(void 0, );\n  }\n} exports.flowStartParseObjPropValue = flowStartParseObjPropValue;\n\n function flowParseAssignableListItemTypes() {\n  const oldIsType = _index.pushTypeContext.call(void 0, 0);\n  _index.eat.call(void 0, _types.TokenType.question);\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    flowParseTypeAnnotation();\n  }\n  _index.popTypeContext.call(void 0, oldIsType);\n} exports.flowParseAssignableListItemTypes = flowParseAssignableListItemTypes;\n\n// parse typeof and type imports\n function flowStartParseImportSpecifiers() {\n  if (_index.match.call(void 0, _types.TokenType._typeof) || _util.isContextual.call(void 0, _keywords.ContextualKeyword._type)) {\n    const lh = _index.lookaheadTypeAndKeyword.call(void 0, );\n    if (isMaybeDefaultImport(lh) || lh.type === _types.TokenType.braceL || lh.type === _types.TokenType.star) {\n      _index.next.call(void 0, );\n    }\n  }\n} exports.flowStartParseImportSpecifiers = flowStartParseImportSpecifiers;\n\n// parse import-type/typeof shorthand\n function flowParseImportSpecifier() {\n  const isTypeKeyword =\n    _base.state.contextualKeyword === _keywords.ContextualKeyword._type || _base.state.type === _types.TokenType._typeof;\n  if (isTypeKeyword) {\n    _index.next.call(void 0, );\n  } else {\n    _expression.parseIdentifier.call(void 0, );\n  }\n\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._as) && !_util.isLookaheadContextual.call(void 0, _keywords.ContextualKeyword._as)) {\n    _expression.parseIdentifier.call(void 0, );\n    if (isTypeKeyword && !_index.match.call(void 0, _types.TokenType.name) && !(_base.state.type & _types.TokenType.IS_KEYWORD)) {\n      // `import {type as ,` or `import {type as }`\n    } else {\n      // `import {type as foo`\n      _expression.parseIdentifier.call(void 0, );\n    }\n  } else if (isTypeKeyword && (_index.match.call(void 0, _types.TokenType.name) || !!(_base.state.type & _types.TokenType.IS_KEYWORD))) {\n    // `import {type foo`\n    _expression.parseIdentifier.call(void 0, );\n    if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._as)) {\n      _expression.parseIdentifier.call(void 0, );\n    }\n  }\n} exports.flowParseImportSpecifier = flowParseImportSpecifier;\n\n// parse function type parameters - function foo<T>() {}\n function flowStartParseFunctionParams() {\n  // Originally this checked if the method is a getter/setter, but if it was, we'd crash soon\n  // anyway, so don't try to propagate that information.\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    const oldIsType = _index.pushTypeContext.call(void 0, 0);\n    flowParseTypeParameterDeclaration();\n    _index.popTypeContext.call(void 0, oldIsType);\n  }\n} exports.flowStartParseFunctionParams = flowStartParseFunctionParams;\n\n// parse flow type annotations on variable declarator heads - let foo: string = bar\n function flowAfterParseVarHead() {\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    flowParseTypeAnnotation();\n  }\n} exports.flowAfterParseVarHead = flowAfterParseVarHead;\n\n// parse the return type of an async arrow function - let foo = (async (): number => {});\n function flowStartParseAsyncArrowFromCallExpression() {\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    const oldNoAnonFunctionType = _base.state.noAnonFunctionType;\n    _base.state.noAnonFunctionType = true;\n    flowParseTypeAnnotation();\n    _base.state.noAnonFunctionType = oldNoAnonFunctionType;\n  }\n} exports.flowStartParseAsyncArrowFromCallExpression = flowStartParseAsyncArrowFromCallExpression;\n\n// We need to support type parameter declarations for arrow functions. This\n// is tricky. There are three situations we need to handle\n//\n// 1. This is either JSX or an arrow function. We'll try JSX first. If that\n//    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n//    error.\n// 2. This is an arrow function. We'll parse the type parameter declaration,\n//    parse the rest, make sure the rest is an arrow function, and go from\n//    there\n// 3. This is neither. Just call the super method\n function flowParseMaybeAssign(noIn, isWithinParens) {\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    const snapshot = _base.state.snapshot();\n    let wasArrow = _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);\n    if (_base.state.error) {\n      _base.state.restoreFromSnapshot(snapshot);\n      _base.state.type = _types.TokenType.typeParameterStart;\n    } else {\n      return wasArrow;\n    }\n\n    const oldIsType = _index.pushTypeContext.call(void 0, 0);\n    flowParseTypeParameterDeclaration();\n    _index.popTypeContext.call(void 0, oldIsType);\n    wasArrow = _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);\n    if (wasArrow) {\n      return true;\n    }\n    _util.unexpected.call(void 0, );\n  }\n\n  return _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);\n} exports.flowParseMaybeAssign = flowParseMaybeAssign;\n\n// handle return types for arrow functions\n function flowParseArrow() {\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    const oldIsType = _index.pushTypeContext.call(void 0, 0);\n    const snapshot = _base.state.snapshot();\n\n    const oldNoAnonFunctionType = _base.state.noAnonFunctionType;\n    _base.state.noAnonFunctionType = true;\n    flowParseTypeAndPredicateInitialiser();\n    _base.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n    if (_util.canInsertSemicolon.call(void 0, )) _util.unexpected.call(void 0, );\n    if (!_index.match.call(void 0, _types.TokenType.arrow)) _util.unexpected.call(void 0, );\n\n    if (_base.state.error) {\n      _base.state.restoreFromSnapshot(snapshot);\n    }\n    _index.popTypeContext.call(void 0, oldIsType);\n  }\n  return _index.eat.call(void 0, _types.TokenType.arrow);\n} exports.flowParseArrow = flowParseArrow;\n\n function flowParseSubscripts(startPos, noCalls = false) {\n  if (\n    _base.state.tokens[_base.state.tokens.length - 1].contextualKeyword === _keywords.ContextualKeyword._async &&\n    _index.match.call(void 0, _types.TokenType.lessThan)\n  ) {\n    const snapshot = _base.state.snapshot();\n    const wasArrow = parseAsyncArrowWithTypeParameters();\n    if (wasArrow && !_base.state.error) {\n      return;\n    }\n    _base.state.restoreFromSnapshot(snapshot);\n  }\n\n  _expression.baseParseSubscripts.call(void 0, startPos, noCalls);\n} exports.flowParseSubscripts = flowParseSubscripts;\n\n// Returns true if there was an arrow function here.\nfunction parseAsyncArrowWithTypeParameters() {\n  _base.state.scopeDepth++;\n  const startTokenIndex = _base.state.tokens.length;\n  _statement.parseFunctionParams.call(void 0, );\n  if (!_expression.parseArrow.call(void 0, )) {\n    return false;\n  }\n  _expression.parseArrowExpression.call(void 0, startTokenIndex);\n  return true;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/parser/plugins/flow.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/parser/plugins/jsx/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/sucrase/dist/parser/plugins/jsx/index.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\n\n\n\n\n\n\nvar _index = __webpack_require__(/*! ../../tokenizer/index */ \"./node_modules/sucrase/dist/parser/tokenizer/index.js\");\nvar _types = __webpack_require__(/*! ../../tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\nvar _base = __webpack_require__(/*! ../../traverser/base */ \"./node_modules/sucrase/dist/parser/traverser/base.js\");\nvar _expression = __webpack_require__(/*! ../../traverser/expression */ \"./node_modules/sucrase/dist/parser/traverser/expression.js\");\nvar _util = __webpack_require__(/*! ../../traverser/util */ \"./node_modules/sucrase/dist/parser/traverser/util.js\");\nvar _charcodes = __webpack_require__(/*! ../../util/charcodes */ \"./node_modules/sucrase/dist/parser/util/charcodes.js\");\nvar _identifier = __webpack_require__(/*! ../../util/identifier */ \"./node_modules/sucrase/dist/parser/util/identifier.js\");\nvar _typescript = __webpack_require__(/*! ../typescript */ \"./node_modules/sucrase/dist/parser/plugins/typescript.js\");\n\n// Reads inline JSX contents token.\nfunction jsxReadToken() {\n  for (;;) {\n    if (_base.state.pos >= _base.input.length) {\n      _util.unexpected.call(void 0, \"Unterminated JSX contents\");\n      return;\n    }\n\n    const ch = _base.input.charCodeAt(_base.state.pos);\n\n    switch (ch) {\n      case _charcodes.charCodes.lessThan:\n      case _charcodes.charCodes.leftCurlyBrace:\n        if (_base.state.pos === _base.state.start) {\n          if (ch === _charcodes.charCodes.lessThan) {\n            _base.state.pos++;\n            _index.finishToken.call(void 0, _types.TokenType.jsxTagStart);\n            return;\n          }\n          _index.getTokenFromCode.call(void 0, ch);\n          return;\n        }\n        _index.finishToken.call(void 0, _types.TokenType.jsxText);\n        return;\n\n      default:\n        _base.state.pos++;\n    }\n  }\n}\n\nfunction jsxReadString(quote) {\n  _base.state.pos++;\n  for (;;) {\n    if (_base.state.pos >= _base.input.length) {\n      _util.unexpected.call(void 0, \"Unterminated string constant\");\n      return;\n    }\n\n    const ch = _base.input.charCodeAt(_base.state.pos);\n    if (ch === quote) {\n      _base.state.pos++;\n      break;\n    }\n    _base.state.pos++;\n  }\n  _index.finishToken.call(void 0, _types.TokenType.string);\n}\n\n// Read a JSX identifier (valid tag or attribute name).\n//\n// Optimized version since JSX identifiers can't contain\n// escape characters and so can be read as single slice.\n// Also assumes that first character was already checked\n// by isIdentifierStart in readToken.\n\nfunction jsxReadWord() {\n  let ch;\n  do {\n    if (_base.state.pos > _base.input.length) {\n      _util.unexpected.call(void 0, \"Unexpectedly reached the end of input.\");\n      return;\n    }\n    ch = _base.input.charCodeAt(++_base.state.pos);\n  } while (_identifier.IS_IDENTIFIER_CHAR[ch] || ch === _charcodes.charCodes.dash);\n  _index.finishToken.call(void 0, _types.TokenType.jsxName);\n}\n\n// Parse next token as JSX identifier\nfunction jsxParseIdentifier() {\n  nextJSXTagToken();\n}\n\n// Parse namespaced identifier.\nfunction jsxParseNamespacedName(identifierRole) {\n  jsxParseIdentifier();\n  if (!_index.eat.call(void 0, _types.TokenType.colon)) {\n    // Plain identifier, so this is an access.\n    _base.state.tokens[_base.state.tokens.length - 1].identifierRole = identifierRole;\n    return;\n  }\n  // Process the second half of the namespaced name.\n  jsxParseIdentifier();\n}\n\n// Parses element name in any form - namespaced, member\n// or single identifier.\nfunction jsxParseElementName() {\n  jsxParseNamespacedName(_index.IdentifierRole.Access);\n  while (_index.match.call(void 0, _types.TokenType.dot)) {\n    nextJSXTagToken();\n    jsxParseIdentifier();\n  }\n}\n\n// Parses any type of JSX attribute value.\nfunction jsxParseAttributeValue() {\n  switch (_base.state.type) {\n    case _types.TokenType.braceL:\n      jsxParseExpressionContainer();\n      nextJSXTagToken();\n      return;\n\n    case _types.TokenType.jsxTagStart:\n      jsxParseElement();\n      nextJSXTagToken();\n      return;\n\n    case _types.TokenType.string:\n      nextJSXTagToken();\n      return;\n\n    default:\n      _util.unexpected.call(void 0, \"JSX value should be either an expression or a quoted JSX text\");\n  }\n}\n\nfunction jsxParseEmptyExpression() {\n  // Do nothing.\n}\n\n// Parse JSX spread child\n// Does not parse the last token.\nfunction jsxParseSpreadChild() {\n  _util.expect.call(void 0, _types.TokenType.braceL);\n  _util.expect.call(void 0, _types.TokenType.ellipsis);\n  _expression.parseExpression.call(void 0, );\n}\n\n// Parses JSX expression enclosed into curly brackets.\n// Does not parse the last token.\nfunction jsxParseExpressionContainer() {\n  _index.next.call(void 0, );\n  if (_index.match.call(void 0, _types.TokenType.braceR)) {\n    jsxParseEmptyExpression();\n  } else {\n    _expression.parseExpression.call(void 0, );\n  }\n}\n\n// Parses following JSX attribute name-value pair.\nfunction jsxParseAttribute() {\n  if (_index.eat.call(void 0, _types.TokenType.braceL)) {\n    _util.expect.call(void 0, _types.TokenType.ellipsis);\n    _expression.parseMaybeAssign.call(void 0, );\n    // }\n    nextJSXTagToken();\n    return;\n  }\n  jsxParseNamespacedName(_index.IdentifierRole.ObjectKey);\n  if (_index.match.call(void 0, _types.TokenType.eq)) {\n    nextJSXTagToken();\n    jsxParseAttributeValue();\n  }\n}\n\n// Parses JSX opening tag starting after \"<\".\n// Returns true if the tag was self-closing.\n// Does not parse the last token.\nfunction jsxParseOpeningElement() {\n  if (_index.match.call(void 0, _types.TokenType.jsxTagEnd)) {\n    // This is an open-fragment.\n    return false;\n  }\n  jsxParseElementName();\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsTryParseJSXTypeArgument.call(void 0, );\n  }\n  while (!_index.match.call(void 0, _types.TokenType.slash) && !_index.match.call(void 0, _types.TokenType.jsxTagEnd) && !_base.state.error) {\n    jsxParseAttribute();\n  }\n  const isSelfClosing = _index.match.call(void 0, _types.TokenType.slash);\n  if (isSelfClosing) {\n    // /\n    nextJSXTagToken();\n  }\n  return isSelfClosing;\n}\n\n// Parses JSX closing tag starting after \"</\".\n// Does not parse the last token.\nfunction jsxParseClosingElement() {\n  if (_index.match.call(void 0, _types.TokenType.jsxTagEnd)) {\n    // Fragment syntax, so we immediately have a tag end.\n    return;\n  }\n  jsxParseElementName();\n}\n\n// Parses entire JSX element, including its opening tag\n// (starting after \"<\"), attributes, contents and closing tag.\n// Does not parse the last token.\nfunction jsxParseElementAt() {\n  const isSelfClosing = jsxParseOpeningElement();\n  if (!isSelfClosing) {\n    nextJSXExprToken();\n    while (true) {\n      switch (_base.state.type) {\n        case _types.TokenType.jsxTagStart:\n          nextJSXTagToken();\n          if (_index.match.call(void 0, _types.TokenType.slash)) {\n            nextJSXTagToken();\n            jsxParseClosingElement();\n            return;\n          }\n          jsxParseElementAt();\n          nextJSXExprToken();\n          break;\n\n        case _types.TokenType.jsxText:\n          nextJSXExprToken();\n          break;\n\n        case _types.TokenType.braceL:\n          if (_index.lookaheadType.call(void 0, ) === _types.TokenType.ellipsis) {\n            jsxParseSpreadChild();\n            nextJSXExprToken();\n          } else {\n            jsxParseExpressionContainer();\n            nextJSXExprToken();\n          }\n\n          break;\n\n        // istanbul ignore next - should never happen\n        default:\n          _util.unexpected.call(void 0, );\n          return;\n      }\n    }\n  }\n}\n\n// Parses entire JSX element from current position.\n// Does not parse the last token.\n function jsxParseElement() {\n  nextJSXTagToken();\n  jsxParseElementAt();\n} exports.jsxParseElement = jsxParseElement;\n\n// ==================================\n// Overrides\n// ==================================\n\n function nextJSXTagToken() {\n  _base.state.tokens.push(new (0, _index.Token)());\n  _index.skipSpace.call(void 0, );\n  _base.state.start = _base.state.pos;\n  const code = _base.input.charCodeAt(_base.state.pos);\n\n  if (_identifier.IS_IDENTIFIER_START[code]) {\n    jsxReadWord();\n  } else if (code === _charcodes.charCodes.quotationMark || code === _charcodes.charCodes.apostrophe) {\n    jsxReadString(code);\n  } else {\n    // The following tokens are just one character each.\n    ++_base.state.pos;\n    switch (code) {\n      case _charcodes.charCodes.greaterThan:\n        _index.finishToken.call(void 0, _types.TokenType.jsxTagEnd);\n        break;\n      case _charcodes.charCodes.lessThan:\n        _index.finishToken.call(void 0, _types.TokenType.jsxTagStart);\n        break;\n      case _charcodes.charCodes.slash:\n        _index.finishToken.call(void 0, _types.TokenType.slash);\n        break;\n      case _charcodes.charCodes.equalsTo:\n        _index.finishToken.call(void 0, _types.TokenType.eq);\n        break;\n      case _charcodes.charCodes.leftCurlyBrace:\n        _index.finishToken.call(void 0, _types.TokenType.braceL);\n        break;\n      case _charcodes.charCodes.dot:\n        _index.finishToken.call(void 0, _types.TokenType.dot);\n        break;\n      case _charcodes.charCodes.colon:\n        _index.finishToken.call(void 0, _types.TokenType.colon);\n        break;\n      default:\n        _util.unexpected.call(void 0, );\n    }\n  }\n} exports.nextJSXTagToken = nextJSXTagToken;\n\nfunction nextJSXExprToken() {\n  _base.state.tokens.push(new (0, _index.Token)());\n  _base.state.start = _base.state.pos;\n  jsxReadToken();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/parser/plugins/jsx/index.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/parser/plugins/jsx/xhtml.js":
/*!***************************************************************!*\
  !*** ./node_modules/sucrase/dist/parser/plugins/jsx/xhtml.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", {value: true});const entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexports. default = entities;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/parser/plugins/jsx/xhtml.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/parser/plugins/types.js":
/*!***********************************************************!*\
  !*** ./node_modules/sucrase/dist/parser/plugins/types.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", {value: true});var _index = __webpack_require__(/*! ../tokenizer/index */ \"./node_modules/sucrase/dist/parser/tokenizer/index.js\");\nvar _types = __webpack_require__(/*! ../tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\nvar _base = __webpack_require__(/*! ../traverser/base */ \"./node_modules/sucrase/dist/parser/traverser/base.js\");\nvar _expression = __webpack_require__(/*! ../traverser/expression */ \"./node_modules/sucrase/dist/parser/traverser/expression.js\");\nvar _flow = __webpack_require__(/*! ./flow */ \"./node_modules/sucrase/dist/parser/plugins/flow.js\");\nvar _typescript = __webpack_require__(/*! ./typescript */ \"./node_modules/sucrase/dist/parser/plugins/typescript.js\");\n\n/**\n * Common parser code for TypeScript and Flow.\n */\n\n// An apparent conditional expression could actually be an optional parameter in an arrow function.\n function typedParseConditional(noIn) {\n  // If we see ?:, this can't possibly be a valid conditional. typedParseParenItem will be called\n  // later to finish off the arrow parameter. We also need to handle bare ? tokens for optional\n  // parameters without type annotations, i.e. ?, and ?) .\n  if (_index.match.call(void 0, _types.TokenType.question)) {\n    const nextType = _index.lookaheadType.call(void 0, );\n    if (nextType === _types.TokenType.colon || nextType === _types.TokenType.comma || nextType === _types.TokenType.parenR) {\n      return;\n    }\n  }\n  _expression.baseParseConditional.call(void 0, noIn);\n} exports.typedParseConditional = typedParseConditional;\n\n// Note: These \"type casts\" are *not* valid TS expressions.\n// But we parse them here and change them when completing the arrow function.\n function typedParseParenItem() {\n  if (_index.eat.call(void 0, _types.TokenType.question)) {\n    _base.state.tokens[_base.state.tokens.length - 1].isType = true;\n  }\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    if (_base.isTypeScriptEnabled) {\n      _typescript.tsParseTypeAnnotation.call(void 0, );\n    } else if (_base.isFlowEnabled) {\n      _flow.flowParseTypeAnnotation.call(void 0, );\n    }\n  }\n} exports.typedParseParenItem = typedParseParenItem;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3BhcnNlci9wbHVnaW5zL3R5cGVzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N1Y3Jhc2UvZGlzdC9wYXJzZXIvcGx1Z2lucy90eXBlcy5qcz8wYjQ4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiB0cnVlfSk7dmFyIF9pbmRleCA9IHJlcXVpcmUoJy4uL3Rva2VuaXplci9pbmRleCcpO1xudmFyIF90eXBlcyA9IHJlcXVpcmUoJy4uL3Rva2VuaXplci90eXBlcycpO1xudmFyIF9iYXNlID0gcmVxdWlyZSgnLi4vdHJhdmVyc2VyL2Jhc2UnKTtcbnZhciBfZXhwcmVzc2lvbiA9IHJlcXVpcmUoJy4uL3RyYXZlcnNlci9leHByZXNzaW9uJyk7XG52YXIgX2Zsb3cgPSByZXF1aXJlKCcuL2Zsb3cnKTtcbnZhciBfdHlwZXNjcmlwdCA9IHJlcXVpcmUoJy4vdHlwZXNjcmlwdCcpO1xuXG4vKipcbiAqIENvbW1vbiBwYXJzZXIgY29kZSBmb3IgVHlwZVNjcmlwdCBhbmQgRmxvdy5cbiAqL1xuXG4vLyBBbiBhcHBhcmVudCBjb25kaXRpb25hbCBleHByZXNzaW9uIGNvdWxkIGFjdHVhbGx5IGJlIGFuIG9wdGlvbmFsIHBhcmFtZXRlciBpbiBhbiBhcnJvdyBmdW5jdGlvbi5cbiBmdW5jdGlvbiB0eXBlZFBhcnNlQ29uZGl0aW9uYWwobm9Jbikge1xuICAvLyBJZiB3ZSBzZWUgPzosIHRoaXMgY2FuJ3QgcG9zc2libHkgYmUgYSB2YWxpZCBjb25kaXRpb25hbC4gdHlwZWRQYXJzZVBhcmVuSXRlbSB3aWxsIGJlIGNhbGxlZFxuICAvLyBsYXRlciB0byBmaW5pc2ggb2ZmIHRoZSBhcnJvdyBwYXJhbWV0ZXIuIFdlIGFsc28gbmVlZCB0byBoYW5kbGUgYmFyZSA/IHRva2VucyBmb3Igb3B0aW9uYWxcbiAgLy8gcGFyYW1ldGVycyB3aXRob3V0IHR5cGUgYW5ub3RhdGlvbnMsIGkuZS4gPywgYW5kID8pIC5cbiAgaWYgKF9pbmRleC5tYXRjaC5jYWxsKHZvaWQgMCwgX3R5cGVzLlRva2VuVHlwZS5xdWVzdGlvbikpIHtcbiAgICBjb25zdCBuZXh0VHlwZSA9IF9pbmRleC5sb29rYWhlYWRUeXBlLmNhbGwodm9pZCAwLCApO1xuICAgIGlmIChuZXh0VHlwZSA9PT0gX3R5cGVzLlRva2VuVHlwZS5jb2xvbiB8fCBuZXh0VHlwZSA9PT0gX3R5cGVzLlRva2VuVHlwZS5jb21tYSB8fCBuZXh0VHlwZSA9PT0gX3R5cGVzLlRva2VuVHlwZS5wYXJlblIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgX2V4cHJlc3Npb24uYmFzZVBhcnNlQ29uZGl0aW9uYWwuY2FsbCh2b2lkIDAsIG5vSW4pO1xufSBleHBvcnRzLnR5cGVkUGFyc2VDb25kaXRpb25hbCA9IHR5cGVkUGFyc2VDb25kaXRpb25hbDtcblxuLy8gTm90ZTogVGhlc2UgXCJ0eXBlIGNhc3RzXCIgYXJlICpub3QqIHZhbGlkIFRTIGV4cHJlc3Npb25zLlxuLy8gQnV0IHdlIHBhcnNlIHRoZW0gaGVyZSBhbmQgY2hhbmdlIHRoZW0gd2hlbiBjb21wbGV0aW5nIHRoZSBhcnJvdyBmdW5jdGlvbi5cbiBmdW5jdGlvbiB0eXBlZFBhcnNlUGFyZW5JdGVtKCkge1xuICBpZiAoX2luZGV4LmVhdC5jYWxsKHZvaWQgMCwgX3R5cGVzLlRva2VuVHlwZS5xdWVzdGlvbikpIHtcbiAgICBfYmFzZS5zdGF0ZS50b2tlbnNbX2Jhc2Uuc3RhdGUudG9rZW5zLmxlbmd0aCAtIDFdLmlzVHlwZSA9IHRydWU7XG4gIH1cbiAgaWYgKF9pbmRleC5tYXRjaC5jYWxsKHZvaWQgMCwgX3R5cGVzLlRva2VuVHlwZS5jb2xvbikpIHtcbiAgICBpZiAoX2Jhc2UuaXNUeXBlU2NyaXB0RW5hYmxlZCkge1xuICAgICAgX3R5cGVzY3JpcHQudHNQYXJzZVR5cGVBbm5vdGF0aW9uLmNhbGwodm9pZCAwLCApO1xuICAgIH0gZWxzZSBpZiAoX2Jhc2UuaXNGbG93RW5hYmxlZCkge1xuICAgICAgX2Zsb3cuZmxvd1BhcnNlVHlwZUFubm90YXRpb24uY2FsbCh2b2lkIDAsICk7XG4gICAgfVxuICB9XG59IGV4cG9ydHMudHlwZWRQYXJzZVBhcmVuSXRlbSA9IHR5cGVkUGFyc2VQYXJlbkl0ZW07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/parser/plugins/types.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/parser/plugins/typescript.js":
/*!****************************************************************!*\
  !*** ./node_modules/sucrase/dist/parser/plugins/typescript.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\n\n\n\n\nvar _index = __webpack_require__(/*! ../tokenizer/index */ \"./node_modules/sucrase/dist/parser/tokenizer/index.js\");\nvar _keywords = __webpack_require__(/*! ../tokenizer/keywords */ \"./node_modules/sucrase/dist/parser/tokenizer/keywords.js\");\nvar _types = __webpack_require__(/*! ../tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\nvar _base = __webpack_require__(/*! ../traverser/base */ \"./node_modules/sucrase/dist/parser/traverser/base.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _expression = __webpack_require__(/*! ../traverser/expression */ \"./node_modules/sucrase/dist/parser/traverser/expression.js\");\nvar _lval = __webpack_require__(/*! ../traverser/lval */ \"./node_modules/sucrase/dist/parser/traverser/lval.js\");\n\n\n\n\n\n\n\n\n\n\n\nvar _statement = __webpack_require__(/*! ../traverser/statement */ \"./node_modules/sucrase/dist/parser/traverser/statement.js\");\n\n\n\n\n\n\n\n\n\n\n\nvar _util = __webpack_require__(/*! ../traverser/util */ \"./node_modules/sucrase/dist/parser/traverser/util.js\");\nvar _jsx = __webpack_require__(/*! ./jsx */ \"./node_modules/sucrase/dist/parser/plugins/jsx/index.js\");\n\nfunction tsIsIdentifier() {\n  // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n  // See https://github.com/Microsoft/TypeScript/issues/15008\n  return _index.match.call(void 0, _types.TokenType.name);\n}\n\nfunction tsNextTokenCanFollowModifier() {\n  // Note: TypeScript's implementation is much more complicated because\n  // more things are considered modifiers there.\n  // This implementation only handles modifiers not handled by babylon itself. And \"static\".\n  // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n  const snapshot = _base.state.snapshot();\n\n  _index.next.call(void 0, );\n  const canFollowModifier =\n    !_util.hasPrecedingLineBreak.call(void 0, ) &&\n    !_index.match.call(void 0, _types.TokenType.parenL) &&\n    !_index.match.call(void 0, _types.TokenType.parenR) &&\n    !_index.match.call(void 0, _types.TokenType.colon) &&\n    !_index.match.call(void 0, _types.TokenType.eq) &&\n    !_index.match.call(void 0, _types.TokenType.question) &&\n    !_index.match.call(void 0, _types.TokenType.bang);\n\n  if (canFollowModifier) {\n    return true;\n  } else {\n    _base.state.restoreFromSnapshot(snapshot);\n    return false;\n  }\n}\n\n/** Parses a modifier matching one the given modifier names. */\n function tsParseModifier(\n  allowedModifiers,\n) {\n  if (!_index.match.call(void 0, _types.TokenType.name)) {\n    return null;\n  }\n\n  const modifier = _base.state.contextualKeyword;\n  if (allowedModifiers.indexOf(modifier) !== -1 && tsNextTokenCanFollowModifier()) {\n    switch (modifier) {\n      case _keywords.ContextualKeyword._readonly:\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._readonly;\n        break;\n      case _keywords.ContextualKeyword._abstract:\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._abstract;\n        break;\n      case _keywords.ContextualKeyword._static:\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._static;\n        break;\n      case _keywords.ContextualKeyword._public:\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._public;\n        break;\n      case _keywords.ContextualKeyword._private:\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._private;\n        break;\n      case _keywords.ContextualKeyword._protected:\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._protected;\n        break;\n      default:\n        break;\n    }\n    return modifier;\n  }\n  return null;\n} exports.tsParseModifier = tsParseModifier;\n\nfunction tsParseEntityName() {\n  _expression.parseIdentifier.call(void 0, );\n  while (_index.eat.call(void 0, _types.TokenType.dot)) {\n    _expression.parseIdentifier.call(void 0, );\n  }\n}\n\nfunction tsParseTypeReference() {\n  tsParseEntityName();\n  if (!_util.hasPrecedingLineBreak.call(void 0, ) && _index.match.call(void 0, _types.TokenType.lessThan)) {\n    tsParseTypeArguments();\n  }\n}\n\nfunction tsParseThisTypePredicate() {\n  _index.next.call(void 0, );\n  tsParseTypeAnnotation();\n}\n\nfunction tsParseThisTypeNode() {\n  _index.next.call(void 0, );\n}\n\nfunction tsParseTypeQuery() {\n  _util.expect.call(void 0, _types.TokenType._typeof);\n  if (_index.match.call(void 0, _types.TokenType._import)) {\n    tsParseImportType();\n  } else {\n    tsParseEntityName();\n  }\n}\n\nfunction tsParseImportType() {\n  _util.expect.call(void 0, _types.TokenType._import);\n  _util.expect.call(void 0, _types.TokenType.parenL);\n  _util.expect.call(void 0, _types.TokenType.string);\n  _util.expect.call(void 0, _types.TokenType.parenR);\n  if (_index.eat.call(void 0, _types.TokenType.dot)) {\n    tsParseEntityName();\n  }\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    tsParseTypeArguments();\n  }\n}\n\nfunction tsParseTypeParameter() {\n  _expression.parseIdentifier.call(void 0, );\n  if (_index.eat.call(void 0, _types.TokenType._extends)) {\n    tsParseType();\n  }\n  if (_index.eat.call(void 0, _types.TokenType.eq)) {\n    tsParseType();\n  }\n}\n\n function tsTryParseTypeParameters() {\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    tsParseTypeParameters();\n  }\n} exports.tsTryParseTypeParameters = tsTryParseTypeParameters;\n\nfunction tsParseTypeParameters() {\n  const oldIsType = _index.pushTypeContext.call(void 0, 0);\n  if (_index.match.call(void 0, _types.TokenType.lessThan) || _index.match.call(void 0, _types.TokenType.typeParameterStart)) {\n    _index.next.call(void 0, );\n  } else {\n    _util.unexpected.call(void 0, );\n  }\n\n  while (!_index.eat.call(void 0, _types.TokenType.greaterThan) && !_base.state.error) {\n    tsParseTypeParameter();\n    _index.eat.call(void 0, _types.TokenType.comma);\n  }\n  _index.popTypeContext.call(void 0, oldIsType);\n}\n\n// Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n// but here it's always false, because this is only used for types.\nfunction tsFillSignature(returnToken) {\n  // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n  const returnTokenRequired = returnToken === _types.TokenType.arrow;\n  tsTryParseTypeParameters();\n  _util.expect.call(void 0, _types.TokenType.parenL);\n  // Create a scope even though we're doing type parsing so we don't accidentally\n  // treat params as top-level bindings.\n  _base.state.scopeDepth++;\n  tsParseBindingListForSignature(false /* isBlockScope */);\n  _base.state.scopeDepth--;\n  if (returnTokenRequired) {\n    tsParseTypeOrTypePredicateAnnotation(returnToken);\n  } else if (_index.match.call(void 0, returnToken)) {\n    tsParseTypeOrTypePredicateAnnotation(returnToken);\n  }\n}\n\nfunction tsParseBindingListForSignature(isBlockScope) {\n  _lval.parseBindingList.call(void 0, _types.TokenType.parenR, isBlockScope);\n}\n\nfunction tsParseTypeMemberSemicolon() {\n  if (!_index.eat.call(void 0, _types.TokenType.comma)) {\n    _util.semicolon.call(void 0, );\n  }\n}\n\nvar SignatureMemberKind; (function (SignatureMemberKind) {\n  const TSCallSignatureDeclaration = 0; SignatureMemberKind[SignatureMemberKind[\"TSCallSignatureDeclaration\"] = TSCallSignatureDeclaration] = \"TSCallSignatureDeclaration\";\n  const TSConstructSignatureDeclaration = TSCallSignatureDeclaration + 1; SignatureMemberKind[SignatureMemberKind[\"TSConstructSignatureDeclaration\"] = TSConstructSignatureDeclaration] = \"TSConstructSignatureDeclaration\";\n})(SignatureMemberKind || (SignatureMemberKind = {}));\n\nfunction tsParseSignatureMember(kind) {\n  if (kind === SignatureMemberKind.TSConstructSignatureDeclaration) {\n    _util.expect.call(void 0, _types.TokenType._new);\n  }\n  tsFillSignature(_types.TokenType.colon);\n  tsParseTypeMemberSemicolon();\n}\n\nfunction tsIsUnambiguouslyIndexSignature() {\n  const snapshot = _base.state.snapshot();\n  _index.next.call(void 0, ); // Skip '{'\n  const isIndexSignature = _index.eat.call(void 0, _types.TokenType.name) && _index.match.call(void 0, _types.TokenType.colon);\n  _base.state.restoreFromSnapshot(snapshot);\n  return isIndexSignature;\n}\n\nfunction tsTryParseIndexSignature() {\n  if (!(_index.match.call(void 0, _types.TokenType.bracketL) && tsIsUnambiguouslyIndexSignature())) {\n    return false;\n  }\n\n  const oldIsType = _index.pushTypeContext.call(void 0, 0);\n\n  _util.expect.call(void 0, _types.TokenType.bracketL);\n  _expression.parseIdentifier.call(void 0, );\n  tsParseTypeAnnotation();\n  _util.expect.call(void 0, _types.TokenType.bracketR);\n\n  tsTryParseTypeAnnotation();\n  tsParseTypeMemberSemicolon();\n\n  _index.popTypeContext.call(void 0, oldIsType);\n  return true;\n}\n\nfunction tsParsePropertyOrMethodSignature(isReadonly) {\n  _expression.parsePropertyName.call(void 0, -1 /* Types don't need context IDs. */);\n  _index.eat.call(void 0, _types.TokenType.question);\n\n  if (!isReadonly && (_index.match.call(void 0, _types.TokenType.parenL) || _index.match.call(void 0, _types.TokenType.lessThan))) {\n    tsFillSignature(_types.TokenType.colon);\n    tsParseTypeMemberSemicolon();\n  } else {\n    tsTryParseTypeAnnotation();\n    tsParseTypeMemberSemicolon();\n  }\n}\n\nfunction tsParseTypeMember() {\n  if (_index.match.call(void 0, _types.TokenType.parenL) || _index.match.call(void 0, _types.TokenType.lessThan)) {\n    tsParseSignatureMember(SignatureMemberKind.TSCallSignatureDeclaration);\n    return;\n  }\n  if (_index.match.call(void 0, _types.TokenType._new) && tsIsStartOfConstructSignature()) {\n    tsParseSignatureMember(SignatureMemberKind.TSConstructSignatureDeclaration);\n    return;\n  }\n  const readonly = !!tsParseModifier([_keywords.ContextualKeyword._readonly]);\n\n  const found = tsTryParseIndexSignature();\n  if (found) {\n    return;\n  }\n  tsParsePropertyOrMethodSignature(readonly);\n}\n\nfunction tsIsStartOfConstructSignature() {\n  const lookahead = _index.lookaheadType.call(void 0, );\n  return lookahead === _types.TokenType.parenL || lookahead === _types.TokenType.lessThan;\n}\n\nfunction tsParseTypeLiteral() {\n  tsParseObjectTypeMembers();\n}\n\nfunction tsParseObjectTypeMembers() {\n  _util.expect.call(void 0, _types.TokenType.braceL);\n  while (!_index.eat.call(void 0, _types.TokenType.braceR) && !_base.state.error) {\n    tsParseTypeMember();\n  }\n}\n\nfunction tsLookaheadIsStartOfMappedType() {\n  const snapshot = _base.state.snapshot();\n  const isStartOfMappedType = tsIsStartOfMappedType();\n  _base.state.restoreFromSnapshot(snapshot);\n  return isStartOfMappedType;\n}\n\nfunction tsIsStartOfMappedType() {\n  _index.next.call(void 0, );\n  if (_index.eat.call(void 0, _types.TokenType.plus) || _index.eat.call(void 0, _types.TokenType.minus)) {\n    return _util.isContextual.call(void 0, _keywords.ContextualKeyword._readonly);\n  }\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._readonly)) {\n    _index.next.call(void 0, );\n  }\n  if (!_index.match.call(void 0, _types.TokenType.bracketL)) {\n    return false;\n  }\n  _index.next.call(void 0, );\n  if (!tsIsIdentifier()) {\n    return false;\n  }\n  _index.next.call(void 0, );\n  return _index.match.call(void 0, _types.TokenType._in);\n}\n\nfunction tsParseMappedTypeParameter() {\n  _expression.parseIdentifier.call(void 0, );\n  _util.expect.call(void 0, _types.TokenType._in);\n  tsParseType();\n}\n\nfunction tsParseMappedType() {\n  _util.expect.call(void 0, _types.TokenType.braceL);\n  if (_index.match.call(void 0, _types.TokenType.plus) || _index.match.call(void 0, _types.TokenType.minus)) {\n    _index.next.call(void 0, );\n    _util.expectContextual.call(void 0, _keywords.ContextualKeyword._readonly);\n  } else {\n    _util.eatContextual.call(void 0, _keywords.ContextualKeyword._readonly);\n  }\n  _util.expect.call(void 0, _types.TokenType.bracketL);\n  tsParseMappedTypeParameter();\n  _util.expect.call(void 0, _types.TokenType.bracketR);\n  if (_index.match.call(void 0, _types.TokenType.plus) || _index.match.call(void 0, _types.TokenType.minus)) {\n    _index.next.call(void 0, );\n    _util.expect.call(void 0, _types.TokenType.question);\n  } else {\n    _index.eat.call(void 0, _types.TokenType.question);\n  }\n  tsTryParseType();\n  _util.semicolon.call(void 0, );\n  _util.expect.call(void 0, _types.TokenType.braceR);\n}\n\nfunction tsParseTupleType() {\n  _util.expect.call(void 0, _types.TokenType.bracketL);\n  while (!_index.eat.call(void 0, _types.TokenType.bracketR) && !_base.state.error) {\n    tsParseTupleElementType();\n    _index.eat.call(void 0, _types.TokenType.comma);\n  }\n}\n\nfunction tsParseTupleElementType() {\n  // parses `...TsType[]`\n  if (_index.eat.call(void 0, _types.TokenType.ellipsis)) {\n    tsParseType();\n    return;\n  }\n  // parses `TsType?`\n  tsParseType();\n  _index.eat.call(void 0, _types.TokenType.question);\n}\n\nfunction tsParseParenthesizedType() {\n  _util.expect.call(void 0, _types.TokenType.parenL);\n  tsParseType();\n  _util.expect.call(void 0, _types.TokenType.parenR);\n}\n\nvar FunctionType; (function (FunctionType) {\n  const TSFunctionType = 0; FunctionType[FunctionType[\"TSFunctionType\"] = TSFunctionType] = \"TSFunctionType\";\n  const TSConstructorType = TSFunctionType + 1; FunctionType[FunctionType[\"TSConstructorType\"] = TSConstructorType] = \"TSConstructorType\";\n})(FunctionType || (FunctionType = {}));\n\nfunction tsParseFunctionOrConstructorType(type) {\n  if (type === FunctionType.TSConstructorType) {\n    _util.expect.call(void 0, _types.TokenType._new);\n  }\n  tsFillSignature(_types.TokenType.arrow);\n}\n\nfunction tsParseNonArrayType() {\n  switch (_base.state.type) {\n    case _types.TokenType.name:\n      tsParseTypeReference();\n      return;\n    case _types.TokenType._void:\n    case _types.TokenType._null:\n      _index.next.call(void 0, );\n      return;\n    case _types.TokenType.string:\n    case _types.TokenType.num:\n    case _types.TokenType._true:\n    case _types.TokenType._false:\n      _expression.parseLiteral.call(void 0, );\n      return;\n    case _types.TokenType.minus:\n      _index.next.call(void 0, );\n      _expression.parseLiteral.call(void 0, );\n      return;\n    case _types.TokenType._this: {\n      tsParseThisTypeNode();\n      if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._is) && !_util.hasPrecedingLineBreak.call(void 0, )) {\n        tsParseThisTypePredicate();\n      }\n      return;\n    }\n    case _types.TokenType._typeof:\n      tsParseTypeQuery();\n      return;\n    case _types.TokenType._import:\n      tsParseImportType();\n      return;\n    case _types.TokenType.braceL:\n      if (tsLookaheadIsStartOfMappedType()) {\n        tsParseMappedType();\n      } else {\n        tsParseTypeLiteral();\n      }\n      return;\n    case _types.TokenType.bracketL:\n      tsParseTupleType();\n      return;\n    case _types.TokenType.parenL:\n      tsParseParenthesizedType();\n      return;\n    case _types.TokenType.backQuote:\n      _expression.parseTemplate.call(void 0, );\n      return;\n    default:\n      if (_base.state.type & _types.TokenType.IS_KEYWORD) {\n        _index.next.call(void 0, );\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType.name;\n        return;\n      }\n      break;\n  }\n\n  _util.unexpected.call(void 0, );\n}\n\nfunction tsParseArrayTypeOrHigher() {\n  tsParseNonArrayType();\n  while (!_util.hasPrecedingLineBreak.call(void 0, ) && _index.eat.call(void 0, _types.TokenType.bracketL)) {\n    if (!_index.eat.call(void 0, _types.TokenType.bracketR)) {\n      // If we hit ] immediately, this is an array type, otherwise it's an indexed access type.\n      tsParseType();\n      _util.expect.call(void 0, _types.TokenType.bracketR);\n    }\n  }\n}\n\nfunction tsParseInferType() {\n  _util.expectContextual.call(void 0, _keywords.ContextualKeyword._infer);\n  _expression.parseIdentifier.call(void 0, );\n}\n\nfunction tsParseTypeOperatorOrHigher() {\n  if (\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._keyof) ||\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._unique) ||\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._readonly)\n  ) {\n    _index.next.call(void 0, );\n    tsParseTypeOperatorOrHigher();\n  } else if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._infer)) {\n    tsParseInferType();\n  } else {\n    tsParseArrayTypeOrHigher();\n  }\n}\n\nfunction tsParseIntersectionTypeOrHigher() {\n  _index.eat.call(void 0, _types.TokenType.bitwiseAND);\n  tsParseTypeOperatorOrHigher();\n  if (_index.match.call(void 0, _types.TokenType.bitwiseAND)) {\n    while (_index.eat.call(void 0, _types.TokenType.bitwiseAND)) {\n      tsParseTypeOperatorOrHigher();\n    }\n  }\n}\n\nfunction tsParseUnionTypeOrHigher() {\n  _index.eat.call(void 0, _types.TokenType.bitwiseOR);\n  tsParseIntersectionTypeOrHigher();\n  if (_index.match.call(void 0, _types.TokenType.bitwiseOR)) {\n    while (_index.eat.call(void 0, _types.TokenType.bitwiseOR)) {\n      tsParseIntersectionTypeOrHigher();\n    }\n  }\n}\n\nfunction tsIsStartOfFunctionType() {\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    return true;\n  }\n  return _index.match.call(void 0, _types.TokenType.parenL) && tsLookaheadIsUnambiguouslyStartOfFunctionType();\n}\n\nfunction tsSkipParameterStart() {\n  if (_index.match.call(void 0, _types.TokenType.name) || _index.match.call(void 0, _types.TokenType._this)) {\n    _index.next.call(void 0, );\n    return true;\n  }\n  // If this is a possible array/object destructure, walk to the matching bracket/brace.\n  // The next token after will tell us definitively whether this is a function param.\n  if (_index.match.call(void 0, _types.TokenType.braceL) || _index.match.call(void 0, _types.TokenType.bracketL)) {\n    let depth = 1;\n    _index.next.call(void 0, );\n    while (depth > 0 && !_base.state.error) {\n      if (_index.match.call(void 0, _types.TokenType.braceL) || _index.match.call(void 0, _types.TokenType.bracketL)) {\n        depth++;\n      } else if (_index.match.call(void 0, _types.TokenType.braceR) || _index.match.call(void 0, _types.TokenType.bracketR)) {\n        depth--;\n      }\n      _index.next.call(void 0, );\n    }\n    return true;\n  }\n  return false;\n}\n\nfunction tsLookaheadIsUnambiguouslyStartOfFunctionType() {\n  const snapshot = _base.state.snapshot();\n  const isUnambiguouslyStartOfFunctionType = tsIsUnambiguouslyStartOfFunctionType();\n  _base.state.restoreFromSnapshot(snapshot);\n  return isUnambiguouslyStartOfFunctionType;\n}\n\nfunction tsIsUnambiguouslyStartOfFunctionType() {\n  _index.next.call(void 0, );\n  if (_index.match.call(void 0, _types.TokenType.parenR) || _index.match.call(void 0, _types.TokenType.ellipsis)) {\n    // ( )\n    // ( ...\n    return true;\n  }\n  if (tsSkipParameterStart()) {\n    if (_index.match.call(void 0, _types.TokenType.colon) || _index.match.call(void 0, _types.TokenType.comma) || _index.match.call(void 0, _types.TokenType.question) || _index.match.call(void 0, _types.TokenType.eq)) {\n      // ( xxx :\n      // ( xxx ,\n      // ( xxx ?\n      // ( xxx =\n      return true;\n    }\n    if (_index.match.call(void 0, _types.TokenType.parenR)) {\n      _index.next.call(void 0, );\n      if (_index.match.call(void 0, _types.TokenType.arrow)) {\n        // ( xxx ) =>\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction tsParseTypeOrTypePredicateAnnotation(returnToken) {\n  const oldIsType = _index.pushTypeContext.call(void 0, 0);\n  _util.expect.call(void 0, returnToken);\n  tsParseTypePredicatePrefix();\n  // Regardless of whether we found an \"is\" token, there's now just a regular type in front of\n  // us.\n  tsParseType();\n  _index.popTypeContext.call(void 0, oldIsType);\n}\n\nfunction tsTryParseTypeOrTypePredicateAnnotation() {\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    tsParseTypeOrTypePredicateAnnotation(_types.TokenType.colon);\n  }\n}\n\n function tsTryParseTypeAnnotation() {\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    tsParseTypeAnnotation();\n  }\n} exports.tsTryParseTypeAnnotation = tsTryParseTypeAnnotation;\n\nfunction tsTryParseType() {\n  if (_index.eat.call(void 0, _types.TokenType.colon)) {\n    tsParseType();\n  }\n}\n\nfunction tsParseTypePredicatePrefix() {\n  const snapshot = _base.state.snapshot();\n  _expression.parseIdentifier.call(void 0, );\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._is) && !_util.hasPrecedingLineBreak.call(void 0, )) {\n    _index.next.call(void 0, );\n  } else {\n    _base.state.restoreFromSnapshot(snapshot);\n  }\n}\n\n function tsParseTypeAnnotation() {\n  const oldIsType = _index.pushTypeContext.call(void 0, 0);\n  _util.expect.call(void 0, _types.TokenType.colon);\n  tsParseType();\n  _index.popTypeContext.call(void 0, oldIsType);\n} exports.tsParseTypeAnnotation = tsParseTypeAnnotation;\n\n function tsParseType() {\n  tsParseNonConditionalType();\n  if (_util.hasPrecedingLineBreak.call(void 0, ) || !_index.eat.call(void 0, _types.TokenType._extends)) {\n    return;\n  }\n  // extends type\n  tsParseNonConditionalType();\n  _util.expect.call(void 0, _types.TokenType.question);\n  // true type\n  tsParseType();\n  _util.expect.call(void 0, _types.TokenType.colon);\n  // false type\n  tsParseType();\n} exports.tsParseType = tsParseType;\n\n function tsParseNonConditionalType() {\n  if (tsIsStartOfFunctionType()) {\n    tsParseFunctionOrConstructorType(FunctionType.TSFunctionType);\n    return;\n  }\n  if (_index.match.call(void 0, _types.TokenType._new)) {\n    // As in `new () => Date`\n    tsParseFunctionOrConstructorType(FunctionType.TSConstructorType);\n    return;\n  }\n  tsParseUnionTypeOrHigher();\n} exports.tsParseNonConditionalType = tsParseNonConditionalType;\n\n function tsParseTypeAssertion() {\n  const oldIsType = _index.pushTypeContext.call(void 0, 1);\n  tsParseType();\n  _util.expect.call(void 0, _types.TokenType.greaterThan);\n  _index.popTypeContext.call(void 0, oldIsType);\n  _expression.parseMaybeUnary.call(void 0, );\n} exports.tsParseTypeAssertion = tsParseTypeAssertion;\n\n function tsTryParseJSXTypeArgument() {\n  if (_index.eat.call(void 0, _types.TokenType.jsxTagStart)) {\n    _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType.typeParameterStart;\n    const oldIsType = _index.pushTypeContext.call(void 0, 1);\n    while (!_index.match.call(void 0, _types.TokenType.greaterThan) && !_base.state.error) {\n      tsParseType();\n      _index.eat.call(void 0, _types.TokenType.comma);\n    }\n    // Process >, but the one after needs to be parsed JSX-style.\n    _jsx.nextJSXTagToken.call(void 0, );\n    _index.popTypeContext.call(void 0, oldIsType);\n  }\n} exports.tsTryParseJSXTypeArgument = tsTryParseJSXTypeArgument;\n\nfunction tsParseHeritageClause() {\n  while (!_index.match.call(void 0, _types.TokenType.braceL) && !_base.state.error) {\n    tsParseExpressionWithTypeArguments();\n    _index.eat.call(void 0, _types.TokenType.comma);\n  }\n}\n\nfunction tsParseExpressionWithTypeArguments() {\n  // Note: TS uses parseLeftHandSideExpressionOrHigher,\n  // then has grammar errors later if it's not an EntityName.\n  tsParseEntityName();\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    tsParseTypeArguments();\n  }\n}\n\nfunction tsParseInterfaceDeclaration() {\n  _lval.parseBindingIdentifier.call(void 0, false);\n  tsTryParseTypeParameters();\n  if (_index.eat.call(void 0, _types.TokenType._extends)) {\n    tsParseHeritageClause();\n  }\n  tsParseObjectTypeMembers();\n}\n\nfunction tsParseTypeAliasDeclaration() {\n  _lval.parseBindingIdentifier.call(void 0, false);\n  tsTryParseTypeParameters();\n  _util.expect.call(void 0, _types.TokenType.eq);\n  tsParseType();\n  _util.semicolon.call(void 0, );\n}\n\nfunction tsParseEnumMember() {\n  // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n  if (_index.match.call(void 0, _types.TokenType.string)) {\n    _expression.parseLiteral.call(void 0, );\n  } else {\n    _expression.parseIdentifier.call(void 0, );\n  }\n  if (_index.eat.call(void 0, _types.TokenType.eq)) {\n    const eqIndex = _base.state.tokens.length - 1;\n    _expression.parseMaybeAssign.call(void 0, );\n    _base.state.tokens[eqIndex].rhsEndIndex = _base.state.tokens.length;\n  }\n}\n\nfunction tsParseEnumDeclaration() {\n  _lval.parseBindingIdentifier.call(void 0, false);\n  _util.expect.call(void 0, _types.TokenType.braceL);\n  while (!_index.eat.call(void 0, _types.TokenType.braceR) && !_base.state.error) {\n    tsParseEnumMember();\n    _index.eat.call(void 0, _types.TokenType.comma);\n  }\n}\n\nfunction tsParseModuleBlock() {\n  _util.expect.call(void 0, _types.TokenType.braceL);\n  _statement.parseBlockBody.call(void 0, /* end */ _types.TokenType.braceR);\n}\n\nfunction tsParseModuleOrNamespaceDeclaration() {\n  _lval.parseBindingIdentifier.call(void 0, false);\n  if (_index.eat.call(void 0, _types.TokenType.dot)) {\n    tsParseModuleOrNamespaceDeclaration();\n  } else {\n    tsParseModuleBlock();\n  }\n}\n\nfunction tsParseAmbientExternalModuleDeclaration() {\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._global)) {\n    _expression.parseIdentifier.call(void 0, );\n  } else if (_index.match.call(void 0, _types.TokenType.string)) {\n    _expression.parseExprAtom.call(void 0, );\n  } else {\n    _util.unexpected.call(void 0, );\n  }\n\n  if (_index.match.call(void 0, _types.TokenType.braceL)) {\n    tsParseModuleBlock();\n  } else {\n    _util.semicolon.call(void 0, );\n  }\n}\n\n function tsParseImportEqualsDeclaration() {\n  _lval.parseImportedIdentifier.call(void 0, );\n  _util.expect.call(void 0, _types.TokenType.eq);\n  tsParseModuleReference();\n  _util.semicolon.call(void 0, );\n} exports.tsParseImportEqualsDeclaration = tsParseImportEqualsDeclaration;\n\nfunction tsIsExternalModuleReference() {\n  return _util.isContextual.call(void 0, _keywords.ContextualKeyword._require) && _index.lookaheadType.call(void 0, ) === _types.TokenType.parenL;\n}\n\nfunction tsParseModuleReference() {\n  if (tsIsExternalModuleReference()) {\n    tsParseExternalModuleReference();\n  } else {\n    tsParseEntityName();\n  }\n}\n\nfunction tsParseExternalModuleReference() {\n  _util.expectContextual.call(void 0, _keywords.ContextualKeyword._require);\n  _util.expect.call(void 0, _types.TokenType.parenL);\n  if (!_index.match.call(void 0, _types.TokenType.string)) {\n    _util.unexpected.call(void 0, );\n  }\n  _expression.parseLiteral.call(void 0, );\n  _util.expect.call(void 0, _types.TokenType.parenR);\n}\n\n// Utilities\n\n// Returns true if a statement matched.\nfunction tsTryParseDeclare() {\n  if (_util.isLineTerminator.call(void 0, )) {\n    return false;\n  }\n  switch (_base.state.type) {\n    case _types.TokenType._function: {\n      const oldIsType = _index.pushTypeContext.call(void 0, 1);\n      _index.next.call(void 0, );\n      // We don't need to precisely get the function start here, since it's only used to mark\n      // the function as a type if it's bodiless, and it's already a type here.\n      const functionStart = _base.state.start;\n      _statement.parseFunction.call(void 0, functionStart, /* isStatement */ true);\n      _index.popTypeContext.call(void 0, oldIsType);\n      return true;\n    }\n    case _types.TokenType._class: {\n      const oldIsType = _index.pushTypeContext.call(void 0, 1);\n      _statement.parseClass.call(void 0, /* isStatement */ true, /* optionalId */ false);\n      _index.popTypeContext.call(void 0, oldIsType);\n      return true;\n    }\n    case _types.TokenType._const: {\n      if (_index.match.call(void 0, _types.TokenType._const) && _util.isLookaheadContextual.call(void 0, _keywords.ContextualKeyword._enum)) {\n        const oldIsType = _index.pushTypeContext.call(void 0, 1);\n        // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n        _util.expect.call(void 0, _types.TokenType._const);\n        _util.expectContextual.call(void 0, _keywords.ContextualKeyword._enum);\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._enum;\n        tsParseEnumDeclaration();\n        _index.popTypeContext.call(void 0, oldIsType);\n        return true;\n      }\n    }\n    // falls through\n    case _types.TokenType._var:\n    case _types.TokenType._let: {\n      const oldIsType = _index.pushTypeContext.call(void 0, 1);\n      _statement.parseVarStatement.call(void 0, _base.state.type);\n      _index.popTypeContext.call(void 0, oldIsType);\n      return true;\n    }\n    case _types.TokenType.name: {\n      const oldIsType = _index.pushTypeContext.call(void 0, 1);\n      const contextualKeyword = _base.state.contextualKeyword;\n      let matched = false;\n      if (contextualKeyword === _keywords.ContextualKeyword._global) {\n        tsParseAmbientExternalModuleDeclaration();\n        matched = true;\n      } else {\n        matched = tsParseDeclaration(contextualKeyword, /* isBeforeToken */ true);\n      }\n      _index.popTypeContext.call(void 0, oldIsType);\n      return matched;\n    }\n    default:\n      return false;\n  }\n}\n\n// Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n// Returns true if it matched a declaration.\nfunction tsTryParseExportDeclaration() {\n  return tsParseDeclaration(_base.state.contextualKeyword, /* isBeforeToken */ true);\n}\n\n// Returns true if it matched a statement.\nfunction tsParseExpressionStatement(contextualKeyword) {\n  switch (contextualKeyword) {\n    case _keywords.ContextualKeyword._declare: {\n      const declareTokenIndex = _base.state.tokens.length - 1;\n      const matched = tsTryParseDeclare();\n      if (matched) {\n        _base.state.tokens[declareTokenIndex].type = _types.TokenType._declare;\n        return true;\n      }\n      break;\n    }\n    case _keywords.ContextualKeyword._global:\n      // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n      // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n      if (_index.match.call(void 0, _types.TokenType.braceL)) {\n        tsParseModuleBlock();\n        return true;\n      }\n      break;\n\n    default:\n      return tsParseDeclaration(contextualKeyword, /* isBeforeToken */ false);\n  }\n  return false;\n}\n\n// Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n// Returns true if it matched a declaration.\nfunction tsParseDeclaration(contextualKeyword, isBeforeToken) {\n  switch (contextualKeyword) {\n    case _keywords.ContextualKeyword._abstract:\n      if (tsCheckLineTerminatorAndMatch(_types.TokenType._class, isBeforeToken)) {\n        if (isBeforeToken) _index.next.call(void 0, );\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._abstract;\n        _statement.parseClass.call(void 0, /* isStatement */ true, /* optionalId */ false);\n        return true;\n      }\n      break;\n\n    case _keywords.ContextualKeyword._enum:\n      if (tsCheckLineTerminatorAndMatch(_types.TokenType.name, isBeforeToken)) {\n        if (isBeforeToken) _index.next.call(void 0, );\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._enum;\n        tsParseEnumDeclaration();\n        return true;\n      }\n      break;\n\n    case _keywords.ContextualKeyword._interface:\n      if (tsCheckLineTerminatorAndMatch(_types.TokenType.name, isBeforeToken)) {\n        // `next` is true in \"export\" and \"declare\" contexts, so we want to remove that token\n        // as well.\n        const oldIsType = _index.pushTypeContext.call(void 0, 1);\n        if (isBeforeToken) _index.next.call(void 0, );\n        tsParseInterfaceDeclaration();\n        _index.popTypeContext.call(void 0, oldIsType);\n        return true;\n      }\n      break;\n\n    case _keywords.ContextualKeyword._module:\n      if (isBeforeToken) _index.next.call(void 0, );\n      if (_index.match.call(void 0, _types.TokenType.string)) {\n        const oldIsType = _index.pushTypeContext.call(void 0, isBeforeToken ? 2 : 1);\n        tsParseAmbientExternalModuleDeclaration();\n        _index.popTypeContext.call(void 0, oldIsType);\n        return true;\n      } else if (tsCheckLineTerminatorAndMatch(_types.TokenType.name, isBeforeToken)) {\n        const oldIsType = _index.pushTypeContext.call(void 0, isBeforeToken ? 2 : 1);\n        if (isBeforeToken) _index.next.call(void 0, );\n        tsParseModuleOrNamespaceDeclaration();\n        _index.popTypeContext.call(void 0, oldIsType);\n        return true;\n      }\n      break;\n\n    case _keywords.ContextualKeyword._namespace:\n      if (tsCheckLineTerminatorAndMatch(_types.TokenType.name, isBeforeToken)) {\n        const oldIsType = _index.pushTypeContext.call(void 0, 1);\n        if (isBeforeToken) _index.next.call(void 0, );\n        tsParseModuleOrNamespaceDeclaration();\n        _index.popTypeContext.call(void 0, oldIsType);\n        return true;\n      }\n      break;\n\n    case _keywords.ContextualKeyword._type:\n      if (tsCheckLineTerminatorAndMatch(_types.TokenType.name, isBeforeToken)) {\n        const oldIsType = _index.pushTypeContext.call(void 0, 1);\n        if (isBeforeToken) _index.next.call(void 0, );\n        tsParseTypeAliasDeclaration();\n        _index.popTypeContext.call(void 0, oldIsType);\n        return true;\n      }\n      break;\n\n    default:\n      break;\n  }\n  return false;\n}\n\nfunction tsCheckLineTerminatorAndMatch(tokenType, isBeforeToken) {\n  return !_util.isLineTerminator.call(void 0, ) && (isBeforeToken || _index.match.call(void 0, tokenType));\n}\n\n// Returns true if there was a generic async arrow function.\nfunction tsTryParseGenericAsyncArrowFunction() {\n  const snapshot = _base.state.snapshot();\n\n  tsParseTypeParameters();\n  _statement.parseFunctionParams.call(void 0, );\n  tsTryParseTypeOrTypePredicateAnnotation();\n  _util.expect.call(void 0, _types.TokenType.arrow);\n\n  if (_base.state.error) {\n    _base.state.restoreFromSnapshot(snapshot);\n    return false;\n  }\n\n  _expression.parseFunctionBody.call(void 0, true);\n  return true;\n}\n\nfunction tsParseTypeArguments() {\n  const oldIsType = _index.pushTypeContext.call(void 0, 0);\n  _util.expect.call(void 0, _types.TokenType.lessThan);\n  while (!_index.eat.call(void 0, _types.TokenType.greaterThan) && !_base.state.error) {\n    tsParseType();\n    _index.eat.call(void 0, _types.TokenType.comma);\n  }\n  _index.popTypeContext.call(void 0, oldIsType);\n}\n\n function tsIsDeclarationStart() {\n  if (_index.match.call(void 0, _types.TokenType.name)) {\n    switch (_base.state.contextualKeyword) {\n      case _keywords.ContextualKeyword._abstract:\n      case _keywords.ContextualKeyword._declare:\n      case _keywords.ContextualKeyword._enum:\n      case _keywords.ContextualKeyword._interface:\n      case _keywords.ContextualKeyword._module:\n      case _keywords.ContextualKeyword._namespace:\n      case _keywords.ContextualKeyword._type:\n        return true;\n      default:\n        break;\n    }\n  }\n\n  return false;\n} exports.tsIsDeclarationStart = tsIsDeclarationStart;\n\n// ======================================================\n// OVERRIDES\n// ======================================================\n\n function tsParseFunctionBodyAndFinish(functionStart, funcContextId) {\n  // For arrow functions, `parseArrow` handles the return type itself.\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    tsParseTypeOrTypePredicateAnnotation(_types.TokenType.colon);\n  }\n\n  // The original code checked the node type to make sure this function type allows a missing\n  // body, but we skip that to avoid sending around the node type. We instead just use the\n  // allowExpressionBody boolean to make sure it's not an arrow function.\n  if (!_index.match.call(void 0, _types.TokenType.braceL) && _util.isLineTerminator.call(void 0, )) {\n    // Retroactively mark the function declaration as a type.\n    let i = _base.state.tokens.length - 1;\n    while (\n      i >= 0 &&\n      (_base.state.tokens[i].start >= functionStart ||\n        _base.state.tokens[i].type === _types.TokenType._default ||\n        _base.state.tokens[i].type === _types.TokenType._export)\n    ) {\n      _base.state.tokens[i].isType = true;\n      i--;\n    }\n    return;\n  }\n\n  _expression.parseFunctionBody.call(void 0, false, funcContextId);\n} exports.tsParseFunctionBodyAndFinish = tsParseFunctionBodyAndFinish;\n\n function tsParseSubscript(startPos, noCalls, stopState) {\n  if (!_util.hasPrecedingLineBreak.call(void 0, ) && _index.eat.call(void 0, _types.TokenType.bang)) {\n    _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType.nonNullAssertion;\n    return;\n  }\n\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    // There are number of things we are going to \"maybe\" parse, like type arguments on\n    // tagged template expressions. If any of them fail, walk it back and continue.\n    const snapshot = _base.state.snapshot();\n\n    if (!noCalls && _expression.atPossibleAsync.call(void 0, )) {\n      // Almost certainly this is a generic async function `async <T>() => ...\n      // But it might be a call with a type argument `async<T>();`\n      const asyncArrowFn = tsTryParseGenericAsyncArrowFunction();\n      if (asyncArrowFn) {\n        return;\n      }\n    }\n    tsParseTypeArguments();\n    if (!noCalls && _index.eat.call(void 0, _types.TokenType.parenL)) {\n      _expression.parseCallExpressionArguments.call(void 0, );\n    } else if (_index.match.call(void 0, _types.TokenType.backQuote)) {\n      // Tagged template with a type argument.\n      _expression.parseTemplate.call(void 0, );\n    } else {\n      _util.unexpected.call(void 0, );\n    }\n\n    if (_base.state.error) {\n      _base.state.restoreFromSnapshot(snapshot);\n    } else {\n      return;\n    }\n  }\n  _expression.baseParseSubscript.call(void 0, startPos, noCalls, stopState);\n} exports.tsParseSubscript = tsParseSubscript;\n\n function tsStartParseNewArguments() {\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n    const snapshot = _base.state.snapshot();\n\n    _base.state.type = _types.TokenType.typeParameterStart;\n    tsParseTypeArguments();\n    if (!_index.match.call(void 0, _types.TokenType.parenL)) {\n      _util.unexpected.call(void 0, );\n    }\n\n    if (_base.state.error) {\n      _base.state.restoreFromSnapshot(snapshot);\n    }\n  }\n} exports.tsStartParseNewArguments = tsStartParseNewArguments;\n\n function tsTryParseExport() {\n  if (_index.match.call(void 0, _types.TokenType._import)) {\n    // `export import A = B;`\n    _util.expect.call(void 0, _types.TokenType._import);\n    tsParseImportEqualsDeclaration();\n    return true;\n  } else if (_index.eat.call(void 0, _types.TokenType.eq)) {\n    // `export = x;`\n    _expression.parseExpression.call(void 0, );\n    _util.semicolon.call(void 0, );\n    return true;\n  } else if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._as)) {\n    // `export as namespace A;`\n    // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n    _util.expectContextual.call(void 0, _keywords.ContextualKeyword._namespace);\n    _expression.parseIdentifier.call(void 0, );\n    _util.semicolon.call(void 0, );\n    return true;\n  } else {\n    return false;\n  }\n} exports.tsTryParseExport = tsTryParseExport;\n\n function tsTryParseExportDefaultExpression() {\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._abstract) && _index.lookaheadType.call(void 0, ) === _types.TokenType._class) {\n    _base.state.type = _types.TokenType._abstract;\n    _index.next.call(void 0, ); // Skip \"abstract\"\n    _statement.parseClass.call(void 0, true, true);\n    return true;\n  }\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._interface)) {\n    // Make sure \"export default\" are considered type tokens so the whole thing is removed.\n    const oldIsType = _index.pushTypeContext.call(void 0, 2);\n    tsParseDeclaration(_keywords.ContextualKeyword._interface, true);\n    _index.popTypeContext.call(void 0, oldIsType);\n    return true;\n  }\n  return false;\n} exports.tsTryParseExportDefaultExpression = tsTryParseExportDefaultExpression;\n\n function tsTryParseStatementContent() {\n  if (_base.state.type === _types.TokenType._const) {\n    const ahead = _index.lookaheadTypeAndKeyword.call(void 0, );\n    if (ahead.type === _types.TokenType.name && ahead.contextualKeyword === _keywords.ContextualKeyword._enum) {\n      _util.expect.call(void 0, _types.TokenType._const);\n      _util.expectContextual.call(void 0, _keywords.ContextualKeyword._enum);\n      _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._enum;\n      tsParseEnumDeclaration();\n      return true;\n    }\n  }\n  return false;\n} exports.tsTryParseStatementContent = tsTryParseStatementContent;\n\n function tsParseAccessModifier() {\n  tsParseModifier([\n    _keywords.ContextualKeyword._public,\n    _keywords.ContextualKeyword._protected,\n    _keywords.ContextualKeyword._private,\n  ]);\n} exports.tsParseAccessModifier = tsParseAccessModifier;\n\n function tsTryParseClassMemberWithIsStatic(\n  isStatic,\n  classContextId,\n) {\n  let isAbstract = false;\n  let isReadonly = false;\n\n  const mod = tsParseModifier([_keywords.ContextualKeyword._abstract, _keywords.ContextualKeyword._readonly]);\n  switch (mod) {\n    case _keywords.ContextualKeyword._readonly:\n      isReadonly = true;\n      isAbstract = !!tsParseModifier([_keywords.ContextualKeyword._abstract]);\n      break;\n    case _keywords.ContextualKeyword._abstract:\n      isAbstract = true;\n      isReadonly = !!tsParseModifier([_keywords.ContextualKeyword._readonly]);\n      break;\n    default:\n      break;\n  }\n\n  // We no longer check for public/private/etc, but tsTryParseIndexSignature should just return\n  // false in that case for valid code.\n  if (!isAbstract && !isStatic) {\n    const found = tsTryParseIndexSignature();\n    if (found) {\n      return true;\n    }\n  }\n\n  if (isReadonly) {\n    // Must be a property (if not an index signature).\n    _statement.parseClassPropertyName.call(void 0, classContextId);\n    _statement.parsePostMemberNameModifiers.call(void 0, );\n    _statement.parseClassProperty.call(void 0, );\n    return true;\n  }\n  return false;\n} exports.tsTryParseClassMemberWithIsStatic = tsTryParseClassMemberWithIsStatic;\n\n// Note: The reason we do this in `parseIdentifierStatement` and not `parseStatement`\n// is that e.g. `type()` is valid JS, so we must try parsing that first.\n// If it's really a type, we will parse `type` as the statement, and can correct it here\n// by parsing the rest.\n function tsParseIdentifierStatement(contextualKeyword) {\n  const matched = tsParseExpressionStatement(contextualKeyword);\n  if (!matched) {\n    _util.semicolon.call(void 0, );\n  }\n} exports.tsParseIdentifierStatement = tsParseIdentifierStatement;\n\n function tsParseExportDeclaration() {\n  // \"export declare\" is equivalent to just \"export\".\n  const isDeclare = _util.eatContextual.call(void 0, _keywords.ContextualKeyword._declare);\n  if (isDeclare) {\n    _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._declare;\n  }\n\n  let matchedDeclaration = false;\n  if (_index.match.call(void 0, _types.TokenType.name)) {\n    if (isDeclare) {\n      const oldIsType = _index.pushTypeContext.call(void 0, 2);\n      matchedDeclaration = tsTryParseExportDeclaration();\n      _index.popTypeContext.call(void 0, oldIsType);\n    } else {\n      matchedDeclaration = tsTryParseExportDeclaration();\n    }\n  }\n  if (!matchedDeclaration) {\n    if (isDeclare) {\n      const oldIsType = _index.pushTypeContext.call(void 0, 2);\n      _statement.parseStatement.call(void 0, true);\n      _index.popTypeContext.call(void 0, oldIsType);\n    } else {\n      _statement.parseStatement.call(void 0, true);\n    }\n  }\n} exports.tsParseExportDeclaration = tsParseExportDeclaration;\n\n function tsAfterParseClassSuper(hasSuper) {\n  if (hasSuper && _index.match.call(void 0, _types.TokenType.lessThan)) {\n    tsParseTypeArguments();\n  }\n  if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._implements)) {\n    _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._implements;\n    const oldIsType = _index.pushTypeContext.call(void 0, 1);\n    tsParseHeritageClause();\n    _index.popTypeContext.call(void 0, oldIsType);\n  }\n} exports.tsAfterParseClassSuper = tsAfterParseClassSuper;\n\n function tsStartParseObjPropValue() {\n  tsTryParseTypeParameters();\n} exports.tsStartParseObjPropValue = tsStartParseObjPropValue;\n\n function tsStartParseFunctionParams() {\n  tsTryParseTypeParameters();\n} exports.tsStartParseFunctionParams = tsStartParseFunctionParams;\n\n// `let x: number;`\n function tsAfterParseVarHead() {\n  const oldIsType = _index.pushTypeContext.call(void 0, 0);\n  _index.eat.call(void 0, _types.TokenType.bang);\n  tsTryParseTypeAnnotation();\n  _index.popTypeContext.call(void 0, oldIsType);\n} exports.tsAfterParseVarHead = tsAfterParseVarHead;\n\n// parse the return type of an async arrow function - let foo = (async (): number => {});\n function tsStartParseAsyncArrowFromCallExpression() {\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    tsParseTypeAnnotation();\n  }\n} exports.tsStartParseAsyncArrowFromCallExpression = tsStartParseAsyncArrowFromCallExpression;\n\n// Returns true if the expression was an arrow function.\n function tsParseMaybeAssign(noIn, isWithinParens) {\n  // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n  if (_base.isJSXEnabled) {\n    return tsParseMaybeAssignWithJSX(noIn, isWithinParens);\n  } else {\n    return tsParseMaybeAssignWithoutJSX(noIn, isWithinParens);\n  }\n} exports.tsParseMaybeAssign = tsParseMaybeAssign;\n\n function tsParseMaybeAssignWithJSX(noIn, isWithinParens) {\n  if (!_index.match.call(void 0, _types.TokenType.lessThan)) {\n    return _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);\n  }\n\n  // Prefer to parse JSX if possible. But may be an arrow fn.\n  const snapshot = _base.state.snapshot();\n  let wasArrow = _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);\n  if (_base.state.error) {\n    _base.state.restoreFromSnapshot(snapshot);\n  } else {\n    return wasArrow;\n  }\n\n  // Otherwise, try as type-parameterized arrow function.\n  _base.state.type = _types.TokenType.typeParameterStart;\n  // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n  tsParseTypeParameters();\n  wasArrow = _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);\n  if (!wasArrow) {\n    _util.unexpected.call(void 0, );\n  }\n\n  return wasArrow;\n} exports.tsParseMaybeAssignWithJSX = tsParseMaybeAssignWithJSX;\n\n function tsParseMaybeAssignWithoutJSX(noIn, isWithinParens) {\n  if (!_index.match.call(void 0, _types.TokenType.lessThan)) {\n    return _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);\n  }\n\n  const snapshot = _base.state.snapshot();\n  // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n  tsParseTypeParameters();\n  const wasArrow = _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);\n  if (!wasArrow) {\n    _util.unexpected.call(void 0, );\n  }\n  if (_base.state.error) {\n    _base.state.restoreFromSnapshot(snapshot);\n  } else {\n    return wasArrow;\n  }\n\n  // Try parsing a type cast instead of an arrow function.\n  // This will start with a type assertion (via parseMaybeUnary).\n  // But don't directly call `tsParseTypeAssertion` because we want to handle any binary after it.\n  return _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);\n} exports.tsParseMaybeAssignWithoutJSX = tsParseMaybeAssignWithoutJSX;\n\n function tsParseArrow() {\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    // This is different from how the TS parser does it.\n    // TS uses lookahead. Babylon parses it as a parenthesized expression and converts.\n    const snapshot = _base.state.snapshot();\n\n    tsParseTypeOrTypePredicateAnnotation(_types.TokenType.colon);\n    if (_util.canInsertSemicolon.call(void 0, )) _util.unexpected.call(void 0, );\n    if (!_index.match.call(void 0, _types.TokenType.arrow)) _util.unexpected.call(void 0, );\n\n    if (_base.state.error) {\n      _base.state.restoreFromSnapshot(snapshot);\n    }\n  }\n  return _index.eat.call(void 0, _types.TokenType.arrow);\n} exports.tsParseArrow = tsParseArrow;\n\n// Allow type annotations inside of a parameter list.\n function tsParseAssignableListItemTypes() {\n  const oldIsType = _index.pushTypeContext.call(void 0, 0);\n  _index.eat.call(void 0, _types.TokenType.question);\n  tsTryParseTypeAnnotation();\n  _index.popTypeContext.call(void 0, oldIsType);\n} exports.tsParseAssignableListItemTypes = tsParseAssignableListItemTypes;\n\n function tsParseMaybeDecoratorArguments() {\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    tsParseTypeArguments();\n  }\n  _statement.baseParseMaybeDecoratorArguments.call(void 0, );\n} exports.tsParseMaybeDecoratorArguments = tsParseMaybeDecoratorArguments;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/parser/plugins/typescript.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/parser/tokenizer/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/sucrase/dist/parser/tokenizer/index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, \"__esModule\", {value: true});/* eslint max-len: 0 */\n\nvar _base = __webpack_require__(/*! ../traverser/base */ \"./node_modules/sucrase/dist/parser/traverser/base.js\");\nvar _util = __webpack_require__(/*! ../traverser/util */ \"./node_modules/sucrase/dist/parser/traverser/util.js\");\nvar _charcodes = __webpack_require__(/*! ../util/charcodes */ \"./node_modules/sucrase/dist/parser/util/charcodes.js\");\nvar _identifier = __webpack_require__(/*! ../util/identifier */ \"./node_modules/sucrase/dist/parser/util/identifier.js\");\nvar _whitespace = __webpack_require__(/*! ../util/whitespace */ \"./node_modules/sucrase/dist/parser/util/whitespace.js\");\nvar _keywords = __webpack_require__(/*! ./keywords */ \"./node_modules/sucrase/dist/parser/tokenizer/keywords.js\");\nvar _readWord = __webpack_require__(/*! ./readWord */ \"./node_modules/sucrase/dist/parser/tokenizer/readWord.js\"); var _readWord2 = _interopRequireDefault(_readWord);\nvar _types = __webpack_require__(/*! ./types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\n\nvar IdentifierRole; (function (IdentifierRole) {\n  const Access = 0; IdentifierRole[IdentifierRole[\"Access\"] = Access] = \"Access\";\n  const ExportAccess = Access + 1; IdentifierRole[IdentifierRole[\"ExportAccess\"] = ExportAccess] = \"ExportAccess\";\n  const TopLevelDeclaration = ExportAccess + 1; IdentifierRole[IdentifierRole[\"TopLevelDeclaration\"] = TopLevelDeclaration] = \"TopLevelDeclaration\";\n  const FunctionScopedDeclaration = TopLevelDeclaration + 1; IdentifierRole[IdentifierRole[\"FunctionScopedDeclaration\"] = FunctionScopedDeclaration] = \"FunctionScopedDeclaration\";\n  const BlockScopedDeclaration = FunctionScopedDeclaration + 1; IdentifierRole[IdentifierRole[\"BlockScopedDeclaration\"] = BlockScopedDeclaration] = \"BlockScopedDeclaration\";\n  const ObjectShorthandTopLevelDeclaration = BlockScopedDeclaration + 1; IdentifierRole[IdentifierRole[\"ObjectShorthandTopLevelDeclaration\"] = ObjectShorthandTopLevelDeclaration] = \"ObjectShorthandTopLevelDeclaration\";\n  const ObjectShorthandFunctionScopedDeclaration = ObjectShorthandTopLevelDeclaration + 1; IdentifierRole[IdentifierRole[\"ObjectShorthandFunctionScopedDeclaration\"] = ObjectShorthandFunctionScopedDeclaration] = \"ObjectShorthandFunctionScopedDeclaration\";\n  const ObjectShorthandBlockScopedDeclaration = ObjectShorthandFunctionScopedDeclaration + 1; IdentifierRole[IdentifierRole[\"ObjectShorthandBlockScopedDeclaration\"] = ObjectShorthandBlockScopedDeclaration] = \"ObjectShorthandBlockScopedDeclaration\";\n  const ObjectShorthand = ObjectShorthandBlockScopedDeclaration + 1; IdentifierRole[IdentifierRole[\"ObjectShorthand\"] = ObjectShorthand] = \"ObjectShorthand\";\n  // Any identifier bound in an import statement, e.g. both A and b from\n  // `import A, * as b from 'A';`\n  const ImportDeclaration = ObjectShorthand + 1; IdentifierRole[IdentifierRole[\"ImportDeclaration\"] = ImportDeclaration] = \"ImportDeclaration\";\n  const ObjectKey = ImportDeclaration + 1; IdentifierRole[IdentifierRole[\"ObjectKey\"] = ObjectKey] = \"ObjectKey\";\n  // The `foo` in `import {foo as bar} from \"./abc\";`.\n  const ImportAccess = ObjectKey + 1; IdentifierRole[IdentifierRole[\"ImportAccess\"] = ImportAccess] = \"ImportAccess\";\n})(IdentifierRole || (exports.IdentifierRole = IdentifierRole = {}));\n\n function isDeclaration(token) {\n  const role = token.identifierRole;\n  return (\n    role === IdentifierRole.TopLevelDeclaration ||\n    role === IdentifierRole.FunctionScopedDeclaration ||\n    role === IdentifierRole.BlockScopedDeclaration ||\n    role === IdentifierRole.ObjectShorthandTopLevelDeclaration ||\n    role === IdentifierRole.ObjectShorthandFunctionScopedDeclaration ||\n    role === IdentifierRole.ObjectShorthandBlockScopedDeclaration\n  );\n} exports.isDeclaration = isDeclaration;\n\n function isNonTopLevelDeclaration(token) {\n  const role = token.identifierRole;\n  return (\n    role === IdentifierRole.FunctionScopedDeclaration ||\n    role === IdentifierRole.BlockScopedDeclaration ||\n    role === IdentifierRole.ObjectShorthandFunctionScopedDeclaration ||\n    role === IdentifierRole.ObjectShorthandBlockScopedDeclaration\n  );\n} exports.isNonTopLevelDeclaration = isNonTopLevelDeclaration;\n\n function isTopLevelDeclaration(token) {\n  const role = token.identifierRole;\n  return (\n    role === IdentifierRole.TopLevelDeclaration ||\n    role === IdentifierRole.ObjectShorthandTopLevelDeclaration ||\n    role === IdentifierRole.ImportDeclaration\n  );\n} exports.isTopLevelDeclaration = isTopLevelDeclaration;\n\n function isBlockScopedDeclaration(token) {\n  const role = token.identifierRole;\n  // Treat top-level declarations as block scope since the distinction doesn't matter here.\n  return (\n    role === IdentifierRole.TopLevelDeclaration ||\n    role === IdentifierRole.BlockScopedDeclaration ||\n    role === IdentifierRole.ObjectShorthandTopLevelDeclaration ||\n    role === IdentifierRole.ObjectShorthandBlockScopedDeclaration\n  );\n} exports.isBlockScopedDeclaration = isBlockScopedDeclaration;\n\n function isFunctionScopedDeclaration(token) {\n  const role = token.identifierRole;\n  return (\n    role === IdentifierRole.FunctionScopedDeclaration ||\n    role === IdentifierRole.ObjectShorthandFunctionScopedDeclaration\n  );\n} exports.isFunctionScopedDeclaration = isFunctionScopedDeclaration;\n\n function isObjectShorthandDeclaration(token) {\n  return (\n    token.identifierRole === IdentifierRole.ObjectShorthandTopLevelDeclaration ||\n    token.identifierRole === IdentifierRole.ObjectShorthandBlockScopedDeclaration ||\n    token.identifierRole === IdentifierRole.ObjectShorthandFunctionScopedDeclaration\n  );\n} exports.isObjectShorthandDeclaration = isObjectShorthandDeclaration;\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n class Token {\n  constructor() {\n    this.type = _base.state.type;\n    this.contextualKeyword = _base.state.contextualKeyword;\n    this.start = _base.state.start;\n    this.end = _base.state.end;\n    this.isType = _base.state.isType;\n    this.identifierRole = null;\n    this.shadowsGlobal = false;\n    this.contextId = null;\n    this.rhsEndIndex = null;\n    this.isExpression = false;\n  }\n\n  \n  \n  \n  \n  \n  \n  // Initially false for all tokens, then may be computed in a follow-up step that does scope\n  // analysis.\n  \n  \n  // For assignments, the index of the RHS. For export tokens, the end of the export.\n  \n  // For class tokens, records if the class is a class expression or a class statement.\n  \n} exports.Token = Token;\n\n// ## Tokenizer\n\n// Move to the next token\n function next() {\n  _base.state.tokens.push(new Token());\n  nextToken();\n} exports.next = next;\n\n// Call instead of next when inside a template, since that needs to be handled differently.\n function nextTemplateToken() {\n  _base.state.tokens.push(new Token());\n  _base.state.start = _base.state.pos;\n  readTmplToken();\n} exports.nextTemplateToken = nextTemplateToken;\n\n// The tokenizer never parses regexes by default. Instead, the parser is responsible for\n// instructing it to parse a regex when we see a slash at the start of an expression.\n function retokenizeSlashAsRegex() {\n  if (_base.state.type === _types.TokenType.assign) {\n    --_base.state.pos;\n  }\n  readRegexp();\n} exports.retokenizeSlashAsRegex = retokenizeSlashAsRegex;\n\n function pushTypeContext(existingTokensInType) {\n  for (let i = _base.state.tokens.length - existingTokensInType; i < _base.state.tokens.length; i++) {\n    _base.state.tokens[i].isType = true;\n  }\n  const oldIsType = _base.state.isType;\n  _base.state.isType = true;\n  return oldIsType;\n} exports.pushTypeContext = pushTypeContext;\n\n function popTypeContext(oldIsType) {\n  _base.state.isType = oldIsType;\n} exports.popTypeContext = popTypeContext;\n\n function eat(type) {\n  if (match(type)) {\n    next();\n    return true;\n  } else {\n    return false;\n  }\n} exports.eat = eat;\n\n function match(type) {\n  return _base.state.type === type;\n} exports.match = match;\n\n function lookaheadType() {\n  const snapshot = _base.state.snapshot();\n  next();\n  const type = _base.state.type;\n  _base.state.restoreFromSnapshot(snapshot);\n  return type;\n} exports.lookaheadType = lookaheadType;\n\n class TypeAndKeyword {\n  \n  \n  constructor(type, contextualKeyword) {\n    this.type = type;\n    this.contextualKeyword = contextualKeyword;\n  }\n} exports.TypeAndKeyword = TypeAndKeyword;\n\n function lookaheadTypeAndKeyword() {\n  const snapshot = _base.state.snapshot();\n  next();\n  const type = _base.state.type;\n  const contextualKeyword = _base.state.contextualKeyword;\n  _base.state.restoreFromSnapshot(snapshot);\n  return new TypeAndKeyword(type, contextualKeyword);\n} exports.lookaheadTypeAndKeyword = lookaheadTypeAndKeyword;\n\n// Read a single token, updating the parser object's token-related\n// properties.\n function nextToken() {\n  skipSpace();\n  _base.state.start = _base.state.pos;\n  if (_base.state.pos >= _base.input.length) {\n    const tokens = _base.state.tokens;\n    // We normally run past the end a bit, but if we're way past the end, avoid an infinite loop.\n    // Also check the token positions rather than the types since sometimes we rewrite the token\n    // type to something else.\n    if (\n      tokens.length >= 2 &&\n      tokens[tokens.length - 1].start >= _base.input.length &&\n      tokens[tokens.length - 2].start >= _base.input.length\n    ) {\n      _util.unexpected.call(void 0, \"Unexpectedly reached the end of input.\");\n    }\n    finishToken(_types.TokenType.eof);\n    return;\n  }\n  readToken(_base.input.charCodeAt(_base.state.pos));\n} exports.nextToken = nextToken;\n\nfunction readToken(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (\n    _identifier.IS_IDENTIFIER_START[code] ||\n    code === _charcodes.charCodes.backslash ||\n    (code === _charcodes.charCodes.atSign && _base.input.charCodeAt(_base.state.pos + 1) === _charcodes.charCodes.atSign)\n  ) {\n    _readWord2.default.call(void 0, );\n  } else {\n    getTokenFromCode(code);\n  }\n}\n\nfunction skipBlockComment() {\n  while (\n    _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.asterisk ||\n    _base.input.charCodeAt(_base.state.pos + 1) !== _charcodes.charCodes.slash\n  ) {\n    _base.state.pos++;\n    if (_base.state.pos > _base.input.length) {\n      _util.unexpected.call(void 0, \"Unterminated comment\", _base.state.pos - 2);\n      return;\n    }\n  }\n  _base.state.pos += 2;\n}\n\n function skipLineComment(startSkip) {\n  let ch = _base.input.charCodeAt((_base.state.pos += startSkip));\n  if (_base.state.pos < _base.input.length) {\n    while (\n      ch !== _charcodes.charCodes.lineFeed &&\n      ch !== _charcodes.charCodes.carriageReturn &&\n      ch !== _charcodes.charCodes.lineSeparator &&\n      ch !== _charcodes.charCodes.paragraphSeparator &&\n      ++_base.state.pos < _base.input.length\n    ) {\n      ch = _base.input.charCodeAt(_base.state.pos);\n    }\n  }\n} exports.skipLineComment = skipLineComment;\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments.\n function skipSpace() {\n  while (_base.state.pos < _base.input.length) {\n    const ch = _base.input.charCodeAt(_base.state.pos);\n    switch (ch) {\n      case _charcodes.charCodes.carriageReturn:\n        if (_base.input.charCodeAt(_base.state.pos + 1) === _charcodes.charCodes.lineFeed) {\n          ++_base.state.pos;\n        }\n\n      case _charcodes.charCodes.lineFeed:\n      case _charcodes.charCodes.lineSeparator:\n      case _charcodes.charCodes.paragraphSeparator:\n        ++_base.state.pos;\n        break;\n\n      case _charcodes.charCodes.slash:\n        switch (_base.input.charCodeAt(_base.state.pos + 1)) {\n          case _charcodes.charCodes.asterisk:\n            _base.state.pos += 2;\n            skipBlockComment();\n            break;\n\n          case _charcodes.charCodes.slash:\n            skipLineComment(2);\n            break;\n\n          default:\n            return;\n        }\n        break;\n\n      default:\n        if (_whitespace.IS_WHITESPACE[ch]) {\n          ++_base.state.pos;\n        } else {\n          return;\n        }\n    }\n  }\n} exports.skipSpace = skipSpace;\n\n// Called at the end of every token. Sets various fields, and skips the space after the token, so\n// that the next one's `start` will point at the right position.\n function finishToken(\n  type,\n  contextualKeyword = _keywords.ContextualKeyword.NONE,\n) {\n  _base.state.end = _base.state.pos;\n  _base.state.type = type;\n  _base.state.contextualKeyword = contextualKeyword;\n} exports.finishToken = finishToken;\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\nfunction readToken_dot() {\n  const nextChar = _base.input.charCodeAt(_base.state.pos + 1);\n  if (nextChar >= _charcodes.charCodes.digit0 && nextChar <= _charcodes.charCodes.digit9) {\n    readNumber(true);\n    return;\n  }\n\n  const next2 = _base.input.charCodeAt(_base.state.pos + 2);\n  if (nextChar === _charcodes.charCodes.dot && next2 === _charcodes.charCodes.dot) {\n    _base.state.pos += 3;\n    finishToken(_types.TokenType.ellipsis);\n  } else {\n    ++_base.state.pos;\n    finishToken(_types.TokenType.dot);\n  }\n}\n\nfunction readToken_slash() {\n  const nextChar = _base.input.charCodeAt(_base.state.pos + 1);\n  if (nextChar === _charcodes.charCodes.equalsTo) {\n    finishOp(_types.TokenType.assign, 2);\n  } else {\n    finishOp(_types.TokenType.slash, 1);\n  }\n}\n\nfunction readToken_mult_modulo(code) {\n  // '%*'\n  let tokenType = code === _charcodes.charCodes.asterisk ? _types.TokenType.star : _types.TokenType.modulo;\n  let width = 1;\n  let nextChar = _base.input.charCodeAt(_base.state.pos + 1);\n\n  // Exponentiation operator **\n  if (code === _charcodes.charCodes.asterisk && nextChar === _charcodes.charCodes.asterisk) {\n    width++;\n    nextChar = _base.input.charCodeAt(_base.state.pos + 2);\n    tokenType = _types.TokenType.exponent;\n  }\n\n  // Match *= or %=, disallowing *=> which can be valid in flow.\n  if (\n    nextChar === _charcodes.charCodes.equalsTo &&\n    _base.input.charCodeAt(_base.state.pos + 2) !== _charcodes.charCodes.greaterThan\n  ) {\n    width++;\n    tokenType = _types.TokenType.assign;\n  }\n\n  finishOp(tokenType, width);\n}\n\nfunction readToken_pipe_amp(code) {\n  // '|&'\n  const nextChar = _base.input.charCodeAt(_base.state.pos + 1);\n\n  if (nextChar === code) {\n    if (_base.input.charCodeAt(_base.state.pos + 2) === _charcodes.charCodes.equalsTo) {\n      // ||= or &&=\n      finishOp(_types.TokenType.assign, 3);\n    } else {\n      // || or &&\n      finishOp(code === _charcodes.charCodes.verticalBar ? _types.TokenType.logicalOR : _types.TokenType.logicalAND, 2);\n    }\n    return;\n  }\n\n  if (code === _charcodes.charCodes.verticalBar) {\n    // '|>'\n    if (nextChar === _charcodes.charCodes.greaterThan) {\n      finishOp(_types.TokenType.pipeline, 2);\n      return;\n    } else if (nextChar === _charcodes.charCodes.rightCurlyBrace && _base.isFlowEnabled) {\n      // '|}'\n      finishOp(_types.TokenType.braceBarR, 2);\n      return;\n    }\n  }\n\n  if (nextChar === _charcodes.charCodes.equalsTo) {\n    finishOp(_types.TokenType.assign, 2);\n    return;\n  }\n\n  finishOp(code === _charcodes.charCodes.verticalBar ? _types.TokenType.bitwiseOR : _types.TokenType.bitwiseAND, 1);\n}\n\nfunction readToken_caret() {\n  // '^'\n  const nextChar = _base.input.charCodeAt(_base.state.pos + 1);\n  if (nextChar === _charcodes.charCodes.equalsTo) {\n    finishOp(_types.TokenType.assign, 2);\n  } else {\n    finishOp(_types.TokenType.bitwiseXOR, 1);\n  }\n}\n\nfunction readToken_plus_min(code) {\n  // '+-'\n  const nextChar = _base.input.charCodeAt(_base.state.pos + 1);\n\n  if (nextChar === code) {\n    // Tentatively call this a prefix operator, but it might be changed to postfix later.\n    finishOp(_types.TokenType.preIncDec, 2);\n    return;\n  }\n\n  if (nextChar === _charcodes.charCodes.equalsTo) {\n    finishOp(_types.TokenType.assign, 2);\n  } else if (code === _charcodes.charCodes.plusSign) {\n    finishOp(_types.TokenType.plus, 1);\n  } else {\n    finishOp(_types.TokenType.minus, 1);\n  }\n}\n\n// '<>'\nfunction readToken_lt_gt(code) {\n  // Avoid right-shift for things like Array<Array<string>>.\n  if (code === _charcodes.charCodes.greaterThan && _base.state.isType) {\n    finishOp(_types.TokenType.greaterThan, 1);\n    return;\n  }\n  const nextChar = _base.input.charCodeAt(_base.state.pos + 1);\n\n  if (nextChar === code) {\n    const size =\n      code === _charcodes.charCodes.greaterThan && _base.input.charCodeAt(_base.state.pos + 2) === _charcodes.charCodes.greaterThan\n        ? 3\n        : 2;\n    if (_base.input.charCodeAt(_base.state.pos + size) === _charcodes.charCodes.equalsTo) {\n      finishOp(_types.TokenType.assign, size + 1);\n      return;\n    }\n    finishOp(_types.TokenType.bitShift, size);\n    return;\n  }\n\n  if (nextChar === _charcodes.charCodes.equalsTo) {\n    // <= | >=\n    finishOp(_types.TokenType.relationalOrEqual, 2);\n  } else if (code === _charcodes.charCodes.lessThan) {\n    finishOp(_types.TokenType.lessThan, 1);\n  } else {\n    finishOp(_types.TokenType.greaterThan, 1);\n  }\n}\n\nfunction readToken_eq_excl(code) {\n  // '=!'\n  const nextChar = _base.input.charCodeAt(_base.state.pos + 1);\n  if (nextChar === _charcodes.charCodes.equalsTo) {\n    finishOp(_types.TokenType.equality, _base.input.charCodeAt(_base.state.pos + 2) === _charcodes.charCodes.equalsTo ? 3 : 2);\n    return;\n  }\n  if (code === _charcodes.charCodes.equalsTo && nextChar === _charcodes.charCodes.greaterThan) {\n    // '=>'\n    _base.state.pos += 2;\n    finishToken(_types.TokenType.arrow);\n    return;\n  }\n  finishOp(code === _charcodes.charCodes.equalsTo ? _types.TokenType.eq : _types.TokenType.bang, 1);\n}\n\nfunction readToken_question() {\n  // '?'\n  const nextChar = _base.input.charCodeAt(_base.state.pos + 1);\n  const nextChar2 = _base.input.charCodeAt(_base.state.pos + 2);\n  if (nextChar === _charcodes.charCodes.questionMark && !_base.state.isType) {\n    if (nextChar2 === _charcodes.charCodes.equalsTo) {\n      // '??='\n      finishOp(_types.TokenType.assign, 3);\n    } else {\n      // '??'\n      finishOp(_types.TokenType.nullishCoalescing, 2);\n    }\n  } else if (\n    nextChar === _charcodes.charCodes.dot &&\n    !(nextChar2 >= _charcodes.charCodes.digit0 && nextChar2 <= _charcodes.charCodes.digit9)\n  ) {\n    // '.' not followed by a number\n    _base.state.pos += 2;\n    finishToken(_types.TokenType.questionDot);\n  } else {\n    ++_base.state.pos;\n    finishToken(_types.TokenType.question);\n  }\n}\n\n function getTokenFromCode(code) {\n  switch (code) {\n    case _charcodes.charCodes.numberSign:\n      ++_base.state.pos;\n      finishToken(_types.TokenType.hash);\n      return;\n\n    // The interpretation of a dot depends on whether it is followed\n    // by a digit or another two dots.\n\n    case _charcodes.charCodes.dot:\n      readToken_dot();\n      return;\n\n    // Punctuation tokens.\n    case _charcodes.charCodes.leftParenthesis:\n      ++_base.state.pos;\n      finishToken(_types.TokenType.parenL);\n      return;\n    case _charcodes.charCodes.rightParenthesis:\n      ++_base.state.pos;\n      finishToken(_types.TokenType.parenR);\n      return;\n    case _charcodes.charCodes.semicolon:\n      ++_base.state.pos;\n      finishToken(_types.TokenType.semi);\n      return;\n    case _charcodes.charCodes.comma:\n      ++_base.state.pos;\n      finishToken(_types.TokenType.comma);\n      return;\n    case _charcodes.charCodes.leftSquareBracket:\n      ++_base.state.pos;\n      finishToken(_types.TokenType.bracketL);\n      return;\n    case _charcodes.charCodes.rightSquareBracket:\n      ++_base.state.pos;\n      finishToken(_types.TokenType.bracketR);\n      return;\n\n    case _charcodes.charCodes.leftCurlyBrace:\n      if (_base.isFlowEnabled && _base.input.charCodeAt(_base.state.pos + 1) === _charcodes.charCodes.verticalBar) {\n        finishOp(_types.TokenType.braceBarL, 2);\n      } else {\n        ++_base.state.pos;\n        finishToken(_types.TokenType.braceL);\n      }\n      return;\n\n    case _charcodes.charCodes.rightCurlyBrace:\n      ++_base.state.pos;\n      finishToken(_types.TokenType.braceR);\n      return;\n\n    case _charcodes.charCodes.colon:\n      if (_base.input.charCodeAt(_base.state.pos + 1) === _charcodes.charCodes.colon) {\n        finishOp(_types.TokenType.doubleColon, 2);\n      } else {\n        ++_base.state.pos;\n        finishToken(_types.TokenType.colon);\n      }\n      return;\n\n    case _charcodes.charCodes.questionMark:\n      readToken_question();\n      return;\n    case _charcodes.charCodes.atSign:\n      ++_base.state.pos;\n      finishToken(_types.TokenType.at);\n      return;\n\n    case _charcodes.charCodes.graveAccent:\n      ++_base.state.pos;\n      finishToken(_types.TokenType.backQuote);\n      return;\n\n    case _charcodes.charCodes.digit0: {\n      const nextChar = _base.input.charCodeAt(_base.state.pos + 1);\n      // '0x', '0X', '0o', '0O', '0b', '0B'\n      if (\n        nextChar === _charcodes.charCodes.lowercaseX ||\n        nextChar === _charcodes.charCodes.uppercaseX ||\n        nextChar === _charcodes.charCodes.lowercaseO ||\n        nextChar === _charcodes.charCodes.uppercaseO ||\n        nextChar === _charcodes.charCodes.lowercaseB ||\n        nextChar === _charcodes.charCodes.uppercaseB\n      ) {\n        readRadixNumber();\n        return;\n      }\n    }\n    // Anything else beginning with a digit is an integer, octal\n    // number, or float.\n    case _charcodes.charCodes.digit1:\n    case _charcodes.charCodes.digit2:\n    case _charcodes.charCodes.digit3:\n    case _charcodes.charCodes.digit4:\n    case _charcodes.charCodes.digit5:\n    case _charcodes.charCodes.digit6:\n    case _charcodes.charCodes.digit7:\n    case _charcodes.charCodes.digit8:\n    case _charcodes.charCodes.digit9:\n      readNumber(false);\n      return;\n\n    // Quotes produce strings.\n    case _charcodes.charCodes.quotationMark:\n    case _charcodes.charCodes.apostrophe:\n      readString(code);\n      return;\n\n    // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n\n    case _charcodes.charCodes.slash:\n      readToken_slash();\n      return;\n\n    case _charcodes.charCodes.percentSign:\n    case _charcodes.charCodes.asterisk:\n      readToken_mult_modulo(code);\n      return;\n\n    case _charcodes.charCodes.verticalBar:\n    case _charcodes.charCodes.ampersand:\n      readToken_pipe_amp(code);\n      return;\n\n    case _charcodes.charCodes.caret:\n      readToken_caret();\n      return;\n\n    case _charcodes.charCodes.plusSign:\n    case _charcodes.charCodes.dash:\n      readToken_plus_min(code);\n      return;\n\n    case _charcodes.charCodes.lessThan:\n    case _charcodes.charCodes.greaterThan:\n      readToken_lt_gt(code);\n      return;\n\n    case _charcodes.charCodes.equalsTo:\n    case _charcodes.charCodes.exclamationMark:\n      readToken_eq_excl(code);\n      return;\n\n    case _charcodes.charCodes.tilde:\n      finishOp(_types.TokenType.tilde, 1);\n      return;\n\n    default:\n      break;\n  }\n\n  _util.unexpected.call(void 0, `Unexpected character '${String.fromCharCode(code)}'`, _base.state.pos);\n} exports.getTokenFromCode = getTokenFromCode;\n\nfunction finishOp(type, size) {\n  _base.state.pos += size;\n  finishToken(type);\n}\n\nfunction readRegexp() {\n  const start = _base.state.pos;\n  let escaped = false;\n  let inClass = false;\n  for (;;) {\n    if (_base.state.pos >= _base.input.length) {\n      _util.unexpected.call(void 0, \"Unterminated regular expression\", start);\n      return;\n    }\n    const code = _base.input.charCodeAt(_base.state.pos);\n    if (escaped) {\n      escaped = false;\n    } else {\n      if (code === _charcodes.charCodes.leftSquareBracket) {\n        inClass = true;\n      } else if (code === _charcodes.charCodes.rightSquareBracket && inClass) {\n        inClass = false;\n      } else if (code === _charcodes.charCodes.slash && !inClass) {\n        break;\n      }\n      escaped = code === _charcodes.charCodes.backslash;\n    }\n    ++_base.state.pos;\n  }\n  ++_base.state.pos;\n  // Need to use `skipWord` because '\\uXXXX' sequences are allowed here (don't ask).\n  skipWord();\n\n  finishToken(_types.TokenType.regexp);\n}\n\n// Read an integer. We allow any valid digit, including hex digits, plus numeric separators, and\n// stop at any other character.\nfunction readInt() {\n  while (true) {\n    const code = _base.input.charCodeAt(_base.state.pos);\n    if (\n      (code >= _charcodes.charCodes.digit0 && code <= _charcodes.charCodes.digit9) ||\n      (code >= _charcodes.charCodes.lowercaseA && code <= _charcodes.charCodes.lowercaseF) ||\n      (code >= _charcodes.charCodes.uppercaseA && code <= _charcodes.charCodes.uppercaseF) ||\n      code === _charcodes.charCodes.underscore\n    ) {\n      _base.state.pos++;\n    } else {\n      break;\n    }\n  }\n}\n\nfunction readRadixNumber() {\n  let isBigInt = false;\n\n  _base.state.pos += 2; // 0x\n  readInt();\n\n  if (_base.input.charCodeAt(_base.state.pos) === _charcodes.charCodes.lowercaseN) {\n    ++_base.state.pos;\n    isBigInt = true;\n  }\n\n  if (isBigInt) {\n    finishToken(_types.TokenType.bigint);\n    return;\n  }\n\n  finishToken(_types.TokenType.num);\n}\n\n// Read an integer, octal integer, or floating-point number.\nfunction readNumber(startsWithDot) {\n  let isBigInt = false;\n\n  if (!startsWithDot) {\n    readInt();\n  }\n\n  let nextChar = _base.input.charCodeAt(_base.state.pos);\n  if (nextChar === _charcodes.charCodes.dot) {\n    ++_base.state.pos;\n    readInt();\n    nextChar = _base.input.charCodeAt(_base.state.pos);\n  }\n\n  if (nextChar === _charcodes.charCodes.uppercaseE || nextChar === _charcodes.charCodes.lowercaseE) {\n    nextChar = _base.input.charCodeAt(++_base.state.pos);\n    if (nextChar === _charcodes.charCodes.plusSign || nextChar === _charcodes.charCodes.dash) {\n      ++_base.state.pos;\n    }\n    readInt();\n    nextChar = _base.input.charCodeAt(_base.state.pos);\n  }\n\n  if (nextChar === _charcodes.charCodes.lowercaseN) {\n    ++_base.state.pos;\n    isBigInt = true;\n  }\n\n  if (isBigInt) {\n    finishToken(_types.TokenType.bigint);\n    return;\n  }\n  finishToken(_types.TokenType.num);\n}\n\nfunction readString(quote) {\n  _base.state.pos++;\n  for (;;) {\n    if (_base.state.pos >= _base.input.length) {\n      _util.unexpected.call(void 0, \"Unterminated string constant\");\n      return;\n    }\n    const ch = _base.input.charCodeAt(_base.state.pos);\n    if (ch === _charcodes.charCodes.backslash) {\n      _base.state.pos++;\n    } else if (ch === quote) {\n      break;\n    }\n    _base.state.pos++;\n  }\n  _base.state.pos++;\n  finishToken(_types.TokenType.string);\n}\n\n// Reads template string tokens.\nfunction readTmplToken() {\n  for (;;) {\n    if (_base.state.pos >= _base.input.length) {\n      _util.unexpected.call(void 0, \"Unterminated template\");\n      return;\n    }\n    const ch = _base.input.charCodeAt(_base.state.pos);\n    if (\n      ch === _charcodes.charCodes.graveAccent ||\n      (ch === _charcodes.charCodes.dollarSign && _base.input.charCodeAt(_base.state.pos + 1) === _charcodes.charCodes.leftCurlyBrace)\n    ) {\n      if (_base.state.pos === _base.state.start && match(_types.TokenType.template)) {\n        if (ch === _charcodes.charCodes.dollarSign) {\n          _base.state.pos += 2;\n          finishToken(_types.TokenType.dollarBraceL);\n          return;\n        } else {\n          ++_base.state.pos;\n          finishToken(_types.TokenType.backQuote);\n          return;\n        }\n      }\n      finishToken(_types.TokenType.template);\n      return;\n    }\n    if (ch === _charcodes.charCodes.backslash) {\n      _base.state.pos++;\n    }\n    _base.state.pos++;\n  }\n}\n\n// Skip to the end of the current word. Note that this is the same as the snippet at the end of\n// readWord, but calling skipWord from readWord seems to slightly hurt performance from some rough\n// measurements.\n function skipWord() {\n  while (_base.state.pos < _base.input.length) {\n    const ch = _base.input.charCodeAt(_base.state.pos);\n    if (_identifier.IS_IDENTIFIER_CHAR[ch]) {\n      _base.state.pos++;\n    } else if (ch === _charcodes.charCodes.backslash) {\n      // \\u\n      _base.state.pos += 2;\n      if (_base.input.charCodeAt(_base.state.pos) === _charcodes.charCodes.leftCurlyBrace) {\n        while (\n          _base.state.pos < _base.input.length &&\n          _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.rightCurlyBrace\n        ) {\n          _base.state.pos++;\n        }\n        _base.state.pos++;\n      }\n    } else {\n      break;\n    }\n  }\n} exports.skipWord = skipWord;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/parser/tokenizer/index.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/parser/tokenizer/keywords.js":
/*!****************************************************************!*\
  !*** ./node_modules/sucrase/dist/parser/tokenizer/keywords.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", {value: true});var ContextualKeyword; (function (ContextualKeyword) {\n  const NONE = 0; ContextualKeyword[ContextualKeyword[\"NONE\"] = NONE] = \"NONE\";\n  const _abstract = NONE + 1; ContextualKeyword[ContextualKeyword[\"_abstract\"] = _abstract] = \"_abstract\";\n  const _as = _abstract + 1; ContextualKeyword[ContextualKeyword[\"_as\"] = _as] = \"_as\";\n  const _async = _as + 1; ContextualKeyword[ContextualKeyword[\"_async\"] = _async] = \"_async\";\n  const _await = _async + 1; ContextualKeyword[ContextualKeyword[\"_await\"] = _await] = \"_await\";\n  const _checks = _await + 1; ContextualKeyword[ContextualKeyword[\"_checks\"] = _checks] = \"_checks\";\n  const _constructor = _checks + 1; ContextualKeyword[ContextualKeyword[\"_constructor\"] = _constructor] = \"_constructor\";\n  const _declare = _constructor + 1; ContextualKeyword[ContextualKeyword[\"_declare\"] = _declare] = \"_declare\";\n  const _enum = _declare + 1; ContextualKeyword[ContextualKeyword[\"_enum\"] = _enum] = \"_enum\";\n  const _exports = _enum + 1; ContextualKeyword[ContextualKeyword[\"_exports\"] = _exports] = \"_exports\";\n  const _from = _exports + 1; ContextualKeyword[ContextualKeyword[\"_from\"] = _from] = \"_from\";\n  const _get = _from + 1; ContextualKeyword[ContextualKeyword[\"_get\"] = _get] = \"_get\";\n  const _global = _get + 1; ContextualKeyword[ContextualKeyword[\"_global\"] = _global] = \"_global\";\n  const _implements = _global + 1; ContextualKeyword[ContextualKeyword[\"_implements\"] = _implements] = \"_implements\";\n  const _infer = _implements + 1; ContextualKeyword[ContextualKeyword[\"_infer\"] = _infer] = \"_infer\";\n  const _interface = _infer + 1; ContextualKeyword[ContextualKeyword[\"_interface\"] = _interface] = \"_interface\";\n  const _is = _interface + 1; ContextualKeyword[ContextualKeyword[\"_is\"] = _is] = \"_is\";\n  const _keyof = _is + 1; ContextualKeyword[ContextualKeyword[\"_keyof\"] = _keyof] = \"_keyof\";\n  const _mixins = _keyof + 1; ContextualKeyword[ContextualKeyword[\"_mixins\"] = _mixins] = \"_mixins\";\n  const _module = _mixins + 1; ContextualKeyword[ContextualKeyword[\"_module\"] = _module] = \"_module\";\n  const _namespace = _module + 1; ContextualKeyword[ContextualKeyword[\"_namespace\"] = _namespace] = \"_namespace\";\n  const _of = _namespace + 1; ContextualKeyword[ContextualKeyword[\"_of\"] = _of] = \"_of\";\n  const _opaque = _of + 1; ContextualKeyword[ContextualKeyword[\"_opaque\"] = _opaque] = \"_opaque\";\n  const _private = _opaque + 1; ContextualKeyword[ContextualKeyword[\"_private\"] = _private] = \"_private\";\n  const _protected = _private + 1; ContextualKeyword[ContextualKeyword[\"_protected\"] = _protected] = \"_protected\";\n  const _proto = _protected + 1; ContextualKeyword[ContextualKeyword[\"_proto\"] = _proto] = \"_proto\";\n  const _public = _proto + 1; ContextualKeyword[ContextualKeyword[\"_public\"] = _public] = \"_public\";\n  const _readonly = _public + 1; ContextualKeyword[ContextualKeyword[\"_readonly\"] = _readonly] = \"_readonly\";\n  const _require = _readonly + 1; ContextualKeyword[ContextualKeyword[\"_require\"] = _require] = \"_require\";\n  const _set = _require + 1; ContextualKeyword[ContextualKeyword[\"_set\"] = _set] = \"_set\";\n  const _static = _set + 1; ContextualKeyword[ContextualKeyword[\"_static\"] = _static] = \"_static\";\n  const _type = _static + 1; ContextualKeyword[ContextualKeyword[\"_type\"] = _type] = \"_type\";\n  const _unique = _type + 1; ContextualKeyword[ContextualKeyword[\"_unique\"] = _unique] = \"_unique\";\n})(ContextualKeyword || (exports.ContextualKeyword = ContextualKeyword = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3BhcnNlci90b2tlbml6ZXIva2V5d29yZHMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3BhcnNlci90b2tlbml6ZXIva2V5d29yZHMuanM/NjFmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogdHJ1ZX0pO3ZhciBDb250ZXh0dWFsS2V5d29yZDsgKGZ1bmN0aW9uIChDb250ZXh0dWFsS2V5d29yZCkge1xuICBjb25zdCBOT05FID0gMDsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJOT05FXCJdID0gTk9ORV0gPSBcIk5PTkVcIjtcbiAgY29uc3QgX2Fic3RyYWN0ID0gTk9ORSArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX2Fic3RyYWN0XCJdID0gX2Fic3RyYWN0XSA9IFwiX2Fic3RyYWN0XCI7XG4gIGNvbnN0IF9hcyA9IF9hYnN0cmFjdCArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX2FzXCJdID0gX2FzXSA9IFwiX2FzXCI7XG4gIGNvbnN0IF9hc3luYyA9IF9hcyArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX2FzeW5jXCJdID0gX2FzeW5jXSA9IFwiX2FzeW5jXCI7XG4gIGNvbnN0IF9hd2FpdCA9IF9hc3luYyArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX2F3YWl0XCJdID0gX2F3YWl0XSA9IFwiX2F3YWl0XCI7XG4gIGNvbnN0IF9jaGVja3MgPSBfYXdhaXQgKyAxOyBDb250ZXh0dWFsS2V5d29yZFtDb250ZXh0dWFsS2V5d29yZFtcIl9jaGVja3NcIl0gPSBfY2hlY2tzXSA9IFwiX2NoZWNrc1wiO1xuICBjb25zdCBfY29uc3RydWN0b3IgPSBfY2hlY2tzICsgMTsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJfY29uc3RydWN0b3JcIl0gPSBfY29uc3RydWN0b3JdID0gXCJfY29uc3RydWN0b3JcIjtcbiAgY29uc3QgX2RlY2xhcmUgPSBfY29uc3RydWN0b3IgKyAxOyBDb250ZXh0dWFsS2V5d29yZFtDb250ZXh0dWFsS2V5d29yZFtcIl9kZWNsYXJlXCJdID0gX2RlY2xhcmVdID0gXCJfZGVjbGFyZVwiO1xuICBjb25zdCBfZW51bSA9IF9kZWNsYXJlICsgMTsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJfZW51bVwiXSA9IF9lbnVtXSA9IFwiX2VudW1cIjtcbiAgY29uc3QgX2V4cG9ydHMgPSBfZW51bSArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX2V4cG9ydHNcIl0gPSBfZXhwb3J0c10gPSBcIl9leHBvcnRzXCI7XG4gIGNvbnN0IF9mcm9tID0gX2V4cG9ydHMgKyAxOyBDb250ZXh0dWFsS2V5d29yZFtDb250ZXh0dWFsS2V5d29yZFtcIl9mcm9tXCJdID0gX2Zyb21dID0gXCJfZnJvbVwiO1xuICBjb25zdCBfZ2V0ID0gX2Zyb20gKyAxOyBDb250ZXh0dWFsS2V5d29yZFtDb250ZXh0dWFsS2V5d29yZFtcIl9nZXRcIl0gPSBfZ2V0XSA9IFwiX2dldFwiO1xuICBjb25zdCBfZ2xvYmFsID0gX2dldCArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX2dsb2JhbFwiXSA9IF9nbG9iYWxdID0gXCJfZ2xvYmFsXCI7XG4gIGNvbnN0IF9pbXBsZW1lbnRzID0gX2dsb2JhbCArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX2ltcGxlbWVudHNcIl0gPSBfaW1wbGVtZW50c10gPSBcIl9pbXBsZW1lbnRzXCI7XG4gIGNvbnN0IF9pbmZlciA9IF9pbXBsZW1lbnRzICsgMTsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJfaW5mZXJcIl0gPSBfaW5mZXJdID0gXCJfaW5mZXJcIjtcbiAgY29uc3QgX2ludGVyZmFjZSA9IF9pbmZlciArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX2ludGVyZmFjZVwiXSA9IF9pbnRlcmZhY2VdID0gXCJfaW50ZXJmYWNlXCI7XG4gIGNvbnN0IF9pcyA9IF9pbnRlcmZhY2UgKyAxOyBDb250ZXh0dWFsS2V5d29yZFtDb250ZXh0dWFsS2V5d29yZFtcIl9pc1wiXSA9IF9pc10gPSBcIl9pc1wiO1xuICBjb25zdCBfa2V5b2YgPSBfaXMgKyAxOyBDb250ZXh0dWFsS2V5d29yZFtDb250ZXh0dWFsS2V5d29yZFtcIl9rZXlvZlwiXSA9IF9rZXlvZl0gPSBcIl9rZXlvZlwiO1xuICBjb25zdCBfbWl4aW5zID0gX2tleW9mICsgMTsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJfbWl4aW5zXCJdID0gX21peGluc10gPSBcIl9taXhpbnNcIjtcbiAgY29uc3QgX21vZHVsZSA9IF9taXhpbnMgKyAxOyBDb250ZXh0dWFsS2V5d29yZFtDb250ZXh0dWFsS2V5d29yZFtcIl9tb2R1bGVcIl0gPSBfbW9kdWxlXSA9IFwiX21vZHVsZVwiO1xuICBjb25zdCBfbmFtZXNwYWNlID0gX21vZHVsZSArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX25hbWVzcGFjZVwiXSA9IF9uYW1lc3BhY2VdID0gXCJfbmFtZXNwYWNlXCI7XG4gIGNvbnN0IF9vZiA9IF9uYW1lc3BhY2UgKyAxOyBDb250ZXh0dWFsS2V5d29yZFtDb250ZXh0dWFsS2V5d29yZFtcIl9vZlwiXSA9IF9vZl0gPSBcIl9vZlwiO1xuICBjb25zdCBfb3BhcXVlID0gX29mICsgMTsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJfb3BhcXVlXCJdID0gX29wYXF1ZV0gPSBcIl9vcGFxdWVcIjtcbiAgY29uc3QgX3ByaXZhdGUgPSBfb3BhcXVlICsgMTsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJfcHJpdmF0ZVwiXSA9IF9wcml2YXRlXSA9IFwiX3ByaXZhdGVcIjtcbiAgY29uc3QgX3Byb3RlY3RlZCA9IF9wcml2YXRlICsgMTsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJfcHJvdGVjdGVkXCJdID0gX3Byb3RlY3RlZF0gPSBcIl9wcm90ZWN0ZWRcIjtcbiAgY29uc3QgX3Byb3RvID0gX3Byb3RlY3RlZCArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX3Byb3RvXCJdID0gX3Byb3RvXSA9IFwiX3Byb3RvXCI7XG4gIGNvbnN0IF9wdWJsaWMgPSBfcHJvdG8gKyAxOyBDb250ZXh0dWFsS2V5d29yZFtDb250ZXh0dWFsS2V5d29yZFtcIl9wdWJsaWNcIl0gPSBfcHVibGljXSA9IFwiX3B1YmxpY1wiO1xuICBjb25zdCBfcmVhZG9ubHkgPSBfcHVibGljICsgMTsgQ29udGV4dHVhbEtleXdvcmRbQ29udGV4dHVhbEtleXdvcmRbXCJfcmVhZG9ubHlcIl0gPSBfcmVhZG9ubHldID0gXCJfcmVhZG9ubHlcIjtcbiAgY29uc3QgX3JlcXVpcmUgPSBfcmVhZG9ubHkgKyAxOyBDb250ZXh0dWFsS2V5d29yZFtDb250ZXh0dWFsS2V5d29yZFtcIl9yZXF1aXJlXCJdID0gX3JlcXVpcmVdID0gXCJfcmVxdWlyZVwiO1xuICBjb25zdCBfc2V0ID0gX3JlcXVpcmUgKyAxOyBDb250ZXh0dWFsS2V5d29yZFtDb250ZXh0dWFsS2V5d29yZFtcIl9zZXRcIl0gPSBfc2V0XSA9IFwiX3NldFwiO1xuICBjb25zdCBfc3RhdGljID0gX3NldCArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX3N0YXRpY1wiXSA9IF9zdGF0aWNdID0gXCJfc3RhdGljXCI7XG4gIGNvbnN0IF90eXBlID0gX3N0YXRpYyArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX3R5cGVcIl0gPSBfdHlwZV0gPSBcIl90eXBlXCI7XG4gIGNvbnN0IF91bmlxdWUgPSBfdHlwZSArIDE7IENvbnRleHR1YWxLZXl3b3JkW0NvbnRleHR1YWxLZXl3b3JkW1wiX3VuaXF1ZVwiXSA9IF91bmlxdWVdID0gXCJfdW5pcXVlXCI7XG59KShDb250ZXh0dWFsS2V5d29yZCB8fCAoZXhwb3J0cy5Db250ZXh0dWFsS2V5d29yZCA9IENvbnRleHR1YWxLZXl3b3JkID0ge30pKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/parser/tokenizer/keywords.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/parser/tokenizer/readWord.js":
/*!****************************************************************!*\
  !*** ./node_modules/sucrase/dist/parser/tokenizer/readWord.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", {value: true});var _base = __webpack_require__(/*! ../traverser/base */ \"./node_modules/sucrase/dist/parser/traverser/base.js\");\nvar _charcodes = __webpack_require__(/*! ../util/charcodes */ \"./node_modules/sucrase/dist/parser/util/charcodes.js\");\nvar _identifier = __webpack_require__(/*! ../util/identifier */ \"./node_modules/sucrase/dist/parser/util/identifier.js\");\nvar _index = __webpack_require__(/*! ./index */ \"./node_modules/sucrase/dist/parser/tokenizer/index.js\");\nvar _readWordTree = __webpack_require__(/*! ./readWordTree */ \"./node_modules/sucrase/dist/parser/tokenizer/readWordTree.js\");\nvar _types = __webpack_require__(/*! ./types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\n\n/**\n * Read an identifier, producing either a name token or matching on one of the existing keywords.\n * For performance, we pre-generate big decision tree that we traverse. Each node represents a\n * prefix and has 27 values, where the first value is the token or contextual token, if any (-1 if\n * not), and the other 26 values are the transitions to other nodes, or -1 to stop.\n */\n function readWord() {\n  let treePos = 0;\n  let code = 0;\n  let pos = _base.state.pos;\n  while (pos < _base.input.length) {\n    code = _base.input.charCodeAt(pos);\n    if (code < _charcodes.charCodes.lowercaseA || code > _charcodes.charCodes.lowercaseZ) {\n      break;\n    }\n    const next = _readWordTree.READ_WORD_TREE[treePos + (code - _charcodes.charCodes.lowercaseA) + 1];\n    if (next === -1) {\n      break;\n    } else {\n      treePos = next;\n      pos++;\n    }\n  }\n\n  const keywordValue = _readWordTree.READ_WORD_TREE[treePos];\n  if (keywordValue > -1 && !_identifier.IS_IDENTIFIER_CHAR[code]) {\n    _base.state.pos = pos;\n    if (keywordValue & 1) {\n      _index.finishToken.call(void 0, keywordValue >>> 1);\n    } else {\n      _index.finishToken.call(void 0, _types.TokenType.name, keywordValue >>> 1);\n    }\n    return;\n  }\n\n  while (pos < _base.input.length) {\n    const ch = _base.input.charCodeAt(pos);\n    if (_identifier.IS_IDENTIFIER_CHAR[ch]) {\n      pos++;\n    } else if (ch === _charcodes.charCodes.backslash) {\n      // \\u\n      pos += 2;\n      if (_base.input.charCodeAt(pos) === _charcodes.charCodes.leftCurlyBrace) {\n        while (pos < _base.input.length && _base.input.charCodeAt(pos) !== _charcodes.charCodes.rightCurlyBrace) {\n          pos++;\n        }\n        pos++;\n      }\n    } else if (ch === _charcodes.charCodes.atSign && _base.input.charCodeAt(pos + 1) === _charcodes.charCodes.atSign) {\n      pos += 2;\n    } else {\n      break;\n    }\n  }\n  _base.state.pos = pos;\n  _index.finishToken.call(void 0, _types.TokenType.name);\n} exports.default = readWord;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3BhcnNlci90b2tlbml6ZXIvcmVhZFdvcmQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3BhcnNlci90b2tlbml6ZXIvcmVhZFdvcmQuanM/ZDNkMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogdHJ1ZX0pO3ZhciBfYmFzZSA9IHJlcXVpcmUoJy4uL3RyYXZlcnNlci9iYXNlJyk7XG52YXIgX2NoYXJjb2RlcyA9IHJlcXVpcmUoJy4uL3V0aWwvY2hhcmNvZGVzJyk7XG52YXIgX2lkZW50aWZpZXIgPSByZXF1aXJlKCcuLi91dGlsL2lkZW50aWZpZXInKTtcbnZhciBfaW5kZXggPSByZXF1aXJlKCcuL2luZGV4Jyk7XG52YXIgX3JlYWRXb3JkVHJlZSA9IHJlcXVpcmUoJy4vcmVhZFdvcmRUcmVlJyk7XG52YXIgX3R5cGVzID0gcmVxdWlyZSgnLi90eXBlcycpO1xuXG4vKipcbiAqIFJlYWQgYW4gaWRlbnRpZmllciwgcHJvZHVjaW5nIGVpdGhlciBhIG5hbWUgdG9rZW4gb3IgbWF0Y2hpbmcgb24gb25lIG9mIHRoZSBleGlzdGluZyBrZXl3b3Jkcy5cbiAqIEZvciBwZXJmb3JtYW5jZSwgd2UgcHJlLWdlbmVyYXRlIGJpZyBkZWNpc2lvbiB0cmVlIHRoYXQgd2UgdHJhdmVyc2UuIEVhY2ggbm9kZSByZXByZXNlbnRzIGFcbiAqIHByZWZpeCBhbmQgaGFzIDI3IHZhbHVlcywgd2hlcmUgdGhlIGZpcnN0IHZhbHVlIGlzIHRoZSB0b2tlbiBvciBjb250ZXh0dWFsIHRva2VuLCBpZiBhbnkgKC0xIGlmXG4gKiBub3QpLCBhbmQgdGhlIG90aGVyIDI2IHZhbHVlcyBhcmUgdGhlIHRyYW5zaXRpb25zIHRvIG90aGVyIG5vZGVzLCBvciAtMSB0byBzdG9wLlxuICovXG4gZnVuY3Rpb24gcmVhZFdvcmQoKSB7XG4gIGxldCB0cmVlUG9zID0gMDtcbiAgbGV0IGNvZGUgPSAwO1xuICBsZXQgcG9zID0gX2Jhc2Uuc3RhdGUucG9zO1xuICB3aGlsZSAocG9zIDwgX2Jhc2UuaW5wdXQubGVuZ3RoKSB7XG4gICAgY29kZSA9IF9iYXNlLmlucHV0LmNoYXJDb2RlQXQocG9zKTtcbiAgICBpZiAoY29kZSA8IF9jaGFyY29kZXMuY2hhckNvZGVzLmxvd2VyY2FzZUEgfHwgY29kZSA+IF9jaGFyY29kZXMuY2hhckNvZGVzLmxvd2VyY2FzZVopIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjb25zdCBuZXh0ID0gX3JlYWRXb3JkVHJlZS5SRUFEX1dPUkRfVFJFRVt0cmVlUG9zICsgKGNvZGUgLSBfY2hhcmNvZGVzLmNoYXJDb2Rlcy5sb3dlcmNhc2VBKSArIDFdO1xuICAgIGlmIChuZXh0ID09PSAtMSkge1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyZWVQb3MgPSBuZXh0O1xuICAgICAgcG9zKys7XG4gICAgfVxuICB9XG5cbiAgY29uc3Qga2V5d29yZFZhbHVlID0gX3JlYWRXb3JkVHJlZS5SRUFEX1dPUkRfVFJFRVt0cmVlUG9zXTtcbiAgaWYgKGtleXdvcmRWYWx1ZSA+IC0xICYmICFfaWRlbnRpZmllci5JU19JREVOVElGSUVSX0NIQVJbY29kZV0pIHtcbiAgICBfYmFzZS5zdGF0ZS5wb3MgPSBwb3M7XG4gICAgaWYgKGtleXdvcmRWYWx1ZSAmIDEpIHtcbiAgICAgIF9pbmRleC5maW5pc2hUb2tlbi5jYWxsKHZvaWQgMCwga2V5d29yZFZhbHVlID4+PiAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX2luZGV4LmZpbmlzaFRva2VuLmNhbGwodm9pZCAwLCBfdHlwZXMuVG9rZW5UeXBlLm5hbWUsIGtleXdvcmRWYWx1ZSA+Pj4gMSk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIHdoaWxlIChwb3MgPCBfYmFzZS5pbnB1dC5sZW5ndGgpIHtcbiAgICBjb25zdCBjaCA9IF9iYXNlLmlucHV0LmNoYXJDb2RlQXQocG9zKTtcbiAgICBpZiAoX2lkZW50aWZpZXIuSVNfSURFTlRJRklFUl9DSEFSW2NoXSkge1xuICAgICAgcG9zKys7XG4gICAgfSBlbHNlIGlmIChjaCA9PT0gX2NoYXJjb2Rlcy5jaGFyQ29kZXMuYmFja3NsYXNoKSB7XG4gICAgICAvLyBcXHVcbiAgICAgIHBvcyArPSAyO1xuICAgICAgaWYgKF9iYXNlLmlucHV0LmNoYXJDb2RlQXQocG9zKSA9PT0gX2NoYXJjb2Rlcy5jaGFyQ29kZXMubGVmdEN1cmx5QnJhY2UpIHtcbiAgICAgICAgd2hpbGUgKHBvcyA8IF9iYXNlLmlucHV0Lmxlbmd0aCAmJiBfYmFzZS5pbnB1dC5jaGFyQ29kZUF0KHBvcykgIT09IF9jaGFyY29kZXMuY2hhckNvZGVzLnJpZ2h0Q3VybHlCcmFjZSkge1xuICAgICAgICAgIHBvcysrO1xuICAgICAgICB9XG4gICAgICAgIHBvcysrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2ggPT09IF9jaGFyY29kZXMuY2hhckNvZGVzLmF0U2lnbiAmJiBfYmFzZS5pbnB1dC5jaGFyQ29kZUF0KHBvcyArIDEpID09PSBfY2hhcmNvZGVzLmNoYXJDb2Rlcy5hdFNpZ24pIHtcbiAgICAgIHBvcyArPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgX2Jhc2Uuc3RhdGUucG9zID0gcG9zO1xuICBfaW5kZXguZmluaXNoVG9rZW4uY2FsbCh2b2lkIDAsIF90eXBlcy5Ub2tlblR5cGUubmFtZSk7XG59IGV4cG9ydHMuZGVmYXVsdCA9IHJlYWRXb3JkO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/parser/tokenizer/readWord.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/parser/tokenizer/readWordTree.js":
/*!********************************************************************!*\
  !*** ./node_modules/sucrase/dist/parser/tokenizer/readWordTree.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", {value: true});// Generated file, do not edit! Run \"yarn generate\" to re-generate this file.\nvar _keywords = __webpack_require__(/*! ./keywords */ \"./node_modules/sucrase/dist/parser/tokenizer/keywords.js\");\nvar _types = __webpack_require__(/*! ./types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\n\n// prettier-ignore\n const READ_WORD_TREE = new Int32Array([\n  // \"\"\n  -1, 27, 459, 594, 1431, 2052, 2538, 3159, -1, 3375, -1, 4293, 4428, 4509, 4806, 5184, 5373, -1, 5913, 6372, 6831, 7263, 7425, 7587, -1, 7803, -1,\n  // \"a\"\n  -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 243, -1, -1, -1, 351, -1, -1, -1,\n  // \"ab\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, -1, -1, -1, -1, -1, -1, -1,\n  // \"abs\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, -1,\n  // \"abst\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 135, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"abstr\"\n  -1, 162, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"abstra\"\n  -1, -1, -1, 189, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"abstrac\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 216, -1, -1, -1, -1, -1, -1,\n  // \"abstract\"\n  _keywords.ContextualKeyword._abstract << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"as\"\n  _keywords.ContextualKeyword._as << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 270, -1,\n  // \"asy\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 297, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"asyn\"\n  -1, -1, -1, 324, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"async\"\n  _keywords.ContextualKeyword._async << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"aw\"\n  -1, 378, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"awa\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 405, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"awai\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 432, -1, -1, -1, -1, -1, -1,\n  // \"await\"\n  _keywords.ContextualKeyword._await << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"b\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 486, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"br\"\n  -1, -1, -1, -1, -1, 513, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"bre\"\n  -1, 540, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"brea\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 567, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"break\"\n  (_types.TokenType._break << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"c\"\n  -1, 621, -1, -1, -1, -1, -1, -1, 783, -1, -1, -1, 918, -1, -1, 1026, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ca\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 648, 702, -1, -1, -1, -1, -1, -1,\n  // \"cas\"\n  -1, -1, -1, -1, -1, 675, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"case\"\n  (_types.TokenType._case << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"cat\"\n  -1, -1, -1, 729, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"catc\"\n  -1, -1, -1, -1, -1, -1, -1, -1, 756, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"catch\"\n  (_types.TokenType._catch << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ch\"\n  -1, -1, -1, -1, -1, 810, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"che\"\n  -1, -1, -1, 837, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"chec\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 864, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"check\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 891, -1, -1, -1, -1, -1, -1, -1,\n  // \"checks\"\n  _keywords.ContextualKeyword._checks << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"cl\"\n  -1, 945, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"cla\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 972, -1, -1, -1, -1, -1, -1, -1,\n  // \"clas\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 999, -1, -1, -1, -1, -1, -1, -1,\n  // \"class\"\n  (_types.TokenType._class << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"co\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1053, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"con\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1080, 1296, -1, -1, -1, -1, -1, -1,\n  // \"cons\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1107, -1, -1, -1, -1, -1, -1,\n  // \"const\"\n  (_types.TokenType._const << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1134, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"constr\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1161, -1, -1, -1, -1, -1,\n  // \"constru\"\n  -1, -1, -1, 1188, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"construc\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1215, -1, -1, -1, -1, -1, -1,\n  // \"construct\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1242, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"constructo\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1269, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"constructor\"\n  _keywords.ContextualKeyword._constructor << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"cont\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 1323, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"conti\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1350, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"contin\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1377, -1, -1, -1, -1, -1,\n  // \"continu\"\n  -1, -1, -1, -1, -1, 1404, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"continue\"\n  (_types.TokenType._continue << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"d\"\n  -1, -1, -1, -1, -1, 1458, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2025, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"de\"\n  -1, -1, 1485, 1647, -1, -1, 1782, -1, -1, -1, -1, -1, 1917, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"deb\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1512, -1, -1, -1, -1, -1,\n  // \"debu\"\n  -1, -1, -1, -1, -1, -1, -1, 1539, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"debug\"\n  -1, -1, -1, -1, -1, -1, -1, 1566, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"debugg\"\n  -1, -1, -1, -1, -1, 1593, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"debugge\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1620, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"debugger\"\n  (_types.TokenType._debugger << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"dec\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1674, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"decl\"\n  -1, 1701, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"decla\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1728, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"declar\"\n  -1, -1, -1, -1, -1, 1755, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"declare\"\n  _keywords.ContextualKeyword._declare << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"def\"\n  -1, 1809, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"defa\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1836, -1, -1, -1, -1, -1,\n  // \"defau\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1863, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"defaul\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1890, -1, -1, -1, -1, -1, -1,\n  // \"default\"\n  (_types.TokenType._default << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"del\"\n  -1, -1, -1, -1, -1, 1944, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"dele\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1971, -1, -1, -1, -1, -1, -1,\n  // \"delet\"\n  -1, -1, -1, -1, -1, 1998, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"delete\"\n  (_types.TokenType._delete << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"do\"\n  (_types.TokenType._do << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"e\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2079, -1, 2160, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2241, -1, -1,\n  // \"el\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2106, -1, -1, -1, -1, -1, -1, -1,\n  // \"els\"\n  -1, -1, -1, -1, -1, 2133, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"else\"\n  (_types.TokenType._else << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"en\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2187, -1, -1, -1, -1, -1,\n  // \"enu\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2214, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"enum\"\n  _keywords.ContextualKeyword._enum << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ex\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2268, -1, -1, -1, 2403, -1, -1, -1, -1, -1, -1,\n  // \"exp\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2295, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"expo\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2322, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"expor\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2349, -1, -1, -1, -1, -1, -1,\n  // \"export\"\n  (_types.TokenType._export << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2376, -1, -1, -1, -1, -1, -1, -1,\n  // \"exports\"\n  _keywords.ContextualKeyword._exports << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ext\"\n  -1, -1, -1, -1, -1, 2430, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"exte\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2457, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"exten\"\n  -1, -1, -1, -1, 2484, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"extend\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2511, -1, -1, -1, -1, -1, -1, -1,\n  // \"extends\"\n  (_types.TokenType._extends << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"f\"\n  -1, 2565, -1, -1, -1, -1, -1, -1, -1, 2673, -1, -1, -1, -1, -1, 2835, -1, -1, 2889, -1, -1, 2970, -1, -1, -1, -1, -1,\n  // \"fa\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2592, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fal\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2619, -1, -1, -1, -1, -1, -1, -1,\n  // \"fals\"\n  -1, -1, -1, -1, -1, 2646, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"false\"\n  (_types.TokenType._false << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2700, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fin\"\n  -1, 2727, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fina\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2754, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"final\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2781, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"finall\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2808, -1,\n  // \"finally\"\n  (_types.TokenType._finally << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fo\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2862, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"for\"\n  (_types.TokenType._for << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fr\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2916, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fro\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2943, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"from\"\n  _keywords.ContextualKeyword._from << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fu\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2997, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fun\"\n  -1, -1, -1, 3024, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"func\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3051, -1, -1, -1, -1, -1, -1,\n  // \"funct\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 3078, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"functi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3105, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"functio\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3132, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"function\"\n  (_types.TokenType._function << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"g\"\n  -1, -1, -1, -1, -1, 3186, -1, -1, -1, -1, -1, -1, 3240, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ge\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3213, -1, -1, -1, -1, -1, -1,\n  // \"get\"\n  _keywords.ContextualKeyword._get << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"gl\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3267, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"glo\"\n  -1, -1, 3294, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"glob\"\n  -1, 3321, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"globa\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3348, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"global\"\n  _keywords.ContextualKeyword._global << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"i\"\n  -1, -1, -1, -1, -1, -1, 3402, -1, -1, -1, -1, -1, -1, 3429, 3753, -1, -1, -1, -1, 4266, -1, -1, -1, -1, -1, -1, -1,\n  // \"if\"\n  (_types.TokenType._if << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"im\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3456, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"imp\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3483, -1, -1, 3672, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"impl\"\n  -1, -1, -1, -1, -1, 3510, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"imple\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3537, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"implem\"\n  -1, -1, -1, -1, -1, 3564, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"impleme\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3591, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"implemen\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3618, -1, -1, -1, -1, -1, -1,\n  // \"implement\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3645, -1, -1, -1, -1, -1, -1, -1,\n  // \"implements\"\n  _keywords.ContextualKeyword._implements << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"impo\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3699, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"impor\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3726, -1, -1, -1, -1, -1, -1,\n  // \"import\"\n  (_types.TokenType._import << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"in\"\n  (_types.TokenType._in << 1) + 1, -1, -1, -1, -1, -1, 3780, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3861, 4077, -1, -1, -1, -1, -1, -1,\n  // \"inf\"\n  -1, -1, -1, -1, -1, 3807, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"infe\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3834, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"infer\"\n  _keywords.ContextualKeyword._infer << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ins\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3888, -1, -1, -1, -1, -1, -1,\n  // \"inst\"\n  -1, 3915, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"insta\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3942, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"instan\"\n  -1, -1, -1, 3969, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"instanc\"\n  -1, -1, -1, -1, -1, 3996, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"instance\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4023, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"instanceo\"\n  -1, -1, -1, -1, -1, -1, 4050, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"instanceof\"\n  (_types.TokenType._instanceof << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"int\"\n  -1, -1, -1, -1, -1, 4104, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"inte\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4131, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"inter\"\n  -1, -1, -1, -1, -1, -1, 4158, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"interf\"\n  -1, 4185, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"interfa\"\n  -1, -1, -1, 4212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"interfac\"\n  -1, -1, -1, -1, -1, 4239, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"interface\"\n  _keywords.ContextualKeyword._interface << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"is\"\n  _keywords.ContextualKeyword._is << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"k\"\n  -1, -1, -1, -1, -1, 4320, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ke\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4347, -1,\n  // \"key\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4374, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"keyo\"\n  -1, -1, -1, -1, -1, -1, 4401, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"keyof\"\n  _keywords.ContextualKeyword._keyof << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"l\"\n  -1, -1, -1, -1, -1, 4455, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"le\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4482, -1, -1, -1, -1, -1, -1,\n  // \"let\"\n  (_types.TokenType._let << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"m\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 4536, -1, -1, -1, -1, -1, 4671, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"mi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4563, -1, -1,\n  // \"mix\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 4590, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"mixi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4617, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"mixin\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4644, -1, -1, -1, -1, -1, -1, -1,\n  // \"mixins\"\n  _keywords.ContextualKeyword._mixins << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"mo\"\n  -1, -1, -1, -1, 4698, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"mod\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4725, -1, -1, -1, -1, -1,\n  // \"modu\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4752, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"modul\"\n  -1, -1, -1, -1, -1, 4779, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"module\"\n  _keywords.ContextualKeyword._module << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"n\"\n  -1, 4833, -1, -1, -1, 5049, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5103, -1, -1, -1, -1, -1,\n  // \"na\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4860, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"nam\"\n  -1, -1, -1, -1, -1, 4887, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"name\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4914, -1, -1, -1, -1, -1, -1, -1,\n  // \"names\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4941, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"namesp\"\n  -1, 4968, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"namespa\"\n  -1, -1, -1, 4995, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"namespac\"\n  -1, -1, -1, -1, -1, 5022, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"namespace\"\n  _keywords.ContextualKeyword._namespace << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ne\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5076, -1, -1, -1,\n  // \"new\"\n  (_types.TokenType._new << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"nu\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"nul\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5157, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"null\"\n  (_types.TokenType._null << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"o\"\n  -1, -1, -1, -1, -1, -1, 5211, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5238, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"of\"\n  _keywords.ContextualKeyword._of << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"op\"\n  -1, 5265, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"opa\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5292, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"opaq\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5319, -1, -1, -1, -1, -1,\n  // \"opaqu\"\n  -1, -1, -1, -1, -1, 5346, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"opaque\"\n  _keywords.ContextualKeyword._opaque << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"p\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5400, -1, -1, 5778, -1, -1, -1, -1, -1,\n  // \"pr\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 5427, -1, -1, -1, -1, -1, 5562, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"pri\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5454, -1, -1, -1, -1,\n  // \"priv\"\n  -1, 5481, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"priva\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5508, -1, -1, -1, -1, -1, -1,\n  // \"privat\"\n  -1, -1, -1, -1, -1, 5535, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"private\"\n  _keywords.ContextualKeyword._private << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"pro\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5589, -1, -1, -1, -1, -1, -1,\n  // \"prot\"\n  -1, -1, -1, -1, -1, 5616, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5751, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"prote\"\n  -1, -1, -1, 5643, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"protec\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5670, -1, -1, -1, -1, -1, -1,\n  // \"protect\"\n  -1, -1, -1, -1, -1, 5697, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"protecte\"\n  -1, -1, -1, -1, 5724, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"protected\"\n  _keywords.ContextualKeyword._protected << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"proto\"\n  _keywords.ContextualKeyword._proto << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"pu\"\n  -1, -1, 5805, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"pub\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5832, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"publ\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 5859, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"publi\"\n  -1, -1, -1, 5886, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"public\"\n  _keywords.ContextualKeyword._public << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"r\"\n  -1, -1, -1, -1, -1, 5940, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"re\"\n  -1, 5967, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6129, -1, -1, 6264, -1, -1, -1, -1, -1, -1,\n  // \"rea\"\n  -1, -1, -1, -1, 5994, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"read\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6021, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"reado\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6048, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"readon\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6075, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"readonl\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6102, -1,\n  // \"readonly\"\n  _keywords.ContextualKeyword._readonly << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"req\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6156, -1, -1, -1, -1, -1,\n  // \"requ\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 6183, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"requi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6210, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"requir\"\n  -1, -1, -1, -1, -1, 6237, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"require\"\n  _keywords.ContextualKeyword._require << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ret\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6291, -1, -1, -1, -1, -1,\n  // \"retu\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6318, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"retur\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6345, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"return\"\n  (_types.TokenType._return << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"s\"\n  -1, -1, -1, -1, -1, 6399, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6453, 6588, -1, 6696, -1, -1, -1,\n  // \"se\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6426, -1, -1, -1, -1, -1, -1,\n  // \"set\"\n  _keywords.ContextualKeyword._set << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"st\"\n  -1, 6480, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"sta\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6507, -1, -1, -1, -1, -1, -1,\n  // \"stat\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 6534, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"stati\"\n  -1, -1, -1, 6561, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"static\"\n  _keywords.ContextualKeyword._static << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"su\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6615, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"sup\"\n  -1, -1, -1, -1, -1, 6642, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"supe\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6669, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"super\"\n  (_types.TokenType._super << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"sw\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 6723, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"swi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6750, -1, -1, -1, -1, -1, -1,\n  // \"swit\"\n  -1, -1, -1, 6777, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"switc\"\n  -1, -1, -1, -1, -1, -1, -1, -1, 6804, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"switch\"\n  (_types.TokenType._switch << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"t\"\n  -1, -1, -1, -1, -1, -1, -1, -1, 6858, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7020, -1, -1, -1, -1, -1, -1, 7128, -1,\n  // \"th\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 6885, -1, -1, -1, -1, -1, -1, -1, -1, 6939, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"thi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6912, -1, -1, -1, -1, -1, -1, -1,\n  // \"this\"\n  (_types.TokenType._this << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"thr\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6966, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"thro\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6993, -1, -1, -1,\n  // \"throw\"\n  (_types.TokenType._throw << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"tr\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7047, -1, -1, -1, 7101, -1,\n  // \"tru\"\n  -1, -1, -1, -1, -1, 7074, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"true\"\n  (_types.TokenType._true << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"try\"\n  (_types.TokenType._try << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ty\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7155, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"typ\"\n  -1, -1, -1, -1, -1, 7182, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"type\"\n  _keywords.ContextualKeyword._type << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7209, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"typeo\"\n  -1, -1, -1, -1, -1, -1, 7236, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"typeof\"\n  (_types.TokenType._typeof << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"u\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7290, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"un\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 7317, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"uni\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7344, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"uniq\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7371, -1, -1, -1, -1, -1,\n  // \"uniqu\"\n  -1, -1, -1, -1, -1, 7398, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"unique\"\n  _keywords.ContextualKeyword._unique << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"v\"\n  -1, 7452, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7506, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"va\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7479, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"var\"\n  (_types.TokenType._var << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"vo\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 7533, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"voi\"\n  -1, -1, -1, -1, 7560, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"void\"\n  (_types.TokenType._void << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"w\"\n  -1, -1, -1, -1, -1, -1, -1, -1, 7614, 7722, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"wh\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 7641, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"whi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7668, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"whil\"\n  -1, -1, -1, -1, -1, 7695, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"while\"\n  (_types.TokenType._while << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"wi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7749, -1, -1, -1, -1, -1, -1,\n  // \"wit\"\n  -1, -1, -1, -1, -1, -1, -1, -1, 7776, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"with\"\n  (_types.TokenType._with << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"y\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 7830, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"yi\"\n  -1, -1, -1, -1, -1, 7857, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"yie\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7884, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"yiel\"\n  -1, -1, -1, -1, 7911, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"yield\"\n  (_types.TokenType._yield << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n]); exports.READ_WORD_TREE = READ_WORD_TREE;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/parser/tokenizer/readWordTree.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/parser/tokenizer/state.js":
/*!*************************************************************!*\
  !*** ./node_modules/sucrase/dist/parser/tokenizer/state.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", {value: true});\nvar _keywords = __webpack_require__(/*! ./keywords */ \"./node_modules/sucrase/dist/parser/tokenizer/keywords.js\");\nvar _types = __webpack_require__(/*! ./types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\n\n class Scope {\n  \n  \n  \n\n  constructor(startTokenIndex, endTokenIndex, isFunctionScope) {\n    this.startTokenIndex = startTokenIndex;\n    this.endTokenIndex = endTokenIndex;\n    this.isFunctionScope = isFunctionScope;\n  }\n} exports.Scope = Scope;\n\n class StateSnapshot {\n  constructor(\n     potentialArrowAt,\n     noAnonFunctionType,\n     tokensLength,\n     scopesLength,\n     pos,\n     type,\n     contextualKeyword,\n     start,\n     end,\n     isType,\n     scopeDepth,\n     error,\n  ) {;this.potentialArrowAt = potentialArrowAt;this.noAnonFunctionType = noAnonFunctionType;this.tokensLength = tokensLength;this.scopesLength = scopesLength;this.pos = pos;this.type = type;this.contextualKeyword = contextualKeyword;this.start = start;this.end = end;this.isType = isType;this.scopeDepth = scopeDepth;this.error = error;}\n} exports.StateSnapshot = StateSnapshot;\n\n class State {constructor() { State.prototype.__init.call(this);State.prototype.__init2.call(this);State.prototype.__init3.call(this);State.prototype.__init4.call(this);State.prototype.__init5.call(this);State.prototype.__init6.call(this);State.prototype.__init7.call(this);State.prototype.__init8.call(this);State.prototype.__init9.call(this);State.prototype.__init10.call(this);State.prototype.__init11.call(this);State.prototype.__init12.call(this); }\n  // Used to signify the start of a potential arrow function\n  __init() {this.potentialArrowAt = -1}\n\n  // Used by Flow to handle an edge case involving function type parsing.\n  __init2() {this.noAnonFunctionType = false}\n\n  // Token store.\n  __init3() {this.tokens = []}\n\n  // Array of all observed scopes, ordered by their ending position.\n  __init4() {this.scopes = []}\n\n  // The current position of the tokenizer in the input.\n  __init5() {this.pos = 0}\n\n  // Information about the current token.\n  __init6() {this.type = _types.TokenType.eof}\n  __init7() {this.contextualKeyword = _keywords.ContextualKeyword.NONE}\n  __init8() {this.start = 0}\n  __init9() {this.end = 0}\n\n  __init10() {this.isType = false}\n  __init11() {this.scopeDepth = 0}\n\n  /**\n   * If the parser is in an error state, then the token is always tt.eof and all functions can\n   * keep executing but should be written so they don't get into an infinite loop in this situation.\n   *\n   * This approach, combined with the ability to snapshot and restore state, allows us to implement\n   * backtracking without exceptions and without needing to explicitly propagate error states\n   * everywhere.\n   */\n  __init12() {this.error = null}\n\n  snapshot() {\n    return new StateSnapshot(\n      this.potentialArrowAt,\n      this.noAnonFunctionType,\n      this.tokens.length,\n      this.scopes.length,\n      this.pos,\n      this.type,\n      this.contextualKeyword,\n      this.start,\n      this.end,\n      this.isType,\n      this.scopeDepth,\n      this.error,\n    );\n  }\n\n  restoreFromSnapshot(snapshot) {\n    this.potentialArrowAt = snapshot.potentialArrowAt;\n    this.noAnonFunctionType = snapshot.noAnonFunctionType;\n    this.tokens.length = snapshot.tokensLength;\n    this.scopes.length = snapshot.scopesLength;\n    this.pos = snapshot.pos;\n    this.type = snapshot.type;\n    this.contextualKeyword = snapshot.contextualKeyword;\n    this.start = snapshot.start;\n    this.end = snapshot.end;\n    this.isType = snapshot.isType;\n    this.scopeDepth = snapshot.scopeDepth;\n    this.error = snapshot.error;\n  }\n} exports.default = State;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3BhcnNlci90b2tlbml6ZXIvc3RhdGUuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3BhcnNlci90b2tlbml6ZXIvc3RhdGUuanM/YTFkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogdHJ1ZX0pO1xudmFyIF9rZXl3b3JkcyA9IHJlcXVpcmUoJy4va2V5d29yZHMnKTtcbnZhciBfdHlwZXMgPSByZXF1aXJlKCcuL3R5cGVzJyk7XG5cbiBjbGFzcyBTY29wZSB7XG4gIFxuICBcbiAgXG5cbiAgY29uc3RydWN0b3Ioc3RhcnRUb2tlbkluZGV4LCBlbmRUb2tlbkluZGV4LCBpc0Z1bmN0aW9uU2NvcGUpIHtcbiAgICB0aGlzLnN0YXJ0VG9rZW5JbmRleCA9IHN0YXJ0VG9rZW5JbmRleDtcbiAgICB0aGlzLmVuZFRva2VuSW5kZXggPSBlbmRUb2tlbkluZGV4O1xuICAgIHRoaXMuaXNGdW5jdGlvblNjb3BlID0gaXNGdW5jdGlvblNjb3BlO1xuICB9XG59IGV4cG9ydHMuU2NvcGUgPSBTY29wZTtcblxuIGNsYXNzIFN0YXRlU25hcHNob3Qge1xuICBjb25zdHJ1Y3RvcihcbiAgICAgcG90ZW50aWFsQXJyb3dBdCxcbiAgICAgbm9Bbm9uRnVuY3Rpb25UeXBlLFxuICAgICB0b2tlbnNMZW5ndGgsXG4gICAgIHNjb3Blc0xlbmd0aCxcbiAgICAgcG9zLFxuICAgICB0eXBlLFxuICAgICBjb250ZXh0dWFsS2V5d29yZCxcbiAgICAgc3RhcnQsXG4gICAgIGVuZCxcbiAgICAgaXNUeXBlLFxuICAgICBzY29wZURlcHRoLFxuICAgICBlcnJvcixcbiAgKSB7O3RoaXMucG90ZW50aWFsQXJyb3dBdCA9IHBvdGVudGlhbEFycm93QXQ7dGhpcy5ub0Fub25GdW5jdGlvblR5cGUgPSBub0Fub25GdW5jdGlvblR5cGU7dGhpcy50b2tlbnNMZW5ndGggPSB0b2tlbnNMZW5ndGg7dGhpcy5zY29wZXNMZW5ndGggPSBzY29wZXNMZW5ndGg7dGhpcy5wb3MgPSBwb3M7dGhpcy50eXBlID0gdHlwZTt0aGlzLmNvbnRleHR1YWxLZXl3b3JkID0gY29udGV4dHVhbEtleXdvcmQ7dGhpcy5zdGFydCA9IHN0YXJ0O3RoaXMuZW5kID0gZW5kO3RoaXMuaXNUeXBlID0gaXNUeXBlO3RoaXMuc2NvcGVEZXB0aCA9IHNjb3BlRGVwdGg7dGhpcy5lcnJvciA9IGVycm9yO31cbn0gZXhwb3J0cy5TdGF0ZVNuYXBzaG90ID0gU3RhdGVTbmFwc2hvdDtcblxuIGNsYXNzIFN0YXRlIHtjb25zdHJ1Y3RvcigpIHsgU3RhdGUucHJvdG90eXBlLl9faW5pdC5jYWxsKHRoaXMpO1N0YXRlLnByb3RvdHlwZS5fX2luaXQyLmNhbGwodGhpcyk7U3RhdGUucHJvdG90eXBlLl9faW5pdDMuY2FsbCh0aGlzKTtTdGF0ZS5wcm90b3R5cGUuX19pbml0NC5jYWxsKHRoaXMpO1N0YXRlLnByb3RvdHlwZS5fX2luaXQ1LmNhbGwodGhpcyk7U3RhdGUucHJvdG90eXBlLl9faW5pdDYuY2FsbCh0aGlzKTtTdGF0ZS5wcm90b3R5cGUuX19pbml0Ny5jYWxsKHRoaXMpO1N0YXRlLnByb3RvdHlwZS5fX2luaXQ4LmNhbGwodGhpcyk7U3RhdGUucHJvdG90eXBlLl9faW5pdDkuY2FsbCh0aGlzKTtTdGF0ZS5wcm90b3R5cGUuX19pbml0MTAuY2FsbCh0aGlzKTtTdGF0ZS5wcm90b3R5cGUuX19pbml0MTEuY2FsbCh0aGlzKTtTdGF0ZS5wcm90b3R5cGUuX19pbml0MTIuY2FsbCh0aGlzKTsgfVxuICAvLyBVc2VkIHRvIHNpZ25pZnkgdGhlIHN0YXJ0IG9mIGEgcG90ZW50aWFsIGFycm93IGZ1bmN0aW9uXG4gIF9faW5pdCgpIHt0aGlzLnBvdGVudGlhbEFycm93QXQgPSAtMX1cblxuICAvLyBVc2VkIGJ5IEZsb3cgdG8gaGFuZGxlIGFuIGVkZ2UgY2FzZSBpbnZvbHZpbmcgZnVuY3Rpb24gdHlwZSBwYXJzaW5nLlxuICBfX2luaXQyKCkge3RoaXMubm9Bbm9uRnVuY3Rpb25UeXBlID0gZmFsc2V9XG5cbiAgLy8gVG9rZW4gc3RvcmUuXG4gIF9faW5pdDMoKSB7dGhpcy50b2tlbnMgPSBbXX1cblxuICAvLyBBcnJheSBvZiBhbGwgb2JzZXJ2ZWQgc2NvcGVzLCBvcmRlcmVkIGJ5IHRoZWlyIGVuZGluZyBwb3NpdGlvbi5cbiAgX19pbml0NCgpIHt0aGlzLnNjb3BlcyA9IFtdfVxuXG4gIC8vIFRoZSBjdXJyZW50IHBvc2l0aW9uIG9mIHRoZSB0b2tlbml6ZXIgaW4gdGhlIGlucHV0LlxuICBfX2luaXQ1KCkge3RoaXMucG9zID0gMH1cblxuICAvLyBJbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudCB0b2tlbi5cbiAgX19pbml0NigpIHt0aGlzLnR5cGUgPSBfdHlwZXMuVG9rZW5UeXBlLmVvZn1cbiAgX19pbml0NygpIHt0aGlzLmNvbnRleHR1YWxLZXl3b3JkID0gX2tleXdvcmRzLkNvbnRleHR1YWxLZXl3b3JkLk5PTkV9XG4gIF9faW5pdDgoKSB7dGhpcy5zdGFydCA9IDB9XG4gIF9faW5pdDkoKSB7dGhpcy5lbmQgPSAwfVxuXG4gIF9faW5pdDEwKCkge3RoaXMuaXNUeXBlID0gZmFsc2V9XG4gIF9faW5pdDExKCkge3RoaXMuc2NvcGVEZXB0aCA9IDB9XG5cbiAgLyoqXG4gICAqIElmIHRoZSBwYXJzZXIgaXMgaW4gYW4gZXJyb3Igc3RhdGUsIHRoZW4gdGhlIHRva2VuIGlzIGFsd2F5cyB0dC5lb2YgYW5kIGFsbCBmdW5jdGlvbnMgY2FuXG4gICAqIGtlZXAgZXhlY3V0aW5nIGJ1dCBzaG91bGQgYmUgd3JpdHRlbiBzbyB0aGV5IGRvbid0IGdldCBpbnRvIGFuIGluZmluaXRlIGxvb3AgaW4gdGhpcyBzaXR1YXRpb24uXG4gICAqXG4gICAqIFRoaXMgYXBwcm9hY2gsIGNvbWJpbmVkIHdpdGggdGhlIGFiaWxpdHkgdG8gc25hcHNob3QgYW5kIHJlc3RvcmUgc3RhdGUsIGFsbG93cyB1cyB0byBpbXBsZW1lbnRcbiAgICogYmFja3RyYWNraW5nIHdpdGhvdXQgZXhjZXB0aW9ucyBhbmQgd2l0aG91dCBuZWVkaW5nIHRvIGV4cGxpY2l0bHkgcHJvcGFnYXRlIGVycm9yIHN0YXRlc1xuICAgKiBldmVyeXdoZXJlLlxuICAgKi9cbiAgX19pbml0MTIoKSB7dGhpcy5lcnJvciA9IG51bGx9XG5cbiAgc25hcHNob3QoKSB7XG4gICAgcmV0dXJuIG5ldyBTdGF0ZVNuYXBzaG90KFxuICAgICAgdGhpcy5wb3RlbnRpYWxBcnJvd0F0LFxuICAgICAgdGhpcy5ub0Fub25GdW5jdGlvblR5cGUsXG4gICAgICB0aGlzLnRva2Vucy5sZW5ndGgsXG4gICAgICB0aGlzLnNjb3Blcy5sZW5ndGgsXG4gICAgICB0aGlzLnBvcyxcbiAgICAgIHRoaXMudHlwZSxcbiAgICAgIHRoaXMuY29udGV4dHVhbEtleXdvcmQsXG4gICAgICB0aGlzLnN0YXJ0LFxuICAgICAgdGhpcy5lbmQsXG4gICAgICB0aGlzLmlzVHlwZSxcbiAgICAgIHRoaXMuc2NvcGVEZXB0aCxcbiAgICAgIHRoaXMuZXJyb3IsXG4gICAgKTtcbiAgfVxuXG4gIHJlc3RvcmVGcm9tU25hcHNob3Qoc25hcHNob3QpIHtcbiAgICB0aGlzLnBvdGVudGlhbEFycm93QXQgPSBzbmFwc2hvdC5wb3RlbnRpYWxBcnJvd0F0O1xuICAgIHRoaXMubm9Bbm9uRnVuY3Rpb25UeXBlID0gc25hcHNob3Qubm9Bbm9uRnVuY3Rpb25UeXBlO1xuICAgIHRoaXMudG9rZW5zLmxlbmd0aCA9IHNuYXBzaG90LnRva2Vuc0xlbmd0aDtcbiAgICB0aGlzLnNjb3Blcy5sZW5ndGggPSBzbmFwc2hvdC5zY29wZXNMZW5ndGg7XG4gICAgdGhpcy5wb3MgPSBzbmFwc2hvdC5wb3M7XG4gICAgdGhpcy50eXBlID0gc25hcHNob3QudHlwZTtcbiAgICB0aGlzLmNvbnRleHR1YWxLZXl3b3JkID0gc25hcHNob3QuY29udGV4dHVhbEtleXdvcmQ7XG4gICAgdGhpcy5zdGFydCA9IHNuYXBzaG90LnN0YXJ0O1xuICAgIHRoaXMuZW5kID0gc25hcHNob3QuZW5kO1xuICAgIHRoaXMuaXNUeXBlID0gc25hcHNob3QuaXNUeXBlO1xuICAgIHRoaXMuc2NvcGVEZXB0aCA9IHNuYXBzaG90LnNjb3BlRGVwdGg7XG4gICAgdGhpcy5lcnJvciA9IHNuYXBzaG90LmVycm9yO1xuICB9XG59IGV4cG9ydHMuZGVmYXVsdCA9IFN0YXRlO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/parser/tokenizer/state.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/parser/tokenizer/types.js":
/*!*************************************************************!*\
  !*** ./node_modules/sucrase/dist/parser/tokenizer/types.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", {value: true});// Generated file, do not edit! Run \"yarn generate\" to re-generate this file.\n/**\n * Enum of all token types, with bit fields to signify meaningful properties.\n */\nvar TokenType; (function (TokenType) {\n  // Precedence 0 means not an operator; otherwise it is a positive number up to 12.\n  const PRECEDENCE_MASK = 0xf; TokenType[TokenType[\"PRECEDENCE_MASK\"] = PRECEDENCE_MASK] = \"PRECEDENCE_MASK\";\n  const IS_KEYWORD = 1 << 4; TokenType[TokenType[\"IS_KEYWORD\"] = IS_KEYWORD] = \"IS_KEYWORD\";\n  const IS_ASSIGN = 1 << 5; TokenType[TokenType[\"IS_ASSIGN\"] = IS_ASSIGN] = \"IS_ASSIGN\";\n  const IS_RIGHT_ASSOCIATIVE = 1 << 6; TokenType[TokenType[\"IS_RIGHT_ASSOCIATIVE\"] = IS_RIGHT_ASSOCIATIVE] = \"IS_RIGHT_ASSOCIATIVE\";\n  const IS_PREFIX = 1 << 7; TokenType[TokenType[\"IS_PREFIX\"] = IS_PREFIX] = \"IS_PREFIX\";\n  const IS_POSTFIX = 1 << 8; TokenType[TokenType[\"IS_POSTFIX\"] = IS_POSTFIX] = \"IS_POSTFIX\";\n\n  const num = 0; TokenType[TokenType[\"num\"] = num] = \"num\"; // num\n  const bigint = 512; TokenType[TokenType[\"bigint\"] = bigint] = \"bigint\"; // bigint\n  const regexp = 1024; TokenType[TokenType[\"regexp\"] = regexp] = \"regexp\"; // regexp\n  const string = 1536; TokenType[TokenType[\"string\"] = string] = \"string\"; // string\n  const name = 2048; TokenType[TokenType[\"name\"] = name] = \"name\"; // name\n  const eof = 2560; TokenType[TokenType[\"eof\"] = eof] = \"eof\"; // eof\n  const bracketL = 3072; TokenType[TokenType[\"bracketL\"] = bracketL] = \"bracketL\"; // [\n  const bracketR = 3584; TokenType[TokenType[\"bracketR\"] = bracketR] = \"bracketR\"; // ]\n  const braceL = 4096; TokenType[TokenType[\"braceL\"] = braceL] = \"braceL\"; // {\n  const braceBarL = 4608; TokenType[TokenType[\"braceBarL\"] = braceBarL] = \"braceBarL\"; // {|\n  const braceR = 5120; TokenType[TokenType[\"braceR\"] = braceR] = \"braceR\"; // }\n  const braceBarR = 5632; TokenType[TokenType[\"braceBarR\"] = braceBarR] = \"braceBarR\"; // |}\n  const parenL = 6144; TokenType[TokenType[\"parenL\"] = parenL] = \"parenL\"; // (\n  const parenR = 6656; TokenType[TokenType[\"parenR\"] = parenR] = \"parenR\"; // )\n  const comma = 7168; TokenType[TokenType[\"comma\"] = comma] = \"comma\"; // ,\n  const semi = 7680; TokenType[TokenType[\"semi\"] = semi] = \"semi\"; // ;\n  const colon = 8192; TokenType[TokenType[\"colon\"] = colon] = \"colon\"; // :\n  const doubleColon = 8704; TokenType[TokenType[\"doubleColon\"] = doubleColon] = \"doubleColon\"; // ::\n  const dot = 9216; TokenType[TokenType[\"dot\"] = dot] = \"dot\"; // .\n  const question = 9728; TokenType[TokenType[\"question\"] = question] = \"question\"; // ?\n  const questionDot = 10240; TokenType[TokenType[\"questionDot\"] = questionDot] = \"questionDot\"; // ?.\n  const arrow = 10752; TokenType[TokenType[\"arrow\"] = arrow] = \"arrow\"; // =>\n  const template = 11264; TokenType[TokenType[\"template\"] = template] = \"template\"; // template\n  const ellipsis = 11776; TokenType[TokenType[\"ellipsis\"] = ellipsis] = \"ellipsis\"; // ...\n  const backQuote = 12288; TokenType[TokenType[\"backQuote\"] = backQuote] = \"backQuote\"; // `\n  const dollarBraceL = 12800; TokenType[TokenType[\"dollarBraceL\"] = dollarBraceL] = \"dollarBraceL\"; // ${\n  const at = 13312; TokenType[TokenType[\"at\"] = at] = \"at\"; // @\n  const hash = 13824; TokenType[TokenType[\"hash\"] = hash] = \"hash\"; // #\n  const eq = 14368; TokenType[TokenType[\"eq\"] = eq] = \"eq\"; // = isAssign\n  const assign = 14880; TokenType[TokenType[\"assign\"] = assign] = \"assign\"; // _= isAssign\n  const preIncDec = 15744; TokenType[TokenType[\"preIncDec\"] = preIncDec] = \"preIncDec\"; // ++/-- prefix postfix\n  const postIncDec = 16256; TokenType[TokenType[\"postIncDec\"] = postIncDec] = \"postIncDec\"; // ++/-- prefix postfix\n  const bang = 16512; TokenType[TokenType[\"bang\"] = bang] = \"bang\"; // ! prefix\n  const tilde = 17024; TokenType[TokenType[\"tilde\"] = tilde] = \"tilde\"; // ~ prefix\n  const pipeline = 17409; TokenType[TokenType[\"pipeline\"] = pipeline] = \"pipeline\"; // |> prec:1\n  const nullishCoalescing = 17922; TokenType[TokenType[\"nullishCoalescing\"] = nullishCoalescing] = \"nullishCoalescing\"; // ?? prec:2\n  const logicalOR = 18434; TokenType[TokenType[\"logicalOR\"] = logicalOR] = \"logicalOR\"; // || prec:2\n  const logicalAND = 18947; TokenType[TokenType[\"logicalAND\"] = logicalAND] = \"logicalAND\"; // && prec:3\n  const bitwiseOR = 19460; TokenType[TokenType[\"bitwiseOR\"] = bitwiseOR] = \"bitwiseOR\"; // | prec:4\n  const bitwiseXOR = 19973; TokenType[TokenType[\"bitwiseXOR\"] = bitwiseXOR] = \"bitwiseXOR\"; // ^ prec:5\n  const bitwiseAND = 20486; TokenType[TokenType[\"bitwiseAND\"] = bitwiseAND] = \"bitwiseAND\"; // & prec:6\n  const equality = 20999; TokenType[TokenType[\"equality\"] = equality] = \"equality\"; // ==/!= prec:7\n  const lessThan = 21512; TokenType[TokenType[\"lessThan\"] = lessThan] = \"lessThan\"; // < prec:8\n  const greaterThan = 22024; TokenType[TokenType[\"greaterThan\"] = greaterThan] = \"greaterThan\"; // > prec:8\n  const relationalOrEqual = 22536; TokenType[TokenType[\"relationalOrEqual\"] = relationalOrEqual] = \"relationalOrEqual\"; // <=/>= prec:8\n  const bitShift = 23049; TokenType[TokenType[\"bitShift\"] = bitShift] = \"bitShift\"; // <</>> prec:9\n  const plus = 23690; TokenType[TokenType[\"plus\"] = plus] = \"plus\"; // + prec:10 prefix\n  const minus = 24202; TokenType[TokenType[\"minus\"] = minus] = \"minus\"; // - prec:10 prefix\n  const modulo = 24587; TokenType[TokenType[\"modulo\"] = modulo] = \"modulo\"; // % prec:11\n  const star = 25099; TokenType[TokenType[\"star\"] = star] = \"star\"; // * prec:11\n  const slash = 25611; TokenType[TokenType[\"slash\"] = slash] = \"slash\"; // / prec:11\n  const exponent = 26188; TokenType[TokenType[\"exponent\"] = exponent] = \"exponent\"; // ** prec:12 rightAssociative\n  const jsxName = 26624; TokenType[TokenType[\"jsxName\"] = jsxName] = \"jsxName\"; // jsxName\n  const jsxText = 27136; TokenType[TokenType[\"jsxText\"] = jsxText] = \"jsxText\"; // jsxText\n  const jsxTagStart = 27648; TokenType[TokenType[\"jsxTagStart\"] = jsxTagStart] = \"jsxTagStart\"; // jsxTagStart\n  const jsxTagEnd = 28160; TokenType[TokenType[\"jsxTagEnd\"] = jsxTagEnd] = \"jsxTagEnd\"; // jsxTagEnd\n  const typeParameterStart = 28672; TokenType[TokenType[\"typeParameterStart\"] = typeParameterStart] = \"typeParameterStart\"; // typeParameterStart\n  const nonNullAssertion = 29184; TokenType[TokenType[\"nonNullAssertion\"] = nonNullAssertion] = \"nonNullAssertion\"; // nonNullAssertion\n  const _break = 29712; TokenType[TokenType[\"_break\"] = _break] = \"_break\"; // break keyword\n  const _case = 30224; TokenType[TokenType[\"_case\"] = _case] = \"_case\"; // case keyword\n  const _catch = 30736; TokenType[TokenType[\"_catch\"] = _catch] = \"_catch\"; // catch keyword\n  const _continue = 31248; TokenType[TokenType[\"_continue\"] = _continue] = \"_continue\"; // continue keyword\n  const _debugger = 31760; TokenType[TokenType[\"_debugger\"] = _debugger] = \"_debugger\"; // debugger keyword\n  const _default = 32272; TokenType[TokenType[\"_default\"] = _default] = \"_default\"; // default keyword\n  const _do = 32784; TokenType[TokenType[\"_do\"] = _do] = \"_do\"; // do keyword\n  const _else = 33296; TokenType[TokenType[\"_else\"] = _else] = \"_else\"; // else keyword\n  const _finally = 33808; TokenType[TokenType[\"_finally\"] = _finally] = \"_finally\"; // finally keyword\n  const _for = 34320; TokenType[TokenType[\"_for\"] = _for] = \"_for\"; // for keyword\n  const _function = 34832; TokenType[TokenType[\"_function\"] = _function] = \"_function\"; // function keyword\n  const _if = 35344; TokenType[TokenType[\"_if\"] = _if] = \"_if\"; // if keyword\n  const _return = 35856; TokenType[TokenType[\"_return\"] = _return] = \"_return\"; // return keyword\n  const _switch = 36368; TokenType[TokenType[\"_switch\"] = _switch] = \"_switch\"; // switch keyword\n  const _throw = 37008; TokenType[TokenType[\"_throw\"] = _throw] = \"_throw\"; // throw keyword prefix\n  const _try = 37392; TokenType[TokenType[\"_try\"] = _try] = \"_try\"; // try keyword\n  const _var = 37904; TokenType[TokenType[\"_var\"] = _var] = \"_var\"; // var keyword\n  const _let = 38416; TokenType[TokenType[\"_let\"] = _let] = \"_let\"; // let keyword\n  const _const = 38928; TokenType[TokenType[\"_const\"] = _const] = \"_const\"; // const keyword\n  const _while = 39440; TokenType[TokenType[\"_while\"] = _while] = \"_while\"; // while keyword\n  const _with = 39952; TokenType[TokenType[\"_with\"] = _with] = \"_with\"; // with keyword\n  const _new = 40464; TokenType[TokenType[\"_new\"] = _new] = \"_new\"; // new keyword\n  const _this = 40976; TokenType[TokenType[\"_this\"] = _this] = \"_this\"; // this keyword\n  const _super = 41488; TokenType[TokenType[\"_super\"] = _super] = \"_super\"; // super keyword\n  const _class = 42000; TokenType[TokenType[\"_class\"] = _class] = \"_class\"; // class keyword\n  const _extends = 42512; TokenType[TokenType[\"_extends\"] = _extends] = \"_extends\"; // extends keyword\n  const _export = 43024; TokenType[TokenType[\"_export\"] = _export] = \"_export\"; // export keyword\n  const _import = 43536; TokenType[TokenType[\"_import\"] = _import] = \"_import\"; // import keyword\n  const _yield = 44048; TokenType[TokenType[\"_yield\"] = _yield] = \"_yield\"; // yield keyword\n  const _null = 44560; TokenType[TokenType[\"_null\"] = _null] = \"_null\"; // null keyword\n  const _true = 45072; TokenType[TokenType[\"_true\"] = _true] = \"_true\"; // true keyword\n  const _false = 45584; TokenType[TokenType[\"_false\"] = _false] = \"_false\"; // false keyword\n  const _in = 46104; TokenType[TokenType[\"_in\"] = _in] = \"_in\"; // in prec:8 keyword\n  const _instanceof = 46616; TokenType[TokenType[\"_instanceof\"] = _instanceof] = \"_instanceof\"; // instanceof prec:8 keyword\n  const _typeof = 47248; TokenType[TokenType[\"_typeof\"] = _typeof] = \"_typeof\"; // typeof keyword prefix\n  const _void = 47760; TokenType[TokenType[\"_void\"] = _void] = \"_void\"; // void keyword prefix\n  const _delete = 48272; TokenType[TokenType[\"_delete\"] = _delete] = \"_delete\"; // delete keyword prefix\n  const _async = 48656; TokenType[TokenType[\"_async\"] = _async] = \"_async\"; // async keyword\n  const _get = 49168; TokenType[TokenType[\"_get\"] = _get] = \"_get\"; // get keyword\n  const _set = 49680; TokenType[TokenType[\"_set\"] = _set] = \"_set\"; // set keyword\n  const _declare = 50192; TokenType[TokenType[\"_declare\"] = _declare] = \"_declare\"; // declare keyword\n  const _readonly = 50704; TokenType[TokenType[\"_readonly\"] = _readonly] = \"_readonly\"; // readonly keyword\n  const _abstract = 51216; TokenType[TokenType[\"_abstract\"] = _abstract] = \"_abstract\"; // abstract keyword\n  const _static = 51728; TokenType[TokenType[\"_static\"] = _static] = \"_static\"; // static keyword\n  const _public = 52240; TokenType[TokenType[\"_public\"] = _public] = \"_public\"; // public keyword\n  const _private = 52752; TokenType[TokenType[\"_private\"] = _private] = \"_private\"; // private keyword\n  const _protected = 53264; TokenType[TokenType[\"_protected\"] = _protected] = \"_protected\"; // protected keyword\n  const _as = 53776; TokenType[TokenType[\"_as\"] = _as] = \"_as\"; // as keyword\n  const _enum = 54288; TokenType[TokenType[\"_enum\"] = _enum] = \"_enum\"; // enum keyword\n  const _type = 54800; TokenType[TokenType[\"_type\"] = _type] = \"_type\"; // type keyword\n  const _implements = 55312; TokenType[TokenType[\"_implements\"] = _implements] = \"_implements\"; // implements keyword\n})(TokenType || (exports.TokenType = TokenType = {}));\n function formatTokenType(tokenType) {\n  switch (tokenType) {\n    case TokenType.num:\n      return \"num\";\n    case TokenType.bigint:\n      return \"bigint\";\n    case TokenType.regexp:\n      return \"regexp\";\n    case TokenType.string:\n      return \"string\";\n    case TokenType.name:\n      return \"name\";\n    case TokenType.eof:\n      return \"eof\";\n    case TokenType.bracketL:\n      return \"[\";\n    case TokenType.bracketR:\n      return \"]\";\n    case TokenType.braceL:\n      return \"{\";\n    case TokenType.braceBarL:\n      return \"{|\";\n    case TokenType.braceR:\n      return \"}\";\n    case TokenType.braceBarR:\n      return \"|}\";\n    case TokenType.parenL:\n      return \"(\";\n    case TokenType.parenR:\n      return \")\";\n    case TokenType.comma:\n      return \",\";\n    case TokenType.semi:\n      return \";\";\n    case TokenType.colon:\n      return \":\";\n    case TokenType.doubleColon:\n      return \"::\";\n    case TokenType.dot:\n      return \".\";\n    case TokenType.question:\n      return \"?\";\n    case TokenType.questionDot:\n      return \"?.\";\n    case TokenType.arrow:\n      return \"=>\";\n    case TokenType.template:\n      return \"template\";\n    case TokenType.ellipsis:\n      return \"...\";\n    case TokenType.backQuote:\n      return \"`\";\n    case TokenType.dollarBraceL:\n      return \"${\";\n    case TokenType.at:\n      return \"@\";\n    case TokenType.hash:\n      return \"#\";\n    case TokenType.eq:\n      return \"=\";\n    case TokenType.assign:\n      return \"_=\";\n    case TokenType.preIncDec:\n      return \"++/--\";\n    case TokenType.postIncDec:\n      return \"++/--\";\n    case TokenType.bang:\n      return \"!\";\n    case TokenType.tilde:\n      return \"~\";\n    case TokenType.pipeline:\n      return \"|>\";\n    case TokenType.nullishCoalescing:\n      return \"??\";\n    case TokenType.logicalOR:\n      return \"||\";\n    case TokenType.logicalAND:\n      return \"&&\";\n    case TokenType.bitwiseOR:\n      return \"|\";\n    case TokenType.bitwiseXOR:\n      return \"^\";\n    case TokenType.bitwiseAND:\n      return \"&\";\n    case TokenType.equality:\n      return \"==/!=\";\n    case TokenType.lessThan:\n      return \"<\";\n    case TokenType.greaterThan:\n      return \">\";\n    case TokenType.relationalOrEqual:\n      return \"<=/>=\";\n    case TokenType.bitShift:\n      return \"<</>>\";\n    case TokenType.plus:\n      return \"+\";\n    case TokenType.minus:\n      return \"-\";\n    case TokenType.modulo:\n      return \"%\";\n    case TokenType.star:\n      return \"*\";\n    case TokenType.slash:\n      return \"/\";\n    case TokenType.exponent:\n      return \"**\";\n    case TokenType.jsxName:\n      return \"jsxName\";\n    case TokenType.jsxText:\n      return \"jsxText\";\n    case TokenType.jsxTagStart:\n      return \"jsxTagStart\";\n    case TokenType.jsxTagEnd:\n      return \"jsxTagEnd\";\n    case TokenType.typeParameterStart:\n      return \"typeParameterStart\";\n    case TokenType.nonNullAssertion:\n      return \"nonNullAssertion\";\n    case TokenType._break:\n      return \"break\";\n    case TokenType._case:\n      return \"case\";\n    case TokenType._catch:\n      return \"catch\";\n    case TokenType._continue:\n      return \"continue\";\n    case TokenType._debugger:\n      return \"debugger\";\n    case TokenType._default:\n      return \"default\";\n    case TokenType._do:\n      return \"do\";\n    case TokenType._else:\n      return \"else\";\n    case TokenType._finally:\n      return \"finally\";\n    case TokenType._for:\n      return \"for\";\n    case TokenType._function:\n      return \"function\";\n    case TokenType._if:\n      return \"if\";\n    case TokenType._return:\n      return \"return\";\n    case TokenType._switch:\n      return \"switch\";\n    case TokenType._throw:\n      return \"throw\";\n    case TokenType._try:\n      return \"try\";\n    case TokenType._var:\n      return \"var\";\n    case TokenType._let:\n      return \"let\";\n    case TokenType._const:\n      return \"const\";\n    case TokenType._while:\n      return \"while\";\n    case TokenType._with:\n      return \"with\";\n    case TokenType._new:\n      return \"new\";\n    case TokenType._this:\n      return \"this\";\n    case TokenType._super:\n      return \"super\";\n    case TokenType._class:\n      return \"class\";\n    case TokenType._extends:\n      return \"extends\";\n    case TokenType._export:\n      return \"export\";\n    case TokenType._import:\n      return \"import\";\n    case TokenType._yield:\n      return \"yield\";\n    case TokenType._null:\n      return \"null\";\n    case TokenType._true:\n      return \"true\";\n    case TokenType._false:\n      return \"false\";\n    case TokenType._in:\n      return \"in\";\n    case TokenType._instanceof:\n      return \"instanceof\";\n    case TokenType._typeof:\n      return \"typeof\";\n    case TokenType._void:\n      return \"void\";\n    case TokenType._delete:\n      return \"delete\";\n    case TokenType._async:\n      return \"async\";\n    case TokenType._get:\n      return \"get\";\n    case TokenType._set:\n      return \"set\";\n    case TokenType._declare:\n      return \"declare\";\n    case TokenType._readonly:\n      return \"readonly\";\n    case TokenType._abstract:\n      return \"abstract\";\n    case TokenType._static:\n      return \"static\";\n    case TokenType._public:\n      return \"public\";\n    case TokenType._private:\n      return \"private\";\n    case TokenType._protected:\n      return \"protected\";\n    case TokenType._as:\n      return \"as\";\n    case TokenType._enum:\n      return \"enum\";\n    case TokenType._type:\n      return \"type\";\n    case TokenType._implements:\n      return \"implements\";\n    default:\n      return \"\";\n  }\n} exports.formatTokenType = formatTokenType;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/parser/tokenizer/types.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/parser/traverser/base.js":
/*!************************************************************!*\
  !*** ./node_modules/sucrase/dist/parser/traverser/base.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, \"__esModule\", {value: true});var _state = __webpack_require__(/*! ../tokenizer/state */ \"./node_modules/sucrase/dist/parser/tokenizer/state.js\"); var _state2 = _interopRequireDefault(_state);\nvar _charcodes = __webpack_require__(/*! ../util/charcodes */ \"./node_modules/sucrase/dist/parser/util/charcodes.js\");\n\n exports.isJSXEnabled;\n exports.isTypeScriptEnabled;\n exports.isFlowEnabled;\n exports.state;\n exports.input;\n exports.nextContextId;\n\n function getNextContextId() {\n  return exports.nextContextId++;\n} exports.getNextContextId = getNextContextId;\n\n// tslint:disable-next-line no-any\n function augmentError(error) {\n  if (\"pos\" in error) {\n    const loc = locationForIndex(error.pos);\n    error.message += ` (${loc.line}:${loc.column})`;\n    error.loc = loc;\n  }\n  return error;\n} exports.augmentError = augmentError;\n\n class Loc {\n  \n  \n  constructor(line, column) {\n    this.line = line;\n    this.column = column;\n  }\n} exports.Loc = Loc;\n\n function locationForIndex(pos) {\n  let line = 1;\n  let column = 1;\n  for (let i = 0; i < pos; i++) {\n    if (exports.input.charCodeAt(i) === _charcodes.charCodes.lineFeed) {\n      line++;\n      column = 1;\n    } else {\n      column++;\n    }\n  }\n  return new Loc(line, column);\n} exports.locationForIndex = locationForIndex;\n\n function initParser(\n  inputCode,\n  isJSXEnabledArg,\n  isTypeScriptEnabledArg,\n  isFlowEnabledArg,\n) {\n  exports.input = inputCode;\n  exports.state = new (0, _state2.default)();\n  exports.nextContextId = 1;\n  exports.isJSXEnabled = isJSXEnabledArg;\n  exports.isTypeScriptEnabled = isTypeScriptEnabledArg;\n  exports.isFlowEnabled = isFlowEnabledArg;\n} exports.initParser = initParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3BhcnNlci90cmF2ZXJzZXIvYmFzZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvcGFyc2VyL3RyYXZlcnNlci9iYXNlLmpzPzU5ZGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7IGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7dmFsdWU6IHRydWV9KTt2YXIgX3N0YXRlID0gcmVxdWlyZSgnLi4vdG9rZW5pemVyL3N0YXRlJyk7IHZhciBfc3RhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RhdGUpO1xudmFyIF9jaGFyY29kZXMgPSByZXF1aXJlKCcuLi91dGlsL2NoYXJjb2RlcycpO1xuXG4gZXhwb3J0cy5pc0pTWEVuYWJsZWQ7XG4gZXhwb3J0cy5pc1R5cGVTY3JpcHRFbmFibGVkO1xuIGV4cG9ydHMuaXNGbG93RW5hYmxlZDtcbiBleHBvcnRzLnN0YXRlO1xuIGV4cG9ydHMuaW5wdXQ7XG4gZXhwb3J0cy5uZXh0Q29udGV4dElkO1xuXG4gZnVuY3Rpb24gZ2V0TmV4dENvbnRleHRJZCgpIHtcbiAgcmV0dXJuIGV4cG9ydHMubmV4dENvbnRleHRJZCsrO1xufSBleHBvcnRzLmdldE5leHRDb250ZXh0SWQgPSBnZXROZXh0Q29udGV4dElkO1xuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmUgbm8tYW55XG4gZnVuY3Rpb24gYXVnbWVudEVycm9yKGVycm9yKSB7XG4gIGlmIChcInBvc1wiIGluIGVycm9yKSB7XG4gICAgY29uc3QgbG9jID0gbG9jYXRpb25Gb3JJbmRleChlcnJvci5wb3MpO1xuICAgIGVycm9yLm1lc3NhZ2UgKz0gYCAoJHtsb2MubGluZX06JHtsb2MuY29sdW1ufSlgO1xuICAgIGVycm9yLmxvYyA9IGxvYztcbiAgfVxuICByZXR1cm4gZXJyb3I7XG59IGV4cG9ydHMuYXVnbWVudEVycm9yID0gYXVnbWVudEVycm9yO1xuXG4gY2xhc3MgTG9jIHtcbiAgXG4gIFxuICBjb25zdHJ1Y3RvcihsaW5lLCBjb2x1bW4pIHtcbiAgICB0aGlzLmxpbmUgPSBsaW5lO1xuICAgIHRoaXMuY29sdW1uID0gY29sdW1uO1xuICB9XG59IGV4cG9ydHMuTG9jID0gTG9jO1xuXG4gZnVuY3Rpb24gbG9jYXRpb25Gb3JJbmRleChwb3MpIHtcbiAgbGV0IGxpbmUgPSAxO1xuICBsZXQgY29sdW1uID0gMTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3M7IGkrKykge1xuICAgIGlmIChleHBvcnRzLmlucHV0LmNoYXJDb2RlQXQoaSkgPT09IF9jaGFyY29kZXMuY2hhckNvZGVzLmxpbmVGZWVkKSB7XG4gICAgICBsaW5lKys7XG4gICAgICBjb2x1bW4gPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb2x1bW4rKztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ldyBMb2MobGluZSwgY29sdW1uKTtcbn0gZXhwb3J0cy5sb2NhdGlvbkZvckluZGV4ID0gbG9jYXRpb25Gb3JJbmRleDtcblxuIGZ1bmN0aW9uIGluaXRQYXJzZXIoXG4gIGlucHV0Q29kZSxcbiAgaXNKU1hFbmFibGVkQXJnLFxuICBpc1R5cGVTY3JpcHRFbmFibGVkQXJnLFxuICBpc0Zsb3dFbmFibGVkQXJnLFxuKSB7XG4gIGV4cG9ydHMuaW5wdXQgPSBpbnB1dENvZGU7XG4gIGV4cG9ydHMuc3RhdGUgPSBuZXcgKDAsIF9zdGF0ZTIuZGVmYXVsdCkoKTtcbiAgZXhwb3J0cy5uZXh0Q29udGV4dElkID0gMTtcbiAgZXhwb3J0cy5pc0pTWEVuYWJsZWQgPSBpc0pTWEVuYWJsZWRBcmc7XG4gIGV4cG9ydHMuaXNUeXBlU2NyaXB0RW5hYmxlZCA9IGlzVHlwZVNjcmlwdEVuYWJsZWRBcmc7XG4gIGV4cG9ydHMuaXNGbG93RW5hYmxlZCA9IGlzRmxvd0VuYWJsZWRBcmc7XG59IGV4cG9ydHMuaW5pdFBhcnNlciA9IGluaXRQYXJzZXI7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/parser/traverser/base.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/parser/traverser/expression.js":
/*!******************************************************************!*\
  !*** ./node_modules/sucrase/dist/parser/traverser/expression.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", {value: true});/* eslint max-len: 0 */\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\n\n\n\n\n\n\n\n\n\n\nvar _flow = __webpack_require__(/*! ../plugins/flow */ \"./node_modules/sucrase/dist/parser/plugins/flow.js\");\nvar _index = __webpack_require__(/*! ../plugins/jsx/index */ \"./node_modules/sucrase/dist/parser/plugins/jsx/index.js\");\nvar _types = __webpack_require__(/*! ../plugins/types */ \"./node_modules/sucrase/dist/parser/plugins/types.js\");\n\n\n\n\n\n\n\n\n\n\nvar _typescript = __webpack_require__(/*! ../plugins/typescript */ \"./node_modules/sucrase/dist/parser/plugins/typescript.js\");\n\n\n\n\n\n\n\n\n\n\nvar _index3 = __webpack_require__(/*! ../tokenizer/index */ \"./node_modules/sucrase/dist/parser/tokenizer/index.js\");\nvar _keywords = __webpack_require__(/*! ../tokenizer/keywords */ \"./node_modules/sucrase/dist/parser/tokenizer/keywords.js\");\nvar _state = __webpack_require__(/*! ../tokenizer/state */ \"./node_modules/sucrase/dist/parser/tokenizer/state.js\");\nvar _types3 = __webpack_require__(/*! ../tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\nvar _base = __webpack_require__(/*! ./base */ \"./node_modules/sucrase/dist/parser/traverser/base.js\");\n\n\n\n\n\n\nvar _lval = __webpack_require__(/*! ./lval */ \"./node_modules/sucrase/dist/parser/traverser/lval.js\");\n\n\n\n\n\n\nvar _statement = __webpack_require__(/*! ./statement */ \"./node_modules/sucrase/dist/parser/traverser/statement.js\");\n\n\n\n\n\n\n\nvar _util = __webpack_require__(/*! ./util */ \"./node_modules/sucrase/dist/parser/traverser/util.js\");\n\n class StopState {\n  \n  constructor(stop) {\n    this.stop = stop;\n  }\n} exports.StopState = StopState;\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function (s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n function parseExpression(noIn = false) {\n  parseMaybeAssign(noIn);\n  if (_index3.match.call(void 0, _types3.TokenType.comma)) {\n    while (_index3.eat.call(void 0, _types3.TokenType.comma)) {\n      parseMaybeAssign(noIn);\n    }\n  }\n} exports.parseExpression = parseExpression;\n\n/**\n * noIn is used when parsing a for loop so that we don't interpret a following \"in\" as the binary\n * operatior.\n * isWithinParens is used to indicate that we're parsing something that might be a comma expression\n * or might be an arrow function or might be a Flow type assertion (which requires explicit parens).\n * In these cases, we should allow : and ?: after the initial \"left\" part.\n */\n function parseMaybeAssign(noIn = false, isWithinParens = false) {\n  if (_base.isTypeScriptEnabled) {\n    return _typescript.tsParseMaybeAssign.call(void 0, noIn, isWithinParens);\n  } else if (_base.isFlowEnabled) {\n    return _flow.flowParseMaybeAssign.call(void 0, noIn, isWithinParens);\n  } else {\n    return baseParseMaybeAssign(noIn, isWithinParens);\n  }\n} exports.parseMaybeAssign = parseMaybeAssign;\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n// Returns true if the expression was an arrow function.\n function baseParseMaybeAssign(noIn, isWithinParens) {\n  if (_index3.match.call(void 0, _types3.TokenType._yield)) {\n    parseYield();\n    return false;\n  }\n\n  if (_index3.match.call(void 0, _types3.TokenType.parenL) || _index3.match.call(void 0, _types3.TokenType.name) || _index3.match.call(void 0, _types3.TokenType._yield)) {\n    _base.state.potentialArrowAt = _base.state.start;\n  }\n\n  const wasArrow = parseMaybeConditional(noIn);\n  if (isWithinParens) {\n    parseParenItem();\n  }\n  if (_base.state.type & _types3.TokenType.IS_ASSIGN) {\n    _index3.next.call(void 0, );\n    parseMaybeAssign(noIn);\n    return false;\n  }\n  return wasArrow;\n} exports.baseParseMaybeAssign = baseParseMaybeAssign;\n\n// Parse a ternary conditional (`?:`) operator.\n// Returns true if the expression was an arrow function.\nfunction parseMaybeConditional(noIn) {\n  const wasArrow = parseExprOps(noIn);\n  if (wasArrow) {\n    return true;\n  }\n  parseConditional(noIn);\n  return false;\n}\n\nfunction parseConditional(noIn) {\n  if (_base.isTypeScriptEnabled || _base.isFlowEnabled) {\n    _types.typedParseConditional.call(void 0, noIn);\n  } else {\n    baseParseConditional(noIn);\n  }\n}\n\n function baseParseConditional(noIn) {\n  if (_index3.eat.call(void 0, _types3.TokenType.question)) {\n    parseMaybeAssign();\n    _util.expect.call(void 0, _types3.TokenType.colon);\n    parseMaybeAssign(noIn);\n  }\n} exports.baseParseConditional = baseParseConditional;\n\n// Start the precedence parser.\n// Returns true if this was an arrow function\nfunction parseExprOps(noIn) {\n  const wasArrow = parseMaybeUnary();\n  if (wasArrow) {\n    return true;\n  }\n  parseExprOp(-1, noIn);\n  return false;\n}\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\nfunction parseExprOp(minPrec, noIn) {\n  if (\n    _base.isTypeScriptEnabled &&\n    (_types3.TokenType._in & _types3.TokenType.PRECEDENCE_MASK) > minPrec &&\n    !_util.hasPrecedingLineBreak.call(void 0, ) &&\n    _util.eatContextual.call(void 0, _keywords.ContextualKeyword._as)\n  ) {\n    _base.state.tokens[_base.state.tokens.length - 1].type = _types3.TokenType._as;\n    const oldIsType = _index3.pushTypeContext.call(void 0, 1);\n    _typescript.tsParseType.call(void 0, );\n    _index3.popTypeContext.call(void 0, oldIsType);\n    parseExprOp(minPrec, noIn);\n    return;\n  }\n\n  const prec = _base.state.type & _types3.TokenType.PRECEDENCE_MASK;\n  if (prec > 0 && (!noIn || !_index3.match.call(void 0, _types3.TokenType._in))) {\n    if (prec > minPrec) {\n      const op = _base.state.type;\n      _index3.next.call(void 0, );\n\n      parseMaybeUnary();\n      parseExprOp(op & _types3.TokenType.IS_RIGHT_ASSOCIATIVE ? prec - 1 : prec, noIn);\n      parseExprOp(minPrec, noIn);\n    }\n  }\n}\n\n// Parse unary operators, both prefix and postfix.\n// Returns true if this was an arrow function.\n function parseMaybeUnary() {\n  if (_base.isTypeScriptEnabled && !_base.isJSXEnabled && _index3.eat.call(void 0, _types3.TokenType.lessThan)) {\n    _typescript.tsParseTypeAssertion.call(void 0, );\n    return false;\n  }\n\n  if (_base.state.type & _types3.TokenType.IS_PREFIX) {\n    _index3.next.call(void 0, );\n    parseMaybeUnary();\n    return false;\n  }\n\n  const wasArrow = parseExprSubscripts();\n  if (wasArrow) {\n    return true;\n  }\n  while (_base.state.type & _types3.TokenType.IS_POSTFIX && !_util.canInsertSemicolon.call(void 0, )) {\n    // The tokenizer calls everything a preincrement, so make it a postincrement when\n    // we see it in that context.\n    if (_base.state.type === _types3.TokenType.preIncDec) {\n      _base.state.type = _types3.TokenType.postIncDec;\n    }\n    _index3.next.call(void 0, );\n  }\n  return false;\n} exports.parseMaybeUnary = parseMaybeUnary;\n\n// Parse call, dot, and `[]`-subscript expressions.\n// Returns true if this was an arrow function.\n function parseExprSubscripts() {\n  const startPos = _base.state.start;\n  const wasArrow = parseExprAtom();\n  if (wasArrow) {\n    return true;\n  }\n  parseSubscripts(startPos);\n  return false;\n} exports.parseExprSubscripts = parseExprSubscripts;\n\nfunction parseSubscripts(startPos, noCalls = false) {\n  if (_base.isFlowEnabled) {\n    _flow.flowParseSubscripts.call(void 0, startPos, noCalls);\n  } else {\n    baseParseSubscripts(startPos, noCalls);\n  }\n}\n\n function baseParseSubscripts(startPos, noCalls = false) {\n  const stopState = new StopState(false);\n  do {\n    parseSubscript(startPos, noCalls, stopState);\n  } while (!stopState.stop && !_base.state.error);\n} exports.baseParseSubscripts = baseParseSubscripts;\n\nfunction parseSubscript(startPos, noCalls, stopState) {\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsParseSubscript.call(void 0, startPos, noCalls, stopState);\n  } else if (_base.isFlowEnabled) {\n    _flow.flowParseSubscript.call(void 0, startPos, noCalls, stopState);\n  } else {\n    baseParseSubscript(startPos, noCalls, stopState);\n  }\n}\n\n/** Set 'state.stop = true' to indicate that we should stop parsing subscripts. */\n function baseParseSubscript(startPos, noCalls, stopState) {\n  if (!noCalls && _index3.eat.call(void 0, _types3.TokenType.doubleColon)) {\n    parseNoCallExpr();\n    stopState.stop = true;\n    parseSubscripts(startPos, noCalls);\n  } else if (_index3.match.call(void 0, _types3.TokenType.questionDot)) {\n    if (noCalls && _index3.lookaheadType.call(void 0, ) === _types3.TokenType.parenL) {\n      stopState.stop = true;\n      return;\n    }\n    _index3.next.call(void 0, );\n\n    if (_index3.eat.call(void 0, _types3.TokenType.bracketL)) {\n      parseExpression();\n      _util.expect.call(void 0, _types3.TokenType.bracketR);\n    } else if (_index3.eat.call(void 0, _types3.TokenType.parenL)) {\n      parseCallExpressionArguments();\n    } else {\n      parseIdentifier();\n    }\n  } else if (_index3.eat.call(void 0, _types3.TokenType.dot)) {\n    parseMaybePrivateName();\n  } else if (_index3.eat.call(void 0, _types3.TokenType.bracketL)) {\n    parseExpression();\n    _util.expect.call(void 0, _types3.TokenType.bracketR);\n  } else if (!noCalls && _index3.match.call(void 0, _types3.TokenType.parenL)) {\n    if (atPossibleAsync()) {\n      // We see \"async\", but it's possible it's a usage of the name \"async\". Parse as if it's a\n      // function call, and if we see an arrow later, backtrack and re-parse as a parameter list.\n      const snapshot = _base.state.snapshot();\n      const startTokenIndex = _base.state.tokens.length;\n      _index3.next.call(void 0, );\n\n      const callContextId = _base.getNextContextId.call(void 0, );\n\n      _base.state.tokens[_base.state.tokens.length - 1].contextId = callContextId;\n      parseCallExpressionArguments();\n      _base.state.tokens[_base.state.tokens.length - 1].contextId = callContextId;\n\n      if (shouldParseAsyncArrow()) {\n        // We hit an arrow, so backtrack and start again parsing function parameters.\n        _base.state.restoreFromSnapshot(snapshot);\n        stopState.stop = true;\n        _base.state.scopeDepth++;\n\n        _statement.parseFunctionParams.call(void 0, );\n        parseAsyncArrowFromCallExpression(startPos, startTokenIndex);\n      }\n    } else {\n      _index3.next.call(void 0, );\n      const callContextId = _base.getNextContextId.call(void 0, );\n      _base.state.tokens[_base.state.tokens.length - 1].contextId = callContextId;\n      parseCallExpressionArguments();\n      _base.state.tokens[_base.state.tokens.length - 1].contextId = callContextId;\n    }\n  } else if (_index3.match.call(void 0, _types3.TokenType.backQuote)) {\n    // Tagged template expression.\n    parseTemplate();\n  } else {\n    stopState.stop = true;\n  }\n} exports.baseParseSubscript = baseParseSubscript;\n\n function atPossibleAsync() {\n  // This was made less strict than the original version to avoid passing around nodes, but it\n  // should be safe to have rare false positives here.\n  return (\n    _base.state.tokens[_base.state.tokens.length - 1].contextualKeyword === _keywords.ContextualKeyword._async &&\n    !_util.canInsertSemicolon.call(void 0, )\n  );\n} exports.atPossibleAsync = atPossibleAsync;\n\n function parseCallExpressionArguments() {\n  let first = true;\n  while (!_index3.eat.call(void 0, _types3.TokenType.parenR) && !_base.state.error) {\n    if (first) {\n      first = false;\n    } else {\n      _util.expect.call(void 0, _types3.TokenType.comma);\n      if (_index3.eat.call(void 0, _types3.TokenType.parenR)) {\n        break;\n      }\n    }\n\n    parseExprListItem(false);\n  }\n} exports.parseCallExpressionArguments = parseCallExpressionArguments;\n\nfunction shouldParseAsyncArrow() {\n  return _index3.match.call(void 0, _types3.TokenType.colon) || _index3.match.call(void 0, _types3.TokenType.arrow);\n}\n\nfunction parseAsyncArrowFromCallExpression(functionStart, startTokenIndex) {\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsStartParseAsyncArrowFromCallExpression.call(void 0, );\n  } else if (_base.isFlowEnabled) {\n    _flow.flowStartParseAsyncArrowFromCallExpression.call(void 0, );\n  }\n  _util.expect.call(void 0, _types3.TokenType.arrow);\n  parseArrowExpression(startTokenIndex);\n}\n\n// Parse a no-call expression (like argument of `new` or `::` operators).\n\nfunction parseNoCallExpr() {\n  const startPos = _base.state.start;\n  parseExprAtom();\n  parseSubscripts(startPos, true);\n}\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n// Returns true if the parsed expression was an arrow function.\n function parseExprAtom() {\n  if (_index3.match.call(void 0, _types3.TokenType.jsxText)) {\n    parseLiteral();\n    return false;\n  } else if (_index3.match.call(void 0, _types3.TokenType.lessThan) && _base.isJSXEnabled) {\n    _base.state.type = _types3.TokenType.jsxTagStart;\n    _index.jsxParseElement.call(void 0, );\n    _index3.next.call(void 0, );\n    return false;\n  }\n\n  const canBeArrow = _base.state.potentialArrowAt === _base.state.start;\n  switch (_base.state.type) {\n    case _types3.TokenType.slash:\n    case _types3.TokenType.assign:\n      _index3.retokenizeSlashAsRegex.call(void 0, );\n    // Fall through.\n\n    case _types3.TokenType._super:\n    case _types3.TokenType._this:\n    case _types3.TokenType.regexp:\n    case _types3.TokenType.num:\n    case _types3.TokenType.bigint:\n    case _types3.TokenType.string:\n    case _types3.TokenType._null:\n    case _types3.TokenType._true:\n    case _types3.TokenType._false:\n      _index3.next.call(void 0, );\n      return false;\n\n    case _types3.TokenType._import:\n      if (_index3.lookaheadType.call(void 0, ) === _types3.TokenType.dot) {\n        parseImportMetaProperty();\n        return false;\n      }\n      _index3.next.call(void 0, );\n      return false;\n\n    case _types3.TokenType.name: {\n      const startTokenIndex = _base.state.tokens.length;\n      const functionStart = _base.state.start;\n      const contextualKeyword = _base.state.contextualKeyword;\n      parseIdentifier();\n      if (contextualKeyword === _keywords.ContextualKeyword._await) {\n        parseAwait();\n        return false;\n      } else if (\n        contextualKeyword === _keywords.ContextualKeyword._async &&\n        _index3.match.call(void 0, _types3.TokenType._function) &&\n        !_util.canInsertSemicolon.call(void 0, )\n      ) {\n        _index3.next.call(void 0, );\n        _statement.parseFunction.call(void 0, functionStart, false);\n        return false;\n      } else if (\n        canBeArrow &&\n        !_util.canInsertSemicolon.call(void 0, ) &&\n        contextualKeyword === _keywords.ContextualKeyword._async &&\n        _index3.match.call(void 0, _types3.TokenType.name)\n      ) {\n        _base.state.scopeDepth++;\n        _lval.parseBindingIdentifier.call(void 0, false);\n        _util.expect.call(void 0, _types3.TokenType.arrow);\n        // let foo = async bar => {};\n        parseArrowExpression(startTokenIndex);\n        return true;\n      }\n\n      if (canBeArrow && !_util.canInsertSemicolon.call(void 0, ) && _index3.match.call(void 0, _types3.TokenType.arrow)) {\n        _base.state.scopeDepth++;\n        _lval.markPriorBindingIdentifier.call(void 0, false);\n        _util.expect.call(void 0, _types3.TokenType.arrow);\n        parseArrowExpression(startTokenIndex);\n        return true;\n      }\n\n      _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _index3.IdentifierRole.Access;\n      return false;\n    }\n\n    case _types3.TokenType._do: {\n      _index3.next.call(void 0, );\n      _statement.parseBlock.call(void 0, false);\n      return false;\n    }\n\n    case _types3.TokenType.parenL: {\n      const wasArrow = parseParenAndDistinguishExpression(canBeArrow);\n      return wasArrow;\n    }\n\n    case _types3.TokenType.bracketL:\n      _index3.next.call(void 0, );\n      parseExprList(_types3.TokenType.bracketR, true);\n      return false;\n\n    case _types3.TokenType.braceL:\n      parseObj(false, false);\n      return false;\n\n    case _types3.TokenType._function:\n      parseFunctionExpression();\n      return false;\n\n    case _types3.TokenType.at:\n      _statement.parseDecorators.call(void 0, );\n    // Fall through.\n\n    case _types3.TokenType._class:\n      _statement.parseClass.call(void 0, false);\n      return false;\n\n    case _types3.TokenType._new:\n      parseNew();\n      return false;\n\n    case _types3.TokenType.backQuote:\n      parseTemplate();\n      return false;\n\n    case _types3.TokenType.doubleColon: {\n      _index3.next.call(void 0, );\n      parseNoCallExpr();\n      return false;\n    }\n\n    case _types3.TokenType.hash: {\n      // Smart pipeline topic reference.\n      _index3.next.call(void 0, );\n      return false;\n    }\n\n    default:\n      _util.unexpected.call(void 0, );\n      return false;\n  }\n} exports.parseExprAtom = parseExprAtom;\n\nfunction parseMaybePrivateName() {\n  _index3.eat.call(void 0, _types3.TokenType.hash);\n  parseIdentifier();\n}\n\nfunction parseFunctionExpression() {\n  const functionStart = _base.state.start;\n  parseIdentifier();\n  if (_index3.eat.call(void 0, _types3.TokenType.dot)) {\n    // function.sent\n    parseMetaProperty();\n  }\n  _statement.parseFunction.call(void 0, functionStart, false);\n}\n\nfunction parseMetaProperty() {\n  parseIdentifier();\n}\n\nfunction parseImportMetaProperty() {\n  parseIdentifier();\n  _util.expect.call(void 0, _types3.TokenType.dot);\n  // import.meta\n  parseMetaProperty();\n}\n\n function parseLiteral() {\n  _index3.next.call(void 0, );\n} exports.parseLiteral = parseLiteral;\n\n function parseParenExpression() {\n  _util.expect.call(void 0, _types3.TokenType.parenL);\n  parseExpression();\n  _util.expect.call(void 0, _types3.TokenType.parenR);\n} exports.parseParenExpression = parseParenExpression;\n\n// Returns true if this was an arrow expression.\nfunction parseParenAndDistinguishExpression(canBeArrow) {\n  // Assume this is a normal parenthesized expression, but if we see an arrow, we'll bail and\n  // start over as a parameter list.\n  const snapshot = _base.state.snapshot();\n\n  const startTokenIndex = _base.state.tokens.length;\n  _util.expect.call(void 0, _types3.TokenType.parenL);\n\n  let first = true;\n\n  while (!_index3.match.call(void 0, _types3.TokenType.parenR) && !_base.state.error) {\n    if (first) {\n      first = false;\n    } else {\n      _util.expect.call(void 0, _types3.TokenType.comma);\n      if (_index3.match.call(void 0, _types3.TokenType.parenR)) {\n        break;\n      }\n    }\n\n    if (_index3.match.call(void 0, _types3.TokenType.ellipsis)) {\n      _lval.parseRest.call(void 0, false /* isBlockScope */);\n      parseParenItem();\n      break;\n    } else {\n      parseMaybeAssign(false, true);\n    }\n  }\n\n  _util.expect.call(void 0, _types3.TokenType.parenR);\n\n  if (canBeArrow && shouldParseArrow()) {\n    const wasArrow = parseArrow();\n    if (wasArrow) {\n      // It was an arrow function this whole time, so start over and parse it as params so that we\n      // get proper token annotations.\n      _base.state.restoreFromSnapshot(snapshot);\n      _base.state.scopeDepth++;\n      // Don't specify a context ID because arrow functions don't need a context ID.\n      _statement.parseFunctionParams.call(void 0, );\n      parseArrow();\n      parseArrowExpression(startTokenIndex);\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction shouldParseArrow() {\n  return _index3.match.call(void 0, _types3.TokenType.colon) || !_util.canInsertSemicolon.call(void 0, );\n}\n\n// Returns whether there was an arrow token.\n function parseArrow() {\n  if (_base.isTypeScriptEnabled) {\n    return _typescript.tsParseArrow.call(void 0, );\n  } else if (_base.isFlowEnabled) {\n    return _flow.flowParseArrow.call(void 0, );\n  } else {\n    return _index3.eat.call(void 0, _types3.TokenType.arrow);\n  }\n} exports.parseArrow = parseArrow;\n\nfunction parseParenItem() {\n  if (_base.isTypeScriptEnabled || _base.isFlowEnabled) {\n    _types.typedParseParenItem.call(void 0, );\n  }\n}\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\nfunction parseNew() {\n  _util.expect.call(void 0, _types3.TokenType._new);\n  if (_index3.eat.call(void 0, _types3.TokenType.dot)) {\n    // new.target\n    parseMetaProperty();\n    return;\n  }\n  parseNoCallExpr();\n  _index3.eat.call(void 0, _types3.TokenType.questionDot);\n  parseNewArguments();\n}\n\nfunction parseNewArguments() {\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsStartParseNewArguments.call(void 0, );\n  } else if (_base.isFlowEnabled) {\n    _flow.flowStartParseNewArguments.call(void 0, );\n  }\n  if (_index3.eat.call(void 0, _types3.TokenType.parenL)) {\n    parseExprList(_types3.TokenType.parenR);\n  }\n}\n\n function parseTemplate() {\n  // Finish `, read quasi\n  _index3.nextTemplateToken.call(void 0, );\n  // Finish quasi, read ${\n  _index3.nextTemplateToken.call(void 0, );\n  while (!_index3.match.call(void 0, _types3.TokenType.backQuote) && !_base.state.error) {\n    _util.expect.call(void 0, _types3.TokenType.dollarBraceL);\n    parseExpression();\n    // Finish }, read quasi\n    _index3.nextTemplateToken.call(void 0, );\n    // Finish quasi, read either ${ or `\n    _index3.nextTemplateToken.call(void 0, );\n  }\n  _index3.next.call(void 0, );\n} exports.parseTemplate = parseTemplate;\n\n// Parse an object literal or binding pattern.\n function parseObj(isPattern, isBlockScope) {\n  // Attach a context ID to the object open and close brace and each object key.\n  const contextId = _base.getNextContextId.call(void 0, );\n  let first = true;\n\n  _index3.next.call(void 0, );\n  _base.state.tokens[_base.state.tokens.length - 1].contextId = contextId;\n\n  while (!_index3.eat.call(void 0, _types3.TokenType.braceR) && !_base.state.error) {\n    if (first) {\n      first = false;\n    } else {\n      _util.expect.call(void 0, _types3.TokenType.comma);\n      if (_index3.eat.call(void 0, _types3.TokenType.braceR)) {\n        break;\n      }\n    }\n\n    let isGenerator = false;\n    if (_index3.match.call(void 0, _types3.TokenType.ellipsis)) {\n      const previousIndex = _base.state.tokens.length;\n      _lval.parseSpread.call(void 0, );\n      if (isPattern) {\n        // Mark role when the only thing being spread over is an identifier.\n        if (_base.state.tokens.length === previousIndex + 2) {\n          _lval.markPriorBindingIdentifier.call(void 0, isBlockScope);\n        }\n        if (_index3.eat.call(void 0, _types3.TokenType.braceR)) {\n          break;\n        }\n      }\n      continue;\n    }\n\n    if (!isPattern) {\n      isGenerator = _index3.eat.call(void 0, _types3.TokenType.star);\n    }\n\n    if (!isPattern && _util.isContextual.call(void 0, _keywords.ContextualKeyword._async)) {\n      if (isGenerator) _util.unexpected.call(void 0, );\n\n      parseIdentifier();\n      if (\n        _index3.match.call(void 0, _types3.TokenType.colon) ||\n        _index3.match.call(void 0, _types3.TokenType.parenL) ||\n        _index3.match.call(void 0, _types3.TokenType.braceR) ||\n        _index3.match.call(void 0, _types3.TokenType.eq) ||\n        _index3.match.call(void 0, _types3.TokenType.comma)\n      ) {\n        // This is a key called \"async\" rather than an async function.\n      } else {\n        if (_index3.match.call(void 0, _types3.TokenType.star)) {\n          _index3.next.call(void 0, );\n          isGenerator = true;\n        }\n        parsePropertyName(contextId);\n      }\n    } else {\n      parsePropertyName(contextId);\n    }\n\n    parseObjPropValue(isPattern, isBlockScope, contextId);\n  }\n\n  _base.state.tokens[_base.state.tokens.length - 1].contextId = contextId;\n} exports.parseObj = parseObj;\n\nfunction isGetterOrSetterMethod(isPattern) {\n  // We go off of the next and don't bother checking if the node key is actually \"get\" or \"set\".\n  // This lets us avoid generating a node, and should only make the validation worse.\n  return (\n    !isPattern &&\n    (_index3.match.call(void 0, _types3.TokenType.string) || // get \"string\"() {}\n    _index3.match.call(void 0, _types3.TokenType.num) || // get 1() {}\n    _index3.match.call(void 0, _types3.TokenType.bracketL) || // get [\"string\"]() {}\n    _index3.match.call(void 0, _types3.TokenType.name) || // get foo() {}\n      !!(_base.state.type & _types3.TokenType.IS_KEYWORD)) // get debugger() {}\n  );\n}\n\n// Returns true if this was a method.\nfunction parseObjectMethod(isPattern, objectContextId) {\n  // We don't need to worry about modifiers because object methods can't have optional bodies, so\n  // the start will never be used.\n  const functionStart = _base.state.start;\n  if (_index3.match.call(void 0, _types3.TokenType.parenL)) {\n    if (isPattern) _util.unexpected.call(void 0, );\n    parseMethod(functionStart, /* isConstructor */ false);\n    return true;\n  }\n\n  if (isGetterOrSetterMethod(isPattern)) {\n    parsePropertyName(objectContextId);\n    parseMethod(functionStart, /* isConstructor */ false);\n    return true;\n  }\n  return false;\n}\n\nfunction parseObjectProperty(isPattern, isBlockScope) {\n  if (_index3.eat.call(void 0, _types3.TokenType.colon)) {\n    if (isPattern) {\n      _lval.parseMaybeDefault.call(void 0, isBlockScope);\n    } else {\n      parseMaybeAssign(false);\n    }\n    return;\n  }\n\n  // Since there's no colon, we assume this is an object shorthand.\n\n  // If we're in a destructuring, we've now discovered that the key was actually an assignee, so\n  // we need to tag it as a declaration with the appropriate scope. Otherwise, we might need to\n  // transform it on access, so mark it as a normal object shorthand.\n  if (isPattern) {\n    _base.state.tokens[_base.state.tokens.length - 1].identifierRole = isBlockScope\n      ? _index3.IdentifierRole.ObjectShorthandBlockScopedDeclaration\n      : _index3.IdentifierRole.ObjectShorthandFunctionScopedDeclaration;\n  } else {\n    _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _index3.IdentifierRole.ObjectShorthand;\n  }\n\n  // Regardless of whether we know this to be a pattern or if we're in an ambiguous context, allow\n  // parsing as if there's a default value.\n  _lval.parseMaybeDefault.call(void 0, isBlockScope, true);\n}\n\nfunction parseObjPropValue(\n  isPattern,\n  isBlockScope,\n  objectContextId,\n) {\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsStartParseObjPropValue.call(void 0, );\n  } else if (_base.isFlowEnabled) {\n    _flow.flowStartParseObjPropValue.call(void 0, );\n  }\n  const wasMethod = parseObjectMethod(isPattern, objectContextId);\n  if (!wasMethod) {\n    parseObjectProperty(isPattern, isBlockScope);\n  }\n}\n\n function parsePropertyName(objectContextId) {\n  if (_base.isFlowEnabled) {\n    _flow.flowParseVariance.call(void 0, );\n  }\n  if (_index3.eat.call(void 0, _types3.TokenType.bracketL)) {\n    _base.state.tokens[_base.state.tokens.length - 1].contextId = objectContextId;\n    parseMaybeAssign();\n    _util.expect.call(void 0, _types3.TokenType.bracketR);\n    _base.state.tokens[_base.state.tokens.length - 1].contextId = objectContextId;\n  } else {\n    if (_index3.match.call(void 0, _types3.TokenType.num) || _index3.match.call(void 0, _types3.TokenType.string)) {\n      parseExprAtom();\n    } else {\n      parseMaybePrivateName();\n    }\n\n    _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _index3.IdentifierRole.ObjectKey;\n    _base.state.tokens[_base.state.tokens.length - 1].contextId = objectContextId;\n  }\n} exports.parsePropertyName = parsePropertyName;\n\n// Parse object or class method.\n function parseMethod(functionStart, isConstructor) {\n  const funcContextId = _base.getNextContextId.call(void 0, );\n\n  _base.state.scopeDepth++;\n  const startTokenIndex = _base.state.tokens.length;\n  const allowModifiers = isConstructor; // For TypeScript parameter properties\n  _statement.parseFunctionParams.call(void 0, allowModifiers, funcContextId);\n  parseFunctionBodyAndFinish(functionStart, funcContextId);\n  const endTokenIndex = _base.state.tokens.length;\n  _base.state.scopes.push(new (0, _state.Scope)(startTokenIndex, endTokenIndex, true));\n  _base.state.scopeDepth--;\n} exports.parseMethod = parseMethod;\n\n// Parse arrow function expression.\n// If the parameters are provided, they will be converted to an\n// assignable list.\n function parseArrowExpression(startTokenIndex) {\n  parseFunctionBody(true);\n  const endTokenIndex = _base.state.tokens.length;\n  _base.state.scopes.push(new (0, _state.Scope)(startTokenIndex, endTokenIndex, true));\n  _base.state.scopeDepth--;\n} exports.parseArrowExpression = parseArrowExpression;\n\n function parseFunctionBodyAndFinish(functionStart, funcContextId = 0) {\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsParseFunctionBodyAndFinish.call(void 0, functionStart, funcContextId);\n  } else if (_base.isFlowEnabled) {\n    _flow.flowParseFunctionBodyAndFinish.call(void 0, funcContextId);\n  } else {\n    parseFunctionBody(false, funcContextId);\n  }\n} exports.parseFunctionBodyAndFinish = parseFunctionBodyAndFinish;\n\n function parseFunctionBody(allowExpression, funcContextId = 0) {\n  const isExpression = allowExpression && !_index3.match.call(void 0, _types3.TokenType.braceL);\n\n  if (isExpression) {\n    parseMaybeAssign();\n  } else {\n    _statement.parseBlock.call(void 0, true /* allowDirectives */, true /* isFunctionScope */, funcContextId);\n  }\n} exports.parseFunctionBody = parseFunctionBody;\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\nfunction parseExprList(close, allowEmpty = false) {\n  let first = true;\n  while (!_index3.eat.call(void 0, close) && !_base.state.error) {\n    if (first) {\n      first = false;\n    } else {\n      _util.expect.call(void 0, _types3.TokenType.comma);\n      if (_index3.eat.call(void 0, close)) break;\n    }\n    parseExprListItem(allowEmpty);\n  }\n}\n\nfunction parseExprListItem(allowEmpty) {\n  if (allowEmpty && _index3.match.call(void 0, _types3.TokenType.comma)) {\n    // Empty item; nothing more to parse for this item.\n  } else if (_index3.match.call(void 0, _types3.TokenType.ellipsis)) {\n    _lval.parseSpread.call(void 0, );\n    parseParenItem();\n  } else if (_index3.match.call(void 0, _types3.TokenType.question)) {\n    // Partial function application proposal.\n    _index3.next.call(void 0, );\n  } else {\n    parseMaybeAssign(false, true);\n  }\n}\n\n// Parse the next token as an identifier.\n function parseIdentifier() {\n  _index3.next.call(void 0, );\n  _base.state.tokens[_base.state.tokens.length - 1].type = _types3.TokenType.name;\n} exports.parseIdentifier = parseIdentifier;\n\n// Parses await expression inside async function.\nfunction parseAwait() {\n  parseMaybeUnary();\n}\n\n// Parses yield expression inside generator.\nfunction parseYield() {\n  _index3.next.call(void 0, );\n  if (!_index3.match.call(void 0, _types3.TokenType.semi) && !_util.canInsertSemicolon.call(void 0, )) {\n    _index3.eat.call(void 0, _types3.TokenType.star);\n    parseMaybeAssign();\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3BhcnNlci90cmF2ZXJzZXIvZXhwcmVzc2lvbi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvcGFyc2VyL3RyYXZlcnNlci9leHByZXNzaW9uLmpzPzlhZjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7dmFsdWU6IHRydWV9KTsvKiBlc2xpbnQgbWF4LWxlbjogMCAqL1xuXG4vLyBBIHJlY3Vyc2l2ZSBkZXNjZW50IHBhcnNlciBvcGVyYXRlcyBieSBkZWZpbmluZyBmdW5jdGlvbnMgZm9yIGFsbFxuLy8gc3ludGFjdGljIGVsZW1lbnRzLCBhbmQgcmVjdXJzaXZlbHkgY2FsbGluZyB0aG9zZSwgZWFjaCBmdW5jdGlvblxuLy8gYWR2YW5jaW5nIHRoZSBpbnB1dCBzdHJlYW0gYW5kIHJldHVybmluZyBhbiBBU1Qgbm9kZS4gUHJlY2VkZW5jZVxuLy8gb2YgY29uc3RydWN0cyAoZm9yIGV4YW1wbGUsIHRoZSBmYWN0IHRoYXQgYCF4WzFdYCBtZWFucyBgISh4WzFdKWBcbi8vIGluc3RlYWQgb2YgYCgheClbMV1gIGlzIGhhbmRsZWQgYnkgdGhlIGZhY3QgdGhhdCB0aGUgcGFyc2VyXG4vLyBmdW5jdGlvbiB0aGF0IHBhcnNlcyB1bmFyeSBwcmVmaXggb3BlcmF0b3JzIGlzIGNhbGxlZCBmaXJzdCwgYW5kXG4vLyBpbiB0dXJuIGNhbGxzIHRoZSBmdW5jdGlvbiB0aGF0IHBhcnNlcyBgW11gIHN1YnNjcmlwdHMg4oCUIHRoYXRcbi8vIHdheSwgaXQnbGwgcmVjZWl2ZSB0aGUgbm9kZSBmb3IgYHhbMV1gIGFscmVhZHkgcGFyc2VkLCBhbmQgd3JhcHNcbi8vICp0aGF0KiBpbiB0aGUgdW5hcnkgb3BlcmF0b3Igbm9kZS5cbi8vXG4vLyBBY29ybiB1c2VzIGFuIFtvcGVyYXRvciBwcmVjZWRlbmNlIHBhcnNlcl1bb3BwXSB0byBoYW5kbGUgYmluYXJ5XG4vLyBvcGVyYXRvciBwcmVjZWRlbmNlLCBiZWNhdXNlIGl0IGlzIG11Y2ggbW9yZSBjb21wYWN0IHRoYW4gdXNpbmdcbi8vIHRoZSB0ZWNobmlxdWUgb3V0bGluZWQgYWJvdmUsIHdoaWNoIHVzZXMgZGlmZmVyZW50LCBuZXN0aW5nXG4vLyBmdW5jdGlvbnMgdG8gc3BlY2lmeSBwcmVjZWRlbmNlLCBmb3IgYWxsIG9mIHRoZSB0ZW4gYmluYXJ5XG4vLyBwcmVjZWRlbmNlIGxldmVscyB0aGF0IEphdmFTY3JpcHQgZGVmaW5lcy5cbi8vXG4vLyBbb3BwXTogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9PcGVyYXRvci1wcmVjZWRlbmNlX3BhcnNlclxuXG5cblxuXG5cblxuXG5cblxuXG5cbnZhciBfZmxvdyA9IHJlcXVpcmUoJy4uL3BsdWdpbnMvZmxvdycpO1xudmFyIF9pbmRleCA9IHJlcXVpcmUoJy4uL3BsdWdpbnMvanN4L2luZGV4Jyk7XG52YXIgX3R5cGVzID0gcmVxdWlyZSgnLi4vcGx1Z2lucy90eXBlcycpO1xuXG5cblxuXG5cblxuXG5cblxuXG52YXIgX3R5cGVzY3JpcHQgPSByZXF1aXJlKCcuLi9wbHVnaW5zL3R5cGVzY3JpcHQnKTtcblxuXG5cblxuXG5cblxuXG5cblxudmFyIF9pbmRleDMgPSByZXF1aXJlKCcuLi90b2tlbml6ZXIvaW5kZXgnKTtcbnZhciBfa2V5d29yZHMgPSByZXF1aXJlKCcuLi90b2tlbml6ZXIva2V5d29yZHMnKTtcbnZhciBfc3RhdGUgPSByZXF1aXJlKCcuLi90b2tlbml6ZXIvc3RhdGUnKTtcbnZhciBfdHlwZXMzID0gcmVxdWlyZSgnLi4vdG9rZW5pemVyL3R5cGVzJyk7XG52YXIgX2Jhc2UgPSByZXF1aXJlKCcuL2Jhc2UnKTtcblxuXG5cblxuXG5cbnZhciBfbHZhbCA9IHJlcXVpcmUoJy4vbHZhbCcpO1xuXG5cblxuXG5cblxudmFyIF9zdGF0ZW1lbnQgPSByZXF1aXJlKCcuL3N0YXRlbWVudCcpO1xuXG5cblxuXG5cblxuXG52YXIgX3V0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuIGNsYXNzIFN0b3BTdGF0ZSB7XG4gIFxuICBjb25zdHJ1Y3RvcihzdG9wKSB7XG4gICAgdGhpcy5zdG9wID0gc3RvcDtcbiAgfVxufSBleHBvcnRzLlN0b3BTdGF0ZSA9IFN0b3BTdGF0ZTtcblxuLy8gIyMjIEV4cHJlc3Npb24gcGFyc2luZ1xuXG4vLyBUaGVzZSBuZXN0LCBmcm9tIHRoZSBtb3N0IGdlbmVyYWwgZXhwcmVzc2lvbiB0eXBlIGF0IHRoZSB0b3AgdG9cbi8vICdhdG9taWMnLCBub25kaXZpc2libGUgZXhwcmVzc2lvbiB0eXBlcyBhdCB0aGUgYm90dG9tLiBNb3N0IG9mXG4vLyB0aGUgZnVuY3Rpb25zIHdpbGwgc2ltcGx5IGxldCB0aGUgZnVuY3Rpb24gKHMpIGJlbG93IHRoZW0gcGFyc2UsXG4vLyBhbmQsICppZiogdGhlIHN5bnRhY3RpYyBjb25zdHJ1Y3QgdGhleSBoYW5kbGUgaXMgcHJlc2VudCwgd3JhcFxuLy8gdGhlIEFTVCBub2RlIHRoYXQgdGhlIGlubmVyIHBhcnNlciBnYXZlIHRoZW0gaW4gYW5vdGhlciBub2RlLlxuIGZ1bmN0aW9uIHBhcnNlRXhwcmVzc2lvbihub0luID0gZmFsc2UpIHtcbiAgcGFyc2VNYXliZUFzc2lnbihub0luKTtcbiAgaWYgKF9pbmRleDMubWF0Y2guY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLmNvbW1hKSkge1xuICAgIHdoaWxlIChfaW5kZXgzLmVhdC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUuY29tbWEpKSB7XG4gICAgICBwYXJzZU1heWJlQXNzaWduKG5vSW4pO1xuICAgIH1cbiAgfVxufSBleHBvcnRzLnBhcnNlRXhwcmVzc2lvbiA9IHBhcnNlRXhwcmVzc2lvbjtcblxuLyoqXG4gKiBub0luIGlzIHVzZWQgd2hlbiBwYXJzaW5nIGEgZm9yIGxvb3Agc28gdGhhdCB3ZSBkb24ndCBpbnRlcnByZXQgYSBmb2xsb3dpbmcgXCJpblwiIGFzIHRoZSBiaW5hcnlcbiAqIG9wZXJhdGlvci5cbiAqIGlzV2l0aGluUGFyZW5zIGlzIHVzZWQgdG8gaW5kaWNhdGUgdGhhdCB3ZSdyZSBwYXJzaW5nIHNvbWV0aGluZyB0aGF0IG1pZ2h0IGJlIGEgY29tbWEgZXhwcmVzc2lvblxuICogb3IgbWlnaHQgYmUgYW4gYXJyb3cgZnVuY3Rpb24gb3IgbWlnaHQgYmUgYSBGbG93IHR5cGUgYXNzZXJ0aW9uICh3aGljaCByZXF1aXJlcyBleHBsaWNpdCBwYXJlbnMpLlxuICogSW4gdGhlc2UgY2FzZXMsIHdlIHNob3VsZCBhbGxvdyA6IGFuZCA/OiBhZnRlciB0aGUgaW5pdGlhbCBcImxlZnRcIiBwYXJ0LlxuICovXG4gZnVuY3Rpb24gcGFyc2VNYXliZUFzc2lnbihub0luID0gZmFsc2UsIGlzV2l0aGluUGFyZW5zID0gZmFsc2UpIHtcbiAgaWYgKF9iYXNlLmlzVHlwZVNjcmlwdEVuYWJsZWQpIHtcbiAgICByZXR1cm4gX3R5cGVzY3JpcHQudHNQYXJzZU1heWJlQXNzaWduLmNhbGwodm9pZCAwLCBub0luLCBpc1dpdGhpblBhcmVucyk7XG4gIH0gZWxzZSBpZiAoX2Jhc2UuaXNGbG93RW5hYmxlZCkge1xuICAgIHJldHVybiBfZmxvdy5mbG93UGFyc2VNYXliZUFzc2lnbi5jYWxsKHZvaWQgMCwgbm9JbiwgaXNXaXRoaW5QYXJlbnMpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlUGFyc2VNYXliZUFzc2lnbihub0luLCBpc1dpdGhpblBhcmVucyk7XG4gIH1cbn0gZXhwb3J0cy5wYXJzZU1heWJlQXNzaWduID0gcGFyc2VNYXliZUFzc2lnbjtcblxuLy8gUGFyc2UgYW4gYXNzaWdubWVudCBleHByZXNzaW9uLiBUaGlzIGluY2x1ZGVzIGFwcGxpY2F0aW9ucyBvZlxuLy8gb3BlcmF0b3JzIGxpa2UgYCs9YC5cbi8vIFJldHVybnMgdHJ1ZSBpZiB0aGUgZXhwcmVzc2lvbiB3YXMgYW4gYXJyb3cgZnVuY3Rpb24uXG4gZnVuY3Rpb24gYmFzZVBhcnNlTWF5YmVBc3NpZ24obm9JbiwgaXNXaXRoaW5QYXJlbnMpIHtcbiAgaWYgKF9pbmRleDMubWF0Y2guY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLl95aWVsZCkpIHtcbiAgICBwYXJzZVlpZWxkKCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKF9pbmRleDMubWF0Y2guY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLnBhcmVuTCkgfHwgX2luZGV4My5tYXRjaC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUubmFtZSkgfHwgX2luZGV4My5tYXRjaC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUuX3lpZWxkKSkge1xuICAgIF9iYXNlLnN0YXRlLnBvdGVudGlhbEFycm93QXQgPSBfYmFzZS5zdGF0ZS5zdGFydDtcbiAgfVxuXG4gIGNvbnN0IHdhc0Fycm93ID0gcGFyc2VNYXliZUNvbmRpdGlvbmFsKG5vSW4pO1xuICBpZiAoaXNXaXRoaW5QYXJlbnMpIHtcbiAgICBwYXJzZVBhcmVuSXRlbSgpO1xuICB9XG4gIGlmIChfYmFzZS5zdGF0ZS50eXBlICYgX3R5cGVzMy5Ub2tlblR5cGUuSVNfQVNTSUdOKSB7XG4gICAgX2luZGV4My5uZXh0LmNhbGwodm9pZCAwLCApO1xuICAgIHBhcnNlTWF5YmVBc3NpZ24obm9Jbik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB3YXNBcnJvdztcbn0gZXhwb3J0cy5iYXNlUGFyc2VNYXliZUFzc2lnbiA9IGJhc2VQYXJzZU1heWJlQXNzaWduO1xuXG4vLyBQYXJzZSBhIHRlcm5hcnkgY29uZGl0aW9uYWwgKGA/OmApIG9wZXJhdG9yLlxuLy8gUmV0dXJucyB0cnVlIGlmIHRoZSBleHByZXNzaW9uIHdhcyBhbiBhcnJvdyBmdW5jdGlvbi5cbmZ1bmN0aW9uIHBhcnNlTWF5YmVDb25kaXRpb25hbChub0luKSB7XG4gIGNvbnN0IHdhc0Fycm93ID0gcGFyc2VFeHByT3BzKG5vSW4pO1xuICBpZiAod2FzQXJyb3cpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBwYXJzZUNvbmRpdGlvbmFsKG5vSW4pO1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHBhcnNlQ29uZGl0aW9uYWwobm9Jbikge1xuICBpZiAoX2Jhc2UuaXNUeXBlU2NyaXB0RW5hYmxlZCB8fCBfYmFzZS5pc0Zsb3dFbmFibGVkKSB7XG4gICAgX3R5cGVzLnR5cGVkUGFyc2VDb25kaXRpb25hbC5jYWxsKHZvaWQgMCwgbm9Jbik7XG4gIH0gZWxzZSB7XG4gICAgYmFzZVBhcnNlQ29uZGl0aW9uYWwobm9Jbik7XG4gIH1cbn1cblxuIGZ1bmN0aW9uIGJhc2VQYXJzZUNvbmRpdGlvbmFsKG5vSW4pIHtcbiAgaWYgKF9pbmRleDMuZWF0LmNhbGwodm9pZCAwLCBfdHlwZXMzLlRva2VuVHlwZS5xdWVzdGlvbikpIHtcbiAgICBwYXJzZU1heWJlQXNzaWduKCk7XG4gICAgX3V0aWwuZXhwZWN0LmNhbGwodm9pZCAwLCBfdHlwZXMzLlRva2VuVHlwZS5jb2xvbik7XG4gICAgcGFyc2VNYXliZUFzc2lnbihub0luKTtcbiAgfVxufSBleHBvcnRzLmJhc2VQYXJzZUNvbmRpdGlvbmFsID0gYmFzZVBhcnNlQ29uZGl0aW9uYWw7XG5cbi8vIFN0YXJ0IHRoZSBwcmVjZWRlbmNlIHBhcnNlci5cbi8vIFJldHVybnMgdHJ1ZSBpZiB0aGlzIHdhcyBhbiBhcnJvdyBmdW5jdGlvblxuZnVuY3Rpb24gcGFyc2VFeHByT3BzKG5vSW4pIHtcbiAgY29uc3Qgd2FzQXJyb3cgPSBwYXJzZU1heWJlVW5hcnkoKTtcbiAgaWYgKHdhc0Fycm93KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcGFyc2VFeHByT3AoLTEsIG5vSW4pO1xuICByZXR1cm4gZmFsc2U7XG59XG5cbi8vIFBhcnNlIGJpbmFyeSBvcGVyYXRvcnMgd2l0aCB0aGUgb3BlcmF0b3IgcHJlY2VkZW5jZSBwYXJzaW5nXG4vLyBhbGdvcml0aG0uIGBsZWZ0YCBpcyB0aGUgbGVmdC1oYW5kIHNpZGUgb2YgdGhlIG9wZXJhdG9yLlxuLy8gYG1pblByZWNgIHByb3ZpZGVzIGNvbnRleHQgdGhhdCBhbGxvd3MgdGhlIGZ1bmN0aW9uIHRvIHN0b3AgYW5kXG4vLyBkZWZlciBmdXJ0aGVyIHBhcnNlciB0byBvbmUgb2YgaXRzIGNhbGxlcnMgd2hlbiBpdCBlbmNvdW50ZXJzIGFuXG4vLyBvcGVyYXRvciB0aGF0IGhhcyBhIGxvd2VyIHByZWNlZGVuY2UgdGhhbiB0aGUgc2V0IGl0IGlzIHBhcnNpbmcuXG5mdW5jdGlvbiBwYXJzZUV4cHJPcChtaW5QcmVjLCBub0luKSB7XG4gIGlmIChcbiAgICBfYmFzZS5pc1R5cGVTY3JpcHRFbmFibGVkICYmXG4gICAgKF90eXBlczMuVG9rZW5UeXBlLl9pbiAmIF90eXBlczMuVG9rZW5UeXBlLlBSRUNFREVOQ0VfTUFTSykgPiBtaW5QcmVjICYmXG4gICAgIV91dGlsLmhhc1ByZWNlZGluZ0xpbmVCcmVhay5jYWxsKHZvaWQgMCwgKSAmJlxuICAgIF91dGlsLmVhdENvbnRleHR1YWwuY2FsbCh2b2lkIDAsIF9rZXl3b3Jkcy5Db250ZXh0dWFsS2V5d29yZC5fYXMpXG4gICkge1xuICAgIF9iYXNlLnN0YXRlLnRva2Vuc1tfYmFzZS5zdGF0ZS50b2tlbnMubGVuZ3RoIC0gMV0udHlwZSA9IF90eXBlczMuVG9rZW5UeXBlLl9hcztcbiAgICBjb25zdCBvbGRJc1R5cGUgPSBfaW5kZXgzLnB1c2hUeXBlQ29udGV4dC5jYWxsKHZvaWQgMCwgMSk7XG4gICAgX3R5cGVzY3JpcHQudHNQYXJzZVR5cGUuY2FsbCh2b2lkIDAsICk7XG4gICAgX2luZGV4My5wb3BUeXBlQ29udGV4dC5jYWxsKHZvaWQgMCwgb2xkSXNUeXBlKTtcbiAgICBwYXJzZUV4cHJPcChtaW5QcmVjLCBub0luKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBwcmVjID0gX2Jhc2Uuc3RhdGUudHlwZSAmIF90eXBlczMuVG9rZW5UeXBlLlBSRUNFREVOQ0VfTUFTSztcbiAgaWYgKHByZWMgPiAwICYmICghbm9JbiB8fCAhX2luZGV4My5tYXRjaC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUuX2luKSkpIHtcbiAgICBpZiAocHJlYyA+IG1pblByZWMpIHtcbiAgICAgIGNvbnN0IG9wID0gX2Jhc2Uuc3RhdGUudHlwZTtcbiAgICAgIF9pbmRleDMubmV4dC5jYWxsKHZvaWQgMCwgKTtcblxuICAgICAgcGFyc2VNYXliZVVuYXJ5KCk7XG4gICAgICBwYXJzZUV4cHJPcChvcCAmIF90eXBlczMuVG9rZW5UeXBlLklTX1JJR0hUX0FTU09DSUFUSVZFID8gcHJlYyAtIDEgOiBwcmVjLCBub0luKTtcbiAgICAgIHBhcnNlRXhwck9wKG1pblByZWMsIG5vSW4pO1xuICAgIH1cbiAgfVxufVxuXG4vLyBQYXJzZSB1bmFyeSBvcGVyYXRvcnMsIGJvdGggcHJlZml4IGFuZCBwb3N0Zml4LlxuLy8gUmV0dXJucyB0cnVlIGlmIHRoaXMgd2FzIGFuIGFycm93IGZ1bmN0aW9uLlxuIGZ1bmN0aW9uIHBhcnNlTWF5YmVVbmFyeSgpIHtcbiAgaWYgKF9iYXNlLmlzVHlwZVNjcmlwdEVuYWJsZWQgJiYgIV9iYXNlLmlzSlNYRW5hYmxlZCAmJiBfaW5kZXgzLmVhdC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUubGVzc1RoYW4pKSB7XG4gICAgX3R5cGVzY3JpcHQudHNQYXJzZVR5cGVBc3NlcnRpb24uY2FsbCh2b2lkIDAsICk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKF9iYXNlLnN0YXRlLnR5cGUgJiBfdHlwZXMzLlRva2VuVHlwZS5JU19QUkVGSVgpIHtcbiAgICBfaW5kZXgzLm5leHQuY2FsbCh2b2lkIDAsICk7XG4gICAgcGFyc2VNYXliZVVuYXJ5KCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3Qgd2FzQXJyb3cgPSBwYXJzZUV4cHJTdWJzY3JpcHRzKCk7XG4gIGlmICh3YXNBcnJvdykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHdoaWxlIChfYmFzZS5zdGF0ZS50eXBlICYgX3R5cGVzMy5Ub2tlblR5cGUuSVNfUE9TVEZJWCAmJiAhX3V0aWwuY2FuSW5zZXJ0U2VtaWNvbG9uLmNhbGwodm9pZCAwLCApKSB7XG4gICAgLy8gVGhlIHRva2VuaXplciBjYWxscyBldmVyeXRoaW5nIGEgcHJlaW5jcmVtZW50LCBzbyBtYWtlIGl0IGEgcG9zdGluY3JlbWVudCB3aGVuXG4gICAgLy8gd2Ugc2VlIGl0IGluIHRoYXQgY29udGV4dC5cbiAgICBpZiAoX2Jhc2Uuc3RhdGUudHlwZSA9PT0gX3R5cGVzMy5Ub2tlblR5cGUucHJlSW5jRGVjKSB7XG4gICAgICBfYmFzZS5zdGF0ZS50eXBlID0gX3R5cGVzMy5Ub2tlblR5cGUucG9zdEluY0RlYztcbiAgICB9XG4gICAgX2luZGV4My5uZXh0LmNhbGwodm9pZCAwLCApO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn0gZXhwb3J0cy5wYXJzZU1heWJlVW5hcnkgPSBwYXJzZU1heWJlVW5hcnk7XG5cbi8vIFBhcnNlIGNhbGwsIGRvdCwgYW5kIGBbXWAtc3Vic2NyaXB0IGV4cHJlc3Npb25zLlxuLy8gUmV0dXJucyB0cnVlIGlmIHRoaXMgd2FzIGFuIGFycm93IGZ1bmN0aW9uLlxuIGZ1bmN0aW9uIHBhcnNlRXhwclN1YnNjcmlwdHMoKSB7XG4gIGNvbnN0IHN0YXJ0UG9zID0gX2Jhc2Uuc3RhdGUuc3RhcnQ7XG4gIGNvbnN0IHdhc0Fycm93ID0gcGFyc2VFeHByQXRvbSgpO1xuICBpZiAod2FzQXJyb3cpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBwYXJzZVN1YnNjcmlwdHMoc3RhcnRQb3MpO1xuICByZXR1cm4gZmFsc2U7XG59IGV4cG9ydHMucGFyc2VFeHByU3Vic2NyaXB0cyA9IHBhcnNlRXhwclN1YnNjcmlwdHM7XG5cbmZ1bmN0aW9uIHBhcnNlU3Vic2NyaXB0cyhzdGFydFBvcywgbm9DYWxscyA9IGZhbHNlKSB7XG4gIGlmIChfYmFzZS5pc0Zsb3dFbmFibGVkKSB7XG4gICAgX2Zsb3cuZmxvd1BhcnNlU3Vic2NyaXB0cy5jYWxsKHZvaWQgMCwgc3RhcnRQb3MsIG5vQ2FsbHMpO1xuICB9IGVsc2Uge1xuICAgIGJhc2VQYXJzZVN1YnNjcmlwdHMoc3RhcnRQb3MsIG5vQ2FsbHMpO1xuICB9XG59XG5cbiBmdW5jdGlvbiBiYXNlUGFyc2VTdWJzY3JpcHRzKHN0YXJ0UG9zLCBub0NhbGxzID0gZmFsc2UpIHtcbiAgY29uc3Qgc3RvcFN0YXRlID0gbmV3IFN0b3BTdGF0ZShmYWxzZSk7XG4gIGRvIHtcbiAgICBwYXJzZVN1YnNjcmlwdChzdGFydFBvcywgbm9DYWxscywgc3RvcFN0YXRlKTtcbiAgfSB3aGlsZSAoIXN0b3BTdGF0ZS5zdG9wICYmICFfYmFzZS5zdGF0ZS5lcnJvcik7XG59IGV4cG9ydHMuYmFzZVBhcnNlU3Vic2NyaXB0cyA9IGJhc2VQYXJzZVN1YnNjcmlwdHM7XG5cbmZ1bmN0aW9uIHBhcnNlU3Vic2NyaXB0KHN0YXJ0UG9zLCBub0NhbGxzLCBzdG9wU3RhdGUpIHtcbiAgaWYgKF9iYXNlLmlzVHlwZVNjcmlwdEVuYWJsZWQpIHtcbiAgICBfdHlwZXNjcmlwdC50c1BhcnNlU3Vic2NyaXB0LmNhbGwodm9pZCAwLCBzdGFydFBvcywgbm9DYWxscywgc3RvcFN0YXRlKTtcbiAgfSBlbHNlIGlmIChfYmFzZS5pc0Zsb3dFbmFibGVkKSB7XG4gICAgX2Zsb3cuZmxvd1BhcnNlU3Vic2NyaXB0LmNhbGwodm9pZCAwLCBzdGFydFBvcywgbm9DYWxscywgc3RvcFN0YXRlKTtcbiAgfSBlbHNlIHtcbiAgICBiYXNlUGFyc2VTdWJzY3JpcHQoc3RhcnRQb3MsIG5vQ2FsbHMsIHN0b3BTdGF0ZSk7XG4gIH1cbn1cblxuLyoqIFNldCAnc3RhdGUuc3RvcCA9IHRydWUnIHRvIGluZGljYXRlIHRoYXQgd2Ugc2hvdWxkIHN0b3AgcGFyc2luZyBzdWJzY3JpcHRzLiAqL1xuIGZ1bmN0aW9uIGJhc2VQYXJzZVN1YnNjcmlwdChzdGFydFBvcywgbm9DYWxscywgc3RvcFN0YXRlKSB7XG4gIGlmICghbm9DYWxscyAmJiBfaW5kZXgzLmVhdC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUuZG91YmxlQ29sb24pKSB7XG4gICAgcGFyc2VOb0NhbGxFeHByKCk7XG4gICAgc3RvcFN0YXRlLnN0b3AgPSB0cnVlO1xuICAgIHBhcnNlU3Vic2NyaXB0cyhzdGFydFBvcywgbm9DYWxscyk7XG4gIH0gZWxzZSBpZiAoX2luZGV4My5tYXRjaC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUucXVlc3Rpb25Eb3QpKSB7XG4gICAgaWYgKG5vQ2FsbHMgJiYgX2luZGV4My5sb29rYWhlYWRUeXBlLmNhbGwodm9pZCAwLCApID09PSBfdHlwZXMzLlRva2VuVHlwZS5wYXJlbkwpIHtcbiAgICAgIHN0b3BTdGF0ZS5zdG9wID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgX2luZGV4My5uZXh0LmNhbGwodm9pZCAwLCApO1xuXG4gICAgaWYgKF9pbmRleDMuZWF0LmNhbGwodm9pZCAwLCBfdHlwZXMzLlRva2VuVHlwZS5icmFja2V0TCkpIHtcbiAgICAgIHBhcnNlRXhwcmVzc2lvbigpO1xuICAgICAgX3V0aWwuZXhwZWN0LmNhbGwodm9pZCAwLCBfdHlwZXMzLlRva2VuVHlwZS5icmFja2V0Uik7XG4gICAgfSBlbHNlIGlmIChfaW5kZXgzLmVhdC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUucGFyZW5MKSkge1xuICAgICAgcGFyc2VDYWxsRXhwcmVzc2lvbkFyZ3VtZW50cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJzZUlkZW50aWZpZXIoKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoX2luZGV4My5lYXQuY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLmRvdCkpIHtcbiAgICBwYXJzZU1heWJlUHJpdmF0ZU5hbWUoKTtcbiAgfSBlbHNlIGlmIChfaW5kZXgzLmVhdC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUuYnJhY2tldEwpKSB7XG4gICAgcGFyc2VFeHByZXNzaW9uKCk7XG4gICAgX3V0aWwuZXhwZWN0LmNhbGwodm9pZCAwLCBfdHlwZXMzLlRva2VuVHlwZS5icmFja2V0Uik7XG4gIH0gZWxzZSBpZiAoIW5vQ2FsbHMgJiYgX2luZGV4My5tYXRjaC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUucGFyZW5MKSkge1xuICAgIGlmIChhdFBvc3NpYmxlQXN5bmMoKSkge1xuICAgICAgLy8gV2Ugc2VlIFwiYXN5bmNcIiwgYnV0IGl0J3MgcG9zc2libGUgaXQncyBhIHVzYWdlIG9mIHRoZSBuYW1lIFwiYXN5bmNcIi4gUGFyc2UgYXMgaWYgaXQncyBhXG4gICAgICAvLyBmdW5jdGlvbiBjYWxsLCBhbmQgaWYgd2Ugc2VlIGFuIGFycm93IGxhdGVyLCBiYWNrdHJhY2sgYW5kIHJlLXBhcnNlIGFzIGEgcGFyYW1ldGVyIGxpc3QuXG4gICAgICBjb25zdCBzbmFwc2hvdCA9IF9iYXNlLnN0YXRlLnNuYXBzaG90KCk7XG4gICAgICBjb25zdCBzdGFydFRva2VuSW5kZXggPSBfYmFzZS5zdGF0ZS50b2tlbnMubGVuZ3RoO1xuICAgICAgX2luZGV4My5uZXh0LmNhbGwodm9pZCAwLCApO1xuXG4gICAgICBjb25zdCBjYWxsQ29udGV4dElkID0gX2Jhc2UuZ2V0TmV4dENvbnRleHRJZC5jYWxsKHZvaWQgMCwgKTtcblxuICAgICAgX2Jhc2Uuc3RhdGUudG9rZW5zW19iYXNlLnN0YXRlLnRva2Vucy5sZW5ndGggLSAxXS5jb250ZXh0SWQgPSBjYWxsQ29udGV4dElkO1xuICAgICAgcGFyc2VDYWxsRXhwcmVzc2lvbkFyZ3VtZW50cygpO1xuICAgICAgX2Jhc2Uuc3RhdGUudG9rZW5zW19iYXNlLnN0YXRlLnRva2Vucy5sZW5ndGggLSAxXS5jb250ZXh0SWQgPSBjYWxsQ29udGV4dElkO1xuXG4gICAgICBpZiAoc2hvdWxkUGFyc2VBc3luY0Fycm93KCkpIHtcbiAgICAgICAgLy8gV2UgaGl0IGFuIGFycm93LCBzbyBiYWNrdHJhY2sgYW5kIHN0YXJ0IGFnYWluIHBhcnNpbmcgZnVuY3Rpb24gcGFyYW1ldGVycy5cbiAgICAgICAgX2Jhc2Uuc3RhdGUucmVzdG9yZUZyb21TbmFwc2hvdChzbmFwc2hvdCk7XG4gICAgICAgIHN0b3BTdGF0ZS5zdG9wID0gdHJ1ZTtcbiAgICAgICAgX2Jhc2Uuc3RhdGUuc2NvcGVEZXB0aCsrO1xuXG4gICAgICAgIF9zdGF0ZW1lbnQucGFyc2VGdW5jdGlvblBhcmFtcy5jYWxsKHZvaWQgMCwgKTtcbiAgICAgICAgcGFyc2VBc3luY0Fycm93RnJvbUNhbGxFeHByZXNzaW9uKHN0YXJ0UG9zLCBzdGFydFRva2VuSW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBfaW5kZXgzLm5leHQuY2FsbCh2b2lkIDAsICk7XG4gICAgICBjb25zdCBjYWxsQ29udGV4dElkID0gX2Jhc2UuZ2V0TmV4dENvbnRleHRJZC5jYWxsKHZvaWQgMCwgKTtcbiAgICAgIF9iYXNlLnN0YXRlLnRva2Vuc1tfYmFzZS5zdGF0ZS50b2tlbnMubGVuZ3RoIC0gMV0uY29udGV4dElkID0gY2FsbENvbnRleHRJZDtcbiAgICAgIHBhcnNlQ2FsbEV4cHJlc3Npb25Bcmd1bWVudHMoKTtcbiAgICAgIF9iYXNlLnN0YXRlLnRva2Vuc1tfYmFzZS5zdGF0ZS50b2tlbnMubGVuZ3RoIC0gMV0uY29udGV4dElkID0gY2FsbENvbnRleHRJZDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoX2luZGV4My5tYXRjaC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUuYmFja1F1b3RlKSkge1xuICAgIC8vIFRhZ2dlZCB0ZW1wbGF0ZSBleHByZXNzaW9uLlxuICAgIHBhcnNlVGVtcGxhdGUoKTtcbiAgfSBlbHNlIHtcbiAgICBzdG9wU3RhdGUuc3RvcCA9IHRydWU7XG4gIH1cbn0gZXhwb3J0cy5iYXNlUGFyc2VTdWJzY3JpcHQgPSBiYXNlUGFyc2VTdWJzY3JpcHQ7XG5cbiBmdW5jdGlvbiBhdFBvc3NpYmxlQXN5bmMoKSB7XG4gIC8vIFRoaXMgd2FzIG1hZGUgbGVzcyBzdHJpY3QgdGhhbiB0aGUgb3JpZ2luYWwgdmVyc2lvbiB0byBhdm9pZCBwYXNzaW5nIGFyb3VuZCBub2RlcywgYnV0IGl0XG4gIC8vIHNob3VsZCBiZSBzYWZlIHRvIGhhdmUgcmFyZSBmYWxzZSBwb3NpdGl2ZXMgaGVyZS5cbiAgcmV0dXJuIChcbiAgICBfYmFzZS5zdGF0ZS50b2tlbnNbX2Jhc2Uuc3RhdGUudG9rZW5zLmxlbmd0aCAtIDFdLmNvbnRleHR1YWxLZXl3b3JkID09PSBfa2V5d29yZHMuQ29udGV4dHVhbEtleXdvcmQuX2FzeW5jICYmXG4gICAgIV91dGlsLmNhbkluc2VydFNlbWljb2xvbi5jYWxsKHZvaWQgMCwgKVxuICApO1xufSBleHBvcnRzLmF0UG9zc2libGVBc3luYyA9IGF0UG9zc2libGVBc3luYztcblxuIGZ1bmN0aW9uIHBhcnNlQ2FsbEV4cHJlc3Npb25Bcmd1bWVudHMoKSB7XG4gIGxldCBmaXJzdCA9IHRydWU7XG4gIHdoaWxlICghX2luZGV4My5lYXQuY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLnBhcmVuUikgJiYgIV9iYXNlLnN0YXRlLmVycm9yKSB7XG4gICAgaWYgKGZpcnN0KSB7XG4gICAgICBmaXJzdCA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdXRpbC5leHBlY3QuY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLmNvbW1hKTtcbiAgICAgIGlmIChfaW5kZXgzLmVhdC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUucGFyZW5SKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJzZUV4cHJMaXN0SXRlbShmYWxzZSk7XG4gIH1cbn0gZXhwb3J0cy5wYXJzZUNhbGxFeHByZXNzaW9uQXJndW1lbnRzID0gcGFyc2VDYWxsRXhwcmVzc2lvbkFyZ3VtZW50cztcblxuZnVuY3Rpb24gc2hvdWxkUGFyc2VBc3luY0Fycm93KCkge1xuICByZXR1cm4gX2luZGV4My5tYXRjaC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUuY29sb24pIHx8IF9pbmRleDMubWF0Y2guY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLmFycm93KTtcbn1cblxuZnVuY3Rpb24gcGFyc2VBc3luY0Fycm93RnJvbUNhbGxFeHByZXNzaW9uKGZ1bmN0aW9uU3RhcnQsIHN0YXJ0VG9rZW5JbmRleCkge1xuICBpZiAoX2Jhc2UuaXNUeXBlU2NyaXB0RW5hYmxlZCkge1xuICAgIF90eXBlc2NyaXB0LnRzU3RhcnRQYXJzZUFzeW5jQXJyb3dGcm9tQ2FsbEV4cHJlc3Npb24uY2FsbCh2b2lkIDAsICk7XG4gIH0gZWxzZSBpZiAoX2Jhc2UuaXNGbG93RW5hYmxlZCkge1xuICAgIF9mbG93LmZsb3dTdGFydFBhcnNlQXN5bmNBcnJvd0Zyb21DYWxsRXhwcmVzc2lvbi5jYWxsKHZvaWQgMCwgKTtcbiAgfVxuICBfdXRpbC5leHBlY3QuY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLmFycm93KTtcbiAgcGFyc2VBcnJvd0V4cHJlc3Npb24oc3RhcnRUb2tlbkluZGV4KTtcbn1cblxuLy8gUGFyc2UgYSBuby1jYWxsIGV4cHJlc3Npb24gKGxpa2UgYXJndW1lbnQgb2YgYG5ld2Agb3IgYDo6YCBvcGVyYXRvcnMpLlxuXG5mdW5jdGlvbiBwYXJzZU5vQ2FsbEV4cHIoKSB7XG4gIGNvbnN0IHN0YXJ0UG9zID0gX2Jhc2Uuc3RhdGUuc3RhcnQ7XG4gIHBhcnNlRXhwckF0b20oKTtcbiAgcGFyc2VTdWJzY3JpcHRzKHN0YXJ0UG9zLCB0cnVlKTtcbn1cblxuLy8gUGFyc2UgYW4gYXRvbWljIGV4cHJlc3Npb24g4oCUIGVpdGhlciBhIHNpbmdsZSB0b2tlbiB0aGF0IGlzIGFuXG4vLyBleHByZXNzaW9uLCBhbiBleHByZXNzaW9uIHN0YXJ0ZWQgYnkgYSBrZXl3b3JkIGxpa2UgYGZ1bmN0aW9uYCBvclxuLy8gYG5ld2AsIG9yIGFuIGV4cHJlc3Npb24gd3JhcHBlZCBpbiBwdW5jdHVhdGlvbiBsaWtlIGAoKWAsIGBbXWAsXG4vLyBvciBge31gLlxuLy8gUmV0dXJucyB0cnVlIGlmIHRoZSBwYXJzZWQgZXhwcmVzc2lvbiB3YXMgYW4gYXJyb3cgZnVuY3Rpb24uXG4gZnVuY3Rpb24gcGFyc2VFeHByQXRvbSgpIHtcbiAgaWYgKF9pbmRleDMubWF0Y2guY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLmpzeFRleHQpKSB7XG4gICAgcGFyc2VMaXRlcmFsKCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKF9pbmRleDMubWF0Y2guY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLmxlc3NUaGFuKSAmJiBfYmFzZS5pc0pTWEVuYWJsZWQpIHtcbiAgICBfYmFzZS5zdGF0ZS50eXBlID0gX3R5cGVzMy5Ub2tlblR5cGUuanN4VGFnU3RhcnQ7XG4gICAgX2luZGV4LmpzeFBhcnNlRWxlbWVudC5jYWxsKHZvaWQgMCwgKTtcbiAgICBfaW5kZXgzLm5leHQuY2FsbCh2b2lkIDAsICk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgY2FuQmVBcnJvdyA9IF9iYXNlLnN0YXRlLnBvdGVudGlhbEFycm93QXQgPT09IF9iYXNlLnN0YXRlLnN0YXJ0O1xuICBzd2l0Y2ggKF9iYXNlLnN0YXRlLnR5cGUpIHtcbiAgICBjYXNlIF90eXBlczMuVG9rZW5UeXBlLnNsYXNoOlxuICAgIGNhc2UgX3R5cGVzMy5Ub2tlblR5cGUuYXNzaWduOlxuICAgICAgX2luZGV4My5yZXRva2VuaXplU2xhc2hBc1JlZ2V4LmNhbGwodm9pZCAwLCApO1xuICAgIC8vIEZhbGwgdGhyb3VnaC5cblxuICAgIGNhc2UgX3R5cGVzMy5Ub2tlblR5cGUuX3N1cGVyOlxuICAgIGNhc2UgX3R5cGVzMy5Ub2tlblR5cGUuX3RoaXM6XG4gICAgY2FzZSBfdHlwZXMzLlRva2VuVHlwZS5yZWdleHA6XG4gICAgY2FzZSBfdHlwZXMzLlRva2VuVHlwZS5udW06XG4gICAgY2FzZSBfdHlwZXMzLlRva2VuVHlwZS5iaWdpbnQ6XG4gICAgY2FzZSBfdHlwZXMzLlRva2VuVHlwZS5zdHJpbmc6XG4gICAgY2FzZSBfdHlwZXMzLlRva2VuVHlwZS5fbnVsbDpcbiAgICBjYXNlIF90eXBlczMuVG9rZW5UeXBlLl90cnVlOlxuICAgIGNhc2UgX3R5cGVzMy5Ub2tlblR5cGUuX2ZhbHNlOlxuICAgICAgX2luZGV4My5uZXh0LmNhbGwodm9pZCAwLCApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgY2FzZSBfdHlwZXMzLlRva2VuVHlwZS5faW1wb3J0OlxuICAgICAgaWYgKF9pbmRleDMubG9va2FoZWFkVHlwZS5jYWxsKHZvaWQgMCwgKSA9PT0gX3R5cGVzMy5Ub2tlblR5cGUuZG90KSB7XG4gICAgICAgIHBhcnNlSW1wb3J0TWV0YVByb3BlcnR5KCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIF9pbmRleDMubmV4dC5jYWxsKHZvaWQgMCwgKTtcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGNhc2UgX3R5cGVzMy5Ub2tlblR5cGUubmFtZToge1xuICAgICAgY29uc3Qgc3RhcnRUb2tlbkluZGV4ID0gX2Jhc2Uuc3RhdGUudG9rZW5zLmxlbmd0aDtcbiAgICAgIGNvbnN0IGZ1bmN0aW9uU3RhcnQgPSBfYmFzZS5zdGF0ZS5zdGFydDtcbiAgICAgIGNvbnN0IGNvbnRleHR1YWxLZXl3b3JkID0gX2Jhc2Uuc3RhdGUuY29udGV4dHVhbEtleXdvcmQ7XG4gICAgICBwYXJzZUlkZW50aWZpZXIoKTtcbiAgICAgIGlmIChjb250ZXh0dWFsS2V5d29yZCA9PT0gX2tleXdvcmRzLkNvbnRleHR1YWxLZXl3b3JkLl9hd2FpdCkge1xuICAgICAgICBwYXJzZUF3YWl0KCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIGNvbnRleHR1YWxLZXl3b3JkID09PSBfa2V5d29yZHMuQ29udGV4dHVhbEtleXdvcmQuX2FzeW5jICYmXG4gICAgICAgIF9pbmRleDMubWF0Y2guY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLl9mdW5jdGlvbikgJiZcbiAgICAgICAgIV91dGlsLmNhbkluc2VydFNlbWljb2xvbi5jYWxsKHZvaWQgMCwgKVxuICAgICAgKSB7XG4gICAgICAgIF9pbmRleDMubmV4dC5jYWxsKHZvaWQgMCwgKTtcbiAgICAgICAgX3N0YXRlbWVudC5wYXJzZUZ1bmN0aW9uLmNhbGwodm9pZCAwLCBmdW5jdGlvblN0YXJ0LCBmYWxzZSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIGNhbkJlQXJyb3cgJiZcbiAgICAgICAgIV91dGlsLmNhbkluc2VydFNlbWljb2xvbi5jYWxsKHZvaWQgMCwgKSAmJlxuICAgICAgICBjb250ZXh0dWFsS2V5d29yZCA9PT0gX2tleXdvcmRzLkNvbnRleHR1YWxLZXl3b3JkLl9hc3luYyAmJlxuICAgICAgICBfaW5kZXgzLm1hdGNoLmNhbGwodm9pZCAwLCBfdHlwZXMzLlRva2VuVHlwZS5uYW1lKVxuICAgICAgKSB7XG4gICAgICAgIF9iYXNlLnN0YXRlLnNjb3BlRGVwdGgrKztcbiAgICAgICAgX2x2YWwucGFyc2VCaW5kaW5nSWRlbnRpZmllci5jYWxsKHZvaWQgMCwgZmFsc2UpO1xuICAgICAgICBfdXRpbC5leHBlY3QuY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLmFycm93KTtcbiAgICAgICAgLy8gbGV0IGZvbyA9IGFzeW5jIGJhciA9PiB7fTtcbiAgICAgICAgcGFyc2VBcnJvd0V4cHJlc3Npb24oc3RhcnRUb2tlbkluZGV4KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYW5CZUFycm93ICYmICFfdXRpbC5jYW5JbnNlcnRTZW1pY29sb24uY2FsbCh2b2lkIDAsICkgJiYgX2luZGV4My5tYXRjaC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUuYXJyb3cpKSB7XG4gICAgICAgIF9iYXNlLnN0YXRlLnNjb3BlRGVwdGgrKztcbiAgICAgICAgX2x2YWwubWFya1ByaW9yQmluZGluZ0lkZW50aWZpZXIuY2FsbCh2b2lkIDAsIGZhbHNlKTtcbiAgICAgICAgX3V0aWwuZXhwZWN0LmNhbGwodm9pZCAwLCBfdHlwZXMzLlRva2VuVHlwZS5hcnJvdyk7XG4gICAgICAgIHBhcnNlQXJyb3dFeHByZXNzaW9uKHN0YXJ0VG9rZW5JbmRleCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBfYmFzZS5zdGF0ZS50b2tlbnNbX2Jhc2Uuc3RhdGUudG9rZW5zLmxlbmd0aCAtIDFdLmlkZW50aWZpZXJSb2xlID0gX2luZGV4My5JZGVudGlmaWVyUm9sZS5BY2Nlc3M7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY2FzZSBfdHlwZXMzLlRva2VuVHlwZS5fZG86IHtcbiAgICAgIF9pbmRleDMubmV4dC5jYWxsKHZvaWQgMCwgKTtcbiAgICAgIF9zdGF0ZW1lbnQucGFyc2VCbG9jay5jYWxsKHZvaWQgMCwgZmFsc2UpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNhc2UgX3R5cGVzMy5Ub2tlblR5cGUucGFyZW5MOiB7XG4gICAgICBjb25zdCB3YXNBcnJvdyA9IHBhcnNlUGFyZW5BbmREaXN0aW5ndWlzaEV4cHJlc3Npb24oY2FuQmVBcnJvdyk7XG4gICAgICByZXR1cm4gd2FzQXJyb3c7XG4gICAgfVxuXG4gICAgY2FzZSBfdHlwZXMzLlRva2VuVHlwZS5icmFja2V0TDpcbiAgICAgIF9pbmRleDMubmV4dC5jYWxsKHZvaWQgMCwgKTtcbiAgICAgIHBhcnNlRXhwckxpc3QoX3R5cGVzMy5Ub2tlblR5cGUuYnJhY2tldFIsIHRydWUpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgY2FzZSBfdHlwZXMzLlRva2VuVHlwZS5icmFjZUw6XG4gICAgICBwYXJzZU9iaihmYWxzZSwgZmFsc2UpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgY2FzZSBfdHlwZXMzLlRva2VuVHlwZS5fZnVuY3Rpb246XG4gICAgICBwYXJzZUZ1bmN0aW9uRXhwcmVzc2lvbigpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgY2FzZSBfdHlwZXMzLlRva2VuVHlwZS5hdDpcbiAgICAgIF9zdGF0ZW1lbnQucGFyc2VEZWNvcmF0b3JzLmNhbGwodm9pZCAwLCApO1xuICAgIC8vIEZhbGwgdGhyb3VnaC5cblxuICAgIGNhc2UgX3R5cGVzMy5Ub2tlblR5cGUuX2NsYXNzOlxuICAgICAgX3N0YXRlbWVudC5wYXJzZUNsYXNzLmNhbGwodm9pZCAwLCBmYWxzZSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBjYXNlIF90eXBlczMuVG9rZW5UeXBlLl9uZXc6XG4gICAgICBwYXJzZU5ldygpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgY2FzZSBfdHlwZXMzLlRva2VuVHlwZS5iYWNrUXVvdGU6XG4gICAgICBwYXJzZVRlbXBsYXRlKCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBjYXNlIF90eXBlczMuVG9rZW5UeXBlLmRvdWJsZUNvbG9uOiB7XG4gICAgICBfaW5kZXgzLm5leHQuY2FsbCh2b2lkIDAsICk7XG4gICAgICBwYXJzZU5vQ2FsbEV4cHIoKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjYXNlIF90eXBlczMuVG9rZW5UeXBlLmhhc2g6IHtcbiAgICAgIC8vIFNtYXJ0IHBpcGVsaW5lIHRvcGljIHJlZmVyZW5jZS5cbiAgICAgIF9pbmRleDMubmV4dC5jYWxsKHZvaWQgMCwgKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBkZWZhdWx0OlxuICAgICAgX3V0aWwudW5leHBlY3RlZC5jYWxsKHZvaWQgMCwgKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufSBleHBvcnRzLnBhcnNlRXhwckF0b20gPSBwYXJzZUV4cHJBdG9tO1xuXG5mdW5jdGlvbiBwYXJzZU1heWJlUHJpdmF0ZU5hbWUoKSB7XG4gIF9pbmRleDMuZWF0LmNhbGwodm9pZCAwLCBfdHlwZXMzLlRva2VuVHlwZS5oYXNoKTtcbiAgcGFyc2VJZGVudGlmaWVyKCk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRnVuY3Rpb25FeHByZXNzaW9uKCkge1xuICBjb25zdCBmdW5jdGlvblN0YXJ0ID0gX2Jhc2Uuc3RhdGUuc3RhcnQ7XG4gIHBhcnNlSWRlbnRpZmllcigpO1xuICBpZiAoX2luZGV4My5lYXQuY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLmRvdCkpIHtcbiAgICAvLyBmdW5jdGlvbi5zZW50XG4gICAgcGFyc2VNZXRhUHJvcGVydHkoKTtcbiAgfVxuICBfc3RhdGVtZW50LnBhcnNlRnVuY3Rpb24uY2FsbCh2b2lkIDAsIGZ1bmN0aW9uU3RhcnQsIGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNZXRhUHJvcGVydHkoKSB7XG4gIHBhcnNlSWRlbnRpZmllcigpO1xufVxuXG5mdW5jdGlvbiBwYXJzZUltcG9ydE1ldGFQcm9wZXJ0eSgpIHtcbiAgcGFyc2VJZGVudGlmaWVyKCk7XG4gIF91dGlsLmV4cGVjdC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUuZG90KTtcbiAgLy8gaW1wb3J0Lm1ldGFcbiAgcGFyc2VNZXRhUHJvcGVydHkoKTtcbn1cblxuIGZ1bmN0aW9uIHBhcnNlTGl0ZXJhbCgpIHtcbiAgX2luZGV4My5uZXh0LmNhbGwodm9pZCAwLCApO1xufSBleHBvcnRzLnBhcnNlTGl0ZXJhbCA9IHBhcnNlTGl0ZXJhbDtcblxuIGZ1bmN0aW9uIHBhcnNlUGFyZW5FeHByZXNzaW9uKCkge1xuICBfdXRpbC5leHBlY3QuY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLnBhcmVuTCk7XG4gIHBhcnNlRXhwcmVzc2lvbigpO1xuICBfdXRpbC5leHBlY3QuY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLnBhcmVuUik7XG59IGV4cG9ydHMucGFyc2VQYXJlbkV4cHJlc3Npb24gPSBwYXJzZVBhcmVuRXhwcmVzc2lvbjtcblxuLy8gUmV0dXJucyB0cnVlIGlmIHRoaXMgd2FzIGFuIGFycm93IGV4cHJlc3Npb24uXG5mdW5jdGlvbiBwYXJzZVBhcmVuQW5kRGlzdGluZ3Vpc2hFeHByZXNzaW9uKGNhbkJlQXJyb3cpIHtcbiAgLy8gQXNzdW1lIHRoaXMgaXMgYSBub3JtYWwgcGFyZW50aGVzaXplZCBleHByZXNzaW9uLCBidXQgaWYgd2Ugc2VlIGFuIGFycm93LCB3ZSdsbCBiYWlsIGFuZFxuICAvLyBzdGFydCBvdmVyIGFzIGEgcGFyYW1ldGVyIGxpc3QuXG4gIGNvbnN0IHNuYXBzaG90ID0gX2Jhc2Uuc3RhdGUuc25hcHNob3QoKTtcblxuICBjb25zdCBzdGFydFRva2VuSW5kZXggPSBfYmFzZS5zdGF0ZS50b2tlbnMubGVuZ3RoO1xuICBfdXRpbC5leHBlY3QuY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLnBhcmVuTCk7XG5cbiAgbGV0IGZpcnN0ID0gdHJ1ZTtcblxuICB3aGlsZSAoIV9pbmRleDMubWF0Y2guY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLnBhcmVuUikgJiYgIV9iYXNlLnN0YXRlLmVycm9yKSB7XG4gICAgaWYgKGZpcnN0KSB7XG4gICAgICBmaXJzdCA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdXRpbC5leHBlY3QuY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLmNvbW1hKTtcbiAgICAgIGlmIChfaW5kZXgzLm1hdGNoLmNhbGwodm9pZCAwLCBfdHlwZXMzLlRva2VuVHlwZS5wYXJlblIpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChfaW5kZXgzLm1hdGNoLmNhbGwodm9pZCAwLCBfdHlwZXMzLlRva2VuVHlwZS5lbGxpcHNpcykpIHtcbiAgICAgIF9sdmFsLnBhcnNlUmVzdC5jYWxsKHZvaWQgMCwgZmFsc2UgLyogaXNCbG9ja1Njb3BlICovKTtcbiAgICAgIHBhcnNlUGFyZW5JdGVtKCk7XG4gICAgICBicmVhaztcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VNYXliZUFzc2lnbihmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgX3V0aWwuZXhwZWN0LmNhbGwodm9pZCAwLCBfdHlwZXMzLlRva2VuVHlwZS5wYXJlblIpO1xuXG4gIGlmIChjYW5CZUFycm93ICYmIHNob3VsZFBhcnNlQXJyb3coKSkge1xuICAgIGNvbnN0IHdhc0Fycm93ID0gcGFyc2VBcnJvdygpO1xuICAgIGlmICh3YXNBcnJvdykge1xuICAgICAgLy8gSXQgd2FzIGFuIGFycm93IGZ1bmN0aW9uIHRoaXMgd2hvbGUgdGltZSwgc28gc3RhcnQgb3ZlciBhbmQgcGFyc2UgaXQgYXMgcGFyYW1zIHNvIHRoYXQgd2VcbiAgICAgIC8vIGdldCBwcm9wZXIgdG9rZW4gYW5ub3RhdGlvbnMuXG4gICAgICBfYmFzZS5zdGF0ZS5yZXN0b3JlRnJvbVNuYXBzaG90KHNuYXBzaG90KTtcbiAgICAgIF9iYXNlLnN0YXRlLnNjb3BlRGVwdGgrKztcbiAgICAgIC8vIERvbid0IHNwZWNpZnkgYSBjb250ZXh0IElEIGJlY2F1c2UgYXJyb3cgZnVuY3Rpb25zIGRvbid0IG5lZWQgYSBjb250ZXh0IElELlxuICAgICAgX3N0YXRlbWVudC5wYXJzZUZ1bmN0aW9uUGFyYW1zLmNhbGwodm9pZCAwLCApO1xuICAgICAgcGFyc2VBcnJvdygpO1xuICAgICAgcGFyc2VBcnJvd0V4cHJlc3Npb24oc3RhcnRUb2tlbkluZGV4KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkUGFyc2VBcnJvdygpIHtcbiAgcmV0dXJuIF9pbmRleDMubWF0Y2guY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLmNvbG9uKSB8fCAhX3V0aWwuY2FuSW5zZXJ0U2VtaWNvbG9uLmNhbGwodm9pZCAwLCApO1xufVxuXG4vLyBSZXR1cm5zIHdoZXRoZXIgdGhlcmUgd2FzIGFuIGFycm93IHRva2VuLlxuIGZ1bmN0aW9uIHBhcnNlQXJyb3coKSB7XG4gIGlmIChfYmFzZS5pc1R5cGVTY3JpcHRFbmFibGVkKSB7XG4gICAgcmV0dXJuIF90eXBlc2NyaXB0LnRzUGFyc2VBcnJvdy5jYWxsKHZvaWQgMCwgKTtcbiAgfSBlbHNlIGlmIChfYmFzZS5pc0Zsb3dFbmFibGVkKSB7XG4gICAgcmV0dXJuIF9mbG93LmZsb3dQYXJzZUFycm93LmNhbGwodm9pZCAwLCApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBfaW5kZXgzLmVhdC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUuYXJyb3cpO1xuICB9XG59IGV4cG9ydHMucGFyc2VBcnJvdyA9IHBhcnNlQXJyb3c7XG5cbmZ1bmN0aW9uIHBhcnNlUGFyZW5JdGVtKCkge1xuICBpZiAoX2Jhc2UuaXNUeXBlU2NyaXB0RW5hYmxlZCB8fCBfYmFzZS5pc0Zsb3dFbmFibGVkKSB7XG4gICAgX3R5cGVzLnR5cGVkUGFyc2VQYXJlbkl0ZW0uY2FsbCh2b2lkIDAsICk7XG4gIH1cbn1cblxuLy8gTmV3J3MgcHJlY2VkZW5jZSBpcyBzbGlnaHRseSB0cmlja3kuIEl0IG11c3QgYWxsb3cgaXRzIGFyZ3VtZW50IHRvXG4vLyBiZSBhIGBbXWAgb3IgZG90IHN1YnNjcmlwdCBleHByZXNzaW9uLCBidXQgbm90IGEgY2FsbCDigJQgYXQgbGVhc3QsXG4vLyBub3Qgd2l0aG91dCB3cmFwcGluZyBpdCBpbiBwYXJlbnRoZXNlcy4gVGh1cywgaXQgdXNlcyB0aGUgbm9DYWxsc1xuLy8gYXJndW1lbnQgdG8gcGFyc2VTdWJzY3JpcHRzIHRvIHByZXZlbnQgaXQgZnJvbSBjb25zdW1pbmcgdGhlXG4vLyBhcmd1bWVudCBsaXN0LlxuZnVuY3Rpb24gcGFyc2VOZXcoKSB7XG4gIF91dGlsLmV4cGVjdC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUuX25ldyk7XG4gIGlmIChfaW5kZXgzLmVhdC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUuZG90KSkge1xuICAgIC8vIG5ldy50YXJnZXRcbiAgICBwYXJzZU1ldGFQcm9wZXJ0eSgpO1xuICAgIHJldHVybjtcbiAgfVxuICBwYXJzZU5vQ2FsbEV4cHIoKTtcbiAgX2luZGV4My5lYXQuY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLnF1ZXN0aW9uRG90KTtcbiAgcGFyc2VOZXdBcmd1bWVudHMoKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VOZXdBcmd1bWVudHMoKSB7XG4gIGlmIChfYmFzZS5pc1R5cGVTY3JpcHRFbmFibGVkKSB7XG4gICAgX3R5cGVzY3JpcHQudHNTdGFydFBhcnNlTmV3QXJndW1lbnRzLmNhbGwodm9pZCAwLCApO1xuICB9IGVsc2UgaWYgKF9iYXNlLmlzRmxvd0VuYWJsZWQpIHtcbiAgICBfZmxvdy5mbG93U3RhcnRQYXJzZU5ld0FyZ3VtZW50cy5jYWxsKHZvaWQgMCwgKTtcbiAgfVxuICBpZiAoX2luZGV4My5lYXQuY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLnBhcmVuTCkpIHtcbiAgICBwYXJzZUV4cHJMaXN0KF90eXBlczMuVG9rZW5UeXBlLnBhcmVuUik7XG4gIH1cbn1cblxuIGZ1bmN0aW9uIHBhcnNlVGVtcGxhdGUoKSB7XG4gIC8vIEZpbmlzaCBgLCByZWFkIHF1YXNpXG4gIF9pbmRleDMubmV4dFRlbXBsYXRlVG9rZW4uY2FsbCh2b2lkIDAsICk7XG4gIC8vIEZpbmlzaCBxdWFzaSwgcmVhZCAke1xuICBfaW5kZXgzLm5leHRUZW1wbGF0ZVRva2VuLmNhbGwodm9pZCAwLCApO1xuICB3aGlsZSAoIV9pbmRleDMubWF0Y2guY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLmJhY2tRdW90ZSkgJiYgIV9iYXNlLnN0YXRlLmVycm9yKSB7XG4gICAgX3V0aWwuZXhwZWN0LmNhbGwodm9pZCAwLCBfdHlwZXMzLlRva2VuVHlwZS5kb2xsYXJCcmFjZUwpO1xuICAgIHBhcnNlRXhwcmVzc2lvbigpO1xuICAgIC8vIEZpbmlzaCB9LCByZWFkIHF1YXNpXG4gICAgX2luZGV4My5uZXh0VGVtcGxhdGVUb2tlbi5jYWxsKHZvaWQgMCwgKTtcbiAgICAvLyBGaW5pc2ggcXVhc2ksIHJlYWQgZWl0aGVyICR7IG9yIGBcbiAgICBfaW5kZXgzLm5leHRUZW1wbGF0ZVRva2VuLmNhbGwodm9pZCAwLCApO1xuICB9XG4gIF9pbmRleDMubmV4dC5jYWxsKHZvaWQgMCwgKTtcbn0gZXhwb3J0cy5wYXJzZVRlbXBsYXRlID0gcGFyc2VUZW1wbGF0ZTtcblxuLy8gUGFyc2UgYW4gb2JqZWN0IGxpdGVyYWwgb3IgYmluZGluZyBwYXR0ZXJuLlxuIGZ1bmN0aW9uIHBhcnNlT2JqKGlzUGF0dGVybiwgaXNCbG9ja1Njb3BlKSB7XG4gIC8vIEF0dGFjaCBhIGNvbnRleHQgSUQgdG8gdGhlIG9iamVjdCBvcGVuIGFuZCBjbG9zZSBicmFjZSBhbmQgZWFjaCBvYmplY3Qga2V5LlxuICBjb25zdCBjb250ZXh0SWQgPSBfYmFzZS5nZXROZXh0Q29udGV4dElkLmNhbGwodm9pZCAwLCApO1xuICBsZXQgZmlyc3QgPSB0cnVlO1xuXG4gIF9pbmRleDMubmV4dC5jYWxsKHZvaWQgMCwgKTtcbiAgX2Jhc2Uuc3RhdGUudG9rZW5zW19iYXNlLnN0YXRlLnRva2Vucy5sZW5ndGggLSAxXS5jb250ZXh0SWQgPSBjb250ZXh0SWQ7XG5cbiAgd2hpbGUgKCFfaW5kZXgzLmVhdC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUuYnJhY2VSKSAmJiAhX2Jhc2Uuc3RhdGUuZXJyb3IpIHtcbiAgICBpZiAoZmlyc3QpIHtcbiAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIF91dGlsLmV4cGVjdC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUuY29tbWEpO1xuICAgICAgaWYgKF9pbmRleDMuZWF0LmNhbGwodm9pZCAwLCBfdHlwZXMzLlRva2VuVHlwZS5icmFjZVIpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBpc0dlbmVyYXRvciA9IGZhbHNlO1xuICAgIGlmIChfaW5kZXgzLm1hdGNoLmNhbGwodm9pZCAwLCBfdHlwZXMzLlRva2VuVHlwZS5lbGxpcHNpcykpIHtcbiAgICAgIGNvbnN0IHByZXZpb3VzSW5kZXggPSBfYmFzZS5zdGF0ZS50b2tlbnMubGVuZ3RoO1xuICAgICAgX2x2YWwucGFyc2VTcHJlYWQuY2FsbCh2b2lkIDAsICk7XG4gICAgICBpZiAoaXNQYXR0ZXJuKSB7XG4gICAgICAgIC8vIE1hcmsgcm9sZSB3aGVuIHRoZSBvbmx5IHRoaW5nIGJlaW5nIHNwcmVhZCBvdmVyIGlzIGFuIGlkZW50aWZpZXIuXG4gICAgICAgIGlmIChfYmFzZS5zdGF0ZS50b2tlbnMubGVuZ3RoID09PSBwcmV2aW91c0luZGV4ICsgMikge1xuICAgICAgICAgIF9sdmFsLm1hcmtQcmlvckJpbmRpbmdJZGVudGlmaWVyLmNhbGwodm9pZCAwLCBpc0Jsb2NrU2NvcGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfaW5kZXgzLmVhdC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUuYnJhY2VSKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoIWlzUGF0dGVybikge1xuICAgICAgaXNHZW5lcmF0b3IgPSBfaW5kZXgzLmVhdC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUuc3Rhcik7XG4gICAgfVxuXG4gICAgaWYgKCFpc1BhdHRlcm4gJiYgX3V0aWwuaXNDb250ZXh0dWFsLmNhbGwodm9pZCAwLCBfa2V5d29yZHMuQ29udGV4dHVhbEtleXdvcmQuX2FzeW5jKSkge1xuICAgICAgaWYgKGlzR2VuZXJhdG9yKSBfdXRpbC51bmV4cGVjdGVkLmNhbGwodm9pZCAwLCApO1xuXG4gICAgICBwYXJzZUlkZW50aWZpZXIoKTtcbiAgICAgIGlmIChcbiAgICAgICAgX2luZGV4My5tYXRjaC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUuY29sb24pIHx8XG4gICAgICAgIF9pbmRleDMubWF0Y2guY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLnBhcmVuTCkgfHxcbiAgICAgICAgX2luZGV4My5tYXRjaC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUuYnJhY2VSKSB8fFxuICAgICAgICBfaW5kZXgzLm1hdGNoLmNhbGwodm9pZCAwLCBfdHlwZXMzLlRva2VuVHlwZS5lcSkgfHxcbiAgICAgICAgX2luZGV4My5tYXRjaC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUuY29tbWEpXG4gICAgICApIHtcbiAgICAgICAgLy8gVGhpcyBpcyBhIGtleSBjYWxsZWQgXCJhc3luY1wiIHJhdGhlciB0aGFuIGFuIGFzeW5jIGZ1bmN0aW9uLlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKF9pbmRleDMubWF0Y2guY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLnN0YXIpKSB7XG4gICAgICAgICAgX2luZGV4My5uZXh0LmNhbGwodm9pZCAwLCApO1xuICAgICAgICAgIGlzR2VuZXJhdG9yID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBwYXJzZVByb3BlcnR5TmFtZShjb250ZXh0SWQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwYXJzZVByb3BlcnR5TmFtZShjb250ZXh0SWQpO1xuICAgIH1cblxuICAgIHBhcnNlT2JqUHJvcFZhbHVlKGlzUGF0dGVybiwgaXNCbG9ja1Njb3BlLCBjb250ZXh0SWQpO1xuICB9XG5cbiAgX2Jhc2Uuc3RhdGUudG9rZW5zW19iYXNlLnN0YXRlLnRva2Vucy5sZW5ndGggLSAxXS5jb250ZXh0SWQgPSBjb250ZXh0SWQ7XG59IGV4cG9ydHMucGFyc2VPYmogPSBwYXJzZU9iajtcblxuZnVuY3Rpb24gaXNHZXR0ZXJPclNldHRlck1ldGhvZChpc1BhdHRlcm4pIHtcbiAgLy8gV2UgZ28gb2ZmIG9mIHRoZSBuZXh0IGFuZCBkb24ndCBib3RoZXIgY2hlY2tpbmcgaWYgdGhlIG5vZGUga2V5IGlzIGFjdHVhbGx5IFwiZ2V0XCIgb3IgXCJzZXRcIi5cbiAgLy8gVGhpcyBsZXRzIHVzIGF2b2lkIGdlbmVyYXRpbmcgYSBub2RlLCBhbmQgc2hvdWxkIG9ubHkgbWFrZSB0aGUgdmFsaWRhdGlvbiB3b3JzZS5cbiAgcmV0dXJuIChcbiAgICAhaXNQYXR0ZXJuICYmXG4gICAgKF9pbmRleDMubWF0Y2guY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLnN0cmluZykgfHwgLy8gZ2V0IFwic3RyaW5nXCIoKSB7fVxuICAgIF9pbmRleDMubWF0Y2guY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLm51bSkgfHwgLy8gZ2V0IDEoKSB7fVxuICAgIF9pbmRleDMubWF0Y2guY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLmJyYWNrZXRMKSB8fCAvLyBnZXQgW1wic3RyaW5nXCJdKCkge31cbiAgICBfaW5kZXgzLm1hdGNoLmNhbGwodm9pZCAwLCBfdHlwZXMzLlRva2VuVHlwZS5uYW1lKSB8fCAvLyBnZXQgZm9vKCkge31cbiAgICAgICEhKF9iYXNlLnN0YXRlLnR5cGUgJiBfdHlwZXMzLlRva2VuVHlwZS5JU19LRVlXT1JEKSkgLy8gZ2V0IGRlYnVnZ2VyKCkge31cbiAgKTtcbn1cblxuLy8gUmV0dXJucyB0cnVlIGlmIHRoaXMgd2FzIGEgbWV0aG9kLlxuZnVuY3Rpb24gcGFyc2VPYmplY3RNZXRob2QoaXNQYXR0ZXJuLCBvYmplY3RDb250ZXh0SWQpIHtcbiAgLy8gV2UgZG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCBtb2RpZmllcnMgYmVjYXVzZSBvYmplY3QgbWV0aG9kcyBjYW4ndCBoYXZlIG9wdGlvbmFsIGJvZGllcywgc29cbiAgLy8gdGhlIHN0YXJ0IHdpbGwgbmV2ZXIgYmUgdXNlZC5cbiAgY29uc3QgZnVuY3Rpb25TdGFydCA9IF9iYXNlLnN0YXRlLnN0YXJ0O1xuICBpZiAoX2luZGV4My5tYXRjaC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUucGFyZW5MKSkge1xuICAgIGlmIChpc1BhdHRlcm4pIF91dGlsLnVuZXhwZWN0ZWQuY2FsbCh2b2lkIDAsICk7XG4gICAgcGFyc2VNZXRob2QoZnVuY3Rpb25TdGFydCwgLyogaXNDb25zdHJ1Y3RvciAqLyBmYWxzZSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoaXNHZXR0ZXJPclNldHRlck1ldGhvZChpc1BhdHRlcm4pKSB7XG4gICAgcGFyc2VQcm9wZXJ0eU5hbWUob2JqZWN0Q29udGV4dElkKTtcbiAgICBwYXJzZU1ldGhvZChmdW5jdGlvblN0YXJ0LCAvKiBpc0NvbnN0cnVjdG9yICovIGZhbHNlKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHBhcnNlT2JqZWN0UHJvcGVydHkoaXNQYXR0ZXJuLCBpc0Jsb2NrU2NvcGUpIHtcbiAgaWYgKF9pbmRleDMuZWF0LmNhbGwodm9pZCAwLCBfdHlwZXMzLlRva2VuVHlwZS5jb2xvbikpIHtcbiAgICBpZiAoaXNQYXR0ZXJuKSB7XG4gICAgICBfbHZhbC5wYXJzZU1heWJlRGVmYXVsdC5jYWxsKHZvaWQgMCwgaXNCbG9ja1Njb3BlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VNYXliZUFzc2lnbihmYWxzZSk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFNpbmNlIHRoZXJlJ3Mgbm8gY29sb24sIHdlIGFzc3VtZSB0aGlzIGlzIGFuIG9iamVjdCBzaG9ydGhhbmQuXG5cbiAgLy8gSWYgd2UncmUgaW4gYSBkZXN0cnVjdHVyaW5nLCB3ZSd2ZSBub3cgZGlzY292ZXJlZCB0aGF0IHRoZSBrZXkgd2FzIGFjdHVhbGx5IGFuIGFzc2lnbmVlLCBzb1xuICAvLyB3ZSBuZWVkIHRvIHRhZyBpdCBhcyBhIGRlY2xhcmF0aW9uIHdpdGggdGhlIGFwcHJvcHJpYXRlIHNjb3BlLiBPdGhlcndpc2UsIHdlIG1pZ2h0IG5lZWQgdG9cbiAgLy8gdHJhbnNmb3JtIGl0IG9uIGFjY2Vzcywgc28gbWFyayBpdCBhcyBhIG5vcm1hbCBvYmplY3Qgc2hvcnRoYW5kLlxuICBpZiAoaXNQYXR0ZXJuKSB7XG4gICAgX2Jhc2Uuc3RhdGUudG9rZW5zW19iYXNlLnN0YXRlLnRva2Vucy5sZW5ndGggLSAxXS5pZGVudGlmaWVyUm9sZSA9IGlzQmxvY2tTY29wZVxuICAgICAgPyBfaW5kZXgzLklkZW50aWZpZXJSb2xlLk9iamVjdFNob3J0aGFuZEJsb2NrU2NvcGVkRGVjbGFyYXRpb25cbiAgICAgIDogX2luZGV4My5JZGVudGlmaWVyUm9sZS5PYmplY3RTaG9ydGhhbmRGdW5jdGlvblNjb3BlZERlY2xhcmF0aW9uO1xuICB9IGVsc2Uge1xuICAgIF9iYXNlLnN0YXRlLnRva2Vuc1tfYmFzZS5zdGF0ZS50b2tlbnMubGVuZ3RoIC0gMV0uaWRlbnRpZmllclJvbGUgPSBfaW5kZXgzLklkZW50aWZpZXJSb2xlLk9iamVjdFNob3J0aGFuZDtcbiAgfVxuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB3ZSBrbm93IHRoaXMgdG8gYmUgYSBwYXR0ZXJuIG9yIGlmIHdlJ3JlIGluIGFuIGFtYmlndW91cyBjb250ZXh0LCBhbGxvd1xuICAvLyBwYXJzaW5nIGFzIGlmIHRoZXJlJ3MgYSBkZWZhdWx0IHZhbHVlLlxuICBfbHZhbC5wYXJzZU1heWJlRGVmYXVsdC5jYWxsKHZvaWQgMCwgaXNCbG9ja1Njb3BlLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VPYmpQcm9wVmFsdWUoXG4gIGlzUGF0dGVybixcbiAgaXNCbG9ja1Njb3BlLFxuICBvYmplY3RDb250ZXh0SWQsXG4pIHtcbiAgaWYgKF9iYXNlLmlzVHlwZVNjcmlwdEVuYWJsZWQpIHtcbiAgICBfdHlwZXNjcmlwdC50c1N0YXJ0UGFyc2VPYmpQcm9wVmFsdWUuY2FsbCh2b2lkIDAsICk7XG4gIH0gZWxzZSBpZiAoX2Jhc2UuaXNGbG93RW5hYmxlZCkge1xuICAgIF9mbG93LmZsb3dTdGFydFBhcnNlT2JqUHJvcFZhbHVlLmNhbGwodm9pZCAwLCApO1xuICB9XG4gIGNvbnN0IHdhc01ldGhvZCA9IHBhcnNlT2JqZWN0TWV0aG9kKGlzUGF0dGVybiwgb2JqZWN0Q29udGV4dElkKTtcbiAgaWYgKCF3YXNNZXRob2QpIHtcbiAgICBwYXJzZU9iamVjdFByb3BlcnR5KGlzUGF0dGVybiwgaXNCbG9ja1Njb3BlKTtcbiAgfVxufVxuXG4gZnVuY3Rpb24gcGFyc2VQcm9wZXJ0eU5hbWUob2JqZWN0Q29udGV4dElkKSB7XG4gIGlmIChfYmFzZS5pc0Zsb3dFbmFibGVkKSB7XG4gICAgX2Zsb3cuZmxvd1BhcnNlVmFyaWFuY2UuY2FsbCh2b2lkIDAsICk7XG4gIH1cbiAgaWYgKF9pbmRleDMuZWF0LmNhbGwodm9pZCAwLCBfdHlwZXMzLlRva2VuVHlwZS5icmFja2V0TCkpIHtcbiAgICBfYmFzZS5zdGF0ZS50b2tlbnNbX2Jhc2Uuc3RhdGUudG9rZW5zLmxlbmd0aCAtIDFdLmNvbnRleHRJZCA9IG9iamVjdENvbnRleHRJZDtcbiAgICBwYXJzZU1heWJlQXNzaWduKCk7XG4gICAgX3V0aWwuZXhwZWN0LmNhbGwodm9pZCAwLCBfdHlwZXMzLlRva2VuVHlwZS5icmFja2V0Uik7XG4gICAgX2Jhc2Uuc3RhdGUudG9rZW5zW19iYXNlLnN0YXRlLnRva2Vucy5sZW5ndGggLSAxXS5jb250ZXh0SWQgPSBvYmplY3RDb250ZXh0SWQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKF9pbmRleDMubWF0Y2guY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLm51bSkgfHwgX2luZGV4My5tYXRjaC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUuc3RyaW5nKSkge1xuICAgICAgcGFyc2VFeHByQXRvbSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJzZU1heWJlUHJpdmF0ZU5hbWUoKTtcbiAgICB9XG5cbiAgICBfYmFzZS5zdGF0ZS50b2tlbnNbX2Jhc2Uuc3RhdGUudG9rZW5zLmxlbmd0aCAtIDFdLmlkZW50aWZpZXJSb2xlID0gX2luZGV4My5JZGVudGlmaWVyUm9sZS5PYmplY3RLZXk7XG4gICAgX2Jhc2Uuc3RhdGUudG9rZW5zW19iYXNlLnN0YXRlLnRva2Vucy5sZW5ndGggLSAxXS5jb250ZXh0SWQgPSBvYmplY3RDb250ZXh0SWQ7XG4gIH1cbn0gZXhwb3J0cy5wYXJzZVByb3BlcnR5TmFtZSA9IHBhcnNlUHJvcGVydHlOYW1lO1xuXG4vLyBQYXJzZSBvYmplY3Qgb3IgY2xhc3MgbWV0aG9kLlxuIGZ1bmN0aW9uIHBhcnNlTWV0aG9kKGZ1bmN0aW9uU3RhcnQsIGlzQ29uc3RydWN0b3IpIHtcbiAgY29uc3QgZnVuY0NvbnRleHRJZCA9IF9iYXNlLmdldE5leHRDb250ZXh0SWQuY2FsbCh2b2lkIDAsICk7XG5cbiAgX2Jhc2Uuc3RhdGUuc2NvcGVEZXB0aCsrO1xuICBjb25zdCBzdGFydFRva2VuSW5kZXggPSBfYmFzZS5zdGF0ZS50b2tlbnMubGVuZ3RoO1xuICBjb25zdCBhbGxvd01vZGlmaWVycyA9IGlzQ29uc3RydWN0b3I7IC8vIEZvciBUeXBlU2NyaXB0IHBhcmFtZXRlciBwcm9wZXJ0aWVzXG4gIF9zdGF0ZW1lbnQucGFyc2VGdW5jdGlvblBhcmFtcy5jYWxsKHZvaWQgMCwgYWxsb3dNb2RpZmllcnMsIGZ1bmNDb250ZXh0SWQpO1xuICBwYXJzZUZ1bmN0aW9uQm9keUFuZEZpbmlzaChmdW5jdGlvblN0YXJ0LCBmdW5jQ29udGV4dElkKTtcbiAgY29uc3QgZW5kVG9rZW5JbmRleCA9IF9iYXNlLnN0YXRlLnRva2Vucy5sZW5ndGg7XG4gIF9iYXNlLnN0YXRlLnNjb3Blcy5wdXNoKG5ldyAoMCwgX3N0YXRlLlNjb3BlKShzdGFydFRva2VuSW5kZXgsIGVuZFRva2VuSW5kZXgsIHRydWUpKTtcbiAgX2Jhc2Uuc3RhdGUuc2NvcGVEZXB0aC0tO1xufSBleHBvcnRzLnBhcnNlTWV0aG9kID0gcGFyc2VNZXRob2Q7XG5cbi8vIFBhcnNlIGFycm93IGZ1bmN0aW9uIGV4cHJlc3Npb24uXG4vLyBJZiB0aGUgcGFyYW1ldGVycyBhcmUgcHJvdmlkZWQsIHRoZXkgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYW5cbi8vIGFzc2lnbmFibGUgbGlzdC5cbiBmdW5jdGlvbiBwYXJzZUFycm93RXhwcmVzc2lvbihzdGFydFRva2VuSW5kZXgpIHtcbiAgcGFyc2VGdW5jdGlvbkJvZHkodHJ1ZSk7XG4gIGNvbnN0IGVuZFRva2VuSW5kZXggPSBfYmFzZS5zdGF0ZS50b2tlbnMubGVuZ3RoO1xuICBfYmFzZS5zdGF0ZS5zY29wZXMucHVzaChuZXcgKDAsIF9zdGF0ZS5TY29wZSkoc3RhcnRUb2tlbkluZGV4LCBlbmRUb2tlbkluZGV4LCB0cnVlKSk7XG4gIF9iYXNlLnN0YXRlLnNjb3BlRGVwdGgtLTtcbn0gZXhwb3J0cy5wYXJzZUFycm93RXhwcmVzc2lvbiA9IHBhcnNlQXJyb3dFeHByZXNzaW9uO1xuXG4gZnVuY3Rpb24gcGFyc2VGdW5jdGlvbkJvZHlBbmRGaW5pc2goZnVuY3Rpb25TdGFydCwgZnVuY0NvbnRleHRJZCA9IDApIHtcbiAgaWYgKF9iYXNlLmlzVHlwZVNjcmlwdEVuYWJsZWQpIHtcbiAgICBfdHlwZXNjcmlwdC50c1BhcnNlRnVuY3Rpb25Cb2R5QW5kRmluaXNoLmNhbGwodm9pZCAwLCBmdW5jdGlvblN0YXJ0LCBmdW5jQ29udGV4dElkKTtcbiAgfSBlbHNlIGlmIChfYmFzZS5pc0Zsb3dFbmFibGVkKSB7XG4gICAgX2Zsb3cuZmxvd1BhcnNlRnVuY3Rpb25Cb2R5QW5kRmluaXNoLmNhbGwodm9pZCAwLCBmdW5jQ29udGV4dElkKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJzZUZ1bmN0aW9uQm9keShmYWxzZSwgZnVuY0NvbnRleHRJZCk7XG4gIH1cbn0gZXhwb3J0cy5wYXJzZUZ1bmN0aW9uQm9keUFuZEZpbmlzaCA9IHBhcnNlRnVuY3Rpb25Cb2R5QW5kRmluaXNoO1xuXG4gZnVuY3Rpb24gcGFyc2VGdW5jdGlvbkJvZHkoYWxsb3dFeHByZXNzaW9uLCBmdW5jQ29udGV4dElkID0gMCkge1xuICBjb25zdCBpc0V4cHJlc3Npb24gPSBhbGxvd0V4cHJlc3Npb24gJiYgIV9pbmRleDMubWF0Y2guY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLmJyYWNlTCk7XG5cbiAgaWYgKGlzRXhwcmVzc2lvbikge1xuICAgIHBhcnNlTWF5YmVBc3NpZ24oKTtcbiAgfSBlbHNlIHtcbiAgICBfc3RhdGVtZW50LnBhcnNlQmxvY2suY2FsbCh2b2lkIDAsIHRydWUgLyogYWxsb3dEaXJlY3RpdmVzICovLCB0cnVlIC8qIGlzRnVuY3Rpb25TY29wZSAqLywgZnVuY0NvbnRleHRJZCk7XG4gIH1cbn0gZXhwb3J0cy5wYXJzZUZ1bmN0aW9uQm9keSA9IHBhcnNlRnVuY3Rpb25Cb2R5O1xuXG4vLyBQYXJzZXMgYSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBleHByZXNzaW9ucywgYW5kIHJldHVybnMgdGhlbSBhc1xuLy8gYW4gYXJyYXkuIGBjbG9zZWAgaXMgdGhlIHRva2VuIHR5cGUgdGhhdCBlbmRzIHRoZSBsaXN0LCBhbmRcbi8vIGBhbGxvd0VtcHR5YCBjYW4gYmUgdHVybmVkIG9uIHRvIGFsbG93IHN1YnNlcXVlbnQgY29tbWFzIHdpdGhcbi8vIG5vdGhpbmcgaW4gYmV0d2VlbiB0aGVtIHRvIGJlIHBhcnNlZCBhcyBgbnVsbGAgKHdoaWNoIGlzIG5lZWRlZFxuLy8gZm9yIGFycmF5IGxpdGVyYWxzKS5cblxuZnVuY3Rpb24gcGFyc2VFeHByTGlzdChjbG9zZSwgYWxsb3dFbXB0eSA9IGZhbHNlKSB7XG4gIGxldCBmaXJzdCA9IHRydWU7XG4gIHdoaWxlICghX2luZGV4My5lYXQuY2FsbCh2b2lkIDAsIGNsb3NlKSAmJiAhX2Jhc2Uuc3RhdGUuZXJyb3IpIHtcbiAgICBpZiAoZmlyc3QpIHtcbiAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIF91dGlsLmV4cGVjdC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUuY29tbWEpO1xuICAgICAgaWYgKF9pbmRleDMuZWF0LmNhbGwodm9pZCAwLCBjbG9zZSkpIGJyZWFrO1xuICAgIH1cbiAgICBwYXJzZUV4cHJMaXN0SXRlbShhbGxvd0VtcHR5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZUV4cHJMaXN0SXRlbShhbGxvd0VtcHR5KSB7XG4gIGlmIChhbGxvd0VtcHR5ICYmIF9pbmRleDMubWF0Y2guY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLmNvbW1hKSkge1xuICAgIC8vIEVtcHR5IGl0ZW07IG5vdGhpbmcgbW9yZSB0byBwYXJzZSBmb3IgdGhpcyBpdGVtLlxuICB9IGVsc2UgaWYgKF9pbmRleDMubWF0Y2guY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLmVsbGlwc2lzKSkge1xuICAgIF9sdmFsLnBhcnNlU3ByZWFkLmNhbGwodm9pZCAwLCApO1xuICAgIHBhcnNlUGFyZW5JdGVtKCk7XG4gIH0gZWxzZSBpZiAoX2luZGV4My5tYXRjaC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUucXVlc3Rpb24pKSB7XG4gICAgLy8gUGFydGlhbCBmdW5jdGlvbiBhcHBsaWNhdGlvbiBwcm9wb3NhbC5cbiAgICBfaW5kZXgzLm5leHQuY2FsbCh2b2lkIDAsICk7XG4gIH0gZWxzZSB7XG4gICAgcGFyc2VNYXliZUFzc2lnbihmYWxzZSwgdHJ1ZSk7XG4gIH1cbn1cblxuLy8gUGFyc2UgdGhlIG5leHQgdG9rZW4gYXMgYW4gaWRlbnRpZmllci5cbiBmdW5jdGlvbiBwYXJzZUlkZW50aWZpZXIoKSB7XG4gIF9pbmRleDMubmV4dC5jYWxsKHZvaWQgMCwgKTtcbiAgX2Jhc2Uuc3RhdGUudG9rZW5zW19iYXNlLnN0YXRlLnRva2Vucy5sZW5ndGggLSAxXS50eXBlID0gX3R5cGVzMy5Ub2tlblR5cGUubmFtZTtcbn0gZXhwb3J0cy5wYXJzZUlkZW50aWZpZXIgPSBwYXJzZUlkZW50aWZpZXI7XG5cbi8vIFBhcnNlcyBhd2FpdCBleHByZXNzaW9uIGluc2lkZSBhc3luYyBmdW5jdGlvbi5cbmZ1bmN0aW9uIHBhcnNlQXdhaXQoKSB7XG4gIHBhcnNlTWF5YmVVbmFyeSgpO1xufVxuXG4vLyBQYXJzZXMgeWllbGQgZXhwcmVzc2lvbiBpbnNpZGUgZ2VuZXJhdG9yLlxuZnVuY3Rpb24gcGFyc2VZaWVsZCgpIHtcbiAgX2luZGV4My5uZXh0LmNhbGwodm9pZCAwLCApO1xuICBpZiAoIV9pbmRleDMubWF0Y2guY2FsbCh2b2lkIDAsIF90eXBlczMuVG9rZW5UeXBlLnNlbWkpICYmICFfdXRpbC5jYW5JbnNlcnRTZW1pY29sb24uY2FsbCh2b2lkIDAsICkpIHtcbiAgICBfaW5kZXgzLmVhdC5jYWxsKHZvaWQgMCwgX3R5cGVzMy5Ub2tlblR5cGUuc3Rhcik7XG4gICAgcGFyc2VNYXliZUFzc2lnbigpO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/parser/traverser/expression.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/parser/traverser/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/sucrase/dist/parser/traverser/index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", {value: true});\nvar _index3 = __webpack_require__(/*! ../tokenizer/index */ \"./node_modules/sucrase/dist/parser/tokenizer/index.js\");\nvar _charcodes = __webpack_require__(/*! ../util/charcodes */ \"./node_modules/sucrase/dist/parser/util/charcodes.js\");\nvar _base = __webpack_require__(/*! ./base */ \"./node_modules/sucrase/dist/parser/traverser/base.js\");\nvar _statement = __webpack_require__(/*! ./statement */ \"./node_modules/sucrase/dist/parser/traverser/statement.js\");\n\n function parseFile() {\n  // If enabled, skip leading hashbang line.\n  if (\n    _base.state.pos === 0 &&\n    _base.input.charCodeAt(0) === _charcodes.charCodes.numberSign &&\n    _base.input.charCodeAt(1) === _charcodes.charCodes.exclamationMark\n  ) {\n    _index3.skipLineComment.call(void 0, 2);\n  }\n  _index3.nextToken.call(void 0, );\n  return _statement.parseTopLevel.call(void 0, );\n} exports.parseFile = parseFile;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3BhcnNlci90cmF2ZXJzZXIvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3BhcnNlci90cmF2ZXJzZXIvaW5kZXguanM/MWY2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogdHJ1ZX0pO1xudmFyIF9pbmRleDMgPSByZXF1aXJlKCcuLi90b2tlbml6ZXIvaW5kZXgnKTtcbnZhciBfY2hhcmNvZGVzID0gcmVxdWlyZSgnLi4vdXRpbC9jaGFyY29kZXMnKTtcbnZhciBfYmFzZSA9IHJlcXVpcmUoJy4vYmFzZScpO1xudmFyIF9zdGF0ZW1lbnQgPSByZXF1aXJlKCcuL3N0YXRlbWVudCcpO1xuXG4gZnVuY3Rpb24gcGFyc2VGaWxlKCkge1xuICAvLyBJZiBlbmFibGVkLCBza2lwIGxlYWRpbmcgaGFzaGJhbmcgbGluZS5cbiAgaWYgKFxuICAgIF9iYXNlLnN0YXRlLnBvcyA9PT0gMCAmJlxuICAgIF9iYXNlLmlucHV0LmNoYXJDb2RlQXQoMCkgPT09IF9jaGFyY29kZXMuY2hhckNvZGVzLm51bWJlclNpZ24gJiZcbiAgICBfYmFzZS5pbnB1dC5jaGFyQ29kZUF0KDEpID09PSBfY2hhcmNvZGVzLmNoYXJDb2Rlcy5leGNsYW1hdGlvbk1hcmtcbiAgKSB7XG4gICAgX2luZGV4My5za2lwTGluZUNvbW1lbnQuY2FsbCh2b2lkIDAsIDIpO1xuICB9XG4gIF9pbmRleDMubmV4dFRva2VuLmNhbGwodm9pZCAwLCApO1xuICByZXR1cm4gX3N0YXRlbWVudC5wYXJzZVRvcExldmVsLmNhbGwodm9pZCAwLCApO1xufSBleHBvcnRzLnBhcnNlRmlsZSA9IHBhcnNlRmlsZTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/parser/traverser/index.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/parser/traverser/lval.js":
/*!************************************************************!*\
  !*** ./node_modules/sucrase/dist/parser/traverser/lval.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", {value: true});var _flow = __webpack_require__(/*! ../plugins/flow */ \"./node_modules/sucrase/dist/parser/plugins/flow.js\");\n\n\n\n\nvar _typescript = __webpack_require__(/*! ../plugins/typescript */ \"./node_modules/sucrase/dist/parser/plugins/typescript.js\");\n\n\n\n\n\n\n\nvar _index = __webpack_require__(/*! ../tokenizer/index */ \"./node_modules/sucrase/dist/parser/tokenizer/index.js\");\nvar _keywords = __webpack_require__(/*! ../tokenizer/keywords */ \"./node_modules/sucrase/dist/parser/tokenizer/keywords.js\");\nvar _types = __webpack_require__(/*! ../tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\nvar _base = __webpack_require__(/*! ./base */ \"./node_modules/sucrase/dist/parser/traverser/base.js\");\nvar _expression = __webpack_require__(/*! ./expression */ \"./node_modules/sucrase/dist/parser/traverser/expression.js\");\nvar _util = __webpack_require__(/*! ./util */ \"./node_modules/sucrase/dist/parser/traverser/util.js\");\n\n function parseSpread() {\n  _index.next.call(void 0, );\n  _expression.parseMaybeAssign.call(void 0, false);\n} exports.parseSpread = parseSpread;\n\n function parseRest(isBlockScope) {\n  _index.next.call(void 0, );\n  parseBindingAtom(isBlockScope);\n} exports.parseRest = parseRest;\n\n function parseBindingIdentifier(isBlockScope) {\n  _expression.parseIdentifier.call(void 0, );\n  markPriorBindingIdentifier(isBlockScope);\n} exports.parseBindingIdentifier = parseBindingIdentifier;\n\n function parseImportedIdentifier() {\n  _expression.parseIdentifier.call(void 0, );\n  _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _index.IdentifierRole.ImportDeclaration;\n} exports.parseImportedIdentifier = parseImportedIdentifier;\n\n function markPriorBindingIdentifier(isBlockScope) {\n  if (_base.state.scopeDepth === 0) {\n    _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _index.IdentifierRole.TopLevelDeclaration;\n  } else {\n    _base.state.tokens[_base.state.tokens.length - 1].identifierRole = isBlockScope\n      ? _index.IdentifierRole.BlockScopedDeclaration\n      : _index.IdentifierRole.FunctionScopedDeclaration;\n  }\n} exports.markPriorBindingIdentifier = markPriorBindingIdentifier;\n\n// Parses lvalue (assignable) atom.\n function parseBindingAtom(isBlockScope) {\n  switch (_base.state.type) {\n    case _types.TokenType._this: {\n      // In TypeScript, \"this\" may be the name of a parameter, so allow it.\n      const oldIsType = _index.pushTypeContext.call(void 0, 0);\n      _index.next.call(void 0, );\n      _index.popTypeContext.call(void 0, oldIsType);\n      return;\n    }\n\n    case _types.TokenType._yield:\n    case _types.TokenType.name: {\n      _base.state.type = _types.TokenType.name;\n      parseBindingIdentifier(isBlockScope);\n      return;\n    }\n\n    case _types.TokenType.bracketL: {\n      _index.next.call(void 0, );\n      parseBindingList(_types.TokenType.bracketR, isBlockScope, true /* allowEmpty */);\n      return;\n    }\n\n    case _types.TokenType.braceL:\n      _expression.parseObj.call(void 0, true, isBlockScope);\n      return;\n\n    default:\n      _util.unexpected.call(void 0, );\n  }\n} exports.parseBindingAtom = parseBindingAtom;\n\n function parseBindingList(\n  close,\n  isBlockScope,\n  allowEmpty = false,\n  allowModifiers = false,\n) {\n  let first = true;\n\n  let hasRemovedComma = false;\n  const firstItemTokenIndex = _base.state.tokens.length;\n\n  while (!_index.eat.call(void 0, close) && !_base.state.error) {\n    if (first) {\n      first = false;\n    } else {\n      _util.expect.call(void 0, _types.TokenType.comma);\n      // After a \"this\" type in TypeScript, we need to set the following comma (if any) to also be\n      // a type token so that it will be removed.\n      if (!hasRemovedComma && _base.state.tokens[firstItemTokenIndex].isType) {\n        _base.state.tokens[_base.state.tokens.length - 1].isType = true;\n        hasRemovedComma = true;\n      }\n    }\n    if (allowEmpty && _index.match.call(void 0, _types.TokenType.comma)) {\n      // Empty item; nothing further to parse for this item.\n    } else if (_index.eat.call(void 0, close)) {\n      break;\n    } else if (_index.match.call(void 0, _types.TokenType.ellipsis)) {\n      parseRest(isBlockScope);\n      parseAssignableListItemTypes();\n      // Support rest element trailing commas allowed by TypeScript <2.9.\n      _index.eat.call(void 0, _types.TokenType.comma);\n      _util.expect.call(void 0, close);\n      break;\n    } else {\n      parseAssignableListItem(allowModifiers, isBlockScope);\n    }\n  }\n} exports.parseBindingList = parseBindingList;\n\nfunction parseAssignableListItem(allowModifiers, isBlockScope) {\n  if (allowModifiers) {\n    _typescript.tsParseAccessModifier.call(void 0, );\n    _typescript.tsParseModifier.call(void 0, [_keywords.ContextualKeyword._readonly]);\n  }\n\n  parseMaybeDefault(isBlockScope);\n  parseAssignableListItemTypes();\n  parseMaybeDefault(isBlockScope, true /* leftAlreadyParsed */);\n}\n\nfunction parseAssignableListItemTypes() {\n  if (_base.isFlowEnabled) {\n    _flow.flowParseAssignableListItemTypes.call(void 0, );\n  } else if (_base.isTypeScriptEnabled) {\n    _typescript.tsParseAssignableListItemTypes.call(void 0, );\n  }\n}\n\n// Parses assignment pattern around given atom if possible.\n function parseMaybeDefault(isBlockScope, leftAlreadyParsed = false) {\n  if (!leftAlreadyParsed) {\n    parseBindingAtom(isBlockScope);\n  }\n  if (!_index.eat.call(void 0, _types.TokenType.eq)) {\n    return;\n  }\n  const eqIndex = _base.state.tokens.length - 1;\n  _expression.parseMaybeAssign.call(void 0, );\n  _base.state.tokens[eqIndex].rhsEndIndex = _base.state.tokens.length;\n} exports.parseMaybeDefault = parseMaybeDefault;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/parser/traverser/lval.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/parser/traverser/statement.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sucrase/dist/parser/traverser/statement.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", {value: true});/* eslint max-len: 0 */\n\nvar _index = __webpack_require__(/*! ../index */ \"./node_modules/sucrase/dist/parser/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _flow = __webpack_require__(/*! ../plugins/flow */ \"./node_modules/sucrase/dist/parser/plugins/flow.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _typescript = __webpack_require__(/*! ../plugins/typescript */ \"./node_modules/sucrase/dist/parser/plugins/typescript.js\");\n\n\n\n\n\n\n\n\n\nvar _tokenizer = __webpack_require__(/*! ../tokenizer */ \"./node_modules/sucrase/dist/parser/tokenizer/index.js\");\nvar _keywords = __webpack_require__(/*! ../tokenizer/keywords */ \"./node_modules/sucrase/dist/parser/tokenizer/keywords.js\");\nvar _state = __webpack_require__(/*! ../tokenizer/state */ \"./node_modules/sucrase/dist/parser/tokenizer/state.js\");\nvar _types = __webpack_require__(/*! ../tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\nvar _base = __webpack_require__(/*! ./base */ \"./node_modules/sucrase/dist/parser/traverser/base.js\");\n\n\n\n\n\n\n\n\n\n\n\nvar _expression = __webpack_require__(/*! ./expression */ \"./node_modules/sucrase/dist/parser/traverser/expression.js\");\n\n\n\n\n\nvar _lval = __webpack_require__(/*! ./lval */ \"./node_modules/sucrase/dist/parser/traverser/lval.js\");\n\n\n\n\n\n\n\n\n\nvar _util = __webpack_require__(/*! ./util */ \"./node_modules/sucrase/dist/parser/traverser/util.js\");\n\n function parseTopLevel() {\n  parseBlockBody(_types.TokenType.eof);\n  _base.state.scopes.push(new (0, _state.Scope)(0, _base.state.tokens.length, true));\n  if (_base.state.scopeDepth !== 0) {\n    throw new Error(`Invalid scope depth at end of file: ${_base.state.scopeDepth}`);\n  }\n  return new (0, _index.File)(_base.state.tokens, _base.state.scopes);\n} exports.parseTopLevel = parseTopLevel;\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\n function parseStatement(declaration) {\n  if (_base.isFlowEnabled) {\n    if (_flow.flowTryParseStatement.call(void 0, )) {\n      return;\n    }\n  }\n  if (_tokenizer.match.call(void 0, _types.TokenType.at)) {\n    parseDecorators();\n  }\n  parseStatementContent(declaration);\n} exports.parseStatement = parseStatement;\n\nfunction parseStatementContent(declaration) {\n  if (_base.isTypeScriptEnabled) {\n    if (_typescript.tsTryParseStatementContent.call(void 0, )) {\n      return;\n    }\n  }\n\n  const starttype = _base.state.type;\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n    case _types.TokenType._break:\n    case _types.TokenType._continue:\n      parseBreakContinueStatement();\n      return;\n    case _types.TokenType._debugger:\n      parseDebuggerStatement();\n      return;\n    case _types.TokenType._do:\n      parseDoStatement();\n      return;\n    case _types.TokenType._for:\n      parseForStatement();\n      return;\n    case _types.TokenType._function:\n      if (_tokenizer.lookaheadType.call(void 0, ) === _types.TokenType.dot) break;\n      if (!declaration) _util.unexpected.call(void 0, );\n      parseFunctionStatement();\n      return;\n\n    case _types.TokenType._class:\n      if (!declaration) _util.unexpected.call(void 0, );\n      parseClass(true);\n      return;\n\n    case _types.TokenType._if:\n      parseIfStatement();\n      return;\n    case _types.TokenType._return:\n      parseReturnStatement();\n      return;\n    case _types.TokenType._switch:\n      parseSwitchStatement();\n      return;\n    case _types.TokenType._throw:\n      parseThrowStatement();\n      return;\n    case _types.TokenType._try:\n      parseTryStatement();\n      return;\n\n    case _types.TokenType._let:\n    case _types.TokenType._const:\n      if (!declaration) _util.unexpected.call(void 0, ); // NOTE: falls through to _var\n\n    case _types.TokenType._var:\n      parseVarStatement(starttype);\n      return;\n\n    case _types.TokenType._while:\n      parseWhileStatement();\n      return;\n    case _types.TokenType.braceL:\n      parseBlock();\n      return;\n    case _types.TokenType.semi:\n      parseEmptyStatement();\n      return;\n    case _types.TokenType._export:\n    case _types.TokenType._import: {\n      const nextType = _tokenizer.lookaheadType.call(void 0, );\n      if (nextType === _types.TokenType.parenL || nextType === _types.TokenType.dot) {\n        break;\n      }\n      _tokenizer.next.call(void 0, );\n      if (starttype === _types.TokenType._import) {\n        parseImport();\n      } else {\n        parseExport();\n      }\n      return;\n    }\n    case _types.TokenType.name:\n      if (_base.state.contextualKeyword === _keywords.ContextualKeyword._async) {\n        const functionStart = _base.state.start;\n        // peek ahead and see if next token is a function\n        const snapshot = _base.state.snapshot();\n        _tokenizer.next.call(void 0, );\n        if (_tokenizer.match.call(void 0, _types.TokenType._function) && !_util.canInsertSemicolon.call(void 0, )) {\n          _util.expect.call(void 0, _types.TokenType._function);\n          parseFunction(functionStart, true);\n          return;\n        } else {\n          _base.state.restoreFromSnapshot(snapshot);\n        }\n      }\n    default:\n      // Do nothing.\n      break;\n  }\n\n  // If the statement does not start with a statement keyword or a\n  // brace, it's an ExpressionStatement or LabeledStatement. We\n  // simply start parsing an expression, and afterwards, if the\n  // next token is a colon and the expression was a simple\n  // Identifier node, we switch to interpreting it as a label.\n  const initialTokensLength = _base.state.tokens.length;\n  _expression.parseExpression.call(void 0, );\n  let simpleName = null;\n  if (_base.state.tokens.length === initialTokensLength + 1) {\n    const token = _base.state.tokens[_base.state.tokens.length - 1];\n    if (token.type === _types.TokenType.name) {\n      simpleName = token.contextualKeyword;\n    }\n  }\n  if (simpleName == null) {\n    _util.semicolon.call(void 0, );\n    return;\n  }\n  if (_tokenizer.eat.call(void 0, _types.TokenType.colon)) {\n    parseLabeledStatement();\n  } else {\n    // This was an identifier, so we might want to handle flow/typescript-specific cases.\n    parseIdentifierStatement(simpleName);\n  }\n}\n\n function parseDecorators() {\n  while (_tokenizer.match.call(void 0, _types.TokenType.at)) {\n    parseDecorator();\n  }\n} exports.parseDecorators = parseDecorators;\n\nfunction parseDecorator() {\n  _tokenizer.next.call(void 0, );\n  if (_tokenizer.eat.call(void 0, _types.TokenType.parenL)) {\n    _expression.parseExpression.call(void 0, );\n    _util.expect.call(void 0, _types.TokenType.parenR);\n  } else {\n    _expression.parseIdentifier.call(void 0, );\n    while (_tokenizer.eat.call(void 0, _types.TokenType.dot)) {\n      _expression.parseIdentifier.call(void 0, );\n    }\n  }\n  parseMaybeDecoratorArguments();\n}\n\nfunction parseMaybeDecoratorArguments() {\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsParseMaybeDecoratorArguments.call(void 0, );\n  } else {\n    baseParseMaybeDecoratorArguments();\n  }\n}\n\n function baseParseMaybeDecoratorArguments() {\n  if (_tokenizer.eat.call(void 0, _types.TokenType.parenL)) {\n    _expression.parseCallExpressionArguments.call(void 0, );\n  }\n} exports.baseParseMaybeDecoratorArguments = baseParseMaybeDecoratorArguments;\n\nfunction parseBreakContinueStatement() {\n  _tokenizer.next.call(void 0, );\n  if (!_util.isLineTerminator.call(void 0, )) {\n    _expression.parseIdentifier.call(void 0, );\n    _util.semicolon.call(void 0, );\n  }\n}\n\nfunction parseDebuggerStatement() {\n  _tokenizer.next.call(void 0, );\n  _util.semicolon.call(void 0, );\n}\n\nfunction parseDoStatement() {\n  _tokenizer.next.call(void 0, );\n  parseStatement(false);\n  _util.expect.call(void 0, _types.TokenType._while);\n  _expression.parseParenExpression.call(void 0, );\n  _tokenizer.eat.call(void 0, _types.TokenType.semi);\n}\n\nfunction parseForStatement() {\n  _base.state.scopeDepth++;\n  const startTokenIndex = _base.state.tokens.length;\n  parseAmbiguousForStatement();\n  const endTokenIndex = _base.state.tokens.length;\n  _base.state.scopes.push(new (0, _state.Scope)(startTokenIndex, endTokenIndex, false));\n  _base.state.scopeDepth--;\n}\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\nfunction parseAmbiguousForStatement() {\n  _tokenizer.next.call(void 0, );\n\n  let forAwait = false;\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._await)) {\n    forAwait = true;\n    _tokenizer.next.call(void 0, );\n  }\n  _util.expect.call(void 0, _types.TokenType.parenL);\n\n  if (_tokenizer.match.call(void 0, _types.TokenType.semi)) {\n    if (forAwait) {\n      _util.unexpected.call(void 0, );\n    }\n    parseFor();\n    return;\n  }\n\n  if (_tokenizer.match.call(void 0, _types.TokenType._var) || _tokenizer.match.call(void 0, _types.TokenType._let) || _tokenizer.match.call(void 0, _types.TokenType._const)) {\n    const varKind = _base.state.type;\n    _tokenizer.next.call(void 0, );\n    parseVar(true, varKind);\n    if (_tokenizer.match.call(void 0, _types.TokenType._in) || _util.isContextual.call(void 0, _keywords.ContextualKeyword._of)) {\n      parseForIn(forAwait);\n      return;\n    }\n    parseFor();\n    return;\n  }\n\n  _expression.parseExpression.call(void 0, true);\n  if (_tokenizer.match.call(void 0, _types.TokenType._in) || _util.isContextual.call(void 0, _keywords.ContextualKeyword._of)) {\n    parseForIn(forAwait);\n    return;\n  }\n  if (forAwait) {\n    _util.unexpected.call(void 0, );\n  }\n  parseFor();\n}\n\nfunction parseFunctionStatement() {\n  const functionStart = _base.state.start;\n  _tokenizer.next.call(void 0, );\n  parseFunction(functionStart, true);\n}\n\nfunction parseIfStatement() {\n  _tokenizer.next.call(void 0, );\n  _expression.parseParenExpression.call(void 0, );\n  parseStatement(false);\n  if (_tokenizer.eat.call(void 0, _types.TokenType._else)) {\n    parseStatement(false);\n  }\n}\n\nfunction parseReturnStatement() {\n  _tokenizer.next.call(void 0, );\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (!_util.isLineTerminator.call(void 0, )) {\n    _expression.parseExpression.call(void 0, );\n    _util.semicolon.call(void 0, );\n  }\n}\n\nfunction parseSwitchStatement() {\n  _tokenizer.next.call(void 0, );\n  _expression.parseParenExpression.call(void 0, );\n  _base.state.scopeDepth++;\n  const startTokenIndex = _base.state.tokens.length;\n  _util.expect.call(void 0, _types.TokenType.braceL);\n\n  // Don't bother validation; just go through any sequence of cases, defaults, and statements.\n  while (!_tokenizer.match.call(void 0, _types.TokenType.braceR) && !_base.state.error) {\n    if (_tokenizer.match.call(void 0, _types.TokenType._case) || _tokenizer.match.call(void 0, _types.TokenType._default)) {\n      const isCase = _tokenizer.match.call(void 0, _types.TokenType._case);\n      _tokenizer.next.call(void 0, );\n      if (isCase) {\n        _expression.parseExpression.call(void 0, );\n      }\n      _util.expect.call(void 0, _types.TokenType.colon);\n    } else {\n      parseStatement(true);\n    }\n  }\n  _tokenizer.next.call(void 0, ); // Closing brace\n  const endTokenIndex = _base.state.tokens.length;\n  _base.state.scopes.push(new (0, _state.Scope)(startTokenIndex, endTokenIndex, false));\n  _base.state.scopeDepth--;\n}\n\nfunction parseThrowStatement() {\n  _tokenizer.next.call(void 0, );\n  _expression.parseExpression.call(void 0, );\n  _util.semicolon.call(void 0, );\n}\n\nfunction parseTryStatement() {\n  _tokenizer.next.call(void 0, );\n\n  parseBlock();\n\n  if (_tokenizer.match.call(void 0, _types.TokenType._catch)) {\n    _tokenizer.next.call(void 0, );\n    let catchBindingStartTokenIndex = null;\n    if (_tokenizer.match.call(void 0, _types.TokenType.parenL)) {\n      _base.state.scopeDepth++;\n      catchBindingStartTokenIndex = _base.state.tokens.length;\n      _util.expect.call(void 0, _types.TokenType.parenL);\n      _lval.parseBindingAtom.call(void 0, true /* isBlockScope */);\n      _util.expect.call(void 0, _types.TokenType.parenR);\n    }\n    parseBlock();\n    if (catchBindingStartTokenIndex != null) {\n      // We need a special scope for the catch binding which includes the binding itself and the\n      // catch block.\n      const endTokenIndex = _base.state.tokens.length;\n      _base.state.scopes.push(new (0, _state.Scope)(catchBindingStartTokenIndex, endTokenIndex, false));\n      _base.state.scopeDepth--;\n    }\n  }\n  if (_tokenizer.eat.call(void 0, _types.TokenType._finally)) {\n    parseBlock();\n  }\n}\n\n function parseVarStatement(kind) {\n  _tokenizer.next.call(void 0, );\n  parseVar(false, kind);\n  _util.semicolon.call(void 0, );\n} exports.parseVarStatement = parseVarStatement;\n\nfunction parseWhileStatement() {\n  _tokenizer.next.call(void 0, );\n  _expression.parseParenExpression.call(void 0, );\n  parseStatement(false);\n}\n\nfunction parseEmptyStatement() {\n  _tokenizer.next.call(void 0, );\n}\n\nfunction parseLabeledStatement() {\n  parseStatement(true);\n}\n\n/**\n * Parse a statement starting with an identifier of the given name. Subclasses match on the name\n * to handle statements like \"declare\".\n */\nfunction parseIdentifierStatement(contextualKeyword) {\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsParseIdentifierStatement.call(void 0, contextualKeyword);\n  } else if (_base.isFlowEnabled) {\n    _flow.flowParseIdentifierStatement.call(void 0, contextualKeyword);\n  } else {\n    _util.semicolon.call(void 0, );\n  }\n}\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\n function parseBlock(\n  allowDirectives = false,\n  isFunctionScope = false,\n  contextId = 0,\n) {\n  const startTokenIndex = _base.state.tokens.length;\n  _base.state.scopeDepth++;\n  _util.expect.call(void 0, _types.TokenType.braceL);\n  if (contextId) {\n    _base.state.tokens[_base.state.tokens.length - 1].contextId = contextId;\n  }\n  parseBlockBody(_types.TokenType.braceR);\n  if (contextId) {\n    _base.state.tokens[_base.state.tokens.length - 1].contextId = contextId;\n  }\n  const endTokenIndex = _base.state.tokens.length;\n  _base.state.scopes.push(new (0, _state.Scope)(startTokenIndex, endTokenIndex, isFunctionScope));\n  _base.state.scopeDepth--;\n} exports.parseBlock = parseBlock;\n\n function parseBlockBody(end) {\n  while (!_tokenizer.eat.call(void 0, end) && !_base.state.error) {\n    parseStatement(true);\n  }\n} exports.parseBlockBody = parseBlockBody;\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\nfunction parseFor() {\n  _util.expect.call(void 0, _types.TokenType.semi);\n  if (!_tokenizer.match.call(void 0, _types.TokenType.semi)) {\n    _expression.parseExpression.call(void 0, );\n  }\n  _util.expect.call(void 0, _types.TokenType.semi);\n  if (!_tokenizer.match.call(void 0, _types.TokenType.parenR)) {\n    _expression.parseExpression.call(void 0, );\n  }\n  _util.expect.call(void 0, _types.TokenType.parenR);\n  parseStatement(false);\n}\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\nfunction parseForIn(forAwait) {\n  if (forAwait) {\n    _util.eatContextual.call(void 0, _keywords.ContextualKeyword._of);\n  } else {\n    _tokenizer.next.call(void 0, );\n  }\n  _expression.parseExpression.call(void 0, );\n  _util.expect.call(void 0, _types.TokenType.parenR);\n  parseStatement(false);\n}\n\n// Parse a list of variable declarations.\n\nfunction parseVar(isFor, kind) {\n  while (true) {\n    const isBlockScope = kind === _types.TokenType._const || kind === _types.TokenType._let;\n    parseVarHead(isBlockScope);\n    if (_tokenizer.eat.call(void 0, _types.TokenType.eq)) {\n      const eqIndex = _base.state.tokens.length - 1;\n      _expression.parseMaybeAssign.call(void 0, isFor);\n      _base.state.tokens[eqIndex].rhsEndIndex = _base.state.tokens.length;\n    }\n    if (!_tokenizer.eat.call(void 0, _types.TokenType.comma)) {\n      break;\n    }\n  }\n}\n\nfunction parseVarHead(isBlockScope) {\n  _lval.parseBindingAtom.call(void 0, isBlockScope);\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsAfterParseVarHead.call(void 0, );\n  } else if (_base.isFlowEnabled) {\n    _flow.flowAfterParseVarHead.call(void 0, );\n  }\n}\n\n// Parse a function declaration or literal (depending on the\n// `isStatement` parameter).\n\n function parseFunction(\n  functionStart,\n  isStatement,\n  optionalId = false,\n) {\n  if (_tokenizer.match.call(void 0, _types.TokenType.star)) {\n    _tokenizer.next.call(void 0, );\n  }\n\n  if (isStatement && !optionalId && !_tokenizer.match.call(void 0, _types.TokenType.name) && !_tokenizer.match.call(void 0, _types.TokenType._yield)) {\n    _util.unexpected.call(void 0, );\n  }\n\n  let nameScopeStartTokenIndex = null;\n\n  if (_tokenizer.match.call(void 0, _types.TokenType.name)) {\n    // Expression-style functions should limit their name's scope to the function body, so we make\n    // a new function scope to enforce that.\n    if (!isStatement) {\n      nameScopeStartTokenIndex = _base.state.tokens.length;\n      _base.state.scopeDepth++;\n    }\n    _lval.parseBindingIdentifier.call(void 0, false);\n  }\n\n  const startTokenIndex = _base.state.tokens.length;\n  _base.state.scopeDepth++;\n  parseFunctionParams();\n  _expression.parseFunctionBodyAndFinish.call(void 0, functionStart);\n  const endTokenIndex = _base.state.tokens.length;\n  // In addition to the block scope of the function body, we need a separate function-style scope\n  // that includes the params.\n  _base.state.scopes.push(new (0, _state.Scope)(startTokenIndex, endTokenIndex, true));\n  _base.state.scopeDepth--;\n  if (nameScopeStartTokenIndex !== null) {\n    _base.state.scopes.push(new (0, _state.Scope)(nameScopeStartTokenIndex, endTokenIndex, true));\n    _base.state.scopeDepth--;\n  }\n} exports.parseFunction = parseFunction;\n\n function parseFunctionParams(\n  allowModifiers = false,\n  funcContextId = 0,\n) {\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsStartParseFunctionParams.call(void 0, );\n  } else if (_base.isFlowEnabled) {\n    _flow.flowStartParseFunctionParams.call(void 0, );\n  }\n\n  _util.expect.call(void 0, _types.TokenType.parenL);\n  if (funcContextId) {\n    _base.state.tokens[_base.state.tokens.length - 1].contextId = funcContextId;\n  }\n  _lval.parseBindingList.call(void 0, _types.TokenType.parenR, false /* isBlockScope */, false /* allowEmpty */, allowModifiers);\n  if (funcContextId) {\n    _base.state.tokens[_base.state.tokens.length - 1].contextId = funcContextId;\n  }\n} exports.parseFunctionParams = parseFunctionParams;\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\n function parseClass(isStatement, optionalId = false) {\n  // Put a context ID on the class keyword, the open-brace, and the close-brace, so that later\n  // code can easily navigate to meaningful points on the class.\n  const contextId = _base.getNextContextId.call(void 0, );\n\n  _tokenizer.next.call(void 0, );\n  _base.state.tokens[_base.state.tokens.length - 1].contextId = contextId;\n  _base.state.tokens[_base.state.tokens.length - 1].isExpression = !isStatement;\n  // Like with functions, we declare a special \"name scope\" from the start of the name to the end\n  // of the class, but only with expression-style classes, to represent the fact that the name is\n  // available to the body of the class but not an outer declaration.\n  let nameScopeStartTokenIndex = null;\n  if (!isStatement) {\n    nameScopeStartTokenIndex = _base.state.tokens.length;\n    _base.state.scopeDepth++;\n  }\n  parseClassId(isStatement, optionalId);\n  parseClassSuper();\n  const openBraceIndex = _base.state.tokens.length;\n  parseClassBody(contextId);\n  if (_base.state.error) {\n    return;\n  }\n  _base.state.tokens[openBraceIndex].contextId = contextId;\n  _base.state.tokens[_base.state.tokens.length - 1].contextId = contextId;\n  if (nameScopeStartTokenIndex !== null) {\n    const endTokenIndex = _base.state.tokens.length;\n    _base.state.scopes.push(new (0, _state.Scope)(nameScopeStartTokenIndex, endTokenIndex, false));\n    _base.state.scopeDepth--;\n  }\n} exports.parseClass = parseClass;\n\nfunction isClassProperty() {\n  return _tokenizer.match.call(void 0, _types.TokenType.eq) || _tokenizer.match.call(void 0, _types.TokenType.semi) || _tokenizer.match.call(void 0, _types.TokenType.braceR) || _tokenizer.match.call(void 0, _types.TokenType.bang) || _tokenizer.match.call(void 0, _types.TokenType.colon);\n}\n\nfunction isClassMethod() {\n  return _tokenizer.match.call(void 0, _types.TokenType.parenL) || _tokenizer.match.call(void 0, _types.TokenType.lessThan);\n}\n\nfunction parseClassBody(classContextId) {\n  _util.expect.call(void 0, _types.TokenType.braceL);\n\n  while (!_tokenizer.eat.call(void 0, _types.TokenType.braceR) && !_base.state.error) {\n    if (_tokenizer.eat.call(void 0, _types.TokenType.semi)) {\n      continue;\n    }\n\n    if (_tokenizer.match.call(void 0, _types.TokenType.at)) {\n      parseDecorator();\n      continue;\n    }\n    const memberStart = _base.state.start;\n    parseClassMember(memberStart, classContextId);\n  }\n}\n\nfunction parseClassMember(memberStart, classContextId) {\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsParseAccessModifier.call(void 0, );\n  }\n  let isStatic = false;\n  if (_tokenizer.match.call(void 0, _types.TokenType.name) && _base.state.contextualKeyword === _keywords.ContextualKeyword._static) {\n    _expression.parseIdentifier.call(void 0, ); // eats 'static'\n    if (isClassMethod()) {\n      parseClassMethod(memberStart, /* isConstructor */ false);\n      return;\n    } else if (isClassProperty()) {\n      parseClassProperty();\n      return;\n    }\n    // otherwise something static\n    _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._static;\n    isStatic = true;\n  }\n\n  parseClassMemberWithIsStatic(memberStart, isStatic, classContextId);\n}\n\nfunction parseClassMemberWithIsStatic(\n  memberStart,\n  isStatic,\n  classContextId,\n) {\n  if (_base.isTypeScriptEnabled) {\n    if (_typescript.tsTryParseClassMemberWithIsStatic.call(void 0, isStatic, classContextId)) {\n      return;\n    }\n  }\n  if (_tokenizer.eat.call(void 0, _types.TokenType.star)) {\n    // a generator\n    parseClassPropertyName(classContextId);\n    parseClassMethod(memberStart, /* isConstructor */ false);\n    return;\n  }\n\n  // Get the identifier name so we can tell if it's actually a keyword like \"async\", \"get\", or\n  // \"set\".\n  parseClassPropertyName(classContextId);\n  let isConstructor = false;\n  const token = _base.state.tokens[_base.state.tokens.length - 1];\n  // We allow \"constructor\" as either an identifier or a string.\n  if (token.contextualKeyword === _keywords.ContextualKeyword._constructor) {\n    isConstructor = true;\n  }\n  parsePostMemberNameModifiers();\n\n  if (isClassMethod()) {\n    parseClassMethod(memberStart, isConstructor);\n  } else if (isClassProperty()) {\n    parseClassProperty();\n  } else if (token.contextualKeyword === _keywords.ContextualKeyword._async && !_util.isLineTerminator.call(void 0, )) {\n    _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._async;\n    // an async method\n    const isGenerator = _tokenizer.match.call(void 0, _types.TokenType.star);\n    if (isGenerator) {\n      _tokenizer.next.call(void 0, );\n    }\n\n    // The so-called parsed name would have been \"async\": get the real name.\n    parseClassPropertyName(classContextId);\n    parseClassMethod(memberStart, false /* isConstructor */);\n  } else if (\n    (token.contextualKeyword === _keywords.ContextualKeyword._get ||\n      token.contextualKeyword === _keywords.ContextualKeyword._set) &&\n    !(_util.isLineTerminator.call(void 0, ) && _tokenizer.match.call(void 0, _types.TokenType.star))\n  ) {\n    if (token.contextualKeyword === _keywords.ContextualKeyword._get) {\n      _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._get;\n    } else {\n      _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._set;\n    }\n    // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n    // a getter or setter\n    // The so-called parsed name would have been \"get/set\": get the real name.\n    parseClassPropertyName(classContextId);\n    parseClassMethod(memberStart, /* isConstructor */ false);\n  } else if (_util.isLineTerminator.call(void 0, )) {\n    // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n    parseClassProperty();\n  } else {\n    _util.unexpected.call(void 0, );\n  }\n}\n\nfunction parseClassMethod(functionStart, isConstructor) {\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsTryParseTypeParameters.call(void 0, );\n  } else if (_base.isFlowEnabled) {\n    if (_tokenizer.match.call(void 0, _types.TokenType.lessThan)) {\n      _flow.flowParseTypeParameterDeclaration.call(void 0, );\n    }\n  }\n  _expression.parseMethod.call(void 0, functionStart, isConstructor);\n}\n\n// Return the name of the class property, if it is a simple identifier.\n function parseClassPropertyName(classContextId) {\n  _expression.parsePropertyName.call(void 0, classContextId);\n} exports.parseClassPropertyName = parseClassPropertyName;\n\n function parsePostMemberNameModifiers() {\n  if (_base.isTypeScriptEnabled) {\n    const oldIsType = _tokenizer.pushTypeContext.call(void 0, 0);\n    _tokenizer.eat.call(void 0, _types.TokenType.question);\n    _tokenizer.popTypeContext.call(void 0, oldIsType);\n  }\n} exports.parsePostMemberNameModifiers = parsePostMemberNameModifiers;\n\n function parseClassProperty() {\n  if (_base.isTypeScriptEnabled) {\n    _tokenizer.eat.call(void 0, _types.TokenType.bang);\n    _typescript.tsTryParseTypeAnnotation.call(void 0, );\n  } else if (_base.isFlowEnabled) {\n    if (_tokenizer.match.call(void 0, _types.TokenType.colon)) {\n      _flow.flowParseTypeAnnotation.call(void 0, );\n    }\n  }\n\n  if (_tokenizer.match.call(void 0, _types.TokenType.eq)) {\n    const equalsTokenIndex = _base.state.tokens.length;\n    _tokenizer.next.call(void 0, );\n    _expression.parseMaybeAssign.call(void 0, );\n    _base.state.tokens[equalsTokenIndex].rhsEndIndex = _base.state.tokens.length;\n  }\n  _util.semicolon.call(void 0, );\n} exports.parseClassProperty = parseClassProperty;\n\nfunction parseClassId(isStatement, optionalId = false) {\n  if (\n    _base.isTypeScriptEnabled &&\n    (!isStatement || optionalId) &&\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._implements)\n  ) {\n    return;\n  }\n\n  if (_tokenizer.match.call(void 0, _types.TokenType.name)) {\n    _lval.parseBindingIdentifier.call(void 0, true);\n  }\n\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsTryParseTypeParameters.call(void 0, );\n  } else if (_base.isFlowEnabled) {\n    if (_tokenizer.match.call(void 0, _types.TokenType.lessThan)) {\n      _flow.flowParseTypeParameterDeclaration.call(void 0, );\n    }\n  }\n}\n\n// Returns true if there was a superclass.\nfunction parseClassSuper() {\n  let hasSuper = false;\n  if (_tokenizer.eat.call(void 0, _types.TokenType._extends)) {\n    _expression.parseExprSubscripts.call(void 0, );\n    hasSuper = true;\n  } else {\n    hasSuper = false;\n  }\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsAfterParseClassSuper.call(void 0, hasSuper);\n  } else if (_base.isFlowEnabled) {\n    _flow.flowAfterParseClassSuper.call(void 0, hasSuper);\n  }\n}\n\n// Parses module export declaration.\n\n function parseExport() {\n  const exportIndex = _base.state.tokens.length - 1;\n  if (_base.isTypeScriptEnabled) {\n    if (_typescript.tsTryParseExport.call(void 0, )) {\n      return;\n    }\n  }\n  // export * from '...'\n  if (shouldParseExportStar()) {\n    parseExportStar();\n  } else if (isExportDefaultSpecifier()) {\n    // export default from\n    _expression.parseIdentifier.call(void 0, );\n    if (_tokenizer.match.call(void 0, _types.TokenType.comma) && _tokenizer.lookaheadType.call(void 0, ) === _types.TokenType.star) {\n      _util.expect.call(void 0, _types.TokenType.comma);\n      _util.expect.call(void 0, _types.TokenType.star);\n      _util.expectContextual.call(void 0, _keywords.ContextualKeyword._as);\n      _expression.parseIdentifier.call(void 0, );\n    } else {\n      parseExportSpecifiersMaybe();\n    }\n    parseExportFrom();\n  } else if (_tokenizer.eat.call(void 0, _types.TokenType._default)) {\n    // export default ...\n    parseExportDefaultExpression();\n  } else if (shouldParseExportDeclaration()) {\n    parseExportDeclaration();\n  } else {\n    // export { x, y as z } [from '...']\n    parseExportSpecifiers();\n    parseExportFrom();\n  }\n  _base.state.tokens[exportIndex].rhsEndIndex = _base.state.tokens.length;\n} exports.parseExport = parseExport;\n\nfunction parseExportDefaultExpression() {\n  if (_base.isTypeScriptEnabled) {\n    if (_typescript.tsTryParseExportDefaultExpression.call(void 0, )) {\n      return;\n    }\n  }\n  const functionStart = _base.state.start;\n  if (_tokenizer.eat.call(void 0, _types.TokenType._function)) {\n    parseFunction(functionStart, true, true);\n  } else if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._async) && _tokenizer.lookaheadType.call(void 0, ) === _types.TokenType._function) {\n    // async function declaration\n    _util.eatContextual.call(void 0, _keywords.ContextualKeyword._async);\n    _tokenizer.eat.call(void 0, _types.TokenType._function);\n    parseFunction(functionStart, true, true);\n  } else if (_tokenizer.match.call(void 0, _types.TokenType._class)) {\n    parseClass(true, true);\n  } else if (_tokenizer.match.call(void 0, _types.TokenType.at)) {\n    parseDecorators();\n    parseClass(true, true);\n  } else {\n    _expression.parseMaybeAssign.call(void 0, );\n    _util.semicolon.call(void 0, );\n  }\n}\n\nfunction parseExportDeclaration() {\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsParseExportDeclaration.call(void 0, );\n  } else if (_base.isFlowEnabled) {\n    _flow.flowParseExportDeclaration.call(void 0, );\n  } else {\n    parseStatement(true);\n  }\n}\n\nfunction isExportDefaultSpecifier() {\n  if (_base.isTypeScriptEnabled && _typescript.tsIsDeclarationStart.call(void 0, )) {\n    return false;\n  } else if (_base.isFlowEnabled && _flow.flowShouldDisallowExportDefaultSpecifier.call(void 0, )) {\n    return false;\n  }\n  if (_tokenizer.match.call(void 0, _types.TokenType.name)) {\n    return _base.state.contextualKeyword !== _keywords.ContextualKeyword._async;\n  }\n\n  if (!_tokenizer.match.call(void 0, _types.TokenType._default)) {\n    return false;\n  }\n\n  const lookahead = _tokenizer.lookaheadTypeAndKeyword.call(void 0, );\n  return (\n    lookahead.type === _types.TokenType.comma ||\n    (lookahead.type === _types.TokenType.name && lookahead.contextualKeyword === _keywords.ContextualKeyword._from)\n  );\n}\n\nfunction parseExportSpecifiersMaybe() {\n  if (_tokenizer.eat.call(void 0, _types.TokenType.comma)) {\n    parseExportSpecifiers();\n  }\n}\n\n function parseExportFrom() {\n  if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._from)) {\n    _expression.parseExprAtom.call(void 0, );\n  }\n  _util.semicolon.call(void 0, );\n} exports.parseExportFrom = parseExportFrom;\n\nfunction shouldParseExportStar() {\n  if (_base.isFlowEnabled) {\n    return _flow.flowShouldParseExportStar.call(void 0, );\n  } else {\n    return _tokenizer.match.call(void 0, _types.TokenType.star);\n  }\n}\n\nfunction parseExportStar() {\n  if (_base.isFlowEnabled) {\n    _flow.flowParseExportStar.call(void 0, );\n  } else {\n    baseParseExportStar();\n  }\n}\n\n function baseParseExportStar() {\n  _util.expect.call(void 0, _types.TokenType.star);\n\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._as)) {\n    parseExportNamespace();\n  } else {\n    parseExportFrom();\n  }\n} exports.baseParseExportStar = baseParseExportStar;\n\nfunction parseExportNamespace() {\n  _tokenizer.next.call(void 0, );\n  _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._as;\n  _expression.parseIdentifier.call(void 0, );\n  parseExportSpecifiersMaybe();\n  parseExportFrom();\n}\n\nfunction shouldParseExportDeclaration() {\n  return (\n    (_base.isTypeScriptEnabled && _typescript.tsIsDeclarationStart.call(void 0, )) ||\n    (_base.isFlowEnabled && _flow.flowShouldParseExportDeclaration.call(void 0, )) ||\n    _base.state.type === _types.TokenType._var ||\n    _base.state.type === _types.TokenType._const ||\n    _base.state.type === _types.TokenType._let ||\n    _base.state.type === _types.TokenType._function ||\n    _base.state.type === _types.TokenType._class ||\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._async) ||\n    _tokenizer.match.call(void 0, _types.TokenType.at)\n  );\n}\n\n// Parses a comma-separated list of module exports.\n function parseExportSpecifiers() {\n  let first = true;\n\n  // export { x, y as z } [from '...']\n  _util.expect.call(void 0, _types.TokenType.braceL);\n\n  while (!_tokenizer.eat.call(void 0, _types.TokenType.braceR) && !_base.state.error) {\n    if (first) {\n      first = false;\n    } else {\n      _util.expect.call(void 0, _types.TokenType.comma);\n      if (_tokenizer.eat.call(void 0, _types.TokenType.braceR)) {\n        break;\n      }\n    }\n\n    _expression.parseIdentifier.call(void 0, );\n    _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _tokenizer.IdentifierRole.ExportAccess;\n    if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._as)) {\n      _expression.parseIdentifier.call(void 0, );\n    }\n  }\n} exports.parseExportSpecifiers = parseExportSpecifiers;\n\n// Parses import declaration.\n\n function parseImport() {\n  if (_base.isTypeScriptEnabled && _tokenizer.match.call(void 0, _types.TokenType.name) && _tokenizer.lookaheadType.call(void 0, ) === _types.TokenType.eq) {\n    _typescript.tsParseImportEqualsDeclaration.call(void 0, );\n    return;\n  }\n\n  // import '...'\n  if (_tokenizer.match.call(void 0, _types.TokenType.string)) {\n    _expression.parseExprAtom.call(void 0, );\n  } else {\n    parseImportSpecifiers();\n    _util.expectContextual.call(void 0, _keywords.ContextualKeyword._from);\n    _expression.parseExprAtom.call(void 0, );\n  }\n  _util.semicolon.call(void 0, );\n} exports.parseImport = parseImport;\n\n// eslint-disable-next-line no-unused-vars\nfunction shouldParseDefaultImport() {\n  return _tokenizer.match.call(void 0, _types.TokenType.name);\n}\n\nfunction parseImportSpecifierLocal() {\n  _lval.parseImportedIdentifier.call(void 0, );\n}\n\n// Parses a comma-separated list of module imports.\nfunction parseImportSpecifiers() {\n  if (_base.isFlowEnabled) {\n    _flow.flowStartParseImportSpecifiers.call(void 0, );\n  }\n\n  let first = true;\n  if (shouldParseDefaultImport()) {\n    // import defaultObj, { x, y as z } from '...'\n    parseImportSpecifierLocal();\n\n    if (!_tokenizer.eat.call(void 0, _types.TokenType.comma)) return;\n  }\n\n  if (_tokenizer.match.call(void 0, _types.TokenType.star)) {\n    _tokenizer.next.call(void 0, );\n    _util.expectContextual.call(void 0, _keywords.ContextualKeyword._as);\n\n    parseImportSpecifierLocal();\n\n    return;\n  }\n\n  _util.expect.call(void 0, _types.TokenType.braceL);\n  while (!_tokenizer.eat.call(void 0, _types.TokenType.braceR) && !_base.state.error) {\n    if (first) {\n      first = false;\n    } else {\n      // Detect an attempt to deep destructure\n      if (_tokenizer.eat.call(void 0, _types.TokenType.colon)) {\n        _util.unexpected.call(void 0, \n          \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n        );\n      }\n\n      _util.expect.call(void 0, _types.TokenType.comma);\n      if (_tokenizer.eat.call(void 0, _types.TokenType.braceR)) {\n        break;\n      }\n    }\n\n    parseImportSpecifier();\n  }\n}\n\nfunction parseImportSpecifier() {\n  if (_base.isFlowEnabled) {\n    _flow.flowParseImportSpecifier.call(void 0, );\n    return;\n  }\n  _lval.parseImportedIdentifier.call(void 0, );\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._as)) {\n    _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _tokenizer.IdentifierRole.ImportAccess;\n    _tokenizer.next.call(void 0, );\n    _lval.parseImportedIdentifier.call(void 0, );\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/parser/traverser/statement.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/parser/traverser/util.js":
/*!************************************************************!*\
  !*** ./node_modules/sucrase/dist/parser/traverser/util.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", {value: true});var _index = __webpack_require__(/*! ../tokenizer/index */ \"./node_modules/sucrase/dist/parser/tokenizer/index.js\");\n\nvar _types = __webpack_require__(/*! ../tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\nvar _charcodes = __webpack_require__(/*! ../util/charcodes */ \"./node_modules/sucrase/dist/parser/util/charcodes.js\");\nvar _base = __webpack_require__(/*! ./base */ \"./node_modules/sucrase/dist/parser/traverser/base.js\");\n\n// ## Parser utilities\n\n// Tests whether parsed token is a contextual keyword.\n function isContextual(contextualKeyword) {\n  return _base.state.contextualKeyword === contextualKeyword;\n} exports.isContextual = isContextual;\n\n function isLookaheadContextual(contextualKeyword) {\n  const l = _index.lookaheadTypeAndKeyword.call(void 0, );\n  return l.type === _types.TokenType.name && l.contextualKeyword === contextualKeyword;\n} exports.isLookaheadContextual = isLookaheadContextual;\n\n// Consumes contextual keyword if possible.\n function eatContextual(contextualKeyword) {\n  return _base.state.contextualKeyword === contextualKeyword && _index.eat.call(void 0, _types.TokenType.name);\n} exports.eatContextual = eatContextual;\n\n// Asserts that following token is given contextual keyword.\n function expectContextual(contextualKeyword) {\n  if (!eatContextual(contextualKeyword)) {\n    unexpected();\n  }\n} exports.expectContextual = expectContextual;\n\n// Test whether a semicolon can be inserted at the current position.\n function canInsertSemicolon() {\n  return _index.match.call(void 0, _types.TokenType.eof) || _index.match.call(void 0, _types.TokenType.braceR) || hasPrecedingLineBreak();\n} exports.canInsertSemicolon = canInsertSemicolon;\n\n function hasPrecedingLineBreak() {\n  const prevToken = _base.state.tokens[_base.state.tokens.length - 1];\n  const lastTokEnd = prevToken ? prevToken.end : 0;\n  for (let i = lastTokEnd; i < _base.state.start; i++) {\n    const code = _base.input.charCodeAt(i);\n    if (\n      code === _charcodes.charCodes.lineFeed ||\n      code === _charcodes.charCodes.carriageReturn ||\n      code === 0x2028 ||\n      code === 0x2029\n    ) {\n      return true;\n    }\n  }\n  return false;\n} exports.hasPrecedingLineBreak = hasPrecedingLineBreak;\n\n function isLineTerminator() {\n  return _index.eat.call(void 0, _types.TokenType.semi) || canInsertSemicolon();\n} exports.isLineTerminator = isLineTerminator;\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n function semicolon() {\n  if (!isLineTerminator()) {\n    unexpected('Unexpected token, expected \";\"');\n  }\n} exports.semicolon = semicolon;\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error at given pos.\n function expect(type) {\n  const matched = _index.eat.call(void 0, type);\n  if (!matched) {\n    unexpected(`Unexpected token, expected \"${_types.formatTokenType.call(void 0, type)}\"`);\n  }\n} exports.expect = expect;\n\n/**\n * Transition the parser to an error state. All code needs to be written to naturally unwind in this\n * state, which allows us to backtrack without exceptions and without error plumbing everywhere.\n */\n function unexpected(message = \"Unexpected token\", pos = _base.state.start) {\n  if (_base.state.error) {\n    return;\n  }\n  // tslint:disable-next-line no-any\n  const err = new SyntaxError(message);\n  err.pos = pos;\n  _base.state.error = err;\n  _base.state.pos = _base.input.length;\n  _index.finishToken.call(void 0, _types.TokenType.eof);\n} exports.unexpected = unexpected;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3BhcnNlci90cmF2ZXJzZXIvdXRpbC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvcGFyc2VyL3RyYXZlcnNlci91dGlsLmpzP2I0YjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7dmFsdWU6IHRydWV9KTt2YXIgX2luZGV4ID0gcmVxdWlyZSgnLi4vdG9rZW5pemVyL2luZGV4Jyk7XG5cbnZhciBfdHlwZXMgPSByZXF1aXJlKCcuLi90b2tlbml6ZXIvdHlwZXMnKTtcbnZhciBfY2hhcmNvZGVzID0gcmVxdWlyZSgnLi4vdXRpbC9jaGFyY29kZXMnKTtcbnZhciBfYmFzZSA9IHJlcXVpcmUoJy4vYmFzZScpO1xuXG4vLyAjIyBQYXJzZXIgdXRpbGl0aWVzXG5cbi8vIFRlc3RzIHdoZXRoZXIgcGFyc2VkIHRva2VuIGlzIGEgY29udGV4dHVhbCBrZXl3b3JkLlxuIGZ1bmN0aW9uIGlzQ29udGV4dHVhbChjb250ZXh0dWFsS2V5d29yZCkge1xuICByZXR1cm4gX2Jhc2Uuc3RhdGUuY29udGV4dHVhbEtleXdvcmQgPT09IGNvbnRleHR1YWxLZXl3b3JkO1xufSBleHBvcnRzLmlzQ29udGV4dHVhbCA9IGlzQ29udGV4dHVhbDtcblxuIGZ1bmN0aW9uIGlzTG9va2FoZWFkQ29udGV4dHVhbChjb250ZXh0dWFsS2V5d29yZCkge1xuICBjb25zdCBsID0gX2luZGV4Lmxvb2thaGVhZFR5cGVBbmRLZXl3b3JkLmNhbGwodm9pZCAwLCApO1xuICByZXR1cm4gbC50eXBlID09PSBfdHlwZXMuVG9rZW5UeXBlLm5hbWUgJiYgbC5jb250ZXh0dWFsS2V5d29yZCA9PT0gY29udGV4dHVhbEtleXdvcmQ7XG59IGV4cG9ydHMuaXNMb29rYWhlYWRDb250ZXh0dWFsID0gaXNMb29rYWhlYWRDb250ZXh0dWFsO1xuXG4vLyBDb25zdW1lcyBjb250ZXh0dWFsIGtleXdvcmQgaWYgcG9zc2libGUuXG4gZnVuY3Rpb24gZWF0Q29udGV4dHVhbChjb250ZXh0dWFsS2V5d29yZCkge1xuICByZXR1cm4gX2Jhc2Uuc3RhdGUuY29udGV4dHVhbEtleXdvcmQgPT09IGNvbnRleHR1YWxLZXl3b3JkICYmIF9pbmRleC5lYXQuY2FsbCh2b2lkIDAsIF90eXBlcy5Ub2tlblR5cGUubmFtZSk7XG59IGV4cG9ydHMuZWF0Q29udGV4dHVhbCA9IGVhdENvbnRleHR1YWw7XG5cbi8vIEFzc2VydHMgdGhhdCBmb2xsb3dpbmcgdG9rZW4gaXMgZ2l2ZW4gY29udGV4dHVhbCBrZXl3b3JkLlxuIGZ1bmN0aW9uIGV4cGVjdENvbnRleHR1YWwoY29udGV4dHVhbEtleXdvcmQpIHtcbiAgaWYgKCFlYXRDb250ZXh0dWFsKGNvbnRleHR1YWxLZXl3b3JkKSkge1xuICAgIHVuZXhwZWN0ZWQoKTtcbiAgfVxufSBleHBvcnRzLmV4cGVjdENvbnRleHR1YWwgPSBleHBlY3RDb250ZXh0dWFsO1xuXG4vLyBUZXN0IHdoZXRoZXIgYSBzZW1pY29sb24gY2FuIGJlIGluc2VydGVkIGF0IHRoZSBjdXJyZW50IHBvc2l0aW9uLlxuIGZ1bmN0aW9uIGNhbkluc2VydFNlbWljb2xvbigpIHtcbiAgcmV0dXJuIF9pbmRleC5tYXRjaC5jYWxsKHZvaWQgMCwgX3R5cGVzLlRva2VuVHlwZS5lb2YpIHx8IF9pbmRleC5tYXRjaC5jYWxsKHZvaWQgMCwgX3R5cGVzLlRva2VuVHlwZS5icmFjZVIpIHx8IGhhc1ByZWNlZGluZ0xpbmVCcmVhaygpO1xufSBleHBvcnRzLmNhbkluc2VydFNlbWljb2xvbiA9IGNhbkluc2VydFNlbWljb2xvbjtcblxuIGZ1bmN0aW9uIGhhc1ByZWNlZGluZ0xpbmVCcmVhaygpIHtcbiAgY29uc3QgcHJldlRva2VuID0gX2Jhc2Uuc3RhdGUudG9rZW5zW19iYXNlLnN0YXRlLnRva2Vucy5sZW5ndGggLSAxXTtcbiAgY29uc3QgbGFzdFRva0VuZCA9IHByZXZUb2tlbiA/IHByZXZUb2tlbi5lbmQgOiAwO1xuICBmb3IgKGxldCBpID0gbGFzdFRva0VuZDsgaSA8IF9iYXNlLnN0YXRlLnN0YXJ0OyBpKyspIHtcbiAgICBjb25zdCBjb2RlID0gX2Jhc2UuaW5wdXQuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoXG4gICAgICBjb2RlID09PSBfY2hhcmNvZGVzLmNoYXJDb2Rlcy5saW5lRmVlZCB8fFxuICAgICAgY29kZSA9PT0gX2NoYXJjb2Rlcy5jaGFyQ29kZXMuY2FycmlhZ2VSZXR1cm4gfHxcbiAgICAgIGNvZGUgPT09IDB4MjAyOCB8fFxuICAgICAgY29kZSA9PT0gMHgyMDI5XG4gICAgKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSBleHBvcnRzLmhhc1ByZWNlZGluZ0xpbmVCcmVhayA9IGhhc1ByZWNlZGluZ0xpbmVCcmVhaztcblxuIGZ1bmN0aW9uIGlzTGluZVRlcm1pbmF0b3IoKSB7XG4gIHJldHVybiBfaW5kZXguZWF0LmNhbGwodm9pZCAwLCBfdHlwZXMuVG9rZW5UeXBlLnNlbWkpIHx8IGNhbkluc2VydFNlbWljb2xvbigpO1xufSBleHBvcnRzLmlzTGluZVRlcm1pbmF0b3IgPSBpc0xpbmVUZXJtaW5hdG9yO1xuXG4vLyBDb25zdW1lIGEgc2VtaWNvbG9uLCBvciwgZmFpbGluZyB0aGF0LCBzZWUgaWYgd2UgYXJlIGFsbG93ZWQgdG9cbi8vIHByZXRlbmQgdGhhdCB0aGVyZSBpcyBhIHNlbWljb2xvbiBhdCB0aGlzIHBvc2l0aW9uLlxuIGZ1bmN0aW9uIHNlbWljb2xvbigpIHtcbiAgaWYgKCFpc0xpbmVUZXJtaW5hdG9yKCkpIHtcbiAgICB1bmV4cGVjdGVkKCdVbmV4cGVjdGVkIHRva2VuLCBleHBlY3RlZCBcIjtcIicpO1xuICB9XG59IGV4cG9ydHMuc2VtaWNvbG9uID0gc2VtaWNvbG9uO1xuXG4vLyBFeHBlY3QgYSB0b2tlbiBvZiBhIGdpdmVuIHR5cGUuIElmIGZvdW5kLCBjb25zdW1lIGl0LCBvdGhlcndpc2UsXG4vLyByYWlzZSBhbiB1bmV4cGVjdGVkIHRva2VuIGVycm9yIGF0IGdpdmVuIHBvcy5cbiBmdW5jdGlvbiBleHBlY3QodHlwZSkge1xuICBjb25zdCBtYXRjaGVkID0gX2luZGV4LmVhdC5jYWxsKHZvaWQgMCwgdHlwZSk7XG4gIGlmICghbWF0Y2hlZCkge1xuICAgIHVuZXhwZWN0ZWQoYFVuZXhwZWN0ZWQgdG9rZW4sIGV4cGVjdGVkIFwiJHtfdHlwZXMuZm9ybWF0VG9rZW5UeXBlLmNhbGwodm9pZCAwLCB0eXBlKX1cImApO1xuICB9XG59IGV4cG9ydHMuZXhwZWN0ID0gZXhwZWN0O1xuXG4vKipcbiAqIFRyYW5zaXRpb24gdGhlIHBhcnNlciB0byBhbiBlcnJvciBzdGF0ZS4gQWxsIGNvZGUgbmVlZHMgdG8gYmUgd3JpdHRlbiB0byBuYXR1cmFsbHkgdW53aW5kIGluIHRoaXNcbiAqIHN0YXRlLCB3aGljaCBhbGxvd3MgdXMgdG8gYmFja3RyYWNrIHdpdGhvdXQgZXhjZXB0aW9ucyBhbmQgd2l0aG91dCBlcnJvciBwbHVtYmluZyBldmVyeXdoZXJlLlxuICovXG4gZnVuY3Rpb24gdW5leHBlY3RlZChtZXNzYWdlID0gXCJVbmV4cGVjdGVkIHRva2VuXCIsIHBvcyA9IF9iYXNlLnN0YXRlLnN0YXJ0KSB7XG4gIGlmIChfYmFzZS5zdGF0ZS5lcnJvcikge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmUgbm8tYW55XG4gIGNvbnN0IGVyciA9IG5ldyBTeW50YXhFcnJvcihtZXNzYWdlKTtcbiAgZXJyLnBvcyA9IHBvcztcbiAgX2Jhc2Uuc3RhdGUuZXJyb3IgPSBlcnI7XG4gIF9iYXNlLnN0YXRlLnBvcyA9IF9iYXNlLmlucHV0Lmxlbmd0aDtcbiAgX2luZGV4LmZpbmlzaFRva2VuLmNhbGwodm9pZCAwLCBfdHlwZXMuVG9rZW5UeXBlLmVvZik7XG59IGV4cG9ydHMudW5leHBlY3RlZCA9IHVuZXhwZWN0ZWQ7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/parser/traverser/util.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/parser/util/charcodes.js":
/*!************************************************************!*\
  !*** ./node_modules/sucrase/dist/parser/util/charcodes.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", {value: true});var charCodes; (function (charCodes) {\n  const backSpace = 8; charCodes[charCodes[\"backSpace\"] = backSpace] = \"backSpace\";\n  const lineFeed = 10; charCodes[charCodes[\"lineFeed\"] = lineFeed] = \"lineFeed\"; //  '\\n'\n  const carriageReturn = 13; charCodes[charCodes[\"carriageReturn\"] = carriageReturn] = \"carriageReturn\"; //  '\\r'\n  const shiftOut = 14; charCodes[charCodes[\"shiftOut\"] = shiftOut] = \"shiftOut\";\n  const space = 32; charCodes[charCodes[\"space\"] = space] = \"space\";\n  const exclamationMark = 33; charCodes[charCodes[\"exclamationMark\"] = exclamationMark] = \"exclamationMark\"; //  '!'\n  const quotationMark = 34; charCodes[charCodes[\"quotationMark\"] = quotationMark] = \"quotationMark\"; //  '\"'\n  const numberSign = 35; charCodes[charCodes[\"numberSign\"] = numberSign] = \"numberSign\"; //  '#'\n  const dollarSign = 36; charCodes[charCodes[\"dollarSign\"] = dollarSign] = \"dollarSign\"; //  '$'\n  const percentSign = 37; charCodes[charCodes[\"percentSign\"] = percentSign] = \"percentSign\"; //  '%'\n  const ampersand = 38; charCodes[charCodes[\"ampersand\"] = ampersand] = \"ampersand\"; //  '&'\n  const apostrophe = 39; charCodes[charCodes[\"apostrophe\"] = apostrophe] = \"apostrophe\"; //  '''\n  const leftParenthesis = 40; charCodes[charCodes[\"leftParenthesis\"] = leftParenthesis] = \"leftParenthesis\"; //  '('\n  const rightParenthesis = 41; charCodes[charCodes[\"rightParenthesis\"] = rightParenthesis] = \"rightParenthesis\"; //  ')'\n  const asterisk = 42; charCodes[charCodes[\"asterisk\"] = asterisk] = \"asterisk\"; //  '*'\n  const plusSign = 43; charCodes[charCodes[\"plusSign\"] = plusSign] = \"plusSign\"; //  '+'\n  const comma = 44; charCodes[charCodes[\"comma\"] = comma] = \"comma\"; //  ','\n  const dash = 45; charCodes[charCodes[\"dash\"] = dash] = \"dash\"; //  '-'\n  const dot = 46; charCodes[charCodes[\"dot\"] = dot] = \"dot\"; //  '.'\n  const slash = 47; charCodes[charCodes[\"slash\"] = slash] = \"slash\"; //  '/'\n  const digit0 = 48; charCodes[charCodes[\"digit0\"] = digit0] = \"digit0\"; //  '0'\n  const digit1 = 49; charCodes[charCodes[\"digit1\"] = digit1] = \"digit1\"; //  '1'\n  const digit2 = 50; charCodes[charCodes[\"digit2\"] = digit2] = \"digit2\"; //  '2'\n  const digit3 = 51; charCodes[charCodes[\"digit3\"] = digit3] = \"digit3\"; //  '3'\n  const digit4 = 52; charCodes[charCodes[\"digit4\"] = digit4] = \"digit4\"; //  '4'\n  const digit5 = 53; charCodes[charCodes[\"digit5\"] = digit5] = \"digit5\"; //  '5'\n  const digit6 = 54; charCodes[charCodes[\"digit6\"] = digit6] = \"digit6\"; //  '6'\n  const digit7 = 55; charCodes[charCodes[\"digit7\"] = digit7] = \"digit7\"; //  '7'\n  const digit8 = 56; charCodes[charCodes[\"digit8\"] = digit8] = \"digit8\"; //  '8'\n  const digit9 = 57; charCodes[charCodes[\"digit9\"] = digit9] = \"digit9\"; //  '9'\n  const colon = 58; charCodes[charCodes[\"colon\"] = colon] = \"colon\"; //  ':'\n  const semicolon = 59; charCodes[charCodes[\"semicolon\"] = semicolon] = \"semicolon\"; //  ';'\n  const lessThan = 60; charCodes[charCodes[\"lessThan\"] = lessThan] = \"lessThan\"; //  '<'\n  const equalsTo = 61; charCodes[charCodes[\"equalsTo\"] = equalsTo] = \"equalsTo\"; //  '='\n  const greaterThan = 62; charCodes[charCodes[\"greaterThan\"] = greaterThan] = \"greaterThan\"; //  '>'\n  const questionMark = 63; charCodes[charCodes[\"questionMark\"] = questionMark] = \"questionMark\"; //  '?'\n  const atSign = 64; charCodes[charCodes[\"atSign\"] = atSign] = \"atSign\"; //  '@'\n  const uppercaseA = 65; charCodes[charCodes[\"uppercaseA\"] = uppercaseA] = \"uppercaseA\"; //  'A'\n  const uppercaseB = 66; charCodes[charCodes[\"uppercaseB\"] = uppercaseB] = \"uppercaseB\"; //  'B'\n  const uppercaseC = 67; charCodes[charCodes[\"uppercaseC\"] = uppercaseC] = \"uppercaseC\"; //  'C'\n  const uppercaseD = 68; charCodes[charCodes[\"uppercaseD\"] = uppercaseD] = \"uppercaseD\"; //  'D'\n  const uppercaseE = 69; charCodes[charCodes[\"uppercaseE\"] = uppercaseE] = \"uppercaseE\"; //  'E'\n  const uppercaseF = 70; charCodes[charCodes[\"uppercaseF\"] = uppercaseF] = \"uppercaseF\"; //  'F'\n  const uppercaseG = 71; charCodes[charCodes[\"uppercaseG\"] = uppercaseG] = \"uppercaseG\"; //  'G'\n  const uppercaseH = 72; charCodes[charCodes[\"uppercaseH\"] = uppercaseH] = \"uppercaseH\"; //  'H'\n  const uppercaseI = 73; charCodes[charCodes[\"uppercaseI\"] = uppercaseI] = \"uppercaseI\"; //  'I'\n  const uppercaseJ = 74; charCodes[charCodes[\"uppercaseJ\"] = uppercaseJ] = \"uppercaseJ\"; //  'J'\n  const uppercaseK = 75; charCodes[charCodes[\"uppercaseK\"] = uppercaseK] = \"uppercaseK\"; //  'K'\n  const uppercaseL = 76; charCodes[charCodes[\"uppercaseL\"] = uppercaseL] = \"uppercaseL\"; //  'L'\n  const uppercaseM = 77; charCodes[charCodes[\"uppercaseM\"] = uppercaseM] = \"uppercaseM\"; //  'M'\n  const uppercaseN = 78; charCodes[charCodes[\"uppercaseN\"] = uppercaseN] = \"uppercaseN\"; //  'N'\n  const uppercaseO = 79; charCodes[charCodes[\"uppercaseO\"] = uppercaseO] = \"uppercaseO\"; //  'O'\n  const uppercaseP = 80; charCodes[charCodes[\"uppercaseP\"] = uppercaseP] = \"uppercaseP\"; //  'P'\n  const uppercaseQ = 81; charCodes[charCodes[\"uppercaseQ\"] = uppercaseQ] = \"uppercaseQ\"; //  'Q'\n  const uppercaseR = 82; charCodes[charCodes[\"uppercaseR\"] = uppercaseR] = \"uppercaseR\"; //  'R'\n  const uppercaseS = 83; charCodes[charCodes[\"uppercaseS\"] = uppercaseS] = \"uppercaseS\"; //  'S'\n  const uppercaseT = 84; charCodes[charCodes[\"uppercaseT\"] = uppercaseT] = \"uppercaseT\"; //  'T'\n  const uppercaseU = 85; charCodes[charCodes[\"uppercaseU\"] = uppercaseU] = \"uppercaseU\"; //  'U'\n  const uppercaseV = 86; charCodes[charCodes[\"uppercaseV\"] = uppercaseV] = \"uppercaseV\"; //  'V'\n  const uppercaseW = 87; charCodes[charCodes[\"uppercaseW\"] = uppercaseW] = \"uppercaseW\"; //  'W'\n  const uppercaseX = 88; charCodes[charCodes[\"uppercaseX\"] = uppercaseX] = \"uppercaseX\"; //  'X'\n  const uppercaseY = 89; charCodes[charCodes[\"uppercaseY\"] = uppercaseY] = \"uppercaseY\"; //  'Y'\n  const uppercaseZ = 90; charCodes[charCodes[\"uppercaseZ\"] = uppercaseZ] = \"uppercaseZ\"; //  'Z'\n  const leftSquareBracket = 91; charCodes[charCodes[\"leftSquareBracket\"] = leftSquareBracket] = \"leftSquareBracket\"; //  '['\n  const backslash = 92; charCodes[charCodes[\"backslash\"] = backslash] = \"backslash\"; //  '\\    '\n  const rightSquareBracket = 93; charCodes[charCodes[\"rightSquareBracket\"] = rightSquareBracket] = \"rightSquareBracket\"; //  ']'\n  const caret = 94; charCodes[charCodes[\"caret\"] = caret] = \"caret\"; //  '^'\n  const underscore = 95; charCodes[charCodes[\"underscore\"] = underscore] = \"underscore\"; //  '_'\n  const graveAccent = 96; charCodes[charCodes[\"graveAccent\"] = graveAccent] = \"graveAccent\"; //  '`'\n  const lowercaseA = 97; charCodes[charCodes[\"lowercaseA\"] = lowercaseA] = \"lowercaseA\"; //  'a'\n  const lowercaseB = 98; charCodes[charCodes[\"lowercaseB\"] = lowercaseB] = \"lowercaseB\"; //  'b'\n  const lowercaseC = 99; charCodes[charCodes[\"lowercaseC\"] = lowercaseC] = \"lowercaseC\"; //  'c'\n  const lowercaseD = 100; charCodes[charCodes[\"lowercaseD\"] = lowercaseD] = \"lowercaseD\"; //  'd'\n  const lowercaseE = 101; charCodes[charCodes[\"lowercaseE\"] = lowercaseE] = \"lowercaseE\"; //  'e'\n  const lowercaseF = 102; charCodes[charCodes[\"lowercaseF\"] = lowercaseF] = \"lowercaseF\"; //  'f'\n  const lowercaseG = 103; charCodes[charCodes[\"lowercaseG\"] = lowercaseG] = \"lowercaseG\"; //  'g'\n  const lowercaseH = 104; charCodes[charCodes[\"lowercaseH\"] = lowercaseH] = \"lowercaseH\"; //  'h'\n  const lowercaseI = 105; charCodes[charCodes[\"lowercaseI\"] = lowercaseI] = \"lowercaseI\"; //  'i'\n  const lowercaseJ = 106; charCodes[charCodes[\"lowercaseJ\"] = lowercaseJ] = \"lowercaseJ\"; //  'j'\n  const lowercaseK = 107; charCodes[charCodes[\"lowercaseK\"] = lowercaseK] = \"lowercaseK\"; //  'k'\n  const lowercaseL = 108; charCodes[charCodes[\"lowercaseL\"] = lowercaseL] = \"lowercaseL\"; //  'l'\n  const lowercaseM = 109; charCodes[charCodes[\"lowercaseM\"] = lowercaseM] = \"lowercaseM\"; //  'm'\n  const lowercaseN = 110; charCodes[charCodes[\"lowercaseN\"] = lowercaseN] = \"lowercaseN\"; //  'n'\n  const lowercaseO = 111; charCodes[charCodes[\"lowercaseO\"] = lowercaseO] = \"lowercaseO\"; //  'o'\n  const lowercaseP = 112; charCodes[charCodes[\"lowercaseP\"] = lowercaseP] = \"lowercaseP\"; //  'p'\n  const lowercaseQ = 113; charCodes[charCodes[\"lowercaseQ\"] = lowercaseQ] = \"lowercaseQ\"; //  'q'\n  const lowercaseR = 114; charCodes[charCodes[\"lowercaseR\"] = lowercaseR] = \"lowercaseR\"; //  'r'\n  const lowercaseS = 115; charCodes[charCodes[\"lowercaseS\"] = lowercaseS] = \"lowercaseS\"; //  's'\n  const lowercaseT = 116; charCodes[charCodes[\"lowercaseT\"] = lowercaseT] = \"lowercaseT\"; //  't'\n  const lowercaseU = 117; charCodes[charCodes[\"lowercaseU\"] = lowercaseU] = \"lowercaseU\"; //  'u'\n  const lowercaseV = 118; charCodes[charCodes[\"lowercaseV\"] = lowercaseV] = \"lowercaseV\"; //  'v'\n  const lowercaseW = 119; charCodes[charCodes[\"lowercaseW\"] = lowercaseW] = \"lowercaseW\"; //  'w'\n  const lowercaseX = 120; charCodes[charCodes[\"lowercaseX\"] = lowercaseX] = \"lowercaseX\"; //  'x'\n  const lowercaseY = 121; charCodes[charCodes[\"lowercaseY\"] = lowercaseY] = \"lowercaseY\"; //  'y'\n  const lowercaseZ = 122; charCodes[charCodes[\"lowercaseZ\"] = lowercaseZ] = \"lowercaseZ\"; //  'z'\n  const leftCurlyBrace = 123; charCodes[charCodes[\"leftCurlyBrace\"] = leftCurlyBrace] = \"leftCurlyBrace\"; //  '{'\n  const verticalBar = 124; charCodes[charCodes[\"verticalBar\"] = verticalBar] = \"verticalBar\"; //  '|'\n  const rightCurlyBrace = 125; charCodes[charCodes[\"rightCurlyBrace\"] = rightCurlyBrace] = \"rightCurlyBrace\"; //  '}'\n  const tilde = 126; charCodes[charCodes[\"tilde\"] = tilde] = \"tilde\"; //  '~'\n  const nonBreakingSpace = 160; charCodes[charCodes[\"nonBreakingSpace\"] = nonBreakingSpace] = \"nonBreakingSpace\";\n  // eslint-disable-next-line no-irregular-whitespace\n  const oghamSpaceMark = 5760; charCodes[charCodes[\"oghamSpaceMark\"] = oghamSpaceMark] = \"oghamSpaceMark\"; // ' '\n  const lineSeparator = 8232; charCodes[charCodes[\"lineSeparator\"] = lineSeparator] = \"lineSeparator\";\n  const paragraphSeparator = 8233; charCodes[charCodes[\"paragraphSeparator\"] = paragraphSeparator] = \"paragraphSeparator\";\n})(charCodes || (exports.charCodes = charCodes = {}));\n\n function isDigit(code) {\n  return (\n    (code >= charCodes.digit0 && code <= charCodes.digit9) ||\n    (code >= charCodes.lowercaseA && code <= charCodes.lowercaseF) ||\n    (code >= charCodes.uppercaseA && code <= charCodes.uppercaseF)\n  );\n} exports.isDigit = isDigit;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/parser/util/charcodes.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/parser/util/identifier.js":
/*!*************************************************************!*\
  !*** ./node_modules/sucrase/dist/parser/util/identifier.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", {value: true});var _charcodes = __webpack_require__(/*! ./charcodes */ \"./node_modules/sucrase/dist/parser/util/charcodes.js\");\nvar _whitespace = __webpack_require__(/*! ./whitespace */ \"./node_modules/sucrase/dist/parser/util/whitespace.js\");\n\nfunction computeIsIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n  if (code < 128) return false;\n  throw new Error(\"Should not be called with non-ASCII char code.\");\n}\n\n const IS_IDENTIFIER_CHAR = new Uint8Array(65536); exports.IS_IDENTIFIER_CHAR = IS_IDENTIFIER_CHAR;\nfor (let i = 0; i < 128; i++) {\n  exports.IS_IDENTIFIER_CHAR[i] = computeIsIdentifierChar(i) ? 1 : 0;\n}\nfor (let i = 128; i < 65536; i++) {\n  exports.IS_IDENTIFIER_CHAR[i] = 1;\n}\n// Aside from whitespace and newlines, all characters outside the ASCII space are either\n// identifier characters or invalid. Since we're not performing code validation, we can just\n// treat all invalid characters as identifier characters.\nfor (const whitespaceChar of _whitespace.WHITESPACE_CHARS) {\n  exports.IS_IDENTIFIER_CHAR[whitespaceChar] = 0;\n}\nexports.IS_IDENTIFIER_CHAR[0x2028] = 0;\nexports.IS_IDENTIFIER_CHAR[0x2029] = 0;\n\n const IS_IDENTIFIER_START = exports.IS_IDENTIFIER_CHAR.slice(); exports.IS_IDENTIFIER_START = IS_IDENTIFIER_START;\nfor (let numChar = _charcodes.charCodes.digit0; numChar <= _charcodes.charCodes.digit9; numChar++) {\n  exports.IS_IDENTIFIER_START[numChar] = 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3BhcnNlci91dGlsL2lkZW50aWZpZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3BhcnNlci91dGlsL2lkZW50aWZpZXIuanM/ZGY4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogdHJ1ZX0pO3ZhciBfY2hhcmNvZGVzID0gcmVxdWlyZSgnLi9jaGFyY29kZXMnKTtcbnZhciBfd2hpdGVzcGFjZSA9IHJlcXVpcmUoJy4vd2hpdGVzcGFjZScpO1xuXG5mdW5jdGlvbiBjb21wdXRlSXNJZGVudGlmaWVyQ2hhcihjb2RlKSB7XG4gIGlmIChjb2RlIDwgNDgpIHJldHVybiBjb2RlID09PSAzNjtcbiAgaWYgKGNvZGUgPCA1OCkgcmV0dXJuIHRydWU7XG4gIGlmIChjb2RlIDwgNjUpIHJldHVybiBmYWxzZTtcbiAgaWYgKGNvZGUgPCA5MSkgcmV0dXJuIHRydWU7XG4gIGlmIChjb2RlIDwgOTcpIHJldHVybiBjb2RlID09PSA5NTtcbiAgaWYgKGNvZGUgPCAxMjMpIHJldHVybiB0cnVlO1xuICBpZiAoY29kZSA8IDEyOCkgcmV0dXJuIGZhbHNlO1xuICB0aHJvdyBuZXcgRXJyb3IoXCJTaG91bGQgbm90IGJlIGNhbGxlZCB3aXRoIG5vbi1BU0NJSSBjaGFyIGNvZGUuXCIpO1xufVxuXG4gY29uc3QgSVNfSURFTlRJRklFUl9DSEFSID0gbmV3IFVpbnQ4QXJyYXkoNjU1MzYpOyBleHBvcnRzLklTX0lERU5USUZJRVJfQ0hBUiA9IElTX0lERU5USUZJRVJfQ0hBUjtcbmZvciAobGV0IGkgPSAwOyBpIDwgMTI4OyBpKyspIHtcbiAgZXhwb3J0cy5JU19JREVOVElGSUVSX0NIQVJbaV0gPSBjb21wdXRlSXNJZGVudGlmaWVyQ2hhcihpKSA/IDEgOiAwO1xufVxuZm9yIChsZXQgaSA9IDEyODsgaSA8IDY1NTM2OyBpKyspIHtcbiAgZXhwb3J0cy5JU19JREVOVElGSUVSX0NIQVJbaV0gPSAxO1xufVxuLy8gQXNpZGUgZnJvbSB3aGl0ZXNwYWNlIGFuZCBuZXdsaW5lcywgYWxsIGNoYXJhY3RlcnMgb3V0c2lkZSB0aGUgQVNDSUkgc3BhY2UgYXJlIGVpdGhlclxuLy8gaWRlbnRpZmllciBjaGFyYWN0ZXJzIG9yIGludmFsaWQuIFNpbmNlIHdlJ3JlIG5vdCBwZXJmb3JtaW5nIGNvZGUgdmFsaWRhdGlvbiwgd2UgY2FuIGp1c3Rcbi8vIHRyZWF0IGFsbCBpbnZhbGlkIGNoYXJhY3RlcnMgYXMgaWRlbnRpZmllciBjaGFyYWN0ZXJzLlxuZm9yIChjb25zdCB3aGl0ZXNwYWNlQ2hhciBvZiBfd2hpdGVzcGFjZS5XSElURVNQQUNFX0NIQVJTKSB7XG4gIGV4cG9ydHMuSVNfSURFTlRJRklFUl9DSEFSW3doaXRlc3BhY2VDaGFyXSA9IDA7XG59XG5leHBvcnRzLklTX0lERU5USUZJRVJfQ0hBUlsweDIwMjhdID0gMDtcbmV4cG9ydHMuSVNfSURFTlRJRklFUl9DSEFSWzB4MjAyOV0gPSAwO1xuXG4gY29uc3QgSVNfSURFTlRJRklFUl9TVEFSVCA9IGV4cG9ydHMuSVNfSURFTlRJRklFUl9DSEFSLnNsaWNlKCk7IGV4cG9ydHMuSVNfSURFTlRJRklFUl9TVEFSVCA9IElTX0lERU5USUZJRVJfU1RBUlQ7XG5mb3IgKGxldCBudW1DaGFyID0gX2NoYXJjb2Rlcy5jaGFyQ29kZXMuZGlnaXQwOyBudW1DaGFyIDw9IF9jaGFyY29kZXMuY2hhckNvZGVzLmRpZ2l0OTsgbnVtQ2hhcisrKSB7XG4gIGV4cG9ydHMuSVNfSURFTlRJRklFUl9TVEFSVFtudW1DaGFyXSA9IDA7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/parser/util/identifier.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/parser/util/whitespace.js":
/*!*************************************************************!*\
  !*** ./node_modules/sucrase/dist/parser/util/whitespace.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", {value: true});var _charcodes = __webpack_require__(/*! ./charcodes */ \"./node_modules/sucrase/dist/parser/util/charcodes.js\");\n\n// https://tc39.github.io/ecma262/#sec-white-space\n const WHITESPACE_CHARS = [\n  0x0009,\n  0x000b,\n  0x000c,\n  _charcodes.charCodes.space,\n  _charcodes.charCodes.nonBreakingSpace,\n  _charcodes.charCodes.oghamSpaceMark,\n  0x2000, // EN QUAD\n  0x2001, // EM QUAD\n  0x2002, // EN SPACE\n  0x2003, // EM SPACE\n  0x2004, // THREE-PER-EM SPACE\n  0x2005, // FOUR-PER-EM SPACE\n  0x2006, // SIX-PER-EM SPACE\n  0x2007, // FIGURE SPACE\n  0x2008, // PUNCTUATION SPACE\n  0x2009, // THIN SPACE\n  0x200a, // HAIR SPACE\n  0x202f, // NARROW NO-BREAK SPACE\n  0x205f, // MEDIUM MATHEMATICAL SPACE\n  0x3000, // IDEOGRAPHIC SPACE\n  0xfeff, // ZERO WIDTH NO-BREAK SPACE\n]; exports.WHITESPACE_CHARS = WHITESPACE_CHARS;\n\n const IS_WHITESPACE = new Uint8Array(65536); exports.IS_WHITESPACE = IS_WHITESPACE;\nfor (const char of exports.WHITESPACE_CHARS) {\n  exports.IS_WHITESPACE[char] = 1;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3BhcnNlci91dGlsL3doaXRlc3BhY2UuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3BhcnNlci91dGlsL3doaXRlc3BhY2UuanM/M2NiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogdHJ1ZX0pO3ZhciBfY2hhcmNvZGVzID0gcmVxdWlyZSgnLi9jaGFyY29kZXMnKTtcblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtd2hpdGUtc3BhY2VcbiBjb25zdCBXSElURVNQQUNFX0NIQVJTID0gW1xuICAweDAwMDksXG4gIDB4MDAwYixcbiAgMHgwMDBjLFxuICBfY2hhcmNvZGVzLmNoYXJDb2Rlcy5zcGFjZSxcbiAgX2NoYXJjb2Rlcy5jaGFyQ29kZXMubm9uQnJlYWtpbmdTcGFjZSxcbiAgX2NoYXJjb2Rlcy5jaGFyQ29kZXMub2doYW1TcGFjZU1hcmssXG4gIDB4MjAwMCwgLy8gRU4gUVVBRFxuICAweDIwMDEsIC8vIEVNIFFVQURcbiAgMHgyMDAyLCAvLyBFTiBTUEFDRVxuICAweDIwMDMsIC8vIEVNIFNQQUNFXG4gIDB4MjAwNCwgLy8gVEhSRUUtUEVSLUVNIFNQQUNFXG4gIDB4MjAwNSwgLy8gRk9VUi1QRVItRU0gU1BBQ0VcbiAgMHgyMDA2LCAvLyBTSVgtUEVSLUVNIFNQQUNFXG4gIDB4MjAwNywgLy8gRklHVVJFIFNQQUNFXG4gIDB4MjAwOCwgLy8gUFVOQ1RVQVRJT04gU1BBQ0VcbiAgMHgyMDA5LCAvLyBUSElOIFNQQUNFXG4gIDB4MjAwYSwgLy8gSEFJUiBTUEFDRVxuICAweDIwMmYsIC8vIE5BUlJPVyBOTy1CUkVBSyBTUEFDRVxuICAweDIwNWYsIC8vIE1FRElVTSBNQVRIRU1BVElDQUwgU1BBQ0VcbiAgMHgzMDAwLCAvLyBJREVPR1JBUEhJQyBTUEFDRVxuICAweGZlZmYsIC8vIFpFUk8gV0lEVEggTk8tQlJFQUsgU1BBQ0Vcbl07IGV4cG9ydHMuV0hJVEVTUEFDRV9DSEFSUyA9IFdISVRFU1BBQ0VfQ0hBUlM7XG5cbiBjb25zdCBJU19XSElURVNQQUNFID0gbmV3IFVpbnQ4QXJyYXkoNjU1MzYpOyBleHBvcnRzLklTX1dISVRFU1BBQ0UgPSBJU19XSElURVNQQUNFO1xuZm9yIChjb25zdCBjaGFyIG9mIGV4cG9ydHMuV0hJVEVTUEFDRV9DSEFSUykge1xuICBleHBvcnRzLklTX1dISVRFU1BBQ0VbY2hhcl0gPSAxO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/parser/util/whitespace.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/transformers/CJSImportTransformer.js":
/*!************************************************************************!*\
  !*** ./node_modules/sucrase/dist/transformers/CJSImportTransformer.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _tokenizer = __webpack_require__(/*! ../parser/tokenizer */ \"./node_modules/sucrase/dist/parser/tokenizer/index.js\");\nvar _keywords = __webpack_require__(/*! ../parser/tokenizer/keywords */ \"./node_modules/sucrase/dist/parser/tokenizer/keywords.js\");\nvar _types = __webpack_require__(/*! ../parser/tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\n\nvar _elideImportEquals = __webpack_require__(/*! ../util/elideImportEquals */ \"./node_modules/sucrase/dist/util/elideImportEquals.js\"); var _elideImportEquals2 = _interopRequireDefault(_elideImportEquals);\n\n\n\nvar _getDeclarationInfo = __webpack_require__(/*! ../util/getDeclarationInfo */ \"./node_modules/sucrase/dist/util/getDeclarationInfo.js\"); var _getDeclarationInfo2 = _interopRequireDefault(_getDeclarationInfo);\nvar _shouldElideDefaultExport = __webpack_require__(/*! ../util/shouldElideDefaultExport */ \"./node_modules/sucrase/dist/util/shouldElideDefaultExport.js\"); var _shouldElideDefaultExport2 = _interopRequireDefault(_shouldElideDefaultExport);\n\n\nvar _Transformer = __webpack_require__(/*! ./Transformer */ \"./node_modules/sucrase/dist/transformers/Transformer.js\"); var _Transformer2 = _interopRequireDefault(_Transformer);\n\n/**\n * Class for editing import statements when we are transforming to commonjs.\n */\n class CJSImportTransformer extends _Transformer2.default {\n   __init() {this.hadExport = false}\n   __init2() {this.hadNamedExport = false}\n   __init3() {this.hadDefaultExport = false}\n  \n\n  constructor(\n     rootTransformer,\n     tokens,\n     importProcessor,\n     nameManager,\n     reactHotLoaderTransformer,\n     enableLegacyBabel5ModuleInterop,\n     isTypeScriptTransformEnabled,\n  ) {\n    super();this.rootTransformer = rootTransformer;this.tokens = tokens;this.importProcessor = importProcessor;this.nameManager = nameManager;this.reactHotLoaderTransformer = reactHotLoaderTransformer;this.enableLegacyBabel5ModuleInterop = enableLegacyBabel5ModuleInterop;this.isTypeScriptTransformEnabled = isTypeScriptTransformEnabled;CJSImportTransformer.prototype.__init.call(this);CJSImportTransformer.prototype.__init2.call(this);CJSImportTransformer.prototype.__init3.call(this);;\n    this.declarationInfo = isTypeScriptTransformEnabled\n      ? _getDeclarationInfo2.default.call(void 0, tokens)\n      : _getDeclarationInfo.EMPTY_DECLARATION_INFO;\n  }\n\n  getPrefixCode() {\n    let prefix = this.importProcessor.getPrefixCode();\n    if (this.hadExport) {\n      prefix += 'Object.defineProperty(exports, \"__esModule\", {value: true});';\n    }\n    return prefix;\n  }\n\n  getSuffixCode() {\n    if (this.enableLegacyBabel5ModuleInterop && this.hadDefaultExport && !this.hadNamedExport) {\n      return \"\\nmodule.exports = exports.default;\\n\";\n    }\n    return \"\";\n  }\n\n  process() {\n    // TypeScript `import foo = require('foo');` should always just be translated to plain require.\n    if (this.tokens.matches3(_types.TokenType._import, _types.TokenType.name, _types.TokenType.eq)) {\n      return this.processImportEquals();\n    }\n    if (this.tokens.matches1(_types.TokenType._import)) {\n      this.processImport();\n      return true;\n    }\n    if (this.tokens.matches2(_types.TokenType._export, _types.TokenType.eq)) {\n      this.tokens.replaceToken(\"module.exports\");\n      return true;\n    }\n    if (this.tokens.matches1(_types.TokenType._export) && !this.tokens.currentToken().isType) {\n      this.hadExport = true;\n      return this.processExport();\n    }\n    if (this.tokens.matches2(_types.TokenType.name, _types.TokenType.postIncDec)) {\n      // Fall through to normal identifier matching if this doesn't apply.\n      if (this.processPostIncDec()) {\n        return true;\n      }\n    }\n    if (this.tokens.matches1(_types.TokenType.name) || this.tokens.matches1(_types.TokenType.jsxName)) {\n      return this.processIdentifier();\n    }\n    if (this.tokens.matches1(_types.TokenType.eq)) {\n      return this.processAssignment();\n    }\n    if (this.tokens.matches1(_types.TokenType.assign)) {\n      return this.processComplexAssignment();\n    }\n    if (this.tokens.matches1(_types.TokenType.preIncDec)) {\n      return this.processPreIncDec();\n    }\n    return false;\n  }\n\n   processImportEquals() {\n    const importName = this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 1);\n    if (this.importProcessor.isTypeName(importName)) {\n      // If this name is only used as a type, elide the whole import.\n      _elideImportEquals2.default.call(void 0, this.tokens);\n    } else {\n      // Otherwise, switch `import` to `const`.\n      this.tokens.replaceToken(\"const\");\n    }\n    return true;\n  }\n\n  /**\n   * Transform this:\n   * import foo, {bar} from 'baz';\n   * into\n   * var _baz = require('baz'); var _baz2 = _interopRequireDefault(_baz);\n   *\n   * The import code was already generated in the import preprocessing step, so\n   * we just need to look it up.\n   */\n   processImport() {\n    if (this.tokens.matches2(_types.TokenType._import, _types.TokenType.parenL)) {\n      this.tokens.replaceToken(\"Promise.resolve().then(() => require\");\n      const contextId = this.tokens.currentToken().contextId;\n      if (contextId == null) {\n        throw new Error(\"Expected context ID on dynamic import invocation.\");\n      }\n      this.tokens.copyToken();\n      while (!this.tokens.matchesContextIdAndLabel(_types.TokenType.parenR, contextId)) {\n        this.rootTransformer.processToken();\n      }\n      this.tokens.replaceToken(\"))\");\n      return;\n    }\n\n    const wasOnlyTypes = this.removeImportAndDetectIfType();\n\n    if (wasOnlyTypes) {\n      this.tokens.removeToken();\n    } else {\n      const path = this.tokens.stringValue();\n      this.tokens.replaceTokenTrimmingLeftWhitespace(this.importProcessor.claimImportCode(path));\n      this.tokens.appendCode(this.importProcessor.claimImportCode(path));\n    }\n    if (this.tokens.matches1(_types.TokenType.semi)) {\n      this.tokens.removeToken();\n    }\n  }\n\n  /**\n   * Erase this import, and return true if it was either of the form \"import type\" or contained only\n   * \"type\" named imports. Such imports should not even do a side-effect import.\n   *\n   * The position should end at the import string.\n   */\n   removeImportAndDetectIfType() {\n    this.tokens.removeInitialToken();\n    if (\n      this.tokens.matchesContextual(_keywords.ContextualKeyword._type) &&\n      !this.tokens.matches1AtIndex(this.tokens.currentIndex() + 1, _types.TokenType.comma) &&\n      !this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, _keywords.ContextualKeyword._from)\n    ) {\n      // This is an \"import type\" statement, so exit early.\n      this.removeRemainingImport();\n      return true;\n    }\n\n    if (this.tokens.matches1(_types.TokenType.name) || this.tokens.matches1(_types.TokenType.star)) {\n      // We have a default import or namespace import, so there must be some\n      // non-type import.\n      this.removeRemainingImport();\n      return false;\n    }\n\n    if (this.tokens.matches1(_types.TokenType.string)) {\n      // This is a bare import, so we should proceed with the import.\n      return false;\n    }\n\n    let foundNonType = false;\n    while (!this.tokens.matches1(_types.TokenType.string)) {\n      // Check if any named imports are of the form \"foo\" or \"foo as bar\", with\n      // no leading \"type\".\n      if ((!foundNonType && this.tokens.matches1(_types.TokenType.braceL)) || this.tokens.matches1(_types.TokenType.comma)) {\n        this.tokens.removeToken();\n        if (\n          this.tokens.matches2(_types.TokenType.name, _types.TokenType.comma) ||\n          this.tokens.matches2(_types.TokenType.name, _types.TokenType.braceR) ||\n          this.tokens.matches4(_types.TokenType.name, _types.TokenType.name, _types.TokenType.name, _types.TokenType.comma) ||\n          this.tokens.matches4(_types.TokenType.name, _types.TokenType.name, _types.TokenType.name, _types.TokenType.braceR)\n        ) {\n          foundNonType = true;\n        }\n      }\n      this.tokens.removeToken();\n    }\n    return !foundNonType;\n  }\n\n   removeRemainingImport() {\n    while (!this.tokens.matches1(_types.TokenType.string)) {\n      this.tokens.removeToken();\n    }\n  }\n\n   processIdentifier() {\n    const token = this.tokens.currentToken();\n    if (token.shadowsGlobal) {\n      return false;\n    }\n\n    if (token.identifierRole === _tokenizer.IdentifierRole.ObjectShorthand) {\n      return this.processObjectShorthand();\n    }\n\n    if (token.identifierRole !== _tokenizer.IdentifierRole.Access) {\n      return false;\n    }\n    const replacement = this.importProcessor.getIdentifierReplacement(\n      this.tokens.identifierNameForToken(token),\n    );\n    if (!replacement) {\n      return false;\n    }\n    // Tolerate any number of closing parens while looking for an opening paren\n    // that indicates a function call.\n    let possibleOpenParenIndex = this.tokens.currentIndex() + 1;\n    while (\n      possibleOpenParenIndex < this.tokens.tokens.length &&\n      this.tokens.tokens[possibleOpenParenIndex].type === _types.TokenType.parenR\n    ) {\n      possibleOpenParenIndex++;\n    }\n    // Avoid treating imported functions as methods of their `exports` object\n    // by using `(0, f)` when the identifier is in a paren expression. Else\n    // use `Function.prototype.call` when the identifier is a guaranteed\n    // function call. When using `call`, pass undefined as the context.\n    if (this.tokens.tokens[possibleOpenParenIndex].type === _types.TokenType.parenL) {\n      if (\n        this.tokens.tokenAtRelativeIndex(1).type === _types.TokenType.parenL &&\n        this.tokens.tokenAtRelativeIndex(-1).type !== _types.TokenType._new\n      ) {\n        this.tokens.replaceToken(`${replacement}.call(void 0, `);\n        // Remove the old paren.\n        this.tokens.removeToken();\n        // Balance out the new paren.\n        this.rootTransformer.processBalancedCode();\n        this.tokens.copyExpectedToken(_types.TokenType.parenR);\n      } else {\n        // See here: http://2ality.com/2015/12/references.html\n        this.tokens.replaceToken(`(0, ${replacement})`);\n      }\n    } else {\n      this.tokens.replaceToken(replacement);\n    }\n    return true;\n  }\n\n  processObjectShorthand() {\n    const identifier = this.tokens.identifierName();\n    const replacement = this.importProcessor.getIdentifierReplacement(identifier);\n    if (!replacement) {\n      return false;\n    }\n    this.tokens.replaceToken(`${identifier}: ${replacement}`);\n    return true;\n  }\n\n  processExport() {\n    if (\n      this.tokens.matches2(_types.TokenType._export, _types.TokenType._enum) ||\n      this.tokens.matches3(_types.TokenType._export, _types.TokenType._const, _types.TokenType._enum)\n    ) {\n      // Let the TypeScript transform handle it.\n      return false;\n    }\n    if (this.tokens.matches2(_types.TokenType._export, _types.TokenType._default)) {\n      this.processExportDefault();\n      this.hadDefaultExport = true;\n      return true;\n    }\n    this.hadNamedExport = true;\n    if (\n      this.tokens.matches2(_types.TokenType._export, _types.TokenType._var) ||\n      this.tokens.matches2(_types.TokenType._export, _types.TokenType._let) ||\n      this.tokens.matches2(_types.TokenType._export, _types.TokenType._const)\n    ) {\n      this.processExportVar();\n      return true;\n    } else if (\n      this.tokens.matches2(_types.TokenType._export, _types.TokenType._function) ||\n      // export async function\n      this.tokens.matches3(_types.TokenType._export, _types.TokenType.name, _types.TokenType._function)\n    ) {\n      this.processExportFunction();\n      return true;\n    } else if (\n      this.tokens.matches2(_types.TokenType._export, _types.TokenType._class) ||\n      this.tokens.matches3(_types.TokenType._export, _types.TokenType._abstract, _types.TokenType._class)\n    ) {\n      this.processExportClass();\n      return true;\n    } else if (this.tokens.matches2(_types.TokenType._export, _types.TokenType.braceL)) {\n      this.processExportBindings();\n      return true;\n    } else if (this.tokens.matches2(_types.TokenType._export, _types.TokenType.star)) {\n      this.processExportStar();\n      return true;\n    } else {\n      throw new Error(\"Unrecognized export syntax.\");\n    }\n  }\n\n   processAssignment() {\n    const index = this.tokens.currentIndex();\n    const identifierToken = this.tokens.tokens[index - 1];\n    // If the LHS is a type identifier, this must be a declaration like `let a: b = c;`,\n    // with `b` as the identifier, so nothing needs to be done in that case.\n    if (identifierToken.isType || identifierToken.type !== _types.TokenType.name) {\n      return false;\n    }\n    if (identifierToken.shadowsGlobal) {\n      return false;\n    }\n    if (index >= 2 && this.tokens.matches1AtIndex(index - 2, _types.TokenType.dot)) {\n      return false;\n    }\n    if (index >= 2 && [_types.TokenType._var, _types.TokenType._let, _types.TokenType._const].includes(this.tokens.tokens[index - 2].type)) {\n      // Declarations don't need an extra assignment. This doesn't avoid the\n      // assignment for comma-separated declarations, but it's still correct\n      // since the assignment is just redundant.\n      return false;\n    }\n    const assignmentSnippet = this.importProcessor.resolveExportBinding(\n      this.tokens.identifierNameForToken(identifierToken),\n    );\n    if (!assignmentSnippet) {\n      return false;\n    }\n    this.tokens.copyToken();\n    this.tokens.appendCode(` ${assignmentSnippet} =`);\n    return true;\n  }\n\n  /**\n   * Process something like `a += 3`, where `a` might be an exported value.\n   */\n   processComplexAssignment() {\n    const index = this.tokens.currentIndex();\n    const identifierToken = this.tokens.tokens[index - 1];\n    if (identifierToken.type !== _types.TokenType.name) {\n      return false;\n    }\n    if (identifierToken.shadowsGlobal) {\n      return false;\n    }\n    if (index >= 2 && this.tokens.matches1AtIndex(index - 2, _types.TokenType.dot)) {\n      return false;\n    }\n    const assignmentSnippet = this.importProcessor.resolveExportBinding(\n      this.tokens.identifierNameForToken(identifierToken),\n    );\n    if (!assignmentSnippet) {\n      return false;\n    }\n    this.tokens.appendCode(` = ${assignmentSnippet}`);\n    this.tokens.copyToken();\n    return true;\n  }\n\n  /**\n   * Process something like `++a`, where `a` might be an exported value.\n   */\n   processPreIncDec() {\n    const index = this.tokens.currentIndex();\n    const identifierToken = this.tokens.tokens[index + 1];\n    if (identifierToken.type !== _types.TokenType.name) {\n      return false;\n    }\n    if (identifierToken.shadowsGlobal) {\n      return false;\n    }\n    // Ignore things like ++a.b and ++a[b] and ++a().b.\n    if (\n      index + 2 < this.tokens.tokens.length &&\n      (this.tokens.matches1AtIndex(index + 2, _types.TokenType.dot) ||\n        this.tokens.matches1AtIndex(index + 2, _types.TokenType.bracketL) ||\n        this.tokens.matches1AtIndex(index + 2, _types.TokenType.parenL))\n    ) {\n      return false;\n    }\n    const identifierName = this.tokens.identifierNameForToken(identifierToken);\n    const assignmentSnippet = this.importProcessor.resolveExportBinding(identifierName);\n    if (!assignmentSnippet) {\n      return false;\n    }\n    this.tokens.appendCode(`${assignmentSnippet} = `);\n    this.tokens.copyToken();\n    return true;\n  }\n\n  /**\n   * Process something like `a++`, where `a` might be an exported value.\n   * This starts at the `a`, not at the `++`.\n   */\n   processPostIncDec() {\n    const index = this.tokens.currentIndex();\n    const identifierToken = this.tokens.tokens[index];\n    const operatorToken = this.tokens.tokens[index + 1];\n    if (identifierToken.type !== _types.TokenType.name) {\n      return false;\n    }\n    if (identifierToken.shadowsGlobal) {\n      return false;\n    }\n    if (index >= 1 && this.tokens.matches1AtIndex(index - 1, _types.TokenType.dot)) {\n      return false;\n    }\n    const identifierName = this.tokens.identifierNameForToken(identifierToken);\n    const assignmentSnippet = this.importProcessor.resolveExportBinding(identifierName);\n    if (!assignmentSnippet) {\n      return false;\n    }\n    const operatorCode = this.tokens.rawCodeForToken(operatorToken);\n    // We might also replace the identifier with something like exports.x, so\n    // do that replacement here as well.\n    const base = this.importProcessor.getIdentifierReplacement(identifierName) || identifierName;\n    if (operatorCode === \"++\") {\n      this.tokens.replaceToken(`(${base} = ${assignmentSnippet} = ${base} + 1, ${base} - 1)`);\n    } else if (operatorCode === \"--\") {\n      this.tokens.replaceToken(`(${base} = ${assignmentSnippet} = ${base} - 1, ${base} + 1)`);\n    } else {\n      throw new Error(`Unexpected operator: ${operatorCode}`);\n    }\n    this.tokens.removeToken();\n    return true;\n  }\n\n   processExportDefault() {\n    if (\n      this.tokens.matches4(_types.TokenType._export, _types.TokenType._default, _types.TokenType._function, _types.TokenType.name) ||\n      // export default async function\n      this.tokens.matches5(_types.TokenType._export, _types.TokenType._default, _types.TokenType.name, _types.TokenType._function, _types.TokenType.name)\n    ) {\n      this.tokens.removeInitialToken();\n      this.tokens.removeToken();\n      // Named function export case: change it to a top-level function\n      // declaration followed by exports statement.\n      const name = this.processNamedFunction();\n      this.tokens.appendCode(` exports.default = ${name};`);\n    } else if (\n      this.tokens.matches4(_types.TokenType._export, _types.TokenType._default, _types.TokenType._class, _types.TokenType.name) ||\n      this.tokens.matches5(_types.TokenType._export, _types.TokenType._default, _types.TokenType._abstract, _types.TokenType._class, _types.TokenType.name)\n    ) {\n      this.tokens.removeInitialToken();\n      this.tokens.removeToken();\n      if (this.tokens.matches1(_types.TokenType._abstract)) {\n        this.tokens.removeToken();\n      }\n      const name = this.rootTransformer.processNamedClass();\n      this.tokens.appendCode(` exports.default = ${name};`);\n    } else if (this.tokens.matches3(_types.TokenType._export, _types.TokenType._default, _types.TokenType.at)) {\n      throw new Error(\"Export default statements with decorators are not yet supported.\");\n      // After this point, this is a plain \"export default E\" statement.\n    } else if (\n      _shouldElideDefaultExport2.default.call(void 0, this.isTypeScriptTransformEnabled, this.tokens, this.declarationInfo)\n    ) {\n      // If the exported value is just an identifier and should be elided by TypeScript\n      // rules, then remove it entirely. It will always have the form `export default e`,\n      // where `e` is an identifier.\n      this.tokens.removeInitialToken();\n      this.tokens.removeToken();\n      this.tokens.removeToken();\n    } else if (this.reactHotLoaderTransformer) {\n      // We need to assign E to a variable. Change \"export default E\" to\n      // \"let _default; exports.default = _default = E\"\n      const defaultVarName = this.nameManager.claimFreeName(\"_default\");\n      this.tokens.replaceToken(`let ${defaultVarName}; exports.`);\n      this.tokens.copyToken();\n      this.tokens.appendCode(` = ${defaultVarName} =`);\n      this.reactHotLoaderTransformer.setExtractedDefaultExportName(defaultVarName);\n    } else {\n      // Change \"export default E\" to \"exports.default = E\"\n      this.tokens.replaceToken(\"exports.\");\n      this.tokens.copyToken();\n      this.tokens.appendCode(\" =\");\n    }\n  }\n\n  /**\n   * Transform a declaration like `export var`, `export let`, or `export const`.\n   */\n   processExportVar() {\n    if (this.isSimpleExportVar()) {\n      this.processSimpleExportVar();\n    } else {\n      this.processComplexExportVar();\n    }\n  }\n\n  /**\n   * Determine if the export is of the form:\n   * export var/let/const [varName] = [expr];\n   * In other words, determine if function name inference might apply.\n   */\n   isSimpleExportVar() {\n    let tokenIndex = this.tokens.currentIndex();\n    // export\n    tokenIndex++;\n    // var/let/const\n    tokenIndex++;\n    if (!this.tokens.matches1AtIndex(tokenIndex, _types.TokenType.name)) {\n      return false;\n    }\n    tokenIndex++;\n    while (tokenIndex < this.tokens.tokens.length && this.tokens.tokens[tokenIndex].isType) {\n      tokenIndex++;\n    }\n    if (!this.tokens.matches1AtIndex(tokenIndex, _types.TokenType.eq)) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Transform an `export var` declaration initializing a single variable.\n   *\n   * For example, this:\n   * export const f = () => {};\n   * becomes this:\n   * const f = () => {}; exports.f = f;\n   *\n   * The variable is unused (e.g. exports.f has the true value of the export).\n   * We need to produce an assignment of this form so that the function will\n   * have an inferred name of \"f\", which wouldn't happen in the more general\n   * case below.\n   */\n   processSimpleExportVar() {\n    // export\n    this.tokens.removeInitialToken();\n    // var/let/const\n    this.tokens.copyToken();\n    const varName = this.tokens.identifierName();\n    // x: number  ->  x\n    while (!this.tokens.matches1(_types.TokenType.eq)) {\n      this.rootTransformer.processToken();\n    }\n    const endIndex = this.tokens.currentToken().rhsEndIndex;\n    if (endIndex == null) {\n      throw new Error(\"Expected = token with an end index.\");\n    }\n    while (this.tokens.currentIndex() < endIndex) {\n      this.rootTransformer.processToken();\n    }\n    this.tokens.appendCode(`; exports.${varName} = ${varName}`);\n  }\n\n  /**\n   * Transform normal declaration exports, including handling destructuring.\n   * For example, this:\n   * export const {x: [a = 2, b], c} = d;\n   * becomes this:\n   * ({x: [exports.a = 2, exports.b], c: exports.c} = d;)\n   */\n   processComplexExportVar() {\n    this.tokens.removeInitialToken();\n    this.tokens.removeToken();\n    const needsParens = this.tokens.matches1(_types.TokenType.braceL);\n    if (needsParens) {\n      this.tokens.appendCode(\"(\");\n    }\n\n    let depth = 0;\n    while (true) {\n      if (\n        this.tokens.matches1(_types.TokenType.braceL) ||\n        this.tokens.matches1(_types.TokenType.dollarBraceL) ||\n        this.tokens.matches1(_types.TokenType.bracketL)\n      ) {\n        depth++;\n        this.tokens.copyToken();\n      } else if (this.tokens.matches1(_types.TokenType.braceR) || this.tokens.matches1(_types.TokenType.bracketR)) {\n        depth--;\n        this.tokens.copyToken();\n      } else if (\n        depth === 0 &&\n        !this.tokens.matches1(_types.TokenType.name) &&\n        !this.tokens.currentToken().isType\n      ) {\n        break;\n      } else if (this.tokens.matches1(_types.TokenType.eq)) {\n        // Default values might have assignments in the RHS that we want to ignore, so skip past\n        // them.\n        const endIndex = this.tokens.currentToken().rhsEndIndex;\n        if (endIndex == null) {\n          throw new Error(\"Expected = token with an end index.\");\n        }\n        while (this.tokens.currentIndex() < endIndex) {\n          this.rootTransformer.processToken();\n        }\n      } else {\n        const token = this.tokens.currentToken();\n        if (_tokenizer.isDeclaration.call(void 0, token)) {\n          const name = this.tokens.identifierName();\n          let replacement = this.importProcessor.getIdentifierReplacement(name);\n          if (replacement === null) {\n            throw new Error(`Expected a replacement for ${name} in \\`export var\\` syntax.`);\n          }\n          if (_tokenizer.isObjectShorthandDeclaration.call(void 0, token)) {\n            replacement = `${name}: ${replacement}`;\n          }\n          this.tokens.replaceToken(replacement);\n        } else {\n          this.rootTransformer.processToken();\n        }\n      }\n    }\n\n    if (needsParens) {\n      // Seek to the end of the RHS.\n      const endIndex = this.tokens.currentToken().rhsEndIndex;\n      if (endIndex == null) {\n        throw new Error(\"Expected = token with an end index.\");\n      }\n      while (this.tokens.currentIndex() < endIndex) {\n        this.rootTransformer.processToken();\n      }\n      this.tokens.appendCode(\")\");\n    }\n  }\n\n  /**\n   * Transform this:\n   * export function foo() {}\n   * into this:\n   * function foo() {} exports.foo = foo;\n   */\n   processExportFunction() {\n    this.tokens.replaceToken(\"\");\n    const name = this.processNamedFunction();\n    this.tokens.appendCode(` exports.${name} = ${name};`);\n  }\n\n  /**\n   * Skip past a function with a name and return that name.\n   */\n   processNamedFunction() {\n    if (this.tokens.matches1(_types.TokenType._function)) {\n      this.tokens.copyToken();\n    } else if (this.tokens.matches2(_types.TokenType.name, _types.TokenType._function)) {\n      if (!this.tokens.matchesContextual(_keywords.ContextualKeyword._async)) {\n        throw new Error(\"Expected async keyword in function export.\");\n      }\n      this.tokens.copyToken();\n      this.tokens.copyToken();\n    }\n    if (this.tokens.matches1(_types.TokenType.star)) {\n      this.tokens.copyToken();\n    }\n    if (!this.tokens.matches1(_types.TokenType.name)) {\n      throw new Error(\"Expected identifier for exported function name.\");\n    }\n    const name = this.tokens.identifierName();\n    this.tokens.copyToken();\n    if (this.tokens.currentToken().isType) {\n      this.tokens.removeInitialToken();\n      while (this.tokens.currentToken().isType) {\n        this.tokens.removeToken();\n      }\n    }\n    this.tokens.copyExpectedToken(_types.TokenType.parenL);\n    this.rootTransformer.processBalancedCode();\n    this.tokens.copyExpectedToken(_types.TokenType.parenR);\n    this.rootTransformer.processPossibleTypeRange();\n    this.tokens.copyExpectedToken(_types.TokenType.braceL);\n    this.rootTransformer.processBalancedCode();\n    this.tokens.copyExpectedToken(_types.TokenType.braceR);\n    return name;\n  }\n\n  /**\n   * Transform this:\n   * export class A {}\n   * into this:\n   * class A {} exports.A = A;\n   */\n   processExportClass() {\n    this.tokens.removeInitialToken();\n    if (this.tokens.matches1(_types.TokenType._abstract)) {\n      this.tokens.removeToken();\n    }\n    const name = this.rootTransformer.processNamedClass();\n    this.tokens.appendCode(` exports.${name} = ${name};`);\n  }\n\n  /**\n   * Transform this:\n   * export {a, b as c};\n   * into this:\n   * exports.a = a; exports.c = b;\n   *\n   * OR\n   *\n   * Transform this:\n   * export {a, b as c} from './foo';\n   * into the pre-generated Object.defineProperty code from the ImportProcessor.\n   *\n   * For the first case, if the TypeScript transform is enabled, we need to skip\n   * exports that are only defined as types.\n   */\n   processExportBindings() {\n    this.tokens.removeInitialToken();\n    this.tokens.removeToken();\n\n    const exportStatements = [];\n    while (true) {\n      if (this.tokens.matches1(_types.TokenType.braceR)) {\n        this.tokens.removeToken();\n        break;\n      }\n\n      const localName = this.tokens.identifierName();\n      let exportedName;\n      this.tokens.removeToken();\n      if (this.tokens.matchesContextual(_keywords.ContextualKeyword._as)) {\n        this.tokens.removeToken();\n        exportedName = this.tokens.identifierName();\n        this.tokens.removeToken();\n      } else {\n        exportedName = localName;\n      }\n      if (!this.shouldElideExportedIdentifier(localName)) {\n        const newLocalName = this.importProcessor.getIdentifierReplacement(localName);\n        exportStatements.push(`exports.${exportedName} = ${newLocalName || localName};`);\n      }\n\n      if (this.tokens.matches1(_types.TokenType.braceR)) {\n        this.tokens.removeToken();\n        break;\n      }\n      if (this.tokens.matches2(_types.TokenType.comma, _types.TokenType.braceR)) {\n        this.tokens.removeToken();\n        this.tokens.removeToken();\n        break;\n      } else if (this.tokens.matches1(_types.TokenType.comma)) {\n        this.tokens.removeToken();\n      } else {\n        throw new Error(`Unexpected token: ${JSON.stringify(this.tokens.currentToken())}`);\n      }\n    }\n\n    if (this.tokens.matchesContextual(_keywords.ContextualKeyword._from)) {\n      // This is an export...from, so throw away the normal named export code\n      // and use the Object.defineProperty code from ImportProcessor.\n      this.tokens.removeToken();\n      const path = this.tokens.stringValue();\n      this.tokens.replaceTokenTrimmingLeftWhitespace(this.importProcessor.claimImportCode(path));\n    } else {\n      // This is a normal named export, so use that.\n      this.tokens.appendCode(exportStatements.join(\" \"));\n    }\n\n    if (this.tokens.matches1(_types.TokenType.semi)) {\n      this.tokens.removeToken();\n    }\n  }\n\n   processExportStar() {\n    this.tokens.removeInitialToken();\n    while (!this.tokens.matches1(_types.TokenType.string)) {\n      this.tokens.removeToken();\n    }\n    const path = this.tokens.stringValue();\n    this.tokens.replaceTokenTrimmingLeftWhitespace(this.importProcessor.claimImportCode(path));\n    if (this.tokens.matches1(_types.TokenType.semi)) {\n      this.tokens.removeToken();\n    }\n  }\n\n   shouldElideExportedIdentifier(name) {\n    return this.isTypeScriptTransformEnabled && !this.declarationInfo.valueDeclarations.has(name);\n  }\n} exports.default = CJSImportTransformer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/transformers/CJSImportTransformer.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/transformers/ESMImportTransformer.js":
/*!************************************************************************!*\
  !*** ./node_modules/sucrase/dist/transformers/ESMImportTransformer.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _keywords = __webpack_require__(/*! ../parser/tokenizer/keywords */ \"./node_modules/sucrase/dist/parser/tokenizer/keywords.js\");\nvar _types = __webpack_require__(/*! ../parser/tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\n\nvar _elideImportEquals = __webpack_require__(/*! ../util/elideImportEquals */ \"./node_modules/sucrase/dist/util/elideImportEquals.js\"); var _elideImportEquals2 = _interopRequireDefault(_elideImportEquals);\n\n\n\nvar _getDeclarationInfo = __webpack_require__(/*! ../util/getDeclarationInfo */ \"./node_modules/sucrase/dist/util/getDeclarationInfo.js\"); var _getDeclarationInfo2 = _interopRequireDefault(_getDeclarationInfo);\nvar _getNonTypeIdentifiers = __webpack_require__(/*! ../util/getNonTypeIdentifiers */ \"./node_modules/sucrase/dist/util/getNonTypeIdentifiers.js\");\nvar _shouldElideDefaultExport = __webpack_require__(/*! ../util/shouldElideDefaultExport */ \"./node_modules/sucrase/dist/util/shouldElideDefaultExport.js\"); var _shouldElideDefaultExport2 = _interopRequireDefault(_shouldElideDefaultExport);\n\nvar _Transformer = __webpack_require__(/*! ./Transformer */ \"./node_modules/sucrase/dist/transformers/Transformer.js\"); var _Transformer2 = _interopRequireDefault(_Transformer);\n\n/**\n * Class for editing import statements when we are keeping the code as ESM. We still need to remove\n * type-only imports in TypeScript and Flow.\n */\n class ESMImportTransformer extends _Transformer2.default {\n  \n  \n\n  constructor(\n     tokens,\n     nameManager,\n     reactHotLoaderTransformer,\n     isTypeScriptTransformEnabled,\n    options,\n  ) {\n    super();this.tokens = tokens;this.nameManager = nameManager;this.reactHotLoaderTransformer = reactHotLoaderTransformer;this.isTypeScriptTransformEnabled = isTypeScriptTransformEnabled;;\n    this.nonTypeIdentifiers = isTypeScriptTransformEnabled\n      ? _getNonTypeIdentifiers.getNonTypeIdentifiers.call(void 0, tokens, options)\n      : new Set();\n    this.declarationInfo = isTypeScriptTransformEnabled\n      ? _getDeclarationInfo2.default.call(void 0, tokens)\n      : _getDeclarationInfo.EMPTY_DECLARATION_INFO;\n  }\n\n  process() {\n    // TypeScript `import foo = require('foo');` should always just be translated to plain require.\n    if (this.tokens.matches3(_types.TokenType._import, _types.TokenType.name, _types.TokenType.eq)) {\n      return this.processImportEquals();\n    }\n    if (this.tokens.matches2(_types.TokenType._export, _types.TokenType.eq)) {\n      this.tokens.replaceToken(\"module.exports\");\n      return true;\n    }\n    if (this.tokens.matches1(_types.TokenType._import)) {\n      return this.processImport();\n    }\n    if (this.tokens.matches2(_types.TokenType._export, _types.TokenType._default)) {\n      return this.processExportDefault();\n    }\n    if (this.tokens.matches2(_types.TokenType._export, _types.TokenType.braceL)) {\n      return this.processNamedExports();\n    }\n    return false;\n  }\n\n   processImportEquals() {\n    const importName = this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 1);\n    if (this.isTypeName(importName)) {\n      // If this name is only used as a type, elide the whole import.\n      _elideImportEquals2.default.call(void 0, this.tokens);\n    } else {\n      // Otherwise, switch `import` to `const`.\n      this.tokens.replaceToken(\"const\");\n    }\n    return true;\n  }\n\n   processImport() {\n    if (this.tokens.matches2(_types.TokenType._import, _types.TokenType.parenL)) {\n      // Dynamic imports don't need to be transformed.\n      return false;\n    }\n\n    const snapshot = this.tokens.snapshot();\n    const allImportsRemoved = this.removeImportTypeBindings();\n    if (allImportsRemoved) {\n      this.tokens.restoreToSnapshot(snapshot);\n      while (!this.tokens.matches1(_types.TokenType.string)) {\n        this.tokens.removeToken();\n      }\n      this.tokens.removeToken();\n      if (this.tokens.matches1(_types.TokenType.semi)) {\n        this.tokens.removeToken();\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Remove type bindings from this import, leaving the rest of the import intact.\n   *\n   * Return true if this import was ONLY types, and thus is eligible for removal. This will bail out\n   * of the replacement operation, so we can return early here.\n   */\n   removeImportTypeBindings() {\n    this.tokens.copyExpectedToken(_types.TokenType._import);\n    if (\n      this.tokens.matchesContextual(_keywords.ContextualKeyword._type) &&\n      !this.tokens.matches1AtIndex(this.tokens.currentIndex() + 1, _types.TokenType.comma) &&\n      !this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, _keywords.ContextualKeyword._from)\n    ) {\n      // This is an \"import type\" statement, so exit early.\n      return true;\n    }\n\n    if (this.tokens.matches1(_types.TokenType.string)) {\n      // This is a bare import, so we should proceed with the import.\n      this.tokens.copyToken();\n      return false;\n    }\n\n    let foundNonTypeImport = false;\n\n    if (this.tokens.matches1(_types.TokenType.name)) {\n      if (this.isTypeName(this.tokens.identifierName())) {\n        this.tokens.removeToken();\n        if (this.tokens.matches1(_types.TokenType.comma)) {\n          this.tokens.removeToken();\n        }\n      } else {\n        foundNonTypeImport = true;\n        this.tokens.copyToken();\n        if (this.tokens.matches1(_types.TokenType.comma)) {\n          this.tokens.copyToken();\n        }\n      }\n    }\n\n    if (this.tokens.matches1(_types.TokenType.star)) {\n      if (this.isTypeName(this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 2))) {\n        this.tokens.removeToken();\n        this.tokens.removeToken();\n        this.tokens.removeToken();\n      } else {\n        foundNonTypeImport = true;\n        this.tokens.copyExpectedToken(_types.TokenType.star);\n        this.tokens.copyExpectedToken(_types.TokenType.name);\n        this.tokens.copyExpectedToken(_types.TokenType.name);\n      }\n    } else if (this.tokens.matches1(_types.TokenType.braceL)) {\n      this.tokens.copyToken();\n      while (!this.tokens.matches1(_types.TokenType.braceR)) {\n        if (\n          this.tokens.matches3(_types.TokenType.name, _types.TokenType.name, _types.TokenType.comma) ||\n          this.tokens.matches3(_types.TokenType.name, _types.TokenType.name, _types.TokenType.braceR)\n        ) {\n          // type foo\n          this.tokens.removeToken();\n          this.tokens.removeToken();\n          if (this.tokens.matches1(_types.TokenType.comma)) {\n            this.tokens.removeToken();\n          }\n        } else if (\n          this.tokens.matches5(_types.TokenType.name, _types.TokenType.name, _types.TokenType.name, _types.TokenType.name, _types.TokenType.comma) ||\n          this.tokens.matches5(_types.TokenType.name, _types.TokenType.name, _types.TokenType.name, _types.TokenType.name, _types.TokenType.braceR)\n        ) {\n          // type foo as bar\n          this.tokens.removeToken();\n          this.tokens.removeToken();\n          this.tokens.removeToken();\n          this.tokens.removeToken();\n          if (this.tokens.matches1(_types.TokenType.comma)) {\n            this.tokens.removeToken();\n          }\n        } else if (\n          this.tokens.matches2(_types.TokenType.name, _types.TokenType.comma) ||\n          this.tokens.matches2(_types.TokenType.name, _types.TokenType.braceR)\n        ) {\n          // foo\n          if (this.isTypeName(this.tokens.identifierName())) {\n            this.tokens.removeToken();\n            if (this.tokens.matches1(_types.TokenType.comma)) {\n              this.tokens.removeToken();\n            }\n          } else {\n            foundNonTypeImport = true;\n            this.tokens.copyToken();\n            if (this.tokens.matches1(_types.TokenType.comma)) {\n              this.tokens.copyToken();\n            }\n          }\n        } else if (\n          this.tokens.matches4(_types.TokenType.name, _types.TokenType.name, _types.TokenType.name, _types.TokenType.comma) ||\n          this.tokens.matches4(_types.TokenType.name, _types.TokenType.name, _types.TokenType.name, _types.TokenType.braceR)\n        ) {\n          // foo as bar\n          if (this.isTypeName(this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 2))) {\n            this.tokens.removeToken();\n            this.tokens.removeToken();\n            this.tokens.removeToken();\n            if (this.tokens.matches1(_types.TokenType.comma)) {\n              this.tokens.removeToken();\n            }\n          } else {\n            foundNonTypeImport = true;\n            this.tokens.copyToken();\n            this.tokens.copyToken();\n            this.tokens.copyToken();\n            if (this.tokens.matches1(_types.TokenType.comma)) {\n              this.tokens.copyToken();\n            }\n          }\n        } else {\n          throw new Error(\"Unexpected import form.\");\n        }\n      }\n      this.tokens.copyExpectedToken(_types.TokenType.braceR);\n    }\n\n    return !foundNonTypeImport;\n  }\n\n   isTypeName(name) {\n    return this.isTypeScriptTransformEnabled && !this.nonTypeIdentifiers.has(name);\n  }\n\n   processExportDefault() {\n    if (\n      _shouldElideDefaultExport2.default.call(void 0, this.isTypeScriptTransformEnabled, this.tokens, this.declarationInfo)\n    ) {\n      // If the exported value is just an identifier and should be elided by TypeScript\n      // rules, then remove it entirely. It will always have the form `export default e`,\n      // where `e` is an identifier.\n      this.tokens.removeInitialToken();\n      this.tokens.removeToken();\n      this.tokens.removeToken();\n      return true;\n    }\n\n    const alreadyHasName =\n      this.tokens.matches4(_types.TokenType._export, _types.TokenType._default, _types.TokenType._function, _types.TokenType.name) ||\n      // export default async function\n      this.tokens.matches5(_types.TokenType._export, _types.TokenType._default, _types.TokenType.name, _types.TokenType._function, _types.TokenType.name) ||\n      this.tokens.matches4(_types.TokenType._export, _types.TokenType._default, _types.TokenType._class, _types.TokenType.name) ||\n      this.tokens.matches5(_types.TokenType._export, _types.TokenType._default, _types.TokenType._abstract, _types.TokenType._class, _types.TokenType.name);\n\n    if (!alreadyHasName && this.reactHotLoaderTransformer) {\n      // This is a plain \"export default E\" statement and we need to assign E to a variable.\n      // Change \"export default E\" to \"let _default; export default _default = E\"\n      const defaultVarName = this.nameManager.claimFreeName(\"_default\");\n      this.tokens.replaceToken(`let ${defaultVarName}; export`);\n      this.tokens.copyToken();\n      this.tokens.appendCode(` ${defaultVarName} =`);\n      this.reactHotLoaderTransformer.setExtractedDefaultExportName(defaultVarName);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * In TypeScript, we need to remove named exports that were never declared or only declared as a\n   * type.\n   */\n   processNamedExports() {\n    if (!this.isTypeScriptTransformEnabled) {\n      return false;\n    }\n    this.tokens.copyExpectedToken(_types.TokenType._export);\n    this.tokens.copyExpectedToken(_types.TokenType.braceL);\n\n    while (!this.tokens.matches1(_types.TokenType.braceR)) {\n      if (!this.tokens.matches1(_types.TokenType.name)) {\n        throw new Error(\"Expected identifier at the start of named export.\");\n      }\n      if (this.shouldElideExportedName(this.tokens.identifierName())) {\n        while (\n          !this.tokens.matches1(_types.TokenType.comma) &&\n          !this.tokens.matches1(_types.TokenType.braceR) &&\n          !this.tokens.isAtEnd()\n        ) {\n          this.tokens.removeToken();\n        }\n        if (this.tokens.matches1(_types.TokenType.comma)) {\n          this.tokens.removeToken();\n        }\n      } else {\n        while (\n          !this.tokens.matches1(_types.TokenType.comma) &&\n          !this.tokens.matches1(_types.TokenType.braceR) &&\n          !this.tokens.isAtEnd()\n        ) {\n          this.tokens.copyToken();\n        }\n        if (this.tokens.matches1(_types.TokenType.comma)) {\n          this.tokens.copyToken();\n        }\n      }\n    }\n    this.tokens.copyExpectedToken(_types.TokenType.braceR);\n    return true;\n  }\n\n  /**\n   * ESM elides all imports with the rule that we only elide if we see that it's\n   * a type and never see it as a value. This is in contract to CJS, which\n   * elides imports that are completely unknown.\n   */\n   shouldElideExportedName(name) {\n    return (\n      this.isTypeScriptTransformEnabled &&\n      this.declarationInfo.typeDeclarations.has(name) &&\n      !this.declarationInfo.valueDeclarations.has(name)\n    );\n  }\n} exports.default = ESMImportTransformer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/transformers/ESMImportTransformer.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/transformers/FlowTransformer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/sucrase/dist/transformers/FlowTransformer.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _Transformer = __webpack_require__(/*! ./Transformer */ \"./node_modules/sucrase/dist/transformers/Transformer.js\"); var _Transformer2 = _interopRequireDefault(_Transformer);\n\n class FlowTransformer extends _Transformer2.default {\n  constructor( rootTransformer,  tokens) {\n    super();this.rootTransformer = rootTransformer;this.tokens = tokens;;\n  }\n\n  process() {\n    return (\n      this.rootTransformer.processPossibleArrowParamEnd() ||\n      this.rootTransformer.processPossibleAsyncArrowWithTypeParams() ||\n      this.rootTransformer.processPossibleTypeRange()\n    );\n  }\n} exports.default = FlowTransformer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3RyYW5zZm9ybWVycy9GbG93VHJhbnNmb3JtZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3RyYW5zZm9ybWVycy9GbG93VHJhbnNmb3JtZXIuanM/ZTJhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjsgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogdHJ1ZX0pO1xuXG52YXIgX1RyYW5zZm9ybWVyID0gcmVxdWlyZSgnLi9UcmFuc2Zvcm1lcicpOyB2YXIgX1RyYW5zZm9ybWVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RyYW5zZm9ybWVyKTtcblxuIGNsYXNzIEZsb3dUcmFuc2Zvcm1lciBleHRlbmRzIF9UcmFuc2Zvcm1lcjIuZGVmYXVsdCB7XG4gIGNvbnN0cnVjdG9yKCByb290VHJhbnNmb3JtZXIsICB0b2tlbnMpIHtcbiAgICBzdXBlcigpO3RoaXMucm9vdFRyYW5zZm9ybWVyID0gcm9vdFRyYW5zZm9ybWVyO3RoaXMudG9rZW5zID0gdG9rZW5zOztcbiAgfVxuXG4gIHByb2Nlc3MoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMucm9vdFRyYW5zZm9ybWVyLnByb2Nlc3NQb3NzaWJsZUFycm93UGFyYW1FbmQoKSB8fFxuICAgICAgdGhpcy5yb290VHJhbnNmb3JtZXIucHJvY2Vzc1Bvc3NpYmxlQXN5bmNBcnJvd1dpdGhUeXBlUGFyYW1zKCkgfHxcbiAgICAgIHRoaXMucm9vdFRyYW5zZm9ybWVyLnByb2Nlc3NQb3NzaWJsZVR5cGVSYW5nZSgpXG4gICAgKTtcbiAgfVxufSBleHBvcnRzLmRlZmF1bHQgPSBGbG93VHJhbnNmb3JtZXI7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/transformers/FlowTransformer.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/transformers/JSXTransformer.js":
/*!******************************************************************!*\
  !*** ./node_modules/sucrase/dist/transformers/JSXTransformer.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\nvar _xhtml = __webpack_require__(/*! ../parser/plugins/jsx/xhtml */ \"./node_modules/sucrase/dist/parser/plugins/jsx/xhtml.js\"); var _xhtml2 = _interopRequireDefault(_xhtml);\nvar _types = __webpack_require__(/*! ../parser/tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\nvar _charcodes = __webpack_require__(/*! ../parser/util/charcodes */ \"./node_modules/sucrase/dist/parser/util/charcodes.js\");\n\nvar _getJSXPragmaInfo = __webpack_require__(/*! ../util/getJSXPragmaInfo */ \"./node_modules/sucrase/dist/util/getJSXPragmaInfo.js\"); var _getJSXPragmaInfo2 = _interopRequireDefault(_getJSXPragmaInfo);\n\nvar _Transformer = __webpack_require__(/*! ./Transformer */ \"./node_modules/sucrase/dist/transformers/Transformer.js\"); var _Transformer2 = _interopRequireDefault(_Transformer);\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\n class JSXTransformer extends _Transformer2.default {\n  __init() {this.lastLineNumber = 1}\n  __init2() {this.lastIndex = 0}\n  __init3() {this.filenameVarName = null}\n  \n\n  constructor(\n     rootTransformer,\n     tokens,\n     importProcessor,\n     nameManager,\n     options,\n  ) {\n    super();this.rootTransformer = rootTransformer;this.tokens = tokens;this.importProcessor = importProcessor;this.nameManager = nameManager;this.options = options;JSXTransformer.prototype.__init.call(this);JSXTransformer.prototype.__init2.call(this);JSXTransformer.prototype.__init3.call(this);;\n    this.jsxPragmaInfo = _getJSXPragmaInfo2.default.call(void 0, options);\n  }\n\n  process() {\n    if (this.tokens.matches1(_types.TokenType.jsxTagStart)) {\n      this.processJSXTag();\n      return true;\n    }\n    return false;\n  }\n\n  getPrefixCode() {\n    if (this.filenameVarName) {\n      return `const ${this.filenameVarName} = ${JSON.stringify(this.options.filePath || \"\")};`;\n    } else {\n      return \"\";\n    }\n  }\n\n  /**\n   * Lazily calculate line numbers to avoid unneeded work. We assume this is always called in\n   * increasing order by index.\n   */\n  getLineNumberForIndex(index) {\n    const code = this.tokens.code;\n    while (this.lastIndex < index && this.lastIndex < code.length) {\n      if (code[this.lastIndex] === \"\\n\") {\n        this.lastLineNumber++;\n      }\n      this.lastIndex++;\n    }\n    return this.lastLineNumber;\n  }\n\n  getFilenameVarName() {\n    if (!this.filenameVarName) {\n      this.filenameVarName = this.nameManager.claimFreeName(\"_jsxFileName\");\n    }\n    return this.filenameVarName;\n  }\n\n  processProps(firstTokenStart) {\n    const lineNumber = this.getLineNumberForIndex(firstTokenStart);\n    const devProps = this.options.production\n      ? \"\"\n      : `__self: this, __source: {fileName: ${this.getFilenameVarName()}, lineNumber: ${lineNumber}}`;\n    if (!this.tokens.matches1(_types.TokenType.jsxName) && !this.tokens.matches1(_types.TokenType.braceL)) {\n      if (devProps) {\n        this.tokens.appendCode(`, {${devProps}}`);\n      } else {\n        this.tokens.appendCode(`, null`);\n      }\n      return;\n    }\n    this.tokens.appendCode(`, {`);\n    while (true) {\n      if (this.tokens.matches2(_types.TokenType.jsxName, _types.TokenType.eq)) {\n        this.processPropKeyName();\n        this.tokens.replaceToken(\": \");\n        if (this.tokens.matches1(_types.TokenType.braceL)) {\n          this.tokens.replaceToken(\"\");\n          this.rootTransformer.processBalancedCode();\n          this.tokens.replaceToken(\"\");\n        } else if (this.tokens.matches1(_types.TokenType.jsxTagStart)) {\n          this.processJSXTag();\n        } else {\n          this.processStringPropValue();\n        }\n      } else if (this.tokens.matches1(_types.TokenType.jsxName)) {\n        this.processPropKeyName();\n        this.tokens.appendCode(\": true\");\n      } else if (this.tokens.matches1(_types.TokenType.braceL)) {\n        this.tokens.replaceToken(\"\");\n        this.rootTransformer.processBalancedCode();\n        this.tokens.replaceToken(\"\");\n      } else {\n        break;\n      }\n      this.tokens.appendCode(\",\");\n    }\n    if (devProps) {\n      this.tokens.appendCode(` ${devProps}}`);\n    } else {\n      this.tokens.appendCode(\"}\");\n    }\n  }\n\n  processPropKeyName() {\n    const keyName = this.tokens.identifierName();\n    if (keyName.includes(\"-\")) {\n      this.tokens.replaceToken(`'${keyName}'`);\n    } else {\n      this.tokens.copyToken();\n    }\n  }\n\n  processStringPropValue() {\n    const token = this.tokens.currentToken();\n    const valueCode = this.tokens.code.slice(token.start + 1, token.end - 1);\n    const replacementCode = formatJSXTextReplacement(valueCode);\n    const literalCode = formatJSXStringValueLiteral(valueCode);\n    this.tokens.replaceToken(literalCode + replacementCode);\n  }\n\n  /**\n   * Process the first part of a tag, before any props.\n   */\n  processTagIntro() {\n    // Walk forward until we see one of these patterns:\n    // jsxName to start the first prop, preceded by another jsxName to end the tag name.\n    // jsxName to start the first prop, preceded by greaterThan to end the type argument.\n    // [open brace] to start the first prop.\n    // [jsxTagEnd] to end the open-tag.\n    // [slash, jsxTagEnd] to end the self-closing tag.\n    let introEnd = this.tokens.currentIndex() + 1;\n    while (\n      this.tokens.tokens[introEnd].isType ||\n      (!this.tokens.matches2AtIndex(introEnd - 1, _types.TokenType.jsxName, _types.TokenType.jsxName) &&\n        !this.tokens.matches2AtIndex(introEnd - 1, _types.TokenType.greaterThan, _types.TokenType.jsxName) &&\n        !this.tokens.matches1AtIndex(introEnd, _types.TokenType.braceL) &&\n        !this.tokens.matches1AtIndex(introEnd, _types.TokenType.jsxTagEnd) &&\n        !this.tokens.matches2AtIndex(introEnd, _types.TokenType.slash, _types.TokenType.jsxTagEnd))\n    ) {\n      introEnd++;\n    }\n    if (introEnd === this.tokens.currentIndex() + 1) {\n      const tagName = this.tokens.identifierName();\n      if (startsWithLowerCase(tagName)) {\n        this.tokens.replaceToken(`'${tagName}'`);\n      }\n    }\n    while (this.tokens.currentIndex() < introEnd) {\n      this.rootTransformer.processToken();\n    }\n  }\n\n  processChildren() {\n    while (true) {\n      if (this.tokens.matches2(_types.TokenType.jsxTagStart, _types.TokenType.slash)) {\n        // Closing tag, so no more children.\n        return;\n      }\n      if (this.tokens.matches1(_types.TokenType.braceL)) {\n        if (this.tokens.matches2(_types.TokenType.braceL, _types.TokenType.braceR)) {\n          // Empty interpolations and comment-only interpolations are allowed\n          // and don't create an extra child arg.\n          this.tokens.replaceToken(\"\");\n          this.tokens.replaceToken(\"\");\n        } else {\n          // Interpolated expression.\n          this.tokens.replaceToken(\", \");\n          this.rootTransformer.processBalancedCode();\n          this.tokens.replaceToken(\"\");\n        }\n      } else if (this.tokens.matches1(_types.TokenType.jsxTagStart)) {\n        // Child JSX element\n        this.tokens.appendCode(\", \");\n        this.processJSXTag();\n      } else if (this.tokens.matches1(_types.TokenType.jsxText)) {\n        this.processChildTextElement();\n      } else {\n        throw new Error(\"Unexpected token when processing JSX children.\");\n      }\n    }\n  }\n\n  processChildTextElement() {\n    const token = this.tokens.currentToken();\n    const valueCode = this.tokens.code.slice(token.start, token.end);\n    const replacementCode = formatJSXTextReplacement(valueCode);\n    const literalCode = formatJSXTextLiteral(valueCode);\n    if (literalCode === '\"\"') {\n      this.tokens.replaceToken(replacementCode);\n    } else {\n      this.tokens.replaceToken(`, ${literalCode}${replacementCode}`);\n    }\n  }\n\n  processJSXTag() {\n    const {jsxPragmaInfo} = this;\n    const resolvedPragmaBaseName = this.importProcessor\n      ? this.importProcessor.getIdentifierReplacement(jsxPragmaInfo.base) || jsxPragmaInfo.base\n      : jsxPragmaInfo.base;\n    const firstTokenStart = this.tokens.currentToken().start;\n    // First tag is always jsxTagStart.\n    this.tokens.replaceToken(`${resolvedPragmaBaseName}${jsxPragmaInfo.suffix}(`);\n\n    if (this.tokens.matches1(_types.TokenType.jsxTagEnd)) {\n      // Fragment syntax.\n      const resolvedFragmentPragmaBaseName = this.importProcessor\n        ? this.importProcessor.getIdentifierReplacement(jsxPragmaInfo.fragmentBase) ||\n          jsxPragmaInfo.fragmentBase\n        : jsxPragmaInfo.fragmentBase;\n      this.tokens.replaceToken(\n        `${resolvedFragmentPragmaBaseName}${jsxPragmaInfo.fragmentSuffix}, null`,\n      );\n      // Tag with children.\n      this.processChildren();\n      while (!this.tokens.matches1(_types.TokenType.jsxTagEnd)) {\n        this.tokens.replaceToken(\"\");\n      }\n      this.tokens.replaceToken(\")\");\n    } else {\n      // Normal open tag or self-closing tag.\n      this.processTagIntro();\n      this.processProps(firstTokenStart);\n\n      if (this.tokens.matches2(_types.TokenType.slash, _types.TokenType.jsxTagEnd)) {\n        // Self-closing tag.\n        this.tokens.replaceToken(\"\");\n        this.tokens.replaceToken(\")\");\n      } else if (this.tokens.matches1(_types.TokenType.jsxTagEnd)) {\n        this.tokens.replaceToken(\"\");\n        // Tag with children.\n        this.processChildren();\n        while (!this.tokens.matches1(_types.TokenType.jsxTagEnd)) {\n          this.tokens.replaceToken(\"\");\n        }\n        this.tokens.replaceToken(\")\");\n      } else {\n        throw new Error(\"Expected either /> or > at the end of the tag.\");\n      }\n    }\n  }\n} exports.default = JSXTransformer;\n\n/**\n * Spec for identifiers: https://tc39.github.io/ecma262/#prod-IdentifierStart.\n *\n * Really only treat anything starting with a-z as tag names.  `_`, `$`, `é`\n * should be treated as copmonent names\n */\n function startsWithLowerCase(s) {\n  const firstChar = s.charCodeAt(0);\n  return firstChar >= _charcodes.charCodes.lowercaseA && firstChar <= _charcodes.charCodes.lowercaseZ;\n} exports.startsWithLowerCase = startsWithLowerCase;\n\n/**\n * Turn the given jsxText string into a JS string literal. Leading and trailing\n * whitespace on lines is removed, except immediately after the open-tag and\n * before the close-tag. Empty lines are completely removed, and spaces are\n * added between lines after that.\n *\n * We use JSON.stringify to introduce escape characters as necessary, and trim\n * the start and end of each line and remove blank lines.\n */\nfunction formatJSXTextLiteral(text) {\n  let result = \"\";\n  let whitespace = \"\";\n\n  let isInInitialLineWhitespace = false;\n  let seenNonWhitespace = false;\n  for (let i = 0; i < text.length; i++) {\n    const c = text[i];\n    if (c === \" \" || c === \"\\t\" || c === \"\\r\") {\n      if (!isInInitialLineWhitespace) {\n        whitespace += c;\n      }\n    } else if (c === \"\\n\") {\n      whitespace = \"\";\n      isInInitialLineWhitespace = true;\n    } else {\n      if (seenNonWhitespace && isInInitialLineWhitespace) {\n        result += \" \";\n      }\n      result += whitespace;\n      whitespace = \"\";\n      if (c === \"&\") {\n        const {entity, newI} = processEntity(text, i + 1);\n        i = newI - 1;\n        result += entity;\n      } else {\n        result += c;\n      }\n      seenNonWhitespace = true;\n      isInInitialLineWhitespace = false;\n    }\n  }\n  if (!isInInitialLineWhitespace) {\n    result += whitespace;\n  }\n  return JSON.stringify(result);\n}\n\n/**\n * Produce the code that should be printed after the JSX text string literal,\n * with most content removed, but all newlines preserved and all spacing at the\n * end preserved.\n */\nfunction formatJSXTextReplacement(text) {\n  let numNewlines = 0;\n  let numSpaces = 0;\n  for (const c of text) {\n    if (c === \"\\n\") {\n      numNewlines++;\n      numSpaces = 0;\n    } else if (c === \" \") {\n      numSpaces++;\n    }\n  }\n  return \"\\n\".repeat(numNewlines) + \" \".repeat(numSpaces);\n}\n\n/**\n * Format a string in the value position of a JSX prop.\n *\n * Use the same implementation as convertAttribute from\n * babel-helper-builder-react-jsx.\n */\nfunction formatJSXStringValueLiteral(text) {\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    const c = text[i];\n    if (c === \"\\n\") {\n      if (/\\s/.test(text[i + 1])) {\n        result += \" \";\n        while (i < text.length && /\\s/.test(text[i + 1])) {\n          i++;\n        }\n      } else {\n        result += \"\\n\";\n      }\n    } else if (c === \"&\") {\n      const {entity, newI} = processEntity(text, i + 1);\n      result += entity;\n      i = newI - 1;\n    } else {\n      result += c;\n    }\n  }\n  return JSON.stringify(result);\n}\n\n/**\n * Modified from jsxReadString in Babylon.\n */\nfunction processEntity(text, indexAfterAmpersand) {\n  let str = \"\";\n  let count = 0;\n  let entity;\n  let i = indexAfterAmpersand;\n\n  while (i < text.length && count++ < 10) {\n    const ch = text[i];\n    i++;\n    if (ch === \";\") {\n      if (str[0] === \"#\") {\n        if (str[1] === \"x\") {\n          str = str.substr(2);\n          if (HEX_NUMBER.test(str)) {\n            entity = String.fromCodePoint(parseInt(str, 16));\n          }\n        } else {\n          str = str.substr(1);\n          if (DECIMAL_NUMBER.test(str)) {\n            entity = String.fromCodePoint(parseInt(str, 10));\n          }\n        }\n      } else {\n        entity = _xhtml2.default[str];\n      }\n      break;\n    }\n    str += ch;\n  }\n  if (!entity) {\n    return {entity: \"&\", newI: indexAfterAmpersand};\n  }\n  return {entity, newI: i};\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/transformers/JSXTransformer.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/transformers/NumericSeparatorTransformer.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/sucrase/dist/transformers/NumericSeparatorTransformer.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, \"__esModule\", {value: true});var _types = __webpack_require__(/*! ../parser/tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\n\nvar _Transformer = __webpack_require__(/*! ./Transformer */ \"./node_modules/sucrase/dist/transformers/Transformer.js\"); var _Transformer2 = _interopRequireDefault(_Transformer);\n\n class NumericSeparatorTransformer extends _Transformer2.default {\n  constructor( tokens) {\n    super();this.tokens = tokens;;\n  }\n\n  process() {\n    if (this.tokens.matches1(_types.TokenType.num)) {\n      const code = this.tokens.currentTokenCode();\n      if (code.includes(\"_\")) {\n        this.tokens.replaceToken(code.replace(/_/g, \"\"));\n        return true;\n      }\n    }\n    return false;\n  }\n} exports.default = NumericSeparatorTransformer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3RyYW5zZm9ybWVycy9OdW1lcmljU2VwYXJhdG9yVHJhbnNmb3JtZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3RyYW5zZm9ybWVycy9OdW1lcmljU2VwYXJhdG9yVHJhbnNmb3JtZXIuanM/MTIwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjsgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogdHJ1ZX0pO3ZhciBfdHlwZXMgPSByZXF1aXJlKCcuLi9wYXJzZXIvdG9rZW5pemVyL3R5cGVzJyk7XG5cbnZhciBfVHJhbnNmb3JtZXIgPSByZXF1aXJlKCcuL1RyYW5zZm9ybWVyJyk7IHZhciBfVHJhbnNmb3JtZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVHJhbnNmb3JtZXIpO1xuXG4gY2xhc3MgTnVtZXJpY1NlcGFyYXRvclRyYW5zZm9ybWVyIGV4dGVuZHMgX1RyYW5zZm9ybWVyMi5kZWZhdWx0IHtcbiAgY29uc3RydWN0b3IoIHRva2Vucykge1xuICAgIHN1cGVyKCk7dGhpcy50b2tlbnMgPSB0b2tlbnM7O1xuICB9XG5cbiAgcHJvY2VzcygpIHtcbiAgICBpZiAodGhpcy50b2tlbnMubWF0Y2hlczEoX3R5cGVzLlRva2VuVHlwZS5udW0pKSB7XG4gICAgICBjb25zdCBjb2RlID0gdGhpcy50b2tlbnMuY3VycmVudFRva2VuQ29kZSgpO1xuICAgICAgaWYgKGNvZGUuaW5jbHVkZXMoXCJfXCIpKSB7XG4gICAgICAgIHRoaXMudG9rZW5zLnJlcGxhY2VUb2tlbihjb2RlLnJlcGxhY2UoL18vZywgXCJcIikpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59IGV4cG9ydHMuZGVmYXVsdCA9IE51bWVyaWNTZXBhcmF0b3JUcmFuc2Zvcm1lcjtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/transformers/NumericSeparatorTransformer.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/transformers/OptionalCatchBindingTransformer.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/sucrase/dist/transformers/OptionalCatchBindingTransformer.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, \"__esModule\", {value: true});\nvar _types = __webpack_require__(/*! ../parser/tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\n\nvar _Transformer = __webpack_require__(/*! ./Transformer */ \"./node_modules/sucrase/dist/transformers/Transformer.js\"); var _Transformer2 = _interopRequireDefault(_Transformer);\n\n class OptionalCatchBindingTransformer extends _Transformer2.default {\n  constructor( tokens,  nameManager) {\n    super();this.tokens = tokens;this.nameManager = nameManager;;\n  }\n\n  process() {\n    if (this.tokens.matches2(_types.TokenType._catch, _types.TokenType.braceL)) {\n      this.tokens.copyToken();\n      this.tokens.appendCode(` (${this.nameManager.claimFreeName(\"e\")})`);\n      return true;\n    }\n    return false;\n  }\n} exports.default = OptionalCatchBindingTransformer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3RyYW5zZm9ybWVycy9PcHRpb25hbENhdGNoQmluZGluZ1RyYW5zZm9ybWVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N1Y3Jhc2UvZGlzdC90cmFuc2Zvcm1lcnMvT3B0aW9uYWxDYXRjaEJpbmRpbmdUcmFuc2Zvcm1lci5qcz9kZjQyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiOyBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiB0cnVlfSk7XG52YXIgX3R5cGVzID0gcmVxdWlyZSgnLi4vcGFyc2VyL3Rva2VuaXplci90eXBlcycpO1xuXG52YXIgX1RyYW5zZm9ybWVyID0gcmVxdWlyZSgnLi9UcmFuc2Zvcm1lcicpOyB2YXIgX1RyYW5zZm9ybWVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RyYW5zZm9ybWVyKTtcblxuIGNsYXNzIE9wdGlvbmFsQ2F0Y2hCaW5kaW5nVHJhbnNmb3JtZXIgZXh0ZW5kcyBfVHJhbnNmb3JtZXIyLmRlZmF1bHQge1xuICBjb25zdHJ1Y3RvciggdG9rZW5zLCAgbmFtZU1hbmFnZXIpIHtcbiAgICBzdXBlcigpO3RoaXMudG9rZW5zID0gdG9rZW5zO3RoaXMubmFtZU1hbmFnZXIgPSBuYW1lTWFuYWdlcjs7XG4gIH1cblxuICBwcm9jZXNzKCkge1xuICAgIGlmICh0aGlzLnRva2Vucy5tYXRjaGVzMihfdHlwZXMuVG9rZW5UeXBlLl9jYXRjaCwgX3R5cGVzLlRva2VuVHlwZS5icmFjZUwpKSB7XG4gICAgICB0aGlzLnRva2Vucy5jb3B5VG9rZW4oKTtcbiAgICAgIHRoaXMudG9rZW5zLmFwcGVuZENvZGUoYCAoJHt0aGlzLm5hbWVNYW5hZ2VyLmNsYWltRnJlZU5hbWUoXCJlXCIpfSlgKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0gZXhwb3J0cy5kZWZhdWx0ID0gT3B0aW9uYWxDYXRjaEJpbmRpbmdUcmFuc2Zvcm1lcjtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/transformers/OptionalCatchBindingTransformer.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/transformers/ReactDisplayNameTransformer.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/sucrase/dist/transformers/ReactDisplayNameTransformer.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _tokenizer = __webpack_require__(/*! ../parser/tokenizer */ \"./node_modules/sucrase/dist/parser/tokenizer/index.js\");\nvar _types = __webpack_require__(/*! ../parser/tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\n\n\nvar _Transformer = __webpack_require__(/*! ./Transformer */ \"./node_modules/sucrase/dist/transformers/Transformer.js\"); var _Transformer2 = _interopRequireDefault(_Transformer);\n\n/**\n * Implementation of babel-plugin-transform-react-display-name, which adds a\n * display name to usages of React.createClass and createReactClass.\n */\n class ReactDisplayNameTransformer extends _Transformer2.default {\n  constructor(\n     rootTransformer,\n     tokens,\n     importProcessor,\n     options,\n  ) {\n    super();this.rootTransformer = rootTransformer;this.tokens = tokens;this.importProcessor = importProcessor;this.options = options;;\n  }\n\n  process() {\n    const startIndex = this.tokens.currentIndex();\n    if (this.tokens.identifierName() === \"createReactClass\") {\n      const newName =\n        this.importProcessor && this.importProcessor.getIdentifierReplacement(\"createReactClass\");\n      if (newName) {\n        this.tokens.replaceToken(`(0, ${newName})`);\n      } else {\n        this.tokens.copyToken();\n      }\n      this.tryProcessCreateClassCall(startIndex);\n      return true;\n    }\n    if (\n      this.tokens.matches3(_types.TokenType.name, _types.TokenType.dot, _types.TokenType.name) &&\n      this.tokens.identifierName() === \"React\" &&\n      this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 2) === \"createClass\"\n    ) {\n      const newName = this.importProcessor\n        ? this.importProcessor.getIdentifierReplacement(\"React\") || \"React\"\n        : \"React\";\n      if (newName) {\n        this.tokens.replaceToken(newName);\n        this.tokens.copyToken();\n        this.tokens.copyToken();\n      } else {\n        this.tokens.copyToken();\n        this.tokens.copyToken();\n        this.tokens.copyToken();\n      }\n      this.tryProcessCreateClassCall(startIndex);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * This is called with the token position at the open-paren.\n   */\n   tryProcessCreateClassCall(startIndex) {\n    const displayName = this.findDisplayName(startIndex);\n    if (!displayName) {\n      return;\n    }\n\n    if (this.classNeedsDisplayName()) {\n      this.tokens.copyExpectedToken(_types.TokenType.parenL);\n      this.tokens.copyExpectedToken(_types.TokenType.braceL);\n      this.tokens.appendCode(`displayName: '${displayName}',`);\n      this.rootTransformer.processBalancedCode();\n      this.tokens.copyExpectedToken(_types.TokenType.braceR);\n      this.tokens.copyExpectedToken(_types.TokenType.parenR);\n    }\n  }\n\n   findDisplayName(startIndex) {\n    if (startIndex < 2) {\n      return null;\n    }\n    if (this.tokens.matches2AtIndex(startIndex - 2, _types.TokenType.name, _types.TokenType.eq)) {\n      // This is an assignment (or declaration) and the LHS is either an identifier or a member\n      // expression ending in an identifier, so use that identifier name.\n      return this.tokens.identifierNameAtIndex(startIndex - 2);\n    }\n    if (\n      startIndex >= 2 &&\n      this.tokens.tokens[startIndex - 2].identifierRole === _tokenizer.IdentifierRole.ObjectKey\n    ) {\n      // This is an object literal value.\n      return this.tokens.identifierNameAtIndex(startIndex - 2);\n    }\n    if (this.tokens.matches2AtIndex(startIndex - 2, _types.TokenType._export, _types.TokenType._default)) {\n      return this.getDisplayNameFromFilename();\n    }\n    return null;\n  }\n\n   getDisplayNameFromFilename() {\n    const filePath = this.options.filePath || \"unknown\";\n    const pathSegments = filePath.split(\"/\");\n    const filename = pathSegments[pathSegments.length - 1];\n    const dotIndex = filename.lastIndexOf(\".\");\n    const baseFilename = dotIndex === -1 ? filename : filename.slice(0, dotIndex);\n    if (baseFilename === \"index\" && pathSegments[pathSegments.length - 2]) {\n      return pathSegments[pathSegments.length - 2];\n    } else {\n      return baseFilename;\n    }\n  }\n\n  /**\n   * We only want to add a display name when this is a function call containing\n   * one argument, which is an object literal without `displayName` as an\n   * existing key.\n   */\n   classNeedsDisplayName() {\n    let index = this.tokens.currentIndex();\n    if (!this.tokens.matches2(_types.TokenType.parenL, _types.TokenType.braceL)) {\n      return false;\n    }\n    // The block starts on the {, and we expect any displayName key to be in\n    // that context. We need to ignore other other contexts to avoid matching\n    // nested displayName keys.\n    const objectStartIndex = index + 1;\n    const objectContextId = this.tokens.tokens[objectStartIndex].contextId;\n    if (objectContextId == null) {\n      throw new Error(\"Expected non-null context ID on object open-brace.\");\n    }\n\n    for (; index < this.tokens.tokens.length; index++) {\n      const token = this.tokens.tokens[index];\n      if (token.type === _types.TokenType.braceR && token.contextId === objectContextId) {\n        index++;\n        break;\n      }\n\n      if (\n        this.tokens.identifierNameAtIndex(index) === \"displayName\" &&\n        this.tokens.tokens[index].identifierRole === _tokenizer.IdentifierRole.ObjectKey &&\n        token.contextId === objectContextId\n      ) {\n        // We found a displayName key, so bail out.\n        return false;\n      }\n    }\n\n    if (index === this.tokens.tokens.length) {\n      throw new Error(\"Unexpected end of input when processing React class.\");\n    }\n\n    // If we got this far, we know we have createClass with an object with no\n    // display name, so we want to proceed as long as that was the only argument.\n    return (\n      this.tokens.matches1AtIndex(index, _types.TokenType.parenR) ||\n      this.tokens.matches2AtIndex(index, _types.TokenType.comma, _types.TokenType.parenR)\n    );\n  }\n} exports.default = ReactDisplayNameTransformer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/transformers/ReactDisplayNameTransformer.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/transformers/ReactHotLoaderTransformer.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/sucrase/dist/transformers/ReactHotLoaderTransformer.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, \"__esModule\", {value: true});var _tokenizer = __webpack_require__(/*! ../parser/tokenizer */ \"./node_modules/sucrase/dist/parser/tokenizer/index.js\");\n\nvar _Transformer = __webpack_require__(/*! ./Transformer */ \"./node_modules/sucrase/dist/transformers/Transformer.js\"); var _Transformer2 = _interopRequireDefault(_Transformer);\n\n class ReactHotLoaderTransformer extends _Transformer2.default {\n   __init() {this.extractedDefaultExportName = null}\n\n  constructor( tokens,  filePath) {\n    super();this.tokens = tokens;this.filePath = filePath;ReactHotLoaderTransformer.prototype.__init.call(this);;\n  }\n\n  setExtractedDefaultExportName(extractedDefaultExportName) {\n    this.extractedDefaultExportName = extractedDefaultExportName;\n  }\n\n  getPrefixCode() {\n    return `\n      (function () {\n        var enterModule = require('react-hot-loader').enterModule;\n        enterModule && enterModule(module);\n      })();`\n      .replace(/\\s+/g, \" \")\n      .trim();\n  }\n\n  getSuffixCode() {\n    const topLevelNames = new Set();\n    for (const token of this.tokens.tokens) {\n      if (\n        !token.isType &&\n        _tokenizer.isTopLevelDeclaration.call(void 0, token) &&\n        token.identifierRole !== _tokenizer.IdentifierRole.ImportDeclaration\n      ) {\n        topLevelNames.add(this.tokens.identifierNameForToken(token));\n      }\n    }\n    const namesToRegister = Array.from(topLevelNames).map((name) => ({\n      variableName: name,\n      uniqueLocalName: name,\n    }));\n    if (this.extractedDefaultExportName) {\n      namesToRegister.push({\n        variableName: this.extractedDefaultExportName,\n        uniqueLocalName: \"default\",\n      });\n    }\n    return `\n;(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n  var leaveModule = require('react-hot-loader').leaveModule;\n  if (!reactHotLoader) {\n    return;\n  }\n${namesToRegister\n      .map(\n        ({variableName, uniqueLocalName}) =>\n          `  reactHotLoader.register(${variableName}, \"${uniqueLocalName}\", \"${this.filePath}\");`,\n      )\n      .join(\"\\n\")}\n  leaveModule(module);\n})();`;\n  }\n\n  process() {\n    return false;\n  }\n} exports.default = ReactHotLoaderTransformer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3RyYW5zZm9ybWVycy9SZWFjdEhvdExvYWRlclRyYW5zZm9ybWVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N1Y3Jhc2UvZGlzdC90cmFuc2Zvcm1lcnMvUmVhY3RIb3RMb2FkZXJUcmFuc2Zvcm1lci5qcz9iZTU5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiOyBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiB0cnVlfSk7dmFyIF90b2tlbml6ZXIgPSByZXF1aXJlKCcuLi9wYXJzZXIvdG9rZW5pemVyJyk7XG5cbnZhciBfVHJhbnNmb3JtZXIgPSByZXF1aXJlKCcuL1RyYW5zZm9ybWVyJyk7IHZhciBfVHJhbnNmb3JtZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVHJhbnNmb3JtZXIpO1xuXG4gY2xhc3MgUmVhY3RIb3RMb2FkZXJUcmFuc2Zvcm1lciBleHRlbmRzIF9UcmFuc2Zvcm1lcjIuZGVmYXVsdCB7XG4gICBfX2luaXQoKSB7dGhpcy5leHRyYWN0ZWREZWZhdWx0RXhwb3J0TmFtZSA9IG51bGx9XG5cbiAgY29uc3RydWN0b3IoIHRva2VucywgIGZpbGVQYXRoKSB7XG4gICAgc3VwZXIoKTt0aGlzLnRva2VucyA9IHRva2Vuczt0aGlzLmZpbGVQYXRoID0gZmlsZVBhdGg7UmVhY3RIb3RMb2FkZXJUcmFuc2Zvcm1lci5wcm90b3R5cGUuX19pbml0LmNhbGwodGhpcyk7O1xuICB9XG5cbiAgc2V0RXh0cmFjdGVkRGVmYXVsdEV4cG9ydE5hbWUoZXh0cmFjdGVkRGVmYXVsdEV4cG9ydE5hbWUpIHtcbiAgICB0aGlzLmV4dHJhY3RlZERlZmF1bHRFeHBvcnROYW1lID0gZXh0cmFjdGVkRGVmYXVsdEV4cG9ydE5hbWU7XG4gIH1cblxuICBnZXRQcmVmaXhDb2RlKCkge1xuICAgIHJldHVybiBgXG4gICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZW50ZXJNb2R1bGUgPSByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykuZW50ZXJNb2R1bGU7XG4gICAgICAgIGVudGVyTW9kdWxlICYmIGVudGVyTW9kdWxlKG1vZHVsZSk7XG4gICAgICB9KSgpO2BcbiAgICAgIC5yZXBsYWNlKC9cXHMrL2csIFwiIFwiKVxuICAgICAgLnRyaW0oKTtcbiAgfVxuXG4gIGdldFN1ZmZpeENvZGUoKSB7XG4gICAgY29uc3QgdG9wTGV2ZWxOYW1lcyA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHRoaXMudG9rZW5zLnRva2Vucykge1xuICAgICAgaWYgKFxuICAgICAgICAhdG9rZW4uaXNUeXBlICYmXG4gICAgICAgIF90b2tlbml6ZXIuaXNUb3BMZXZlbERlY2xhcmF0aW9uLmNhbGwodm9pZCAwLCB0b2tlbikgJiZcbiAgICAgICAgdG9rZW4uaWRlbnRpZmllclJvbGUgIT09IF90b2tlbml6ZXIuSWRlbnRpZmllclJvbGUuSW1wb3J0RGVjbGFyYXRpb25cbiAgICAgICkge1xuICAgICAgICB0b3BMZXZlbE5hbWVzLmFkZCh0aGlzLnRva2Vucy5pZGVudGlmaWVyTmFtZUZvclRva2VuKHRva2VuKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG5hbWVzVG9SZWdpc3RlciA9IEFycmF5LmZyb20odG9wTGV2ZWxOYW1lcykubWFwKChuYW1lKSA9PiAoe1xuICAgICAgdmFyaWFibGVOYW1lOiBuYW1lLFxuICAgICAgdW5pcXVlTG9jYWxOYW1lOiBuYW1lLFxuICAgIH0pKTtcbiAgICBpZiAodGhpcy5leHRyYWN0ZWREZWZhdWx0RXhwb3J0TmFtZSkge1xuICAgICAgbmFtZXNUb1JlZ2lzdGVyLnB1c2goe1xuICAgICAgICB2YXJpYWJsZU5hbWU6IHRoaXMuZXh0cmFjdGVkRGVmYXVsdEV4cG9ydE5hbWUsXG4gICAgICAgIHVuaXF1ZUxvY2FsTmFtZTogXCJkZWZhdWx0XCIsXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGBcbjsoZnVuY3Rpb24gKCkge1xuICB2YXIgcmVhY3RIb3RMb2FkZXIgPSByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykuZGVmYXVsdDtcbiAgdmFyIGxlYXZlTW9kdWxlID0gcmVxdWlyZSgncmVhY3QtaG90LWxvYWRlcicpLmxlYXZlTW9kdWxlO1xuICBpZiAoIXJlYWN0SG90TG9hZGVyKSB7XG4gICAgcmV0dXJuO1xuICB9XG4ke25hbWVzVG9SZWdpc3RlclxuICAgICAgLm1hcChcbiAgICAgICAgKHt2YXJpYWJsZU5hbWUsIHVuaXF1ZUxvY2FsTmFtZX0pID0+XG4gICAgICAgICAgYCAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoJHt2YXJpYWJsZU5hbWV9LCBcIiR7dW5pcXVlTG9jYWxOYW1lfVwiLCBcIiR7dGhpcy5maWxlUGF0aH1cIik7YCxcbiAgICAgIClcbiAgICAgIC5qb2luKFwiXFxuXCIpfVxuICBsZWF2ZU1vZHVsZShtb2R1bGUpO1xufSkoKTtgO1xuICB9XG5cbiAgcHJvY2VzcygpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0gZXhwb3J0cy5kZWZhdWx0ID0gUmVhY3RIb3RMb2FkZXJUcmFuc2Zvcm1lcjtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/transformers/ReactHotLoaderTransformer.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/transformers/RootTransformer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/sucrase/dist/transformers/RootTransformer.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _keywords = __webpack_require__(/*! ../parser/tokenizer/keywords */ \"./node_modules/sucrase/dist/parser/tokenizer/keywords.js\");\nvar _types = __webpack_require__(/*! ../parser/tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\n\nvar _getClassInfo = __webpack_require__(/*! ../util/getClassInfo */ \"./node_modules/sucrase/dist/util/getClassInfo.js\"); var _getClassInfo2 = _interopRequireDefault(_getClassInfo);\nvar _CJSImportTransformer = __webpack_require__(/*! ./CJSImportTransformer */ \"./node_modules/sucrase/dist/transformers/CJSImportTransformer.js\"); var _CJSImportTransformer2 = _interopRequireDefault(_CJSImportTransformer);\nvar _ESMImportTransformer = __webpack_require__(/*! ./ESMImportTransformer */ \"./node_modules/sucrase/dist/transformers/ESMImportTransformer.js\"); var _ESMImportTransformer2 = _interopRequireDefault(_ESMImportTransformer);\nvar _FlowTransformer = __webpack_require__(/*! ./FlowTransformer */ \"./node_modules/sucrase/dist/transformers/FlowTransformer.js\"); var _FlowTransformer2 = _interopRequireDefault(_FlowTransformer);\nvar _JSXTransformer = __webpack_require__(/*! ./JSXTransformer */ \"./node_modules/sucrase/dist/transformers/JSXTransformer.js\"); var _JSXTransformer2 = _interopRequireDefault(_JSXTransformer);\nvar _NumericSeparatorTransformer = __webpack_require__(/*! ./NumericSeparatorTransformer */ \"./node_modules/sucrase/dist/transformers/NumericSeparatorTransformer.js\"); var _NumericSeparatorTransformer2 = _interopRequireDefault(_NumericSeparatorTransformer);\nvar _OptionalCatchBindingTransformer = __webpack_require__(/*! ./OptionalCatchBindingTransformer */ \"./node_modules/sucrase/dist/transformers/OptionalCatchBindingTransformer.js\"); var _OptionalCatchBindingTransformer2 = _interopRequireDefault(_OptionalCatchBindingTransformer);\nvar _ReactDisplayNameTransformer = __webpack_require__(/*! ./ReactDisplayNameTransformer */ \"./node_modules/sucrase/dist/transformers/ReactDisplayNameTransformer.js\"); var _ReactDisplayNameTransformer2 = _interopRequireDefault(_ReactDisplayNameTransformer);\nvar _ReactHotLoaderTransformer = __webpack_require__(/*! ./ReactHotLoaderTransformer */ \"./node_modules/sucrase/dist/transformers/ReactHotLoaderTransformer.js\"); var _ReactHotLoaderTransformer2 = _interopRequireDefault(_ReactHotLoaderTransformer);\n\nvar _TypeScriptTransformer = __webpack_require__(/*! ./TypeScriptTransformer */ \"./node_modules/sucrase/dist/transformers/TypeScriptTransformer.js\"); var _TypeScriptTransformer2 = _interopRequireDefault(_TypeScriptTransformer);\n\n class RootTransformer {\n   __init() {this.transformers = []}\n  \n  \n   __init2() {this.generatedVariables = []}\n  \n  \n\n  constructor(\n    sucraseContext,\n    transforms,\n    enableLegacyBabel5ModuleInterop,\n    options,\n  ) {;RootTransformer.prototype.__init.call(this);RootTransformer.prototype.__init2.call(this);\n    this.nameManager = sucraseContext.nameManager;\n    const {tokenProcessor, importProcessor} = sucraseContext;\n    this.tokens = tokenProcessor;\n    this.isImportsTransformEnabled = transforms.includes(\"imports\");\n    this.isReactHotLoaderTransformEnabled = transforms.includes(\"react-hot-loader\");\n\n    this.transformers.push(new (0, _NumericSeparatorTransformer2.default)(tokenProcessor));\n    this.transformers.push(new (0, _OptionalCatchBindingTransformer2.default)(tokenProcessor, this.nameManager));\n    if (transforms.includes(\"jsx\")) {\n      this.transformers.push(\n        new (0, _JSXTransformer2.default)(this, tokenProcessor, importProcessor, this.nameManager, options),\n      );\n      this.transformers.push(\n        new (0, _ReactDisplayNameTransformer2.default)(this, tokenProcessor, importProcessor, options),\n      );\n    }\n\n    let reactHotLoaderTransformer = null;\n    if (transforms.includes(\"react-hot-loader\")) {\n      if (!options.filePath) {\n        throw new Error(\"filePath is required when using the react-hot-loader transform.\");\n      }\n      reactHotLoaderTransformer = new (0, _ReactHotLoaderTransformer2.default)(tokenProcessor, options.filePath);\n      this.transformers.push(reactHotLoaderTransformer);\n    }\n\n    // Note that we always want to enable the imports transformer, even when the import transform\n    // itself isn't enabled, since we need to do type-only import pruning for both Flow and\n    // TypeScript.\n    if (transforms.includes(\"imports\")) {\n      if (importProcessor === null) {\n        throw new Error(\"Expected non-null importProcessor with imports transform enabled.\");\n      }\n      this.transformers.push(\n        new (0, _CJSImportTransformer2.default)(\n          this,\n          tokenProcessor,\n          importProcessor,\n          this.nameManager,\n          reactHotLoaderTransformer,\n          enableLegacyBabel5ModuleInterop,\n          transforms.includes(\"typescript\"),\n        ),\n      );\n    } else {\n      this.transformers.push(\n        new (0, _ESMImportTransformer2.default)(\n          tokenProcessor,\n          this.nameManager,\n          reactHotLoaderTransformer,\n          transforms.includes(\"typescript\"),\n          options,\n        ),\n      );\n    }\n\n    if (transforms.includes(\"flow\")) {\n      this.transformers.push(new (0, _FlowTransformer2.default)(this, tokenProcessor));\n    }\n    if (transforms.includes(\"typescript\")) {\n      this.transformers.push(\n        new (0, _TypeScriptTransformer2.default)(this, tokenProcessor, transforms.includes(\"imports\")),\n      );\n    }\n  }\n\n  transform() {\n    this.tokens.reset();\n    this.processBalancedCode();\n    const shouldAddUseStrict = this.isImportsTransformEnabled;\n    // \"use strict\" always needs to be first, so override the normal transformer order.\n    let prefix = shouldAddUseStrict ? '\"use strict\";' : \"\";\n    for (const transformer of this.transformers) {\n      prefix += transformer.getPrefixCode();\n    }\n    prefix += this.generatedVariables.map((v) => ` var ${v};`).join(\"\");\n    let suffix = \"\";\n    for (const transformer of this.transformers) {\n      suffix += transformer.getSuffixCode();\n    }\n    let code = this.tokens.finish();\n    if (code.startsWith(\"#!\")) {\n      let newlineIndex = code.indexOf(\"\\n\");\n      if (newlineIndex === -1) {\n        newlineIndex = code.length;\n        code += \"\\n\";\n      }\n      return code.slice(0, newlineIndex + 1) + prefix + code.slice(newlineIndex + 1) + suffix;\n    } else {\n      return prefix + this.tokens.finish() + suffix;\n    }\n  }\n\n  processBalancedCode() {\n    let braceDepth = 0;\n    let parenDepth = 0;\n    while (!this.tokens.isAtEnd()) {\n      if (this.tokens.matches1(_types.TokenType.braceL) || this.tokens.matches1(_types.TokenType.dollarBraceL)) {\n        braceDepth++;\n      } else if (this.tokens.matches1(_types.TokenType.braceR)) {\n        if (braceDepth === 0) {\n          return;\n        }\n        braceDepth--;\n      }\n      if (this.tokens.matches1(_types.TokenType.parenL)) {\n        parenDepth++;\n      } else if (this.tokens.matches1(_types.TokenType.parenR)) {\n        if (parenDepth === 0) {\n          return;\n        }\n        parenDepth--;\n      }\n      this.processToken();\n    }\n  }\n\n  processToken() {\n    if (this.tokens.matches1(_types.TokenType._class)) {\n      this.processClass();\n      return;\n    }\n    for (const transformer of this.transformers) {\n      const wasProcessed = transformer.process();\n      if (wasProcessed) {\n        return;\n      }\n    }\n    this.tokens.copyToken();\n  }\n\n  /**\n   * Skip past a class with a name and return that name.\n   */\n  processNamedClass() {\n    if (!this.tokens.matches2(_types.TokenType._class, _types.TokenType.name)) {\n      throw new Error(\"Expected identifier for exported class name.\");\n    }\n    const name = this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 1);\n    this.processClass();\n    return name;\n  }\n\n  processClass() {\n    const classInfo = _getClassInfo2.default.call(void 0, this, this.tokens, this.nameManager);\n\n    // Both static and instance initializers need a class name to use to invoke the initializer, so\n    // assign to one if necessary.\n    const needsCommaExpression =\n      classInfo.headerInfo.isExpression &&\n      classInfo.staticInitializerNames.length + classInfo.instanceInitializerNames.length > 0;\n\n    let className = classInfo.headerInfo.className;\n    if (needsCommaExpression) {\n      className = this.nameManager.claimFreeName(\"_class\");\n      this.generatedVariables.push(className);\n      this.tokens.appendCode(` (${className} =`);\n    }\n\n    const classToken = this.tokens.currentToken();\n    const contextId = classToken.contextId;\n    if (contextId == null) {\n      throw new Error(\"Expected class to have a context ID.\");\n    }\n    this.tokens.copyExpectedToken(_types.TokenType._class);\n    while (!this.tokens.matchesContextIdAndLabel(_types.TokenType.braceL, contextId)) {\n      this.processToken();\n    }\n\n    this.processClassBody(classInfo, className);\n\n    const staticInitializerStatements = classInfo.staticInitializerNames.map(\n      (name) => `${className}.${name}()`,\n    );\n    if (needsCommaExpression) {\n      this.tokens.appendCode(\n        `, ${staticInitializerStatements.map((s) => `${s}, `).join(\"\")}${className})`,\n      );\n    } else if (classInfo.staticInitializerNames.length > 0) {\n      this.tokens.appendCode(` ${staticInitializerStatements.map((s) => `${s};`).join(\" \")}`);\n    }\n  }\n\n  /**\n   * We want to just handle class fields in all contexts, since TypeScript supports them. Later,\n   * when some JS implementations support class fields, this should be made optional.\n   */\n  processClassBody(classInfo, className) {\n    const {\n      headerInfo,\n      constructorInsertPos,\n      constructorInitializerStatements,\n      fields,\n      instanceInitializerNames,\n      rangesToRemove,\n    } = classInfo;\n    let fieldIndex = 0;\n    let rangeToRemoveIndex = 0;\n    const classContextId = this.tokens.currentToken().contextId;\n    if (classContextId == null) {\n      throw new Error(\"Expected non-null context ID on class.\");\n    }\n    this.tokens.copyExpectedToken(_types.TokenType.braceL);\n    if (this.isReactHotLoaderTransformEnabled) {\n      this.tokens.appendCode(\n        \"__reactstandin__regenerateByEval(key, code) {this[key] = eval(code);}\",\n      );\n    }\n\n    const needsConstructorInit =\n      constructorInitializerStatements.length + instanceInitializerNames.length > 0;\n\n    if (constructorInsertPos === null && needsConstructorInit) {\n      const constructorInitializersCode = this.makeConstructorInitCode(\n        constructorInitializerStatements,\n        instanceInitializerNames,\n        className,\n      );\n      if (headerInfo.hasSuperclass) {\n        const argsName = this.nameManager.claimFreeName(\"args\");\n        this.tokens.appendCode(\n          `constructor(...${argsName}) { super(...${argsName}); ${constructorInitializersCode}; }`,\n        );\n      } else {\n        this.tokens.appendCode(`constructor() { ${constructorInitializersCode}; }`);\n      }\n    }\n\n    while (!this.tokens.matchesContextIdAndLabel(_types.TokenType.braceR, classContextId)) {\n      if (fieldIndex < fields.length && this.tokens.currentIndex() === fields[fieldIndex].start) {\n        let needsCloseBrace = false;\n        if (this.tokens.matches1(_types.TokenType.bracketL)) {\n          this.tokens.copyTokenWithPrefix(`${fields[fieldIndex].initializerName}() {this`);\n        } else if (this.tokens.matches1(_types.TokenType.string) || this.tokens.matches1(_types.TokenType.num)) {\n          this.tokens.copyTokenWithPrefix(`${fields[fieldIndex].initializerName}() {this[`);\n          needsCloseBrace = true;\n        } else {\n          this.tokens.copyTokenWithPrefix(`${fields[fieldIndex].initializerName}() {this.`);\n        }\n        while (this.tokens.currentIndex() < fields[fieldIndex].end) {\n          if (needsCloseBrace && this.tokens.currentIndex() === fields[fieldIndex].equalsIndex) {\n            this.tokens.appendCode(\"]\");\n          }\n          this.processToken();\n        }\n        this.tokens.appendCode(\"}\");\n        fieldIndex++;\n      } else if (\n        rangeToRemoveIndex < rangesToRemove.length &&\n        this.tokens.currentIndex() === rangesToRemove[rangeToRemoveIndex].start\n      ) {\n        this.tokens.removeInitialToken();\n        while (this.tokens.currentIndex() < rangesToRemove[rangeToRemoveIndex].end) {\n          this.tokens.removeToken();\n        }\n        rangeToRemoveIndex++;\n      } else if (this.tokens.currentIndex() === constructorInsertPos) {\n        this.tokens.copyToken();\n        if (needsConstructorInit) {\n          this.tokens.appendCode(\n            `;${this.makeConstructorInitCode(\n              constructorInitializerStatements,\n              instanceInitializerNames,\n              className,\n            )};`,\n          );\n        }\n        this.processToken();\n      } else {\n        this.processToken();\n      }\n    }\n    this.tokens.copyExpectedToken(_types.TokenType.braceR);\n  }\n\n  makeConstructorInitCode(\n    constructorInitializerStatements,\n    instanceInitializerNames,\n    className,\n  ) {\n    return [\n      ...constructorInitializerStatements,\n      ...instanceInitializerNames.map((name) => `${className}.prototype.${name}.call(this)`),\n    ].join(\";\");\n  }\n\n  /**\n   * Normally it's ok to simply remove type tokens, but we need to be more careful when dealing with\n   * arrow function return types since they can confuse the parser. In that case, we want to move\n   * the close-paren to the same line as the arrow.\n   *\n   * See https://github.com/alangpierce/sucrase/issues/391 for more details.\n   */\n  processPossibleArrowParamEnd() {\n    if (this.tokens.matches2(_types.TokenType.parenR, _types.TokenType.colon) && this.tokens.tokenAtRelativeIndex(1).isType) {\n      let nextNonTypeIndex = this.tokens.currentIndex() + 1;\n      // Look ahead to see if this is an arrow function or something else.\n      while (this.tokens.tokens[nextNonTypeIndex].isType) {\n        nextNonTypeIndex++;\n      }\n      if (this.tokens.matches1AtIndex(nextNonTypeIndex, _types.TokenType.arrow)) {\n        this.tokens.removeInitialToken();\n        while (this.tokens.currentIndex() < nextNonTypeIndex) {\n          this.tokens.removeToken();\n        }\n        this.tokens.replaceTokenTrimmingLeftWhitespace(\") =>\");\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * An async arrow function might be of the form:\n   *\n   * async <\n   *   T\n   * >() => {}\n   *\n   * in which case, removing the type parameters will cause a syntax error. Detect this case and\n   * move the open-paren earlier.\n   */\n  processPossibleAsyncArrowWithTypeParams() {\n    if (\n      !this.tokens.matchesContextual(_keywords.ContextualKeyword._async) &&\n      !this.tokens.matches1(_types.TokenType._async)\n    ) {\n      return false;\n    }\n    const nextToken = this.tokens.tokenAtRelativeIndex(1);\n    if (nextToken.type !== _types.TokenType.lessThan || !nextToken.isType) {\n      return false;\n    }\n\n    let nextNonTypeIndex = this.tokens.currentIndex() + 1;\n    // Look ahead to see if this is an arrow function or something else.\n    while (this.tokens.tokens[nextNonTypeIndex].isType) {\n      nextNonTypeIndex++;\n    }\n    if (this.tokens.matches1AtIndex(nextNonTypeIndex, _types.TokenType.parenL)) {\n      this.tokens.replaceToken(\"async (\");\n      this.tokens.removeInitialToken();\n      while (this.tokens.currentIndex() < nextNonTypeIndex) {\n        this.tokens.removeToken();\n      }\n      this.tokens.removeToken();\n      // We ate a ( token, so we need to process the tokens in between and then the ) token so that\n      // we remain balanced.\n      this.processBalancedCode();\n      this.processToken();\n      return true;\n    }\n    return false;\n  }\n\n  processPossibleTypeRange() {\n    if (this.tokens.currentToken().isType) {\n      this.tokens.removeInitialToken();\n      while (this.tokens.currentToken().isType) {\n        this.tokens.removeToken();\n      }\n      return true;\n    }\n    return false;\n  }\n} exports.default = RootTransformer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/transformers/RootTransformer.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/transformers/Transformer.js":
/*!***************************************************************!*\
  !*** ./node_modules/sucrase/dist/transformers/Transformer.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", {value: true}); class Transformer {\n  // Return true if anything was processed, false otherwise.\n  \n\n  getPrefixCode() {\n    return \"\";\n  }\n\n  getSuffixCode() {\n    return \"\";\n  }\n} exports.default = Transformer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3RyYW5zZm9ybWVycy9UcmFuc2Zvcm1lci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvdHJhbnNmb3JtZXJzL1RyYW5zZm9ybWVyLmpzPzk0NDkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7dmFsdWU6IHRydWV9KTsgY2xhc3MgVHJhbnNmb3JtZXIge1xuICAvLyBSZXR1cm4gdHJ1ZSBpZiBhbnl0aGluZyB3YXMgcHJvY2Vzc2VkLCBmYWxzZSBvdGhlcndpc2UuXG4gIFxuXG4gIGdldFByZWZpeENvZGUoKSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cblxuICBnZXRTdWZmaXhDb2RlKCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG59IGV4cG9ydHMuZGVmYXVsdCA9IFRyYW5zZm9ybWVyO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/transformers/Transformer.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/transformers/TypeScriptTransformer.js":
/*!*************************************************************************!*\
  !*** ./node_modules/sucrase/dist/transformers/TypeScriptTransformer.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, \"__esModule\", {value: true});var _types = __webpack_require__(/*! ../parser/tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\n\nvar _isIdentifier = __webpack_require__(/*! ../util/isIdentifier */ \"./node_modules/sucrase/dist/util/isIdentifier.js\"); var _isIdentifier2 = _interopRequireDefault(_isIdentifier);\n\nvar _Transformer = __webpack_require__(/*! ./Transformer */ \"./node_modules/sucrase/dist/transformers/Transformer.js\"); var _Transformer2 = _interopRequireDefault(_Transformer);\n\n class TypeScriptTransformer extends _Transformer2.default {\n  constructor(\n     rootTransformer,\n     tokens,\n     isImportsTransformEnabled,\n  ) {\n    super();this.rootTransformer = rootTransformer;this.tokens = tokens;this.isImportsTransformEnabled = isImportsTransformEnabled;;\n  }\n\n  process() {\n    if (\n      this.rootTransformer.processPossibleArrowParamEnd() ||\n      this.rootTransformer.processPossibleAsyncArrowWithTypeParams() ||\n      this.rootTransformer.processPossibleTypeRange()\n    ) {\n      return true;\n    }\n    if (\n      this.tokens.matches1(_types.TokenType._public) ||\n      this.tokens.matches1(_types.TokenType._protected) ||\n      this.tokens.matches1(_types.TokenType._private) ||\n      this.tokens.matches1(_types.TokenType._abstract) ||\n      this.tokens.matches1(_types.TokenType._readonly) ||\n      this.tokens.matches1(_types.TokenType.nonNullAssertion)\n    ) {\n      this.tokens.removeInitialToken();\n      return true;\n    }\n    if (this.tokens.matches1(_types.TokenType._enum) || this.tokens.matches2(_types.TokenType._const, _types.TokenType._enum)) {\n      this.processEnum();\n      return true;\n    }\n    if (\n      this.tokens.matches2(_types.TokenType._export, _types.TokenType._enum) ||\n      this.tokens.matches3(_types.TokenType._export, _types.TokenType._const, _types.TokenType._enum)\n    ) {\n      this.processEnum(true);\n      return true;\n    }\n    return false;\n  }\n\n  processEnum(isExport = false) {\n    // We might have \"export const enum\", so just remove all relevant tokens.\n    this.tokens.removeInitialToken();\n    while (this.tokens.matches1(_types.TokenType._const) || this.tokens.matches1(_types.TokenType._enum)) {\n      this.tokens.removeToken();\n    }\n    const enumName = this.tokens.identifierName();\n    this.tokens.removeToken();\n    if (isExport && !this.isImportsTransformEnabled) {\n      this.tokens.appendCode(\"export \");\n    }\n    this.tokens.appendCode(`var ${enumName}; (function (${enumName})`);\n    this.tokens.copyExpectedToken(_types.TokenType.braceL);\n    this.processEnumBody(enumName);\n    this.tokens.copyExpectedToken(_types.TokenType.braceR);\n    if (isExport && this.isImportsTransformEnabled) {\n      this.tokens.appendCode(`)(${enumName} || (exports.${enumName} = ${enumName} = {}));`);\n    } else {\n      this.tokens.appendCode(`)(${enumName} || (${enumName} = {}));`);\n    }\n  }\n\n  /**\n   * Rather than try to compute the actual enum values at compile time, we just create variables for\n   * each one and let everything evaluate at runtime. There's some additional complexity due to\n   * handling string literal names, including ones that happen to be valid identifiers.\n   */\n  processEnumBody(enumName) {\n    let isPreviousValidIdentifier = false;\n    let lastValueReference = null;\n    while (true) {\n      if (this.tokens.matches1(_types.TokenType.braceR)) {\n        break;\n      }\n      const nameToken = this.tokens.currentToken();\n      let name;\n      let nameStringCode;\n      if (nameToken.type === _types.TokenType.name) {\n        name = this.tokens.identifierNameForToken(nameToken);\n        nameStringCode = `\"${name}\"`;\n      } else if (nameToken.type === _types.TokenType.string) {\n        name = this.tokens.stringValueForToken(nameToken);\n        nameStringCode = this.tokens.code.slice(nameToken.start, nameToken.end);\n      } else {\n        throw new Error(\"Expected name or string at beginning of enum element.\");\n      }\n      const isValidIdentifier = _isIdentifier2.default.call(void 0, name);\n      this.tokens.removeInitialToken();\n\n      let valueIsString;\n      let valueCode;\n\n      if (this.tokens.matches1(_types.TokenType.eq)) {\n        const rhsEndIndex = this.tokens.currentToken().rhsEndIndex;\n        if (rhsEndIndex == null) {\n          throw new Error(\"Expected rhsEndIndex on enum assign.\");\n        }\n        this.tokens.removeToken();\n        if (\n          this.tokens.matches2(_types.TokenType.string, _types.TokenType.comma) ||\n          this.tokens.matches2(_types.TokenType.string, _types.TokenType.braceR)\n        ) {\n          valueIsString = true;\n        }\n        const startToken = this.tokens.currentToken();\n        while (this.tokens.currentIndex() < rhsEndIndex) {\n          this.tokens.removeToken();\n        }\n        valueCode = this.tokens.code.slice(\n          startToken.start,\n          this.tokens.tokenAtRelativeIndex(-1).end,\n        );\n      } else {\n        valueIsString = false;\n        if (lastValueReference != null) {\n          if (isPreviousValidIdentifier) {\n            valueCode = `${lastValueReference} + 1`;\n          } else {\n            valueCode = `(${lastValueReference}) + 1`;\n          }\n        } else {\n          valueCode = \"0\";\n        }\n      }\n      if (this.tokens.matches1(_types.TokenType.comma)) {\n        this.tokens.removeToken();\n      }\n\n      let valueReference;\n      if (isValidIdentifier) {\n        this.tokens.appendCode(`const ${name} = ${valueCode}; `);\n        valueReference = name;\n      } else {\n        valueReference = valueCode;\n      }\n\n      if (valueIsString) {\n        this.tokens.appendCode(`${enumName}[${nameStringCode}] = ${valueReference};`);\n      } else {\n        this.tokens.appendCode(\n          `${enumName}[${enumName}[${nameStringCode}] = ${valueReference}] = ${nameStringCode};`,\n        );\n      }\n      lastValueReference = valueReference;\n      isPreviousValidIdentifier = isValidIdentifier;\n    }\n  }\n} exports.default = TypeScriptTransformer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/transformers/TypeScriptTransformer.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/util/elideImportEquals.js":
/*!*************************************************************!*\
  !*** ./node_modules/sucrase/dist/util/elideImportEquals.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, \"__esModule\", {value: true});var _types = __webpack_require__(/*! ../parser/tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\n\n\n function elideImportEquals(tokens) {\n  // import\n  tokens.removeInitialToken();\n  // name\n  tokens.removeToken();\n  // =\n  tokens.removeToken();\n  // name or require\n  tokens.removeToken();\n  // Handle either `import A = require('A')` or `import A = B.C.D`.\n  if (tokens.matches1(_types.TokenType.parenL)) {\n    // (\n    tokens.removeToken();\n    // path string\n    tokens.removeToken();\n    // )\n    tokens.removeToken();\n  } else {\n    while (tokens.matches1(_types.TokenType.dot)) {\n      // .\n      tokens.removeToken();\n      // name\n      tokens.removeToken();\n    }\n  }\n} exports.default = elideImportEquals;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3V0aWwvZWxpZGVJbXBvcnRFcXVhbHMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3V0aWwvZWxpZGVJbXBvcnRFcXVhbHMuanM/N2QzYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjsgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogdHJ1ZX0pO3ZhciBfdHlwZXMgPSByZXF1aXJlKCcuLi9wYXJzZXIvdG9rZW5pemVyL3R5cGVzJyk7XG5cblxuIGZ1bmN0aW9uIGVsaWRlSW1wb3J0RXF1YWxzKHRva2Vucykge1xuICAvLyBpbXBvcnRcbiAgdG9rZW5zLnJlbW92ZUluaXRpYWxUb2tlbigpO1xuICAvLyBuYW1lXG4gIHRva2Vucy5yZW1vdmVUb2tlbigpO1xuICAvLyA9XG4gIHRva2Vucy5yZW1vdmVUb2tlbigpO1xuICAvLyBuYW1lIG9yIHJlcXVpcmVcbiAgdG9rZW5zLnJlbW92ZVRva2VuKCk7XG4gIC8vIEhhbmRsZSBlaXRoZXIgYGltcG9ydCBBID0gcmVxdWlyZSgnQScpYCBvciBgaW1wb3J0IEEgPSBCLkMuRGAuXG4gIGlmICh0b2tlbnMubWF0Y2hlczEoX3R5cGVzLlRva2VuVHlwZS5wYXJlbkwpKSB7XG4gICAgLy8gKFxuICAgIHRva2Vucy5yZW1vdmVUb2tlbigpO1xuICAgIC8vIHBhdGggc3RyaW5nXG4gICAgdG9rZW5zLnJlbW92ZVRva2VuKCk7XG4gICAgLy8gKVxuICAgIHRva2Vucy5yZW1vdmVUb2tlbigpO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlICh0b2tlbnMubWF0Y2hlczEoX3R5cGVzLlRva2VuVHlwZS5kb3QpKSB7XG4gICAgICAvLyAuXG4gICAgICB0b2tlbnMucmVtb3ZlVG9rZW4oKTtcbiAgICAgIC8vIG5hbWVcbiAgICAgIHRva2Vucy5yZW1vdmVUb2tlbigpO1xuICAgIH1cbiAgfVxufSBleHBvcnRzLmRlZmF1bHQgPSBlbGlkZUltcG9ydEVxdWFscztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/util/elideImportEquals.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/util/formatTokens.js":
/*!********************************************************!*\
  !*** ./node_modules/sucrase/dist/util/formatTokens.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, \"__esModule\", {value: true});var _linesandcolumns = __webpack_require__(/*! lines-and-columns */ \"./node_modules/lines-and-columns/dist/index.mjs\"); var _linesandcolumns2 = _interopRequireDefault(_linesandcolumns);\n\nvar _types = __webpack_require__(/*! ../parser/tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\n\n function formatTokens(code, tokens) {\n  if (tokens.length === 0) {\n    return \"\";\n  }\n\n  const tokenKeys = Object.keys(tokens[0]).filter(\n    (k) => k !== \"type\" && k !== \"value\" && k !== \"start\" && k !== \"end\" && k !== \"loc\",\n  );\n  const typeKeys = Object.keys(tokens[0].type).filter((k) => k !== \"label\" && k !== \"keyword\");\n\n  const headings = [\"Location\", \"Label\", \"Raw\", ...tokenKeys, ...typeKeys];\n\n  const lines = new (0, _linesandcolumns2.default)(code);\n  const rows = [headings, ...tokens.map(getTokenComponents)];\n  const padding = headings.map(() => 0);\n  for (const components of rows) {\n    for (let i = 0; i < components.length; i++) {\n      padding[i] = Math.max(padding[i], components[i].length);\n    }\n  }\n  return rows\n    .map((components) => components.map((component, i) => component.padEnd(padding[i])).join(\" \"))\n    .join(\"\\n\");\n\n  function getTokenComponents(token) {\n    const raw = code.slice(token.start, token.end);\n    return [\n      formatRange(token.start, token.end),\n      _types.formatTokenType.call(void 0, token.type),\n      truncate(String(raw), 14),\n      ...tokenKeys.map((key) => formatValue(token[key], key)),\n      ...typeKeys.map((key) => formatValue(token.type[key], key)),\n    ];\n  }\n\n  // tslint:disable-next-line no-any\n  function formatValue(value, key) {\n    if (value === true) {\n      return key;\n    } else if (value === false || value === null) {\n      return \"\";\n    } else {\n      return String(value);\n    }\n  }\n\n  function formatRange(start, end) {\n    return `${formatPos(start)}-${formatPos(end)}`;\n  }\n\n  function formatPos(pos) {\n    const location = lines.locationForIndex(pos);\n    if (!location) {\n      return \"Unknown\";\n    } else {\n      return `${location.line + 1}:${location.column + 1}`;\n    }\n  }\n} exports.default = formatTokens;\n\nfunction truncate(s, length) {\n  if (s.length > length) {\n    return `${s.slice(0, length - 3)}...`;\n  } else {\n    return s;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3V0aWwvZm9ybWF0VG9rZW5zLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N1Y3Jhc2UvZGlzdC91dGlsL2Zvcm1hdFRva2Vucy5qcz8yODk3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiOyBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiB0cnVlfSk7dmFyIF9saW5lc2FuZGNvbHVtbnMgPSByZXF1aXJlKCdsaW5lcy1hbmQtY29sdW1ucycpOyB2YXIgX2xpbmVzYW5kY29sdW1uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9saW5lc2FuZGNvbHVtbnMpO1xuXG52YXIgX3R5cGVzID0gcmVxdWlyZSgnLi4vcGFyc2VyL3Rva2VuaXplci90eXBlcycpO1xuXG4gZnVuY3Rpb24gZm9ybWF0VG9rZW5zKGNvZGUsIHRva2Vucykge1xuICBpZiAodG9rZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG5cbiAgY29uc3QgdG9rZW5LZXlzID0gT2JqZWN0LmtleXModG9rZW5zWzBdKS5maWx0ZXIoXG4gICAgKGspID0+IGsgIT09IFwidHlwZVwiICYmIGsgIT09IFwidmFsdWVcIiAmJiBrICE9PSBcInN0YXJ0XCIgJiYgayAhPT0gXCJlbmRcIiAmJiBrICE9PSBcImxvY1wiLFxuICApO1xuICBjb25zdCB0eXBlS2V5cyA9IE9iamVjdC5rZXlzKHRva2Vuc1swXS50eXBlKS5maWx0ZXIoKGspID0+IGsgIT09IFwibGFiZWxcIiAmJiBrICE9PSBcImtleXdvcmRcIik7XG5cbiAgY29uc3QgaGVhZGluZ3MgPSBbXCJMb2NhdGlvblwiLCBcIkxhYmVsXCIsIFwiUmF3XCIsIC4uLnRva2VuS2V5cywgLi4udHlwZUtleXNdO1xuXG4gIGNvbnN0IGxpbmVzID0gbmV3ICgwLCBfbGluZXNhbmRjb2x1bW5zMi5kZWZhdWx0KShjb2RlKTtcbiAgY29uc3Qgcm93cyA9IFtoZWFkaW5ncywgLi4udG9rZW5zLm1hcChnZXRUb2tlbkNvbXBvbmVudHMpXTtcbiAgY29uc3QgcGFkZGluZyA9IGhlYWRpbmdzLm1hcCgoKSA9PiAwKTtcbiAgZm9yIChjb25zdCBjb21wb25lbnRzIG9mIHJvd3MpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbXBvbmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHBhZGRpbmdbaV0gPSBNYXRoLm1heChwYWRkaW5nW2ldLCBjb21wb25lbnRzW2ldLmxlbmd0aCk7XG4gICAgfVxuICB9XG4gIHJldHVybiByb3dzXG4gICAgLm1hcCgoY29tcG9uZW50cykgPT4gY29tcG9uZW50cy5tYXAoKGNvbXBvbmVudCwgaSkgPT4gY29tcG9uZW50LnBhZEVuZChwYWRkaW5nW2ldKSkuam9pbihcIiBcIikpXG4gICAgLmpvaW4oXCJcXG5cIik7XG5cbiAgZnVuY3Rpb24gZ2V0VG9rZW5Db21wb25lbnRzKHRva2VuKSB7XG4gICAgY29uc3QgcmF3ID0gY29kZS5zbGljZSh0b2tlbi5zdGFydCwgdG9rZW4uZW5kKTtcbiAgICByZXR1cm4gW1xuICAgICAgZm9ybWF0UmFuZ2UodG9rZW4uc3RhcnQsIHRva2VuLmVuZCksXG4gICAgICBfdHlwZXMuZm9ybWF0VG9rZW5UeXBlLmNhbGwodm9pZCAwLCB0b2tlbi50eXBlKSxcbiAgICAgIHRydW5jYXRlKFN0cmluZyhyYXcpLCAxNCksXG4gICAgICAuLi50b2tlbktleXMubWFwKChrZXkpID0+IGZvcm1hdFZhbHVlKHRva2VuW2tleV0sIGtleSkpLFxuICAgICAgLi4udHlwZUtleXMubWFwKChrZXkpID0+IGZvcm1hdFZhbHVlKHRva2VuLnR5cGVba2V5XSwga2V5KSksXG4gICAgXTtcbiAgfVxuXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZSBuby1hbnlcbiAgZnVuY3Rpb24gZm9ybWF0VmFsdWUodmFsdWUsIGtleSkge1xuICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFJhbmdlKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gYCR7Zm9ybWF0UG9zKHN0YXJ0KX0tJHtmb3JtYXRQb3MoZW5kKX1gO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UG9zKHBvcykge1xuICAgIGNvbnN0IGxvY2F0aW9uID0gbGluZXMubG9jYXRpb25Gb3JJbmRleChwb3MpO1xuICAgIGlmICghbG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBcIlVua25vd25cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGAke2xvY2F0aW9uLmxpbmUgKyAxfToke2xvY2F0aW9uLmNvbHVtbiArIDF9YDtcbiAgICB9XG4gIH1cbn0gZXhwb3J0cy5kZWZhdWx0ID0gZm9ybWF0VG9rZW5zO1xuXG5mdW5jdGlvbiB0cnVuY2F0ZShzLCBsZW5ndGgpIHtcbiAgaWYgKHMubGVuZ3RoID4gbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGAke3Muc2xpY2UoMCwgbGVuZ3RoIC0gMyl9Li4uYDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcztcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/util/formatTokens.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/util/getClassInfo.js":
/*!********************************************************!*\
  !*** ./node_modules/sucrase/dist/util/getClassInfo.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _keywords = __webpack_require__(/*! ../parser/tokenizer/keywords */ \"./node_modules/sucrase/dist/parser/tokenizer/keywords.js\");\nvar _types = __webpack_require__(/*! ../parser/tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Get information about the class fields for this class, given a token processor pointing to the\n * open-brace at the start of the class.\n */\n function getClassInfo(\n  rootTransformer,\n  tokens,\n  nameManager,\n) {\n  const snapshot = tokens.snapshot();\n\n  const headerInfo = processClassHeader(tokens);\n\n  let constructorInitializerStatements = [];\n  const instanceInitializerNames = [];\n  const staticInitializerNames = [];\n  let constructorInsertPos = null;\n  const fields = [];\n  const rangesToRemove = [];\n\n  const classContextId = tokens.currentToken().contextId;\n  if (classContextId == null) {\n    throw new Error(\"Expected non-null class context ID on class open-brace.\");\n  }\n\n  tokens.nextToken();\n  while (!tokens.matchesContextIdAndLabel(_types.TokenType.braceR, classContextId)) {\n    if (tokens.matchesContextual(_keywords.ContextualKeyword._constructor) && !tokens.currentToken().isType) {\n      ({constructorInitializerStatements, constructorInsertPos} = processConstructor(tokens));\n    } else if (tokens.matches1(_types.TokenType.semi)) {\n      rangesToRemove.push({start: tokens.currentIndex(), end: tokens.currentIndex() + 1});\n      tokens.nextToken();\n    } else if (tokens.currentToken().isType) {\n      tokens.nextToken();\n    } else {\n      // Either a method or a field. Skip to the identifier part.\n      const statementStartIndex = tokens.currentIndex();\n      let isStatic = false;\n      while (isAccessModifier(tokens.currentToken())) {\n        if (tokens.matches1(_types.TokenType._static)) {\n          isStatic = true;\n        }\n        tokens.nextToken();\n      }\n      if (\n        tokens.matchesContextual(_keywords.ContextualKeyword._constructor) &&\n        !tokens.currentToken().isType\n      ) {\n        ({constructorInitializerStatements, constructorInsertPos} = processConstructor(tokens));\n        continue;\n      }\n      const nameStartIndex = tokens.currentIndex();\n      skipFieldName(tokens);\n      if (tokens.matches1(_types.TokenType.lessThan) || tokens.matches1(_types.TokenType.parenL)) {\n        // This is a method, so just skip to the next method/field. To do that, we seek forward to\n        // the next start of a class name (either an open bracket or an identifier, or the closing\n        // curly brace), then seek backward to include any access modifiers.\n        while (tokens.currentToken().contextId !== classContextId) {\n          tokens.nextToken();\n        }\n        while (isAccessModifier(tokens.tokenAtRelativeIndex(-1))) {\n          tokens.previousToken();\n        }\n        continue;\n      }\n      // There might be a type annotation that we need to skip.\n      while (tokens.currentToken().isType) {\n        tokens.nextToken();\n      }\n      if (tokens.matches1(_types.TokenType.eq)) {\n        const equalsIndex = tokens.currentIndex();\n        // This is an initializer, so we need to wrap in an initializer method.\n        const valueEnd = tokens.currentToken().rhsEndIndex;\n        if (valueEnd == null) {\n          throw new Error(\"Expected rhsEndIndex on class field assignment.\");\n        }\n        tokens.nextToken();\n        while (tokens.currentIndex() < valueEnd) {\n          rootTransformer.processToken();\n        }\n        let initializerName;\n        if (isStatic) {\n          initializerName = nameManager.claimFreeName(\"__initStatic\");\n          staticInitializerNames.push(initializerName);\n        } else {\n          initializerName = nameManager.claimFreeName(\"__init\");\n          instanceInitializerNames.push(initializerName);\n        }\n        // Fields start at the name, so `static x = 1;` has a field range of `x = 1;`.\n        fields.push({\n          initializerName,\n          equalsIndex,\n          start: nameStartIndex,\n          end: tokens.currentIndex(),\n        });\n      } else {\n        // This is just a declaration, so doesn't need to produce any code in the output.\n        rangesToRemove.push({start: statementStartIndex, end: tokens.currentIndex()});\n      }\n    }\n  }\n\n  tokens.restoreToSnapshot(snapshot);\n  return {\n    headerInfo,\n    constructorInitializerStatements,\n    instanceInitializerNames,\n    staticInitializerNames,\n    constructorInsertPos,\n    fields,\n    rangesToRemove,\n  };\n} exports.default = getClassInfo;\n\nfunction processClassHeader(tokens) {\n  const classToken = tokens.currentToken();\n  const contextId = classToken.contextId;\n  if (contextId == null) {\n    throw new Error(\"Expected context ID on class token.\");\n  }\n  const isExpression = classToken.isExpression;\n  if (isExpression == null) {\n    throw new Error(\"Expected isExpression on class token.\");\n  }\n  let className = null;\n  let hasSuperclass = false;\n  tokens.nextToken();\n  if (tokens.matches1(_types.TokenType.name)) {\n    className = tokens.identifierName();\n  }\n  while (!tokens.matchesContextIdAndLabel(_types.TokenType.braceL, contextId)) {\n    // If this has a superclass, there will always be an `extends` token. If it doesn't have a\n    // superclass, only type parameters and `implements` clauses can show up here, all of which\n    // consist only of type tokens. A declaration like `class A<B extends C> {` should *not* count\n    // as having a superclass.\n    if (tokens.matches1(_types.TokenType._extends) && !tokens.currentToken().isType) {\n      hasSuperclass = true;\n    }\n    tokens.nextToken();\n  }\n  return {isExpression, className, hasSuperclass};\n}\n\n/**\n * Extract useful information out of a constructor, starting at the \"constructor\" name.\n */\nfunction processConstructor(\n  tokens,\n) {\n  const constructorInitializerStatements = [];\n\n  tokens.nextToken();\n  const constructorContextId = tokens.currentToken().contextId;\n  if (constructorContextId == null) {\n    throw new Error(\"Expected context ID on open-paren starting constructor params.\");\n  }\n  tokens.nextToken();\n  // Advance through parameters looking for access modifiers.\n  while (!tokens.matchesContextIdAndLabel(_types.TokenType.parenR, constructorContextId)) {\n    if (isAccessModifier(tokens.currentToken())) {\n      tokens.nextToken();\n      while (isAccessModifier(tokens.currentToken())) {\n        tokens.nextToken();\n      }\n      const token = tokens.currentToken();\n      if (token.type !== _types.TokenType.name) {\n        throw new Error(\"Expected identifier after access modifiers in constructor arg.\");\n      }\n      const name = tokens.identifierNameForToken(token);\n      constructorInitializerStatements.push(`this.${name} = ${name}`);\n    }\n    tokens.nextToken();\n  }\n  // )\n  tokens.nextToken();\n  let constructorInsertPos = tokens.currentIndex();\n\n  // Advance through body looking for a super call.\n  let foundSuperCall = false;\n  while (!tokens.matchesContextIdAndLabel(_types.TokenType.braceR, constructorContextId)) {\n    if (!foundSuperCall && tokens.matches2(_types.TokenType._super, _types.TokenType.parenL)) {\n      tokens.nextToken();\n      const superCallContextId = tokens.currentToken().contextId;\n      if (superCallContextId == null) {\n        throw new Error(\"Expected a context ID on the super call\");\n      }\n      while (!tokens.matchesContextIdAndLabel(_types.TokenType.parenR, superCallContextId)) {\n        tokens.nextToken();\n      }\n      constructorInsertPos = tokens.currentIndex();\n      foundSuperCall = true;\n    }\n    tokens.nextToken();\n  }\n  // }\n  tokens.nextToken();\n\n  return {constructorInitializerStatements, constructorInsertPos};\n}\n\n/**\n * Determine if this is any token that can go before the name in a method/field.\n */\nfunction isAccessModifier(token) {\n  return [\n    _types.TokenType._async,\n    _types.TokenType._get,\n    _types.TokenType._set,\n    _types.TokenType.plus,\n    _types.TokenType.minus,\n    _types.TokenType._readonly,\n    _types.TokenType._static,\n    _types.TokenType._public,\n    _types.TokenType._private,\n    _types.TokenType._protected,\n    _types.TokenType._abstract,\n  ].includes(token.type);\n}\n\n/**\n * The next token or set of tokens is either an identifier or an expression in square brackets, for\n * a method or field name.\n */\nfunction skipFieldName(tokens) {\n  if (tokens.matches1(_types.TokenType.bracketL)) {\n    const startToken = tokens.currentToken();\n    const classContextId = startToken.contextId;\n    if (classContextId == null) {\n      throw new Error(\"Expected class context ID on computed name open bracket.\");\n    }\n    while (!tokens.matchesContextIdAndLabel(_types.TokenType.bracketR, classContextId)) {\n      tokens.nextToken();\n    }\n    tokens.nextToken();\n  } else {\n    tokens.nextToken();\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/util/getClassInfo.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/util/getDeclarationInfo.js":
/*!**************************************************************!*\
  !*** ./node_modules/sucrase/dist/util/getDeclarationInfo.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, \"__esModule\", {value: true});var _tokenizer = __webpack_require__(/*! ../parser/tokenizer */ \"./node_modules/sucrase/dist/parser/tokenizer/index.js\");\nvar _types = __webpack_require__(/*! ../parser/tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\n\n\n\n\n\n\n\n const EMPTY_DECLARATION_INFO = {\n  typeDeclarations: new Set(),\n  valueDeclarations: new Set(),\n}; exports.EMPTY_DECLARATION_INFO = EMPTY_DECLARATION_INFO;\n\n/**\n * Get all top-level identifiers that should be preserved when exported in TypeScript.\n *\n * Examples:\n * - If an identifier is declared as `const x`, then `export {x}` should be preserved.\n * - If it's declared as `type x`, then `export {x}` should be removed.\n * - If it's declared as both `const x` and `type x`, then the export should be preserved.\n * - Classes and enums should be preserved (even though they also introduce types).\n * - Imported identifiers should be preserved since we don't have enough information to\n *   rule them out. --isolatedModules disallows re-exports, which catches errors here.\n */\n function getDeclarationInfo(tokens) {\n  const typeDeclarations = new Set();\n  const valueDeclarations = new Set();\n  for (let i = 0; i < tokens.tokens.length; i++) {\n    const token = tokens.tokens[i];\n    if (token.type === _types.TokenType.name && _tokenizer.isTopLevelDeclaration.call(void 0, token)) {\n      if (token.isType) {\n        typeDeclarations.add(tokens.identifierNameForToken(token));\n      } else {\n        valueDeclarations.add(tokens.identifierNameForToken(token));\n      }\n    }\n  }\n  return {typeDeclarations, valueDeclarations};\n} exports.default = getDeclarationInfo;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3V0aWwvZ2V0RGVjbGFyYXRpb25JbmZvLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N1Y3Jhc2UvZGlzdC91dGlsL2dldERlY2xhcmF0aW9uSW5mby5qcz9hMDExIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiOyBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiB0cnVlfSk7dmFyIF90b2tlbml6ZXIgPSByZXF1aXJlKCcuLi9wYXJzZXIvdG9rZW5pemVyJyk7XG52YXIgX3R5cGVzID0gcmVxdWlyZSgnLi4vcGFyc2VyL3Rva2VuaXplci90eXBlcycpO1xuXG5cblxuXG5cblxuXG4gY29uc3QgRU1QVFlfREVDTEFSQVRJT05fSU5GTyA9IHtcbiAgdHlwZURlY2xhcmF0aW9uczogbmV3IFNldCgpLFxuICB2YWx1ZURlY2xhcmF0aW9uczogbmV3IFNldCgpLFxufTsgZXhwb3J0cy5FTVBUWV9ERUNMQVJBVElPTl9JTkZPID0gRU1QVFlfREVDTEFSQVRJT05fSU5GTztcblxuLyoqXG4gKiBHZXQgYWxsIHRvcC1sZXZlbCBpZGVudGlmaWVycyB0aGF0IHNob3VsZCBiZSBwcmVzZXJ2ZWQgd2hlbiBleHBvcnRlZCBpbiBUeXBlU2NyaXB0LlxuICpcbiAqIEV4YW1wbGVzOlxuICogLSBJZiBhbiBpZGVudGlmaWVyIGlzIGRlY2xhcmVkIGFzIGBjb25zdCB4YCwgdGhlbiBgZXhwb3J0IHt4fWAgc2hvdWxkIGJlIHByZXNlcnZlZC5cbiAqIC0gSWYgaXQncyBkZWNsYXJlZCBhcyBgdHlwZSB4YCwgdGhlbiBgZXhwb3J0IHt4fWAgc2hvdWxkIGJlIHJlbW92ZWQuXG4gKiAtIElmIGl0J3MgZGVjbGFyZWQgYXMgYm90aCBgY29uc3QgeGAgYW5kIGB0eXBlIHhgLCB0aGVuIHRoZSBleHBvcnQgc2hvdWxkIGJlIHByZXNlcnZlZC5cbiAqIC0gQ2xhc3NlcyBhbmQgZW51bXMgc2hvdWxkIGJlIHByZXNlcnZlZCAoZXZlbiB0aG91Z2ggdGhleSBhbHNvIGludHJvZHVjZSB0eXBlcykuXG4gKiAtIEltcG9ydGVkIGlkZW50aWZpZXJzIHNob3VsZCBiZSBwcmVzZXJ2ZWQgc2luY2Ugd2UgZG9uJ3QgaGF2ZSBlbm91Z2ggaW5mb3JtYXRpb24gdG9cbiAqICAgcnVsZSB0aGVtIG91dC4gLS1pc29sYXRlZE1vZHVsZXMgZGlzYWxsb3dzIHJlLWV4cG9ydHMsIHdoaWNoIGNhdGNoZXMgZXJyb3JzIGhlcmUuXG4gKi9cbiBmdW5jdGlvbiBnZXREZWNsYXJhdGlvbkluZm8odG9rZW5zKSB7XG4gIGNvbnN0IHR5cGVEZWNsYXJhdGlvbnMgPSBuZXcgU2V0KCk7XG4gIGNvbnN0IHZhbHVlRGVjbGFyYXRpb25zID0gbmV3IFNldCgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRva2Vucy50b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCB0b2tlbiA9IHRva2Vucy50b2tlbnNbaV07XG4gICAgaWYgKHRva2VuLnR5cGUgPT09IF90eXBlcy5Ub2tlblR5cGUubmFtZSAmJiBfdG9rZW5pemVyLmlzVG9wTGV2ZWxEZWNsYXJhdGlvbi5jYWxsKHZvaWQgMCwgdG9rZW4pKSB7XG4gICAgICBpZiAodG9rZW4uaXNUeXBlKSB7XG4gICAgICAgIHR5cGVEZWNsYXJhdGlvbnMuYWRkKHRva2Vucy5pZGVudGlmaWVyTmFtZUZvclRva2VuKHRva2VuKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZURlY2xhcmF0aW9ucy5hZGQodG9rZW5zLmlkZW50aWZpZXJOYW1lRm9yVG9rZW4odG9rZW4pKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHt0eXBlRGVjbGFyYXRpb25zLCB2YWx1ZURlY2xhcmF0aW9uc307XG59IGV4cG9ydHMuZGVmYXVsdCA9IGdldERlY2xhcmF0aW9uSW5mbztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/util/getDeclarationInfo.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/util/getJSXPragmaInfo.js":
/*!************************************************************!*\
  !*** ./node_modules/sucrase/dist/util/getJSXPragmaInfo.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\n\n\n\n\n\n function getJSXPragmaInfo(options) {\n  const [base, suffix] = splitPragma(options.jsxPragma || \"React.createElement\");\n  const [fragmentBase, fragmentSuffix] = splitPragma(options.jsxFragmentPragma || \"React.Fragment\");\n  return {base, suffix, fragmentBase, fragmentSuffix};\n} exports.default = getJSXPragmaInfo;\n\nfunction splitPragma(pragma) {\n  let dotIndex = pragma.indexOf(\".\");\n  if (dotIndex === -1) {\n    dotIndex = pragma.length;\n  }\n  return [pragma.slice(0, dotIndex), pragma.slice(dotIndex)];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3V0aWwvZ2V0SlNYUHJhZ21hSW5mby5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvdXRpbC9nZXRKU1hQcmFnbWFJbmZvLmpzP2FmNTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7dmFsdWU6IHRydWV9KTtcblxuXG5cblxuXG5cblxuXG4gZnVuY3Rpb24gZ2V0SlNYUHJhZ21hSW5mbyhvcHRpb25zKSB7XG4gIGNvbnN0IFtiYXNlLCBzdWZmaXhdID0gc3BsaXRQcmFnbWEob3B0aW9ucy5qc3hQcmFnbWEgfHwgXCJSZWFjdC5jcmVhdGVFbGVtZW50XCIpO1xuICBjb25zdCBbZnJhZ21lbnRCYXNlLCBmcmFnbWVudFN1ZmZpeF0gPSBzcGxpdFByYWdtYShvcHRpb25zLmpzeEZyYWdtZW50UHJhZ21hIHx8IFwiUmVhY3QuRnJhZ21lbnRcIik7XG4gIHJldHVybiB7YmFzZSwgc3VmZml4LCBmcmFnbWVudEJhc2UsIGZyYWdtZW50U3VmZml4fTtcbn0gZXhwb3J0cy5kZWZhdWx0ID0gZ2V0SlNYUHJhZ21hSW5mbztcblxuZnVuY3Rpb24gc3BsaXRQcmFnbWEocHJhZ21hKSB7XG4gIGxldCBkb3RJbmRleCA9IHByYWdtYS5pbmRleE9mKFwiLlwiKTtcbiAgaWYgKGRvdEluZGV4ID09PSAtMSkge1xuICAgIGRvdEluZGV4ID0gcHJhZ21hLmxlbmd0aDtcbiAgfVxuICByZXR1cm4gW3ByYWdtYS5zbGljZSgwLCBkb3RJbmRleCksIHByYWdtYS5zbGljZShkb3RJbmRleCldO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/util/getJSXPragmaInfo.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/util/getNonTypeIdentifiers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sucrase/dist/util/getNonTypeIdentifiers.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, \"__esModule\", {value: true});\nvar _tokenizer = __webpack_require__(/*! ../parser/tokenizer */ \"./node_modules/sucrase/dist/parser/tokenizer/index.js\");\nvar _types = __webpack_require__(/*! ../parser/tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\n\nvar _JSXTransformer = __webpack_require__(/*! ../transformers/JSXTransformer */ \"./node_modules/sucrase/dist/transformers/JSXTransformer.js\");\nvar _getJSXPragmaInfo = __webpack_require__(/*! ./getJSXPragmaInfo */ \"./node_modules/sucrase/dist/util/getJSXPragmaInfo.js\"); var _getJSXPragmaInfo2 = _interopRequireDefault(_getJSXPragmaInfo);\n\n function getNonTypeIdentifiers(tokens, options) {\n  const jsxPragmaInfo = _getJSXPragmaInfo2.default.call(void 0, options);\n  const nonTypeIdentifiers = new Set();\n  for (let i = 0; i < tokens.tokens.length; i++) {\n    const token = tokens.tokens[i];\n    if (\n      token.type === _types.TokenType.name &&\n      !token.isType &&\n      (token.identifierRole === _tokenizer.IdentifierRole.Access ||\n        token.identifierRole === _tokenizer.IdentifierRole.ObjectShorthand ||\n        token.identifierRole === _tokenizer.IdentifierRole.ExportAccess) &&\n      !token.shadowsGlobal\n    ) {\n      nonTypeIdentifiers.add(tokens.identifierNameForToken(token));\n    }\n    if (token.type === _types.TokenType.jsxTagStart) {\n      nonTypeIdentifiers.add(jsxPragmaInfo.base);\n    }\n    if (\n      token.type === _types.TokenType.jsxTagStart &&\n      i + 1 < tokens.tokens.length &&\n      tokens.tokens[i + 1].type === _types.TokenType.jsxTagEnd\n    ) {\n      nonTypeIdentifiers.add(jsxPragmaInfo.base);\n      nonTypeIdentifiers.add(jsxPragmaInfo.fragmentBase);\n    }\n    if (token.type === _types.TokenType.jsxName && token.identifierRole === _tokenizer.IdentifierRole.Access) {\n      const identifierName = tokens.identifierNameForToken(token);\n      // Lower-case single-component tag names like \"div\" don't count.\n      if (!_JSXTransformer.startsWithLowerCase.call(void 0, identifierName) || tokens.tokens[i + 1].type === _types.TokenType.dot) {\n        nonTypeIdentifiers.add(tokens.identifierNameForToken(token));\n      }\n    }\n  }\n  return nonTypeIdentifiers;\n} exports.getNonTypeIdentifiers = getNonTypeIdentifiers;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3V0aWwvZ2V0Tm9uVHlwZUlkZW50aWZpZXJzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N1Y3Jhc2UvZGlzdC91dGlsL2dldE5vblR5cGVJZGVudGlmaWVycy5qcz84ZGY4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiOyBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiB0cnVlfSk7XG52YXIgX3Rva2VuaXplciA9IHJlcXVpcmUoJy4uL3BhcnNlci90b2tlbml6ZXInKTtcbnZhciBfdHlwZXMgPSByZXF1aXJlKCcuLi9wYXJzZXIvdG9rZW5pemVyL3R5cGVzJyk7XG5cbnZhciBfSlNYVHJhbnNmb3JtZXIgPSByZXF1aXJlKCcuLi90cmFuc2Zvcm1lcnMvSlNYVHJhbnNmb3JtZXInKTtcbnZhciBfZ2V0SlNYUHJhZ21hSW5mbyA9IHJlcXVpcmUoJy4vZ2V0SlNYUHJhZ21hSW5mbycpOyB2YXIgX2dldEpTWFByYWdtYUluZm8yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0SlNYUHJhZ21hSW5mbyk7XG5cbiBmdW5jdGlvbiBnZXROb25UeXBlSWRlbnRpZmllcnModG9rZW5zLCBvcHRpb25zKSB7XG4gIGNvbnN0IGpzeFByYWdtYUluZm8gPSBfZ2V0SlNYUHJhZ21hSW5mbzIuZGVmYXVsdC5jYWxsKHZvaWQgMCwgb3B0aW9ucyk7XG4gIGNvbnN0IG5vblR5cGVJZGVudGlmaWVycyA9IG5ldyBTZXQoKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b2tlbnMudG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdG9rZW4gPSB0b2tlbnMudG9rZW5zW2ldO1xuICAgIGlmIChcbiAgICAgIHRva2VuLnR5cGUgPT09IF90eXBlcy5Ub2tlblR5cGUubmFtZSAmJlxuICAgICAgIXRva2VuLmlzVHlwZSAmJlxuICAgICAgKHRva2VuLmlkZW50aWZpZXJSb2xlID09PSBfdG9rZW5pemVyLklkZW50aWZpZXJSb2xlLkFjY2VzcyB8fFxuICAgICAgICB0b2tlbi5pZGVudGlmaWVyUm9sZSA9PT0gX3Rva2VuaXplci5JZGVudGlmaWVyUm9sZS5PYmplY3RTaG9ydGhhbmQgfHxcbiAgICAgICAgdG9rZW4uaWRlbnRpZmllclJvbGUgPT09IF90b2tlbml6ZXIuSWRlbnRpZmllclJvbGUuRXhwb3J0QWNjZXNzKSAmJlxuICAgICAgIXRva2VuLnNoYWRvd3NHbG9iYWxcbiAgICApIHtcbiAgICAgIG5vblR5cGVJZGVudGlmaWVycy5hZGQodG9rZW5zLmlkZW50aWZpZXJOYW1lRm9yVG9rZW4odG9rZW4pKTtcbiAgICB9XG4gICAgaWYgKHRva2VuLnR5cGUgPT09IF90eXBlcy5Ub2tlblR5cGUuanN4VGFnU3RhcnQpIHtcbiAgICAgIG5vblR5cGVJZGVudGlmaWVycy5hZGQoanN4UHJhZ21hSW5mby5iYXNlKTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgdG9rZW4udHlwZSA9PT0gX3R5cGVzLlRva2VuVHlwZS5qc3hUYWdTdGFydCAmJlxuICAgICAgaSArIDEgPCB0b2tlbnMudG9rZW5zLmxlbmd0aCAmJlxuICAgICAgdG9rZW5zLnRva2Vuc1tpICsgMV0udHlwZSA9PT0gX3R5cGVzLlRva2VuVHlwZS5qc3hUYWdFbmRcbiAgICApIHtcbiAgICAgIG5vblR5cGVJZGVudGlmaWVycy5hZGQoanN4UHJhZ21hSW5mby5iYXNlKTtcbiAgICAgIG5vblR5cGVJZGVudGlmaWVycy5hZGQoanN4UHJhZ21hSW5mby5mcmFnbWVudEJhc2UpO1xuICAgIH1cbiAgICBpZiAodG9rZW4udHlwZSA9PT0gX3R5cGVzLlRva2VuVHlwZS5qc3hOYW1lICYmIHRva2VuLmlkZW50aWZpZXJSb2xlID09PSBfdG9rZW5pemVyLklkZW50aWZpZXJSb2xlLkFjY2Vzcykge1xuICAgICAgY29uc3QgaWRlbnRpZmllck5hbWUgPSB0b2tlbnMuaWRlbnRpZmllck5hbWVGb3JUb2tlbih0b2tlbik7XG4gICAgICAvLyBMb3dlci1jYXNlIHNpbmdsZS1jb21wb25lbnQgdGFnIG5hbWVzIGxpa2UgXCJkaXZcIiBkb24ndCBjb3VudC5cbiAgICAgIGlmICghX0pTWFRyYW5zZm9ybWVyLnN0YXJ0c1dpdGhMb3dlckNhc2UuY2FsbCh2b2lkIDAsIGlkZW50aWZpZXJOYW1lKSB8fCB0b2tlbnMudG9rZW5zW2kgKyAxXS50eXBlID09PSBfdHlwZXMuVG9rZW5UeXBlLmRvdCkge1xuICAgICAgICBub25UeXBlSWRlbnRpZmllcnMuYWRkKHRva2Vucy5pZGVudGlmaWVyTmFtZUZvclRva2VuKHRva2VuKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBub25UeXBlSWRlbnRpZmllcnM7XG59IGV4cG9ydHMuZ2V0Tm9uVHlwZUlkZW50aWZpZXJzID0gZ2V0Tm9uVHlwZUlkZW50aWZpZXJzO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/util/getNonTypeIdentifiers.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/util/getTSImportedNames.js":
/*!**************************************************************!*\
  !*** ./node_modules/sucrase/dist/util/getTSImportedNames.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, \"__esModule\", {value: true});var _keywords = __webpack_require__(/*! ../parser/tokenizer/keywords */ \"./node_modules/sucrase/dist/parser/tokenizer/keywords.js\");\nvar _types = __webpack_require__(/*! ../parser/tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\n\n\n/**\n * Special case code to scan for imported names in ESM TypeScript. We need to do this so we can\n * properly get globals so we can compute shadowed globals.\n *\n * This is similar to logic in CJSImportProcessor, but trimmed down to avoid logic with CJS\n * replacement and flow type imports.\n */\n function getTSImportedNames(tokens) {\n  const importedNames = new Set();\n  for (let i = 0; i < tokens.tokens.length; i++) {\n    if (\n      tokens.matches1AtIndex(i, _types.TokenType._import) &&\n      !tokens.matches3AtIndex(i, _types.TokenType._import, _types.TokenType.name, _types.TokenType.eq)\n    ) {\n      collectNamesForImport(tokens, i, importedNames);\n    }\n  }\n  return importedNames;\n} exports.default = getTSImportedNames;\n\nfunction collectNamesForImport(\n  tokens,\n  index,\n  importedNames,\n) {\n  index++;\n\n  if (tokens.matches1AtIndex(index, _types.TokenType.parenL)) {\n    // Dynamic import, so nothing to do\n    return;\n  }\n\n  if (tokens.matches1AtIndex(index, _types.TokenType.name)) {\n    importedNames.add(tokens.identifierNameAtIndex(index));\n    index++;\n    if (tokens.matches1AtIndex(index, _types.TokenType.comma)) {\n      index++;\n    }\n  }\n\n  if (tokens.matches1AtIndex(index, _types.TokenType.star)) {\n    // * as\n    index += 2;\n    importedNames.add(tokens.identifierNameAtIndex(index));\n    index++;\n  }\n\n  if (tokens.matches1AtIndex(index, _types.TokenType.braceL)) {\n    index++;\n    collectNamesForNamedImport(tokens, index, importedNames);\n  }\n}\n\nfunction collectNamesForNamedImport(\n  tokens,\n  index,\n  importedNames,\n) {\n  while (true) {\n    if (tokens.matches1AtIndex(index, _types.TokenType.braceR)) {\n      return;\n    }\n\n    // We care about the local name, which might be the first token, or if there's an \"as\", is the\n    // one after that.\n    let name = tokens.identifierNameAtIndex(index);\n    index++;\n    if (tokens.matchesContextualAtIndex(index, _keywords.ContextualKeyword._as)) {\n      index++;\n      name = tokens.identifierNameAtIndex(index);\n      index++;\n    }\n    importedNames.add(name);\n    if (tokens.matches2AtIndex(index, _types.TokenType.comma, _types.TokenType.braceR)) {\n      return;\n    } else if (tokens.matches1AtIndex(index, _types.TokenType.braceR)) {\n      return;\n    } else if (tokens.matches1AtIndex(index, _types.TokenType.comma)) {\n      index++;\n    } else {\n      throw new Error(`Unexpected token: ${JSON.stringify(tokens.tokens[index])}`);\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3V0aWwvZ2V0VFNJbXBvcnRlZE5hbWVzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N1Y3Jhc2UvZGlzdC91dGlsL2dldFRTSW1wb3J0ZWROYW1lcy5qcz81ZTI4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiOyBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiB0cnVlfSk7dmFyIF9rZXl3b3JkcyA9IHJlcXVpcmUoJy4uL3BhcnNlci90b2tlbml6ZXIva2V5d29yZHMnKTtcbnZhciBfdHlwZXMgPSByZXF1aXJlKCcuLi9wYXJzZXIvdG9rZW5pemVyL3R5cGVzJyk7XG5cblxuLyoqXG4gKiBTcGVjaWFsIGNhc2UgY29kZSB0byBzY2FuIGZvciBpbXBvcnRlZCBuYW1lcyBpbiBFU00gVHlwZVNjcmlwdC4gV2UgbmVlZCB0byBkbyB0aGlzIHNvIHdlIGNhblxuICogcHJvcGVybHkgZ2V0IGdsb2JhbHMgc28gd2UgY2FuIGNvbXB1dGUgc2hhZG93ZWQgZ2xvYmFscy5cbiAqXG4gKiBUaGlzIGlzIHNpbWlsYXIgdG8gbG9naWMgaW4gQ0pTSW1wb3J0UHJvY2Vzc29yLCBidXQgdHJpbW1lZCBkb3duIHRvIGF2b2lkIGxvZ2ljIHdpdGggQ0pTXG4gKiByZXBsYWNlbWVudCBhbmQgZmxvdyB0eXBlIGltcG9ydHMuXG4gKi9cbiBmdW5jdGlvbiBnZXRUU0ltcG9ydGVkTmFtZXModG9rZW5zKSB7XG4gIGNvbnN0IGltcG9ydGVkTmFtZXMgPSBuZXcgU2V0KCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW5zLnRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChcbiAgICAgIHRva2Vucy5tYXRjaGVzMUF0SW5kZXgoaSwgX3R5cGVzLlRva2VuVHlwZS5faW1wb3J0KSAmJlxuICAgICAgIXRva2Vucy5tYXRjaGVzM0F0SW5kZXgoaSwgX3R5cGVzLlRva2VuVHlwZS5faW1wb3J0LCBfdHlwZXMuVG9rZW5UeXBlLm5hbWUsIF90eXBlcy5Ub2tlblR5cGUuZXEpXG4gICAgKSB7XG4gICAgICBjb2xsZWN0TmFtZXNGb3JJbXBvcnQodG9rZW5zLCBpLCBpbXBvcnRlZE5hbWVzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGltcG9ydGVkTmFtZXM7XG59IGV4cG9ydHMuZGVmYXVsdCA9IGdldFRTSW1wb3J0ZWROYW1lcztcblxuZnVuY3Rpb24gY29sbGVjdE5hbWVzRm9ySW1wb3J0KFxuICB0b2tlbnMsXG4gIGluZGV4LFxuICBpbXBvcnRlZE5hbWVzLFxuKSB7XG4gIGluZGV4Kys7XG5cbiAgaWYgKHRva2Vucy5tYXRjaGVzMUF0SW5kZXgoaW5kZXgsIF90eXBlcy5Ub2tlblR5cGUucGFyZW5MKSkge1xuICAgIC8vIER5bmFtaWMgaW1wb3J0LCBzbyBub3RoaW5nIHRvIGRvXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRva2Vucy5tYXRjaGVzMUF0SW5kZXgoaW5kZXgsIF90eXBlcy5Ub2tlblR5cGUubmFtZSkpIHtcbiAgICBpbXBvcnRlZE5hbWVzLmFkZCh0b2tlbnMuaWRlbnRpZmllck5hbWVBdEluZGV4KGluZGV4KSk7XG4gICAgaW5kZXgrKztcbiAgICBpZiAodG9rZW5zLm1hdGNoZXMxQXRJbmRleChpbmRleCwgX3R5cGVzLlRva2VuVHlwZS5jb21tYSkpIHtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuICB9XG5cbiAgaWYgKHRva2Vucy5tYXRjaGVzMUF0SW5kZXgoaW5kZXgsIF90eXBlcy5Ub2tlblR5cGUuc3RhcikpIHtcbiAgICAvLyAqIGFzXG4gICAgaW5kZXggKz0gMjtcbiAgICBpbXBvcnRlZE5hbWVzLmFkZCh0b2tlbnMuaWRlbnRpZmllck5hbWVBdEluZGV4KGluZGV4KSk7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGlmICh0b2tlbnMubWF0Y2hlczFBdEluZGV4KGluZGV4LCBfdHlwZXMuVG9rZW5UeXBlLmJyYWNlTCkpIHtcbiAgICBpbmRleCsrO1xuICAgIGNvbGxlY3ROYW1lc0Zvck5hbWVkSW1wb3J0KHRva2VucywgaW5kZXgsIGltcG9ydGVkTmFtZXMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbGxlY3ROYW1lc0Zvck5hbWVkSW1wb3J0KFxuICB0b2tlbnMsXG4gIGluZGV4LFxuICBpbXBvcnRlZE5hbWVzLFxuKSB7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKHRva2Vucy5tYXRjaGVzMUF0SW5kZXgoaW5kZXgsIF90eXBlcy5Ub2tlblR5cGUuYnJhY2VSKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFdlIGNhcmUgYWJvdXQgdGhlIGxvY2FsIG5hbWUsIHdoaWNoIG1pZ2h0IGJlIHRoZSBmaXJzdCB0b2tlbiwgb3IgaWYgdGhlcmUncyBhbiBcImFzXCIsIGlzIHRoZVxuICAgIC8vIG9uZSBhZnRlciB0aGF0LlxuICAgIGxldCBuYW1lID0gdG9rZW5zLmlkZW50aWZpZXJOYW1lQXRJbmRleChpbmRleCk7XG4gICAgaW5kZXgrKztcbiAgICBpZiAodG9rZW5zLm1hdGNoZXNDb250ZXh0dWFsQXRJbmRleChpbmRleCwgX2tleXdvcmRzLkNvbnRleHR1YWxLZXl3b3JkLl9hcykpIHtcbiAgICAgIGluZGV4Kys7XG4gICAgICBuYW1lID0gdG9rZW5zLmlkZW50aWZpZXJOYW1lQXRJbmRleChpbmRleCk7XG4gICAgICBpbmRleCsrO1xuICAgIH1cbiAgICBpbXBvcnRlZE5hbWVzLmFkZChuYW1lKTtcbiAgICBpZiAodG9rZW5zLm1hdGNoZXMyQXRJbmRleChpbmRleCwgX3R5cGVzLlRva2VuVHlwZS5jb21tYSwgX3R5cGVzLlRva2VuVHlwZS5icmFjZVIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmICh0b2tlbnMubWF0Y2hlczFBdEluZGV4KGluZGV4LCBfdHlwZXMuVG9rZW5UeXBlLmJyYWNlUikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKHRva2Vucy5tYXRjaGVzMUF0SW5kZXgoaW5kZXgsIF90eXBlcy5Ub2tlblR5cGUuY29tbWEpKSB7XG4gICAgICBpbmRleCsrO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgdG9rZW46ICR7SlNPTi5zdHJpbmdpZnkodG9rZW5zLnRva2Vuc1tpbmRleF0pfWApO1xuICAgIH1cbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/util/getTSImportedNames.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/util/isIdentifier.js":
/*!********************************************************!*\
  !*** ./node_modules/sucrase/dist/util/isIdentifier.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", {value: true});var _identifier = __webpack_require__(/*! ../parser/util/identifier */ \"./node_modules/sucrase/dist/parser/util/identifier.js\");\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar\n// Hard-code a list of reserved words rather than trying to use keywords or contextual keywords\n// from the parser, since currently there are various exceptions, like `package` being reserved\n// but unused and various contextual keywords being reserved. Note that we assume that all code\n// compiled by Sucrase is in a module, so strict mode words and await are all considered reserved\n// here.\nconst RESERVED_WORDS = new Set([\n  // Reserved keywords as of ECMAScript 2015\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"class\",\n  \"const\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"delete\",\n  \"do\",\n  \"else\",\n  \"export\",\n  \"extends\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"import\",\n  \"in\",\n  \"instanceof\",\n  \"new\",\n  \"return\",\n  \"super\",\n  \"switch\",\n  \"this\",\n  \"throw\",\n  \"try\",\n  \"typeof\",\n  \"var\",\n  \"void\",\n  \"while\",\n  \"with\",\n  \"yield\",\n  // Future reserved keywords\n  \"enum\",\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"await\",\n]);\n\n function isIdentifier(name) {\n  if (name.length === 0) {\n    return false;\n  }\n  if (!_identifier.IS_IDENTIFIER_START[name.charCodeAt(0)]) {\n    return false;\n  }\n  for (let i = 1; i < name.length; i++) {\n    if (!_identifier.IS_IDENTIFIER_CHAR[name.charCodeAt(i)]) {\n      return false;\n    }\n  }\n  return !RESERVED_WORDS.has(name);\n} exports.default = isIdentifier;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3V0aWwvaXNJZGVudGlmaWVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N1Y3Jhc2UvZGlzdC91dGlsL2lzSWRlbnRpZmllci5qcz9kMGI4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiB0cnVlfSk7dmFyIF9pZGVudGlmaWVyID0gcmVxdWlyZSgnLi4vcGFyc2VyL3V0aWwvaWRlbnRpZmllcicpO1xuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9MZXhpY2FsX2dyYW1tYXJcbi8vIEhhcmQtY29kZSBhIGxpc3Qgb2YgcmVzZXJ2ZWQgd29yZHMgcmF0aGVyIHRoYW4gdHJ5aW5nIHRvIHVzZSBrZXl3b3JkcyBvciBjb250ZXh0dWFsIGtleXdvcmRzXG4vLyBmcm9tIHRoZSBwYXJzZXIsIHNpbmNlIGN1cnJlbnRseSB0aGVyZSBhcmUgdmFyaW91cyBleGNlcHRpb25zLCBsaWtlIGBwYWNrYWdlYCBiZWluZyByZXNlcnZlZFxuLy8gYnV0IHVudXNlZCBhbmQgdmFyaW91cyBjb250ZXh0dWFsIGtleXdvcmRzIGJlaW5nIHJlc2VydmVkLiBOb3RlIHRoYXQgd2UgYXNzdW1lIHRoYXQgYWxsIGNvZGVcbi8vIGNvbXBpbGVkIGJ5IFN1Y3Jhc2UgaXMgaW4gYSBtb2R1bGUsIHNvIHN0cmljdCBtb2RlIHdvcmRzIGFuZCBhd2FpdCBhcmUgYWxsIGNvbnNpZGVyZWQgcmVzZXJ2ZWRcbi8vIGhlcmUuXG5jb25zdCBSRVNFUlZFRF9XT1JEUyA9IG5ldyBTZXQoW1xuICAvLyBSZXNlcnZlZCBrZXl3b3JkcyBhcyBvZiBFQ01BU2NyaXB0IDIwMTVcbiAgXCJicmVha1wiLFxuICBcImNhc2VcIixcbiAgXCJjYXRjaFwiLFxuICBcImNsYXNzXCIsXG4gIFwiY29uc3RcIixcbiAgXCJjb250aW51ZVwiLFxuICBcImRlYnVnZ2VyXCIsXG4gIFwiZGVmYXVsdFwiLFxuICBcImRlbGV0ZVwiLFxuICBcImRvXCIsXG4gIFwiZWxzZVwiLFxuICBcImV4cG9ydFwiLFxuICBcImV4dGVuZHNcIixcbiAgXCJmaW5hbGx5XCIsXG4gIFwiZm9yXCIsXG4gIFwiZnVuY3Rpb25cIixcbiAgXCJpZlwiLFxuICBcImltcG9ydFwiLFxuICBcImluXCIsXG4gIFwiaW5zdGFuY2VvZlwiLFxuICBcIm5ld1wiLFxuICBcInJldHVyblwiLFxuICBcInN1cGVyXCIsXG4gIFwic3dpdGNoXCIsXG4gIFwidGhpc1wiLFxuICBcInRocm93XCIsXG4gIFwidHJ5XCIsXG4gIFwidHlwZW9mXCIsXG4gIFwidmFyXCIsXG4gIFwidm9pZFwiLFxuICBcIndoaWxlXCIsXG4gIFwid2l0aFwiLFxuICBcInlpZWxkXCIsXG4gIC8vIEZ1dHVyZSByZXNlcnZlZCBrZXl3b3Jkc1xuICBcImVudW1cIixcbiAgXCJpbXBsZW1lbnRzXCIsXG4gIFwiaW50ZXJmYWNlXCIsXG4gIFwibGV0XCIsXG4gIFwicGFja2FnZVwiLFxuICBcInByaXZhdGVcIixcbiAgXCJwcm90ZWN0ZWRcIixcbiAgXCJwdWJsaWNcIixcbiAgXCJzdGF0aWNcIixcbiAgXCJhd2FpdFwiLFxuXSk7XG5cbiBmdW5jdGlvbiBpc0lkZW50aWZpZXIobmFtZSkge1xuICBpZiAobmFtZS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKCFfaWRlbnRpZmllci5JU19JREVOVElGSUVSX1NUQVJUW25hbWUuY2hhckNvZGVBdCgwKV0pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBuYW1lLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFfaWRlbnRpZmllci5JU19JREVOVElGSUVSX0NIQVJbbmFtZS5jaGFyQ29kZUF0KGkpXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gIVJFU0VSVkVEX1dPUkRTLmhhcyhuYW1lKTtcbn0gZXhwb3J0cy5kZWZhdWx0ID0gaXNJZGVudGlmaWVyO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/util/isIdentifier.js\n");

/***/ }),

/***/ "./node_modules/sucrase/dist/util/shouldElideDefaultExport.js":
/*!********************************************************************!*\
  !*** ./node_modules/sucrase/dist/util/shouldElideDefaultExport.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, \"__esModule\", {value: true});var _types = __webpack_require__(/*! ../parser/tokenizer/types */ \"./node_modules/sucrase/dist/parser/tokenizer/types.js\");\n\n\n\n/**\n * Common method sharing code between CJS and ESM cases, since they're the same here.\n */\n function shouldElideDefaultExport(\n  isTypeScriptTransformEnabled,\n  tokens,\n  declarationInfo,\n) {\n  if (!isTypeScriptTransformEnabled) {\n    return false;\n  }\n  const exportToken = tokens.currentToken();\n  if (exportToken.rhsEndIndex == null) {\n    throw new Error(\"Expected non-null rhsEndIndex on export token.\");\n  }\n  // The export must be of the form `export default a` or `export default a;`.\n  const numTokens = exportToken.rhsEndIndex - tokens.currentIndex();\n  if (\n    numTokens !== 3 &&\n    !(numTokens === 4 && tokens.matches1AtIndex(exportToken.rhsEndIndex - 1, _types.TokenType.semi))\n  ) {\n    return false;\n  }\n  const identifierToken = tokens.tokenAtRelativeIndex(2);\n  if (identifierToken.type !== _types.TokenType.name) {\n    return false;\n  }\n  const exportedName = tokens.identifierNameForToken(identifierToken);\n  return (\n    declarationInfo.typeDeclarations.has(exportedName) &&\n    !declarationInfo.valueDeclarations.has(exportedName)\n  );\n} exports.default = shouldElideDefaultExport;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L3V0aWwvc2hvdWxkRWxpZGVEZWZhdWx0RXhwb3J0LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N1Y3Jhc2UvZGlzdC91dGlsL3Nob3VsZEVsaWRlRGVmYXVsdEV4cG9ydC5qcz83NGU5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiOyBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiB0cnVlfSk7dmFyIF90eXBlcyA9IHJlcXVpcmUoJy4uL3BhcnNlci90b2tlbml6ZXIvdHlwZXMnKTtcblxuXG5cbi8qKlxuICogQ29tbW9uIG1ldGhvZCBzaGFyaW5nIGNvZGUgYmV0d2VlbiBDSlMgYW5kIEVTTSBjYXNlcywgc2luY2UgdGhleSdyZSB0aGUgc2FtZSBoZXJlLlxuICovXG4gZnVuY3Rpb24gc2hvdWxkRWxpZGVEZWZhdWx0RXhwb3J0KFxuICBpc1R5cGVTY3JpcHRUcmFuc2Zvcm1FbmFibGVkLFxuICB0b2tlbnMsXG4gIGRlY2xhcmF0aW9uSW5mbyxcbikge1xuICBpZiAoIWlzVHlwZVNjcmlwdFRyYW5zZm9ybUVuYWJsZWQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgZXhwb3J0VG9rZW4gPSB0b2tlbnMuY3VycmVudFRva2VuKCk7XG4gIGlmIChleHBvcnRUb2tlbi5yaHNFbmRJbmRleCA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgbm9uLW51bGwgcmhzRW5kSW5kZXggb24gZXhwb3J0IHRva2VuLlwiKTtcbiAgfVxuICAvLyBUaGUgZXhwb3J0IG11c3QgYmUgb2YgdGhlIGZvcm0gYGV4cG9ydCBkZWZhdWx0IGFgIG9yIGBleHBvcnQgZGVmYXVsdCBhO2AuXG4gIGNvbnN0IG51bVRva2VucyA9IGV4cG9ydFRva2VuLnJoc0VuZEluZGV4IC0gdG9rZW5zLmN1cnJlbnRJbmRleCgpO1xuICBpZiAoXG4gICAgbnVtVG9rZW5zICE9PSAzICYmXG4gICAgIShudW1Ub2tlbnMgPT09IDQgJiYgdG9rZW5zLm1hdGNoZXMxQXRJbmRleChleHBvcnRUb2tlbi5yaHNFbmRJbmRleCAtIDEsIF90eXBlcy5Ub2tlblR5cGUuc2VtaSkpXG4gICkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBpZGVudGlmaWVyVG9rZW4gPSB0b2tlbnMudG9rZW5BdFJlbGF0aXZlSW5kZXgoMik7XG4gIGlmIChpZGVudGlmaWVyVG9rZW4udHlwZSAhPT0gX3R5cGVzLlRva2VuVHlwZS5uYW1lKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGV4cG9ydGVkTmFtZSA9IHRva2Vucy5pZGVudGlmaWVyTmFtZUZvclRva2VuKGlkZW50aWZpZXJUb2tlbik7XG4gIHJldHVybiAoXG4gICAgZGVjbGFyYXRpb25JbmZvLnR5cGVEZWNsYXJhdGlvbnMuaGFzKGV4cG9ydGVkTmFtZSkgJiZcbiAgICAhZGVjbGFyYXRpb25JbmZvLnZhbHVlRGVjbGFyYXRpb25zLmhhcyhleHBvcnRlZE5hbWUpXG4gICk7XG59IGV4cG9ydHMuZGVmYXVsdCA9IHNob3VsZEVsaWRlRGVmYXVsdEV4cG9ydDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/sucrase/dist/util/shouldElideDefaultExport.js\n");

/***/ }),

/***/ "./node_modules/sucrase/package.json":
/*!*******************************************!*\
  !*** ./node_modules/sucrase/package.json ***!
  \*******************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bin, bugs, bundleDependencies, dependencies, deprecated, description, devDependencies, engines, homepage, keywords, license, main, module, name, repository, resolutions, scripts, types, version, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"_from\\\":\\\"sucrase\\\",\\\"_id\\\":\\\"sucrase@3.10.1\\\",\\\"_inBundle\\\":false,\\\"_integrity\\\":\\\"sha512-nMOs6rFWwkYRxcKHHDjyQmC5CmLbHN2LwRyWF1n2i0kb/pq0xcB9M19TdY5Ivfcj1BsWfs+az9Ga5B0tFdE5ww==\\\",\\\"_location\\\":\\\"/sucrase\\\",\\\"_phantomChildren\\\":{},\\\"_requested\\\":{\\\"type\\\":\\\"tag\\\",\\\"registry\\\":true,\\\"raw\\\":\\\"sucrase\\\",\\\"name\\\":\\\"sucrase\\\",\\\"escapedName\\\":\\\"sucrase\\\",\\\"rawSpec\\\":\\\"\\\",\\\"saveSpec\\\":null,\\\"fetchSpec\\\":\\\"latest\\\"},\\\"_requiredBy\\\":[\\\"#USER\\\",\\\"/\\\"],\\\"_resolved\\\":\\\"https://registry.npmjs.org/sucrase/-/sucrase-3.10.1.tgz\\\",\\\"_shasum\\\":\\\"70ce0bad0e4c8fbc3c3184dbd1797e82990d0602\\\",\\\"_spec\\\":\\\"sucrase\\\",\\\"_where\\\":\\\"/home/int/coding/cli-pg\\\",\\\"author\\\":{\\\"name\\\":\\\"Alan Pierce\\\",\\\"email\\\":\\\"alangpierce@gmail.com\\\"},\\\"bin\\\":{\\\"sucrase\\\":\\\"./bin/sucrase\\\",\\\"sucrase-node\\\":\\\"./bin/sucrase-node\\\"},\\\"bugs\\\":{\\\"url\\\":\\\"https://github.com/alangpierce/sucrase/issues\\\"},\\\"bundleDependencies\\\":false,\\\"dependencies\\\":{\\\"commander\\\":\\\"^2.19.0\\\",\\\"lines-and-columns\\\":\\\"^1.1.6\\\",\\\"mz\\\":\\\"^2.7.0\\\",\\\"pirates\\\":\\\"^4.0.0\\\"},\\\"deprecated\\\":false,\\\"description\\\":\\\"Super-fast alternative to Babel for when you can target modern JS runtimes\\\",\\\"devDependencies\\\":{\\\"@babel/cli\\\":\\\"^7.1.5\\\",\\\"@babel/core\\\":\\\"^7.1.6\\\",\\\"@babel/plugin-proposal-class-properties\\\":\\\"^7.1.0\\\",\\\"@babel/plugin-proposal-object-rest-spread\\\":\\\"^7.0.0\\\",\\\"@babel/plugin-transform-modules-commonjs\\\":\\\"^7.1.0\\\",\\\"@babel/preset-flow\\\":\\\"^7.0.0\\\",\\\"@babel/preset-react\\\":\\\"^7.0.0\\\",\\\"@babel/preset-typescript\\\":\\\"^7.1.0\\\",\\\"@types/mocha\\\":\\\"^5.2.5\\\",\\\"@types/mz\\\":\\\"^0.0.32\\\",\\\"@types/node\\\":\\\"^10.12.10\\\",\\\"@types/yargs-parser\\\":\\\"^11.0.0\\\",\\\"codecov\\\":\\\"^3.1.0\\\",\\\"eslint\\\":\\\"^5.11.1\\\",\\\"eslint-config-airbnb-base\\\":\\\"^13.1.0\\\",\\\"eslint-config-prettier\\\":\\\"^3.3.0\\\",\\\"eslint-plugin-import\\\":\\\"^2.14.0\\\",\\\"eslint-plugin-prettier\\\":\\\"^3.0.1\\\",\\\"eslint-plugin-typescript\\\":\\\"^0.14.0\\\",\\\"mocha\\\":\\\"^5.2.0\\\",\\\"nyc\\\":\\\"^13.1.0\\\",\\\"prettier\\\":\\\"^1.15.2\\\",\\\"sucrase\\\":\\\"^3.10.0\\\",\\\"tslint\\\":\\\"^5.9.1\\\",\\\"typescript\\\":\\\"^3.2.2\\\",\\\"typescript-eslint-parser\\\":\\\"^21.0.2\\\",\\\"typescript-tslint-plugin\\\":\\\"^0.1.2\\\",\\\"yargs-parser\\\":\\\"^11.1.1\\\"},\\\"engines\\\":{\\\"node\\\":\\\">=8\\\"},\\\"homepage\\\":\\\"https://github.com/alangpierce/sucrase#readme\\\",\\\"keywords\\\":[\\\"babel\\\",\\\"jsx\\\",\\\"typescript\\\",\\\"flow\\\"],\\\"license\\\":\\\"MIT\\\",\\\"main\\\":\\\"dist/index\\\",\\\"module\\\":\\\"dist/index.mjs\\\",\\\"name\\\":\\\"sucrase\\\",\\\"repository\\\":{\\\"type\\\":\\\"git\\\",\\\"url\\\":\\\"git+https://github.com/alangpierce/sucrase.git\\\"},\\\"resolutions\\\":{\\\"typescript-eslint-parser/typescript-estree\\\":\\\"8.1.0\\\"},\\\"scripts\\\":{\\\"benchmark\\\":\\\"sucrase-node benchmark/benchmark.ts\\\",\\\"benchmark-project\\\":\\\"sucrase-node benchmark/benchmark-project.ts\\\",\\\"benchmark-react\\\":\\\"sucrase-node benchmark/benchmark-react.ts\\\",\\\"build\\\":\\\"sucrase-node script/build.ts\\\",\\\"clean\\\":\\\"rm -rf ./build ./dist ./dist-self-build ./dist-types ./example-runner/example-repos\\\",\\\"fast-build\\\":\\\"sucrase-node script/build.ts --fast\\\",\\\"generate\\\":\\\"sucrase-node generator/generate.ts\\\",\\\"lint\\\":\\\"sucrase-node script/lint.ts\\\",\\\"microbenchmark\\\":\\\"sucrase-node benchmark/microbenchmark.ts\\\",\\\"prepublishOnly\\\":\\\"yarn clean && yarn build\\\",\\\"profile\\\":\\\"node --inspect-brk ./node_modules/.bin/sucrase-node ./benchmark/profile\\\",\\\"profile-project\\\":\\\"node --inspect-brk ./node_modules/.bin/sucrase-node ./benchmark/benchmark-project.ts --profile\\\",\\\"release\\\":\\\"sucrase-node script/release.ts\\\",\\\"report-coverage\\\":\\\"nyc report --reporter=text-lcov > coverage.lcov && codecov\\\",\\\"run-examples\\\":\\\"sucrase-node example-runner/example-runner.ts\\\",\\\"test\\\":\\\"yarn lint && yarn test-only\\\",\\\"test-only\\\":\\\"mocha './test/**/*.ts'\\\",\\\"test-with-coverage\\\":\\\"nyc mocha './test/**/*.ts'\\\"},\\\"types\\\":\\\"dist/index.d.ts\\\",\\\"version\\\":\\\"3.10.1\\\"}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VjcmFzZS9wYWNrYWdlLmpzb24uanMiLCJzb3VyY2VzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/sucrase/package.json\n");

/***/ }),

/***/ "./node_modules/supports-color/browser.js":
/*!************************************************!*\
  !*** ./node_modules/supports-color/browser.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = {\n\tstdout: false,\n\tstderr: false\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VwcG9ydHMtY29sb3IvYnJvd3Nlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdXBwb3J0cy1jb2xvci9icm93c2VyLmpzPzEyMWMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHN0ZG91dDogZmFsc2UsXG5cdHN0ZGVycjogZmFsc2Vcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/supports-color/browser.js\n");

/***/ }),

/***/ "./node_modules/url/url.js":
/*!*********************************!*\
  !*** ./node_modules/url/url.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar punycode = __webpack_require__(/*! punycode */ \"./node_modules/node-libs-browser/node_modules/punycode/punycode.js\");\nvar util = __webpack_require__(/*! ./util */ \"./node_modules/url/util.js\");\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = __webpack_require__(/*! querystring */ \"./node_modules/querystring-es3/index.js\");\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/url/url.js\n");

/***/ }),

/***/ "./node_modules/url/util.js":
/*!**********************************!*\
  !*** ./node_modules/url/util.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsL3V0aWwuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXJsL3V0aWwuanM/ODFhNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc1N0cmluZzogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHR5cGVvZihhcmcpID09PSAnc3RyaW5nJztcbiAgfSxcbiAgaXNPYmplY3Q6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB0eXBlb2YoYXJnKSA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xuICB9LFxuICBpc051bGw6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBhcmcgPT09IG51bGw7XG4gIH0sXG4gIGlzTnVsbE9yVW5kZWZpbmVkOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gYXJnID09IG51bGw7XG4gIH1cbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/url/util.js\n");

/***/ }),

/***/ "./node_modules/util/node_modules/inherits/inherits_browser.js":
/*!*********************************************************************!*\
  !*** ./node_modules/util/node_modules/inherits/inherits_browser.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXRpbC9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dGlsL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzP2IwOTQiXSwic291cmNlc0NvbnRlbnQiOlsiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICB9XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/util/node_modules/inherits/inherits_browser.js\n");

/***/ }),

/***/ "./node_modules/util/support/isBufferBrowser.js":
/*!******************************************************!*\
  !*** ./node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L2lzQnVmZmVyQnJvd3Nlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dGlsL3N1cHBvcnQvaXNCdWZmZXJCcm93c2VyLmpzPzEwNjQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xufSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/util/support/isBufferBrowser.js\n");

/***/ }),

/***/ "./node_modules/util/util.js":
/*!***********************************!*\
  !*** ./node_modules/util/util.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n  function getOwnPropertyDescriptors(obj) {\n    var keys = Object.keys(obj);\n    var descriptors = {};\n    for (var i = 0; i < keys.length; i++) {\n      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return descriptors;\n  };\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  }\n\n  // Allow for deprecating things in the process of starting up.\n  if (typeof process === 'undefined') {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ \"./node_modules/util/support/isBufferBrowser.js\");\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = __webpack_require__(/*! inherits */ \"./node_modules/util/node_modules/inherits/inherits_browser.js\");\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\nexports.promisify.custom = kCustomPromisifiedSymbol\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  }\n\n  // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n  function callbackified() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n    var self = this;\n    var cb = function() {\n      return maybeCb.apply(self, arguments);\n    };\n    // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n    original.apply(this, args)\n      .then(function(ret) { process.nextTick(cb, null, ret) },\n            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified,\n                          getOwnPropertyDescriptors(original));\n  return callbackified;\n}\nexports.callbackify = callbackify;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/util/util.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/OTg1YyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL21vZHVsZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanM/MWRjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/AccessibilityManager.js":
/*!********************************************************!*\
  !*** ./node_modules/xterm/lib/AccessibilityManager.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Strings = __webpack_require__(/*! ./Strings */ \"./node_modules/xterm/lib/Strings.js\");\nvar Platform_1 = __webpack_require__(/*! ./common/Platform */ \"./node_modules/xterm/lib/common/Platform.js\");\nvar RenderDebouncer_1 = __webpack_require__(/*! ./ui/RenderDebouncer */ \"./node_modules/xterm/lib/ui/RenderDebouncer.js\");\nvar Lifecycle_1 = __webpack_require__(/*! ./ui/Lifecycle */ \"./node_modules/xterm/lib/ui/Lifecycle.js\");\nvar Lifecycle_2 = __webpack_require__(/*! ./common/Lifecycle */ \"./node_modules/xterm/lib/common/Lifecycle.js\");\nvar ScreenDprMonitor_1 = __webpack_require__(/*! ./ui/ScreenDprMonitor */ \"./node_modules/xterm/lib/ui/ScreenDprMonitor.js\");\nvar MAX_ROWS_TO_READ = 20;\nvar AccessibilityManager = (function (_super) {\n    __extends(AccessibilityManager, _super);\n    function AccessibilityManager(_terminal, _dimensions) {\n        var _this = _super.call(this) || this;\n        _this._terminal = _terminal;\n        _this._dimensions = _dimensions;\n        _this._liveRegionLineCount = 0;\n        _this._charsToConsume = [];\n        _this._charsToAnnounce = '';\n        _this._accessibilityTreeRoot = document.createElement('div');\n        _this._accessibilityTreeRoot.classList.add('xterm-accessibility');\n        _this._rowContainer = document.createElement('div');\n        _this._rowContainer.classList.add('xterm-accessibility-tree');\n        _this._rowElements = [];\n        for (var i = 0; i < _this._terminal.rows; i++) {\n            _this._rowElements[i] = _this._createAccessibilityTreeNode();\n            _this._rowContainer.appendChild(_this._rowElements[i]);\n        }\n        _this._topBoundaryFocusListener = function (e) { return _this._onBoundaryFocus(e, 0); };\n        _this._bottomBoundaryFocusListener = function (e) { return _this._onBoundaryFocus(e, 1); };\n        _this._rowElements[0].addEventListener('focus', _this._topBoundaryFocusListener);\n        _this._rowElements[_this._rowElements.length - 1].addEventListener('focus', _this._bottomBoundaryFocusListener);\n        _this._refreshRowsDimensions();\n        _this._accessibilityTreeRoot.appendChild(_this._rowContainer);\n        _this._renderRowsDebouncer = new RenderDebouncer_1.RenderDebouncer(_this._renderRows.bind(_this));\n        _this._refreshRows();\n        _this._liveRegion = document.createElement('div');\n        _this._liveRegion.classList.add('live-region');\n        _this._liveRegion.setAttribute('aria-live', 'assertive');\n        _this._accessibilityTreeRoot.appendChild(_this._liveRegion);\n        _this._terminal.element.insertAdjacentElement('afterbegin', _this._accessibilityTreeRoot);\n        _this.register(_this._renderRowsDebouncer);\n        _this.register(_this._terminal.onResize(function (e) { return _this._onResize(e.rows); }));\n        _this.register(_this._terminal.onRender(function (e) { return _this._refreshRows(e.start, e.end); }));\n        _this.register(_this._terminal.onScroll(function () { return _this._refreshRows(); }));\n        _this.register(_this._terminal.addDisposableListener('a11y.char', function (char) { return _this._onChar(char); }));\n        _this.register(_this._terminal.onLineFeed(function () { return _this._onChar('\\n'); }));\n        _this.register(_this._terminal.addDisposableListener('a11y.tab', function (spaceCount) { return _this._onTab(spaceCount); }));\n        _this.register(_this._terminal.onKey(function (e) { return _this._onKey(e.key); }));\n        _this.register(_this._terminal.addDisposableListener('blur', function () { return _this._clearLiveRegion(); }));\n        _this._screenDprMonitor = new ScreenDprMonitor_1.ScreenDprMonitor();\n        _this.register(_this._screenDprMonitor);\n        _this._screenDprMonitor.setListener(function () { return _this._refreshRowsDimensions(); });\n        _this.register(Lifecycle_1.addDisposableDomListener(window, 'resize', function () { return _this._refreshRowsDimensions(); }));\n        return _this;\n    }\n    AccessibilityManager.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._terminal.element.removeChild(this._accessibilityTreeRoot);\n        this._rowElements.length = 0;\n    };\n    AccessibilityManager.prototype._onBoundaryFocus = function (e, position) {\n        var boundaryElement = e.target;\n        var beforeBoundaryElement = this._rowElements[position === 0 ? 1 : this._rowElements.length - 2];\n        var posInSet = boundaryElement.getAttribute('aria-posinset');\n        var lastRowPos = position === 0 ? '1' : \"\" + this._terminal.buffer.lines.length;\n        if (posInSet === lastRowPos) {\n            return;\n        }\n        if (e.relatedTarget !== beforeBoundaryElement) {\n            return;\n        }\n        var topBoundaryElement;\n        var bottomBoundaryElement;\n        if (position === 0) {\n            topBoundaryElement = boundaryElement;\n            bottomBoundaryElement = this._rowElements.pop();\n            this._rowContainer.removeChild(bottomBoundaryElement);\n        }\n        else {\n            topBoundaryElement = this._rowElements.shift();\n            bottomBoundaryElement = boundaryElement;\n            this._rowContainer.removeChild(topBoundaryElement);\n        }\n        topBoundaryElement.removeEventListener('focus', this._topBoundaryFocusListener);\n        bottomBoundaryElement.removeEventListener('focus', this._bottomBoundaryFocusListener);\n        if (position === 0) {\n            var newElement = this._createAccessibilityTreeNode();\n            this._rowElements.unshift(newElement);\n            this._rowContainer.insertAdjacentElement('afterbegin', newElement);\n        }\n        else {\n            var newElement = this._createAccessibilityTreeNode();\n            this._rowElements.push(newElement);\n            this._rowContainer.appendChild(newElement);\n        }\n        this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\n        this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n        this._terminal.scrollLines(position === 0 ? -1 : 1);\n        this._rowElements[position === 0 ? 1 : this._rowElements.length - 2].focus();\n        e.preventDefault();\n        e.stopImmediatePropagation();\n    };\n    AccessibilityManager.prototype._onResize = function (rows) {\n        this._rowElements[this._rowElements.length - 1].removeEventListener('focus', this._bottomBoundaryFocusListener);\n        for (var i = this._rowContainer.children.length; i < this._terminal.rows; i++) {\n            this._rowElements[i] = this._createAccessibilityTreeNode();\n            this._rowContainer.appendChild(this._rowElements[i]);\n        }\n        while (this._rowElements.length > rows) {\n            this._rowContainer.removeChild(this._rowElements.pop());\n        }\n        this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n        this._refreshRowsDimensions();\n    };\n    AccessibilityManager.prototype._createAccessibilityTreeNode = function () {\n        var element = document.createElement('div');\n        element.setAttribute('role', 'listitem');\n        element.tabIndex = -1;\n        this._refreshRowDimensions(element);\n        return element;\n    };\n    AccessibilityManager.prototype._onTab = function (spaceCount) {\n        for (var i = 0; i < spaceCount; i++) {\n            this._onChar(' ');\n        }\n    };\n    AccessibilityManager.prototype._onChar = function (char) {\n        var _this = this;\n        if (this._liveRegionLineCount < MAX_ROWS_TO_READ + 1) {\n            if (this._charsToConsume.length > 0) {\n                var shiftedChar = this._charsToConsume.shift();\n                if (shiftedChar !== char) {\n                    this._charsToAnnounce += char;\n                }\n            }\n            else {\n                this._charsToAnnounce += char;\n            }\n            if (char === '\\n') {\n                this._liveRegionLineCount++;\n                if (this._liveRegionLineCount === MAX_ROWS_TO_READ + 1) {\n                    this._liveRegion.textContent += Strings.tooMuchOutput;\n                }\n            }\n            if (Platform_1.isMac) {\n                if (this._liveRegion.textContent && this._liveRegion.textContent.length > 0 && !this._liveRegion.parentNode) {\n                    setTimeout(function () {\n                        _this._accessibilityTreeRoot.appendChild(_this._liveRegion);\n                    }, 0);\n                }\n            }\n        }\n    };\n    AccessibilityManager.prototype._clearLiveRegion = function () {\n        this._liveRegion.textContent = '';\n        this._liveRegionLineCount = 0;\n        if (Platform_1.isMac) {\n            if (this._liveRegion.parentNode) {\n                this._accessibilityTreeRoot.removeChild(this._liveRegion);\n            }\n        }\n    };\n    AccessibilityManager.prototype._onKey = function (keyChar) {\n        this._clearLiveRegion();\n        this._charsToConsume.push(keyChar);\n    };\n    AccessibilityManager.prototype._refreshRows = function (start, end) {\n        this._renderRowsDebouncer.refresh(start, end, this._terminal.rows);\n    };\n    AccessibilityManager.prototype._renderRows = function (start, end) {\n        var buffer = this._terminal.buffer;\n        var setSize = buffer.lines.length.toString();\n        for (var i = start; i <= end; i++) {\n            var lineData = buffer.translateBufferLineToString(buffer.ydisp + i, true);\n            var posInSet = (buffer.ydisp + i + 1).toString();\n            var element = this._rowElements[i];\n            if (element) {\n                element.textContent = lineData.length === 0 ? Strings.blankLine : lineData;\n                element.setAttribute('aria-posinset', posInSet);\n                element.setAttribute('aria-setsize', setSize);\n            }\n        }\n        this._announceCharacters();\n    };\n    AccessibilityManager.prototype._refreshRowsDimensions = function () {\n        if (!this._dimensions.actualCellHeight) {\n            return;\n        }\n        if (this._rowElements.length !== this._terminal.rows) {\n            this._onResize(this._terminal.rows);\n        }\n        for (var i = 0; i < this._terminal.rows; i++) {\n            this._refreshRowDimensions(this._rowElements[i]);\n        }\n    };\n    AccessibilityManager.prototype.setDimensions = function (dimensions) {\n        this._dimensions = dimensions;\n        this._refreshRowsDimensions();\n    };\n    AccessibilityManager.prototype._refreshRowDimensions = function (element) {\n        element.style.height = this._dimensions.actualCellHeight + \"px\";\n    };\n    AccessibilityManager.prototype._announceCharacters = function () {\n        if (this._charsToAnnounce.length === 0) {\n            return;\n        }\n        this._liveRegion.textContent += this._charsToAnnounce;\n        this._charsToAnnounce = '';\n    };\n    return AccessibilityManager;\n}(Lifecycle_2.Disposable));\nexports.AccessibilityManager = AccessibilityManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL0FjY2Vzc2liaWxpdHlNYW5hZ2VyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL3NyYy9BY2Nlc3NpYmlsaXR5TWFuYWdlci50cz9lNzU3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0ICogYXMgU3RyaW5ncyBmcm9tICcuL1N0cmluZ3MnO1xuaW1wb3J0IHsgSVRlcm1pbmFsLCBJQnVmZmVyIH0gZnJvbSAnLi9UeXBlcyc7XG5pbXBvcnQgeyBpc01hYyB9IGZyb20gJy4vY29tbW9uL1BsYXRmb3JtJztcbmltcG9ydCB7IFJlbmRlckRlYm91bmNlciB9IGZyb20gJy4vdWkvUmVuZGVyRGVib3VuY2VyJztcbmltcG9ydCB7IGFkZERpc3Bvc2FibGVEb21MaXN0ZW5lciB9IGZyb20gJy4vdWkvTGlmZWN5Y2xlJztcbmltcG9ydCB7IERpc3Bvc2FibGUgfSBmcm9tICcuL2NvbW1vbi9MaWZlY3ljbGUnO1xuaW1wb3J0IHsgU2NyZWVuRHByTW9uaXRvciB9IGZyb20gJy4vdWkvU2NyZWVuRHByTW9uaXRvcic7XG5pbXBvcnQgeyBJUmVuZGVyRGltZW5zaW9ucyB9IGZyb20gJy4vcmVuZGVyZXIvVHlwZXMnO1xuXG5jb25zdCBNQVhfUk9XU19UT19SRUFEID0gMjA7XG5cbmNvbnN0IGVudW0gQm91bmRhcnlQb3NpdGlvbiB7XG4gIFRPUCxcbiAgQk9UVE9NXG59XG5cbmV4cG9ydCBjbGFzcyBBY2Nlc3NpYmlsaXR5TWFuYWdlciBleHRlbmRzIERpc3Bvc2FibGUge1xuICBwcml2YXRlIF9hY2Nlc3NpYmlsaXR5VHJlZVJvb3Q6IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIF9yb3dDb250YWluZXI6IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIF9yb3dFbGVtZW50czogSFRNTEVsZW1lbnRbXTtcbiAgcHJpdmF0ZSBfbGl2ZVJlZ2lvbjogSFRNTEVsZW1lbnQ7XG4gIHByaXZhdGUgX2xpdmVSZWdpb25MaW5lQ291bnQ6IG51bWJlciA9IDA7XG5cbiAgcHJpdmF0ZSBfcmVuZGVyUm93c0RlYm91bmNlcjogUmVuZGVyRGVib3VuY2VyO1xuICBwcml2YXRlIF9zY3JlZW5EcHJNb25pdG9yOiBTY3JlZW5EcHJNb25pdG9yO1xuXG4gIHByaXZhdGUgX3RvcEJvdW5kYXJ5Rm9jdXNMaXN0ZW5lcjogKGU6IEZvY3VzRXZlbnQpID0+IHZvaWQ7XG4gIHByaXZhdGUgX2JvdHRvbUJvdW5kYXJ5Rm9jdXNMaXN0ZW5lcjogKGU6IEZvY3VzRXZlbnQpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFRoaXMgcXVldWUgaGFzIGEgY2hhcmFjdGVyIHB1c2hlZCB0byBpdCBmb3Iga2V5cyB0aGF0IGFyZSBwcmVzc2VkLCBpZiB0aGVcbiAgICogbmV4dCBjaGFyYWN0ZXIgYWRkZWQgdG8gdGhlIHRlcm1pbmFsIGlzIGVxdWFsIHRvIHRoZSBrZXkgY2hhciB0aGVuIGl0IGlzXG4gICAqIG5vdCBhbm5vdW5jZWQgKGFkZGVkIHRvIGxpdmUgcmVnaW9uKSBiZWNhdXNlIGl0IGhhcyBhbHJlYWR5IGJlZW4gYW5ub3VuY2VkXG4gICAqIGJ5IHRoZSB0ZXh0YXJlYSBldmVudCAod2hpY2ggY2Fubm90IGJlIGNhbmNlbGVkKS4gVGhlcmUgYXJlIHNvbWUgcmFjZVxuICAgKiBjb25kaXRpb24gY2FzZXMgaWYgdGhlcmUgaXMgdHlwaW5nIHdoaWxlIGRhdGEgaXMgc3RyZWFtaW5nLCBidXQgdGhpcyBjb3ZlcnNcbiAgICogdGhlIG1haW4gY2FzZSBvZiB0eXBpbmcgaW50byB0aGUgcHJvbXB0IGFuZCBpbnB1dHRpbmcgdGhlIGFuc3dlciB0byBhXG4gICAqIHF1ZXN0aW9uIChZL04sIGV0Yy4pLlxuICAgKi9cbiAgcHJpdmF0ZSBfY2hhcnNUb0NvbnN1bWU6IHN0cmluZ1tdID0gW107XG5cbiAgcHJpdmF0ZSBfY2hhcnNUb0Fubm91bmNlOiBzdHJpbmcgPSAnJztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF90ZXJtaW5hbDogSVRlcm1pbmFsLFxuICAgIHByaXZhdGUgX2RpbWVuc2lvbnM6IElSZW5kZXJEaW1lbnNpb25zXG4gICkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fYWNjZXNzaWJpbGl0eVRyZWVSb290ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5fYWNjZXNzaWJpbGl0eVRyZWVSb290LmNsYXNzTGlzdC5hZGQoJ3h0ZXJtLWFjY2Vzc2liaWxpdHknKTtcblxuICAgIHRoaXMuX3Jvd0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuX3Jvd0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCd4dGVybS1hY2Nlc3NpYmlsaXR5LXRyZWUnKTtcbiAgICB0aGlzLl9yb3dFbGVtZW50cyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdGVybWluYWwucm93czsgaSsrKSB7XG4gICAgICB0aGlzLl9yb3dFbGVtZW50c1tpXSA9IHRoaXMuX2NyZWF0ZUFjY2Vzc2liaWxpdHlUcmVlTm9kZSgpO1xuICAgICAgdGhpcy5fcm93Q29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuX3Jvd0VsZW1lbnRzW2ldKTtcbiAgICB9XG5cbiAgICB0aGlzLl90b3BCb3VuZGFyeUZvY3VzTGlzdGVuZXIgPSBlID0+IHRoaXMuX29uQm91bmRhcnlGb2N1cyhlLCBCb3VuZGFyeVBvc2l0aW9uLlRPUCk7XG4gICAgdGhpcy5fYm90dG9tQm91bmRhcnlGb2N1c0xpc3RlbmVyID0gZSA9PiB0aGlzLl9vbkJvdW5kYXJ5Rm9jdXMoZSwgQm91bmRhcnlQb3NpdGlvbi5CT1RUT00pO1xuICAgIHRoaXMuX3Jvd0VsZW1lbnRzWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5fdG9wQm91bmRhcnlGb2N1c0xpc3RlbmVyKTtcbiAgICB0aGlzLl9yb3dFbGVtZW50c1t0aGlzLl9yb3dFbGVtZW50cy5sZW5ndGggLSAxXS5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMuX2JvdHRvbUJvdW5kYXJ5Rm9jdXNMaXN0ZW5lcik7XG5cbiAgICB0aGlzLl9yZWZyZXNoUm93c0RpbWVuc2lvbnMoKTtcbiAgICB0aGlzLl9hY2Nlc3NpYmlsaXR5VHJlZVJvb3QuYXBwZW5kQ2hpbGQodGhpcy5fcm93Q29udGFpbmVyKTtcblxuICAgIHRoaXMuX3JlbmRlclJvd3NEZWJvdW5jZXIgPSBuZXcgUmVuZGVyRGVib3VuY2VyKHRoaXMuX3JlbmRlclJvd3MuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5fcmVmcmVzaFJvd3MoKTtcblxuICAgIHRoaXMuX2xpdmVSZWdpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLl9saXZlUmVnaW9uLmNsYXNzTGlzdC5hZGQoJ2xpdmUtcmVnaW9uJyk7XG4gICAgdGhpcy5fbGl2ZVJlZ2lvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGl2ZScsICdhc3NlcnRpdmUnKTtcbiAgICB0aGlzLl9hY2Nlc3NpYmlsaXR5VHJlZVJvb3QuYXBwZW5kQ2hpbGQodGhpcy5fbGl2ZVJlZ2lvbik7XG5cbiAgICB0aGlzLl90ZXJtaW5hbC5lbGVtZW50Lmluc2VydEFkamFjZW50RWxlbWVudCgnYWZ0ZXJiZWdpbicsIHRoaXMuX2FjY2Vzc2liaWxpdHlUcmVlUm9vdCk7XG5cbiAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuX3JlbmRlclJvd3NEZWJvdW5jZXIpO1xuICAgIHRoaXMucmVnaXN0ZXIodGhpcy5fdGVybWluYWwub25SZXNpemUoZSA9PiB0aGlzLl9vblJlc2l6ZShlLnJvd3MpKSk7XG4gICAgdGhpcy5yZWdpc3Rlcih0aGlzLl90ZXJtaW5hbC5vblJlbmRlcihlID0+IHRoaXMuX3JlZnJlc2hSb3dzKGUuc3RhcnQsIGUuZW5kKSkpO1xuICAgIHRoaXMucmVnaXN0ZXIodGhpcy5fdGVybWluYWwub25TY3JvbGwoKCkgPT4gdGhpcy5fcmVmcmVzaFJvd3MoKSkpO1xuICAgIC8vIExpbmUgZmVlZCBpcyBhbiBpc3N1ZSBhcyB0aGUgcHJvbXB0IHdvbid0IGJlIHJlYWQgb3V0IGFmdGVyIGEgY29tbWFuZCBpcyBydW5cbiAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuX3Rlcm1pbmFsLmFkZERpc3Bvc2FibGVMaXN0ZW5lcignYTExeS5jaGFyJywgKGNoYXIpID0+IHRoaXMuX29uQ2hhcihjaGFyKSkpO1xuICAgIHRoaXMucmVnaXN0ZXIodGhpcy5fdGVybWluYWwub25MaW5lRmVlZCgoKSA9PiB0aGlzLl9vbkNoYXIoJ1xcbicpKSk7XG4gICAgdGhpcy5yZWdpc3Rlcih0aGlzLl90ZXJtaW5hbC5hZGREaXNwb3NhYmxlTGlzdGVuZXIoJ2ExMXkudGFiJywgc3BhY2VDb3VudCA9PiB0aGlzLl9vblRhYihzcGFjZUNvdW50KSkpO1xuICAgIHRoaXMucmVnaXN0ZXIodGhpcy5fdGVybWluYWwub25LZXkoZSA9PiB0aGlzLl9vbktleShlLmtleSkpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuX3Rlcm1pbmFsLmFkZERpc3Bvc2FibGVMaXN0ZW5lcignYmx1cicsICgpID0+IHRoaXMuX2NsZWFyTGl2ZVJlZ2lvbigpKSk7XG5cbiAgICB0aGlzLl9zY3JlZW5EcHJNb25pdG9yID0gbmV3IFNjcmVlbkRwck1vbml0b3IoKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuX3NjcmVlbkRwck1vbml0b3IpO1xuICAgIHRoaXMuX3NjcmVlbkRwck1vbml0b3Iuc2V0TGlzdGVuZXIoKCkgPT4gdGhpcy5fcmVmcmVzaFJvd3NEaW1lbnNpb25zKCkpO1xuICAgIC8vIFRoaXMgc2hvdWxkbid0IGJlIG5lZWRlZCBvbiBtb2Rlcm4gYnJvd3NlcnMgYnV0IGlzIHByZXNlbnQgaW4gY2FzZSB0aGVcbiAgICAvLyBtZWRpYSBxdWVyeSB0aGF0IGRyaXZlcyB0aGUgU2NyZWVuRHByTW9uaXRvciBpc24ndCBzdXBwb3J0ZWRcbiAgICB0aGlzLnJlZ2lzdGVyKGFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih3aW5kb3csICdyZXNpemUnLCAoKSA9PiB0aGlzLl9yZWZyZXNoUm93c0RpbWVuc2lvbnMoKSkpO1xuICB9XG5cbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgc3VwZXIuZGlzcG9zZSgpO1xuICAgIHRoaXMuX3Rlcm1pbmFsLmVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5fYWNjZXNzaWJpbGl0eVRyZWVSb290KTtcbiAgICB0aGlzLl9yb3dFbGVtZW50cy5sZW5ndGggPSAwO1xuICB9XG5cbiAgcHJpdmF0ZSBfb25Cb3VuZGFyeUZvY3VzKGU6IEZvY3VzRXZlbnQsIHBvc2l0aW9uOiBCb3VuZGFyeVBvc2l0aW9uKTogdm9pZCB7XG4gICAgY29uc3QgYm91bmRhcnlFbGVtZW50ID0gPEhUTUxFbGVtZW50PmUudGFyZ2V0O1xuICAgIGNvbnN0IGJlZm9yZUJvdW5kYXJ5RWxlbWVudCA9IHRoaXMuX3Jvd0VsZW1lbnRzW3Bvc2l0aW9uID09PSBCb3VuZGFyeVBvc2l0aW9uLlRPUCA/IDEgOiB0aGlzLl9yb3dFbGVtZW50cy5sZW5ndGggLSAyXTtcblxuICAgIC8vIERvbid0IHNjcm9sbCBpZiB0aGUgYnVmZmVyIHRvcCBoYXMgcmVhY2hlZCB0aGUgZW5kIGluIHRoYXQgZGlyZWN0aW9uXG4gICAgY29uc3QgcG9zSW5TZXQgPSBib3VuZGFyeUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLXBvc2luc2V0Jyk7XG4gICAgY29uc3QgbGFzdFJvd1BvcyA9IHBvc2l0aW9uID09PSBCb3VuZGFyeVBvc2l0aW9uLlRPUCA/ICcxJyA6IGAke3RoaXMuX3Rlcm1pbmFsLmJ1ZmZlci5saW5lcy5sZW5ndGh9YDtcbiAgICBpZiAocG9zSW5TZXQgPT09IGxhc3RSb3dQb3MpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBEb24ndCBzY3JvbGwgd2hlbiB0aGUgbGFzdCBmb2N1c2VkIGl0ZW0gd2FzIG5vdCB0aGUgc2Vjb25kIHJvdyAoZm9jdXMgaXMgZ29pbmcgdGhlIG90aGVyXG4gICAgLy8gZGlyZWN0aW9uKVxuICAgIGlmIChlLnJlbGF0ZWRUYXJnZXQgIT09IGJlZm9yZUJvdW5kYXJ5RWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFJlbW92ZSBvbGQgYm91bmRhcnkgZWxlbWVudCBmcm9tIGFycmF5XG4gICAgbGV0IHRvcEJvdW5kYXJ5RWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgbGV0IGJvdHRvbUJvdW5kYXJ5RWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgaWYgKHBvc2l0aW9uID09PSBCb3VuZGFyeVBvc2l0aW9uLlRPUCkge1xuICAgICAgdG9wQm91bmRhcnlFbGVtZW50ID0gYm91bmRhcnlFbGVtZW50O1xuICAgICAgYm90dG9tQm91bmRhcnlFbGVtZW50ID0gdGhpcy5fcm93RWxlbWVudHMucG9wKCkhO1xuICAgICAgdGhpcy5fcm93Q29udGFpbmVyLnJlbW92ZUNoaWxkKGJvdHRvbUJvdW5kYXJ5RWxlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvcEJvdW5kYXJ5RWxlbWVudCA9IHRoaXMuX3Jvd0VsZW1lbnRzLnNoaWZ0KCkhO1xuICAgICAgYm90dG9tQm91bmRhcnlFbGVtZW50ID0gYm91bmRhcnlFbGVtZW50O1xuICAgICAgdGhpcy5fcm93Q29udGFpbmVyLnJlbW92ZUNoaWxkKHRvcEJvdW5kYXJ5RWxlbWVudCk7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGxpc3RlbmVycyBmcm9tIG9sZCBib3VuZGFyeSBlbGVtZW50c1xuICAgIHRvcEJvdW5kYXJ5RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMuX3RvcEJvdW5kYXJ5Rm9jdXNMaXN0ZW5lcik7XG4gICAgYm90dG9tQm91bmRhcnlFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5fYm90dG9tQm91bmRhcnlGb2N1c0xpc3RlbmVyKTtcblxuICAgIC8vIEFkZCBuZXcgZWxlbWVudCB0byBhcnJheS9ET01cbiAgICBpZiAocG9zaXRpb24gPT09IEJvdW5kYXJ5UG9zaXRpb24uVE9QKSB7XG4gICAgICBjb25zdCBuZXdFbGVtZW50ID0gdGhpcy5fY3JlYXRlQWNjZXNzaWJpbGl0eVRyZWVOb2RlKCk7XG4gICAgICB0aGlzLl9yb3dFbGVtZW50cy51bnNoaWZ0KG5ld0VsZW1lbnQpO1xuICAgICAgdGhpcy5fcm93Q29udGFpbmVyLmluc2VydEFkamFjZW50RWxlbWVudCgnYWZ0ZXJiZWdpbicsIG5ld0VsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBuZXdFbGVtZW50ID0gdGhpcy5fY3JlYXRlQWNjZXNzaWJpbGl0eVRyZWVOb2RlKCk7XG4gICAgICB0aGlzLl9yb3dFbGVtZW50cy5wdXNoKG5ld0VsZW1lbnQpO1xuICAgICAgdGhpcy5fcm93Q29udGFpbmVyLmFwcGVuZENoaWxkKG5ld0VsZW1lbnQpO1xuICAgIH1cblxuICAgIC8vIEFkZCBsaXN0ZW5lcnMgdG8gbmV3IGJvdW5kYXJ5IGVsZW1lbnRzXG4gICAgdGhpcy5fcm93RWxlbWVudHNbMF0uYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLl90b3BCb3VuZGFyeUZvY3VzTGlzdGVuZXIpO1xuICAgIHRoaXMuX3Jvd0VsZW1lbnRzW3RoaXMuX3Jvd0VsZW1lbnRzLmxlbmd0aCAtIDFdLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5fYm90dG9tQm91bmRhcnlGb2N1c0xpc3RlbmVyKTtcblxuICAgIC8vIFNjcm9sbCB1cFxuICAgIHRoaXMuX3Rlcm1pbmFsLnNjcm9sbExpbmVzKHBvc2l0aW9uID09PSBCb3VuZGFyeVBvc2l0aW9uLlRPUCA/IC0xIDogMSk7XG5cbiAgICAvLyBGb2N1cyBuZXcgYm91bmRhcnkgYmVmb3JlIGVsZW1lbnRcbiAgICB0aGlzLl9yb3dFbGVtZW50c1twb3NpdGlvbiA9PT0gQm91bmRhcnlQb3NpdGlvbi5UT1AgPyAxIDogdGhpcy5fcm93RWxlbWVudHMubGVuZ3RoIC0gMl0uZm9jdXMoKTtcblxuICAgIC8vIFByZXZlbnQgdGhlIHN0YW5kYXJkIGJlaGF2aW9yXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gIH1cblxuICBwcml2YXRlIF9vblJlc2l6ZShyb3dzOiBudW1iZXIpOiB2b2lkIHtcbiAgICAvLyBSZW1vdmUgYm90dG9tIGJvdW5kYXJ5IGxpc3RlbmVyXG4gICAgdGhpcy5fcm93RWxlbWVudHNbdGhpcy5fcm93RWxlbWVudHMubGVuZ3RoIC0gMV0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLl9ib3R0b21Cb3VuZGFyeUZvY3VzTGlzdGVuZXIpO1xuXG4gICAgLy8gR3JvdyByb3dzIGFzIHJlcXVpcmVkXG4gICAgZm9yIChsZXQgaSA9IHRoaXMuX3Jvd0NvbnRhaW5lci5jaGlsZHJlbi5sZW5ndGg7IGkgPCB0aGlzLl90ZXJtaW5hbC5yb3dzOyBpKyspIHtcbiAgICAgIHRoaXMuX3Jvd0VsZW1lbnRzW2ldID0gdGhpcy5fY3JlYXRlQWNjZXNzaWJpbGl0eVRyZWVOb2RlKCk7XG4gICAgICB0aGlzLl9yb3dDb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5fcm93RWxlbWVudHNbaV0pO1xuICAgIH1cbiAgICAvLyBTaHJpbmsgcm93cyBhcyByZXF1aXJlZFxuICAgIHdoaWxlICh0aGlzLl9yb3dFbGVtZW50cy5sZW5ndGggPiByb3dzKSB7XG4gICAgICB0aGlzLl9yb3dDb250YWluZXIucmVtb3ZlQ2hpbGQodGhpcy5fcm93RWxlbWVudHMucG9wKCkhKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgYm90dG9tIGJvdW5kYXJ5IGxpc3RlbmVyXG4gICAgdGhpcy5fcm93RWxlbWVudHNbdGhpcy5fcm93RWxlbWVudHMubGVuZ3RoIC0gMV0uYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLl9ib3R0b21Cb3VuZGFyeUZvY3VzTGlzdGVuZXIpO1xuXG4gICAgdGhpcy5fcmVmcmVzaFJvd3NEaW1lbnNpb25zKCk7XG4gIH1cblxuICBwcml2YXRlIF9jcmVhdGVBY2Nlc3NpYmlsaXR5VHJlZU5vZGUoKTogSFRNTEVsZW1lbnQge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgncm9sZScsICdsaXN0aXRlbScpO1xuICAgIGVsZW1lbnQudGFiSW5kZXggPSAtMTtcbiAgICB0aGlzLl9yZWZyZXNoUm93RGltZW5zaW9ucyhlbGVtZW50KTtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHByaXZhdGUgX29uVGFiKHNwYWNlQ291bnQ6IG51bWJlcik6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3BhY2VDb3VudDsgaSsrKSB7XG4gICAgICB0aGlzLl9vbkNoYXIoJyAnKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9vbkNoYXIoY2hhcjogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2xpdmVSZWdpb25MaW5lQ291bnQgPCBNQVhfUk9XU19UT19SRUFEICsgMSkge1xuICAgICAgaWYgKHRoaXMuX2NoYXJzVG9Db25zdW1lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gSGF2ZSB0aGUgc2NyZWVuIHJlYWRlciBpZ25vcmUgdGhlIGNoYXIgaWYgaXQgd2FzIGp1c3QgaW5wdXRcbiAgICAgICAgY29uc3Qgc2hpZnRlZENoYXIgPSB0aGlzLl9jaGFyc1RvQ29uc3VtZS5zaGlmdCgpO1xuICAgICAgICBpZiAoc2hpZnRlZENoYXIgIT09IGNoYXIpIHtcbiAgICAgICAgICB0aGlzLl9jaGFyc1RvQW5ub3VuY2UgKz0gY2hhcjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fY2hhcnNUb0Fubm91bmNlICs9IGNoYXI7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFyID09PSAnXFxuJykge1xuICAgICAgICB0aGlzLl9saXZlUmVnaW9uTGluZUNvdW50Kys7XG4gICAgICAgIGlmICh0aGlzLl9saXZlUmVnaW9uTGluZUNvdW50ID09PSBNQVhfUk9XU19UT19SRUFEICsgMSkge1xuICAgICAgICAgIHRoaXMuX2xpdmVSZWdpb24udGV4dENvbnRlbnQgKz0gU3RyaW5ncy50b29NdWNoT3V0cHV0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE9ubHkgZGV0YWNoL2F0dGFjaCBvbiBtYWMgYXMgb3RoZXJ3aXNlIG1lc3NhZ2VzIGNhbiBnbyB1bmFjY291bmNlZFxuICAgICAgaWYgKGlzTWFjKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXZlUmVnaW9uLnRleHRDb250ZW50ICYmIHRoaXMuX2xpdmVSZWdpb24udGV4dENvbnRlbnQubGVuZ3RoID4gMCAmJiAhdGhpcy5fbGl2ZVJlZ2lvbi5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9hY2Nlc3NpYmlsaXR5VHJlZVJvb3QuYXBwZW5kQ2hpbGQodGhpcy5fbGl2ZVJlZ2lvbik7XG4gICAgICAgICAgfSwgMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9jbGVhckxpdmVSZWdpb24oKTogdm9pZCB7XG4gICAgdGhpcy5fbGl2ZVJlZ2lvbi50ZXh0Q29udGVudCA9ICcnO1xuICAgIHRoaXMuX2xpdmVSZWdpb25MaW5lQ291bnQgPSAwO1xuXG4gICAgLy8gT25seSBkZXRhY2gvYXR0YWNoIG9uIG1hYyBhcyBvdGhlcndpc2UgbWVzc2FnZXMgY2FuIGdvIHVuYWNjb3VuY2VkXG4gICAgaWYgKGlzTWFjKSB7XG4gICAgICBpZiAodGhpcy5fbGl2ZVJlZ2lvbi5wYXJlbnROb2RlKSB7XG4gICAgICAgIHRoaXMuX2FjY2Vzc2liaWxpdHlUcmVlUm9vdC5yZW1vdmVDaGlsZCh0aGlzLl9saXZlUmVnaW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9vbktleShrZXlDaGFyOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLl9jbGVhckxpdmVSZWdpb24oKTtcbiAgICB0aGlzLl9jaGFyc1RvQ29uc3VtZS5wdXNoKGtleUNoYXIpO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVmcmVzaFJvd3Moc3RhcnQ/OiBudW1iZXIsIGVuZD86IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3JlbmRlclJvd3NEZWJvdW5jZXIucmVmcmVzaChzdGFydCwgZW5kLCB0aGlzLl90ZXJtaW5hbC5yb3dzKTtcbiAgfVxuXG4gIHByaXZhdGUgX3JlbmRlclJvd3Moc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBidWZmZXI6IElCdWZmZXIgPSB0aGlzLl90ZXJtaW5hbC5idWZmZXI7XG4gICAgY29uc3Qgc2V0U2l6ZSA9IGJ1ZmZlci5saW5lcy5sZW5ndGgudG9TdHJpbmcoKTtcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPD0gZW5kOyBpKyspIHtcbiAgICAgIGNvbnN0IGxpbmVEYXRhID0gYnVmZmVyLnRyYW5zbGF0ZUJ1ZmZlckxpbmVUb1N0cmluZyhidWZmZXIueWRpc3AgKyBpLCB0cnVlKTtcbiAgICAgIGNvbnN0IHBvc0luU2V0ID0gKGJ1ZmZlci55ZGlzcCArIGkgKyAxKS50b1N0cmluZygpO1xuICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX3Jvd0VsZW1lbnRzW2ldO1xuICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IGxpbmVEYXRhLmxlbmd0aCA9PT0gMCA/IFN0cmluZ3MuYmxhbmtMaW5lIDogbGluZURhdGE7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLXBvc2luc2V0JywgcG9zSW5TZXQpO1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1zZXRzaXplJywgc2V0U2l6ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2Fubm91bmNlQ2hhcmFjdGVycygpO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVmcmVzaFJvd3NEaW1lbnNpb25zKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5fZGltZW5zaW9ucy5hY3R1YWxDZWxsSGVpZ2h0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLl9yb3dFbGVtZW50cy5sZW5ndGggIT09IHRoaXMuX3Rlcm1pbmFsLnJvd3MpIHtcbiAgICAgIHRoaXMuX29uUmVzaXplKHRoaXMuX3Rlcm1pbmFsLnJvd3MpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3Rlcm1pbmFsLnJvd3M7IGkrKykge1xuICAgICAgdGhpcy5fcmVmcmVzaFJvd0RpbWVuc2lvbnModGhpcy5fcm93RWxlbWVudHNbaV0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzZXREaW1lbnNpb25zKGRpbWVuc2lvbnM6IElSZW5kZXJEaW1lbnNpb25zKTogdm9pZCB7XG4gICAgdGhpcy5fZGltZW5zaW9ucyA9IGRpbWVuc2lvbnM7XG4gICAgdGhpcy5fcmVmcmVzaFJvd3NEaW1lbnNpb25zKCk7XG4gIH1cblxuICBwcml2YXRlIF9yZWZyZXNoUm93RGltZW5zaW9ucyhlbGVtZW50OiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgIGVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gYCR7dGhpcy5fZGltZW5zaW9ucy5hY3R1YWxDZWxsSGVpZ2h0fXB4YDtcbiAgfVxuXG4gIHByaXZhdGUgX2Fubm91bmNlQ2hhcmFjdGVycygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fY2hhcnNUb0Fubm91bmNlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9saXZlUmVnaW9uLnRleHRDb250ZW50ICs9IHRoaXMuX2NoYXJzVG9Bbm5vdW5jZTtcbiAgICB0aGlzLl9jaGFyc1RvQW5ub3VuY2UgPSAnJztcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFLQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQU9BO0FBQUE7QUEwQkE7QUFBQTtBQUNBO0FBQ0E7QUF2QkE7QUFpQkE7QUFFQTtBQU9BO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBR0E7O0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFHQTtBQUdBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFsUkE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/AccessibilityManager.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/Buffer.js":
/*!******************************************!*\
  !*** ./node_modules/xterm/lib/Buffer.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CircularList_1 = __webpack_require__(/*! ./common/CircularList */ \"./node_modules/xterm/lib/common/CircularList.js\");\nvar BufferLine_1 = __webpack_require__(/*! ./core/buffer/BufferLine */ \"./node_modules/xterm/lib/core/buffer/BufferLine.js\");\nvar BufferReflow_1 = __webpack_require__(/*! ./core/buffer/BufferReflow */ \"./node_modules/xterm/lib/core/buffer/BufferReflow.js\");\nvar Marker_1 = __webpack_require__(/*! ./core/buffer/Marker */ \"./node_modules/xterm/lib/core/buffer/Marker.js\");\nexports.MAX_BUFFER_SIZE = 4294967295;\nvar Buffer = (function () {\n    function Buffer(_terminal, _hasScrollback) {\n        this._terminal = _terminal;\n        this._hasScrollback = _hasScrollback;\n        this.savedCurAttrData = BufferLine_1.DEFAULT_ATTR_DATA.clone();\n        this.markers = [];\n        this._nullCell = BufferLine_1.CellData.fromCharData([0, BufferLine_1.NULL_CELL_CHAR, BufferLine_1.NULL_CELL_WIDTH, BufferLine_1.NULL_CELL_CODE]);\n        this._whitespaceCell = BufferLine_1.CellData.fromCharData([0, BufferLine_1.WHITESPACE_CELL_CHAR, BufferLine_1.WHITESPACE_CELL_WIDTH, BufferLine_1.WHITESPACE_CELL_CODE]);\n        this._cols = this._terminal.cols;\n        this._rows = this._terminal.rows;\n        this.clear();\n    }\n    Buffer.prototype.getNullCell = function (attr) {\n        if (attr) {\n            this._nullCell.fg = attr.fg;\n            this._nullCell.bg = attr.bg;\n        }\n        else {\n            this._nullCell.fg = 0;\n            this._nullCell.bg = 0;\n        }\n        return this._nullCell;\n    };\n    Buffer.prototype.getWhitespaceCell = function (attr) {\n        if (attr) {\n            this._whitespaceCell.fg = attr.fg;\n            this._whitespaceCell.bg = attr.bg;\n        }\n        else {\n            this._whitespaceCell.fg = 0;\n            this._whitespaceCell.bg = 0;\n        }\n        return this._whitespaceCell;\n    };\n    Buffer.prototype.getBlankLine = function (attr, isWrapped) {\n        return new BufferLine_1.BufferLine(this._terminal.cols, this.getNullCell(attr), isWrapped);\n    };\n    Object.defineProperty(Buffer.prototype, \"hasScrollback\", {\n        get: function () {\n            return this._hasScrollback && this.lines.maxLength > this._rows;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Buffer.prototype, \"isCursorInViewport\", {\n        get: function () {\n            var absoluteY = this.ybase + this.y;\n            var relativeY = absoluteY - this.ydisp;\n            return (relativeY >= 0 && relativeY < this._rows);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Buffer.prototype._getCorrectBufferLength = function (rows) {\n        if (!this._hasScrollback) {\n            return rows;\n        }\n        var correctBufferLength = rows + this._terminal.options.scrollback;\n        return correctBufferLength > exports.MAX_BUFFER_SIZE ? exports.MAX_BUFFER_SIZE : correctBufferLength;\n    };\n    Buffer.prototype.fillViewportRows = function (fillAttr) {\n        if (this.lines.length === 0) {\n            if (fillAttr === undefined) {\n                fillAttr = BufferLine_1.DEFAULT_ATTR_DATA;\n            }\n            var i = this._rows;\n            while (i--) {\n                this.lines.push(this.getBlankLine(fillAttr));\n            }\n        }\n    };\n    Buffer.prototype.clear = function () {\n        this.ydisp = 0;\n        this.ybase = 0;\n        this.y = 0;\n        this.x = 0;\n        this.lines = new CircularList_1.CircularList(this._getCorrectBufferLength(this._rows));\n        this.scrollTop = 0;\n        this.scrollBottom = this._rows - 1;\n        this.setupTabStops();\n    };\n    Buffer.prototype.resize = function (newCols, newRows) {\n        var nullCell = this.getNullCell(BufferLine_1.DEFAULT_ATTR_DATA);\n        var newMaxLength = this._getCorrectBufferLength(newRows);\n        if (newMaxLength > this.lines.maxLength) {\n            this.lines.maxLength = newMaxLength;\n        }\n        if (this.lines.length > 0) {\n            if (this._cols < newCols) {\n                for (var i = 0; i < this.lines.length; i++) {\n                    this.lines.get(i).resize(newCols, nullCell);\n                }\n            }\n            var addToY = 0;\n            if (this._rows < newRows) {\n                for (var y = this._rows; y < newRows; y++) {\n                    if (this.lines.length < newRows + this.ybase) {\n                        if (this.ybase > 0 && this.lines.length <= this.ybase + this.y + addToY + 1) {\n                            this.ybase--;\n                            addToY++;\n                            if (this.ydisp > 0) {\n                                this.ydisp--;\n                            }\n                        }\n                        else {\n                            this.lines.push(new BufferLine_1.BufferLine(newCols, nullCell));\n                        }\n                    }\n                }\n            }\n            else {\n                for (var y = this._rows; y > newRows; y--) {\n                    if (this.lines.length > newRows + this.ybase) {\n                        if (this.lines.length > this.ybase + this.y + 1) {\n                            this.lines.pop();\n                        }\n                        else {\n                            this.ybase++;\n                            this.ydisp++;\n                        }\n                    }\n                }\n            }\n            if (newMaxLength < this.lines.maxLength) {\n                var amountToTrim = this.lines.length - newMaxLength;\n                if (amountToTrim > 0) {\n                    this.lines.trimStart(amountToTrim);\n                    this.ybase = Math.max(this.ybase - amountToTrim, 0);\n                    this.ydisp = Math.max(this.ydisp - amountToTrim, 0);\n                }\n                this.lines.maxLength = newMaxLength;\n            }\n            this.x = Math.min(this.x, newCols - 1);\n            this.y = Math.min(this.y, newRows - 1);\n            if (addToY) {\n                this.y += addToY;\n            }\n            this.savedY = Math.min(this.savedY, newRows - 1);\n            this.savedX = Math.min(this.savedX, newCols - 1);\n            this.scrollTop = 0;\n        }\n        this.scrollBottom = newRows - 1;\n        if (this._isReflowEnabled) {\n            this._reflow(newCols, newRows);\n            if (this._cols > newCols) {\n                for (var i = 0; i < this.lines.length; i++) {\n                    this.lines.get(i).resize(newCols, nullCell);\n                }\n            }\n        }\n        this._cols = newCols;\n        this._rows = newRows;\n    };\n    Object.defineProperty(Buffer.prototype, \"_isReflowEnabled\", {\n        get: function () {\n            return this._hasScrollback && !this._terminal.options.windowsMode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Buffer.prototype._reflow = function (newCols, newRows) {\n        if (this._cols === newCols) {\n            return;\n        }\n        if (newCols > this._cols) {\n            this._reflowLarger(newCols, newRows);\n        }\n        else {\n            this._reflowSmaller(newCols, newRows);\n        }\n    };\n    Buffer.prototype._reflowLarger = function (newCols, newRows) {\n        var toRemove = BufferReflow_1.reflowLargerGetLinesToRemove(this.lines, this._cols, newCols, this.ybase + this.y, this.getNullCell(BufferLine_1.DEFAULT_ATTR_DATA));\n        if (toRemove.length > 0) {\n            var newLayoutResult = BufferReflow_1.reflowLargerCreateNewLayout(this.lines, toRemove);\n            BufferReflow_1.reflowLargerApplyNewLayout(this.lines, newLayoutResult.layout);\n            this._reflowLargerAdjustViewport(newCols, newRows, newLayoutResult.countRemoved);\n        }\n    };\n    Buffer.prototype._reflowLargerAdjustViewport = function (newCols, newRows, countRemoved) {\n        var nullCell = this.getNullCell(BufferLine_1.DEFAULT_ATTR_DATA);\n        var viewportAdjustments = countRemoved;\n        while (viewportAdjustments-- > 0) {\n            if (this.ybase === 0) {\n                if (this.y > 0) {\n                    this.y--;\n                }\n                if (this.lines.length < newRows) {\n                    this.lines.push(new BufferLine_1.BufferLine(newCols, nullCell));\n                }\n            }\n            else {\n                if (this.ydisp === this.ybase) {\n                    this.ydisp--;\n                }\n                this.ybase--;\n            }\n        }\n    };\n    Buffer.prototype._reflowSmaller = function (newCols, newRows) {\n        var nullCell = this.getNullCell(BufferLine_1.DEFAULT_ATTR_DATA);\n        var toInsert = [];\n        var countToInsert = 0;\n        for (var y = this.lines.length - 1; y >= 0; y--) {\n            var nextLine = this.lines.get(y);\n            if (!nextLine || !nextLine.isWrapped && nextLine.getTrimmedLength() <= newCols) {\n                continue;\n            }\n            var wrappedLines = [nextLine];\n            while (nextLine.isWrapped && y > 0) {\n                nextLine = this.lines.get(--y);\n                wrappedLines.unshift(nextLine);\n            }\n            var absoluteY = this.ybase + this.y;\n            if (absoluteY >= y && absoluteY < y + wrappedLines.length) {\n                continue;\n            }\n            var lastLineLength = wrappedLines[wrappedLines.length - 1].getTrimmedLength();\n            var destLineLengths = BufferReflow_1.reflowSmallerGetNewLineLengths(wrappedLines, this._cols, newCols);\n            var linesToAdd = destLineLengths.length - wrappedLines.length;\n            var trimmedLines = void 0;\n            if (this.ybase === 0 && this.y !== this.lines.length - 1) {\n                trimmedLines = Math.max(0, this.y - this.lines.maxLength + linesToAdd);\n            }\n            else {\n                trimmedLines = Math.max(0, this.lines.length - this.lines.maxLength + linesToAdd);\n            }\n            var newLines = [];\n            for (var i = 0; i < linesToAdd; i++) {\n                var newLine = this.getBlankLine(BufferLine_1.DEFAULT_ATTR_DATA, true);\n                newLines.push(newLine);\n            }\n            if (newLines.length > 0) {\n                toInsert.push({\n                    start: y + wrappedLines.length + countToInsert,\n                    newLines: newLines\n                });\n                countToInsert += newLines.length;\n            }\n            wrappedLines.push.apply(wrappedLines, newLines);\n            var destLineIndex = destLineLengths.length - 1;\n            var destCol = destLineLengths[destLineIndex];\n            if (destCol === 0) {\n                destLineIndex--;\n                destCol = destLineLengths[destLineIndex];\n            }\n            var srcLineIndex = wrappedLines.length - linesToAdd - 1;\n            var srcCol = lastLineLength;\n            while (srcLineIndex >= 0) {\n                var cellsToCopy = Math.min(srcCol, destCol);\n                wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[srcLineIndex], srcCol - cellsToCopy, destCol - cellsToCopy, cellsToCopy, true);\n                destCol -= cellsToCopy;\n                if (destCol === 0) {\n                    destLineIndex--;\n                    destCol = destLineLengths[destLineIndex];\n                }\n                srcCol -= cellsToCopy;\n                if (srcCol === 0) {\n                    srcLineIndex--;\n                    var wrappedLinesIndex = Math.max(srcLineIndex, 0);\n                    srcCol = BufferReflow_1.getWrappedLineTrimmedLength(wrappedLines, wrappedLinesIndex, this._cols);\n                }\n            }\n            for (var i = 0; i < wrappedLines.length; i++) {\n                if (destLineLengths[i] < newCols) {\n                    wrappedLines[i].setCell(destLineLengths[i], nullCell);\n                }\n            }\n            var viewportAdjustments = linesToAdd - trimmedLines;\n            while (viewportAdjustments-- > 0) {\n                if (this.ybase === 0) {\n                    if (this.y < newRows - 1) {\n                        this.y++;\n                        this.lines.pop();\n                    }\n                    else {\n                        this.ybase++;\n                        this.ydisp++;\n                    }\n                }\n                else {\n                    if (this.ybase < Math.min(this.lines.maxLength, this.lines.length + countToInsert) - newRows) {\n                        if (this.ybase === this.ydisp) {\n                            this.ydisp++;\n                        }\n                        this.ybase++;\n                    }\n                }\n            }\n        }\n        if (toInsert.length > 0) {\n            var insertEvents = [];\n            var originalLines = [];\n            for (var i = 0; i < this.lines.length; i++) {\n                originalLines.push(this.lines.get(i));\n            }\n            var originalLinesLength = this.lines.length;\n            var originalLineIndex = originalLinesLength - 1;\n            var nextToInsertIndex = 0;\n            var nextToInsert = toInsert[nextToInsertIndex];\n            this.lines.length = Math.min(this.lines.maxLength, this.lines.length + countToInsert);\n            var countInsertedSoFar = 0;\n            for (var i = Math.min(this.lines.maxLength - 1, originalLinesLength + countToInsert - 1); i >= 0; i--) {\n                if (nextToInsert && nextToInsert.start > originalLineIndex + countInsertedSoFar) {\n                    for (var nextI = nextToInsert.newLines.length - 1; nextI >= 0; nextI--) {\n                        this.lines.set(i--, nextToInsert.newLines[nextI]);\n                    }\n                    i++;\n                    insertEvents.push({\n                        index: originalLineIndex + 1,\n                        amount: nextToInsert.newLines.length\n                    });\n                    countInsertedSoFar += nextToInsert.newLines.length;\n                    nextToInsert = toInsert[++nextToInsertIndex];\n                }\n                else {\n                    this.lines.set(i, originalLines[originalLineIndex--]);\n                }\n            }\n            var insertCountEmitted = 0;\n            for (var i = insertEvents.length - 1; i >= 0; i--) {\n                insertEvents[i].index += insertCountEmitted;\n                this.lines.onInsertEmitter.fire(insertEvents[i]);\n                insertCountEmitted += insertEvents[i].amount;\n            }\n            var amountToTrim = Math.max(0, originalLinesLength + countToInsert - this.lines.maxLength);\n            if (amountToTrim > 0) {\n                this.lines.onTrimEmitter.fire(amountToTrim);\n            }\n        }\n    };\n    Buffer.prototype.stringIndexToBufferIndex = function (lineIndex, stringIndex, trimRight) {\n        if (trimRight === void 0) { trimRight = false; }\n        while (stringIndex) {\n            var line = this.lines.get(lineIndex);\n            if (!line) {\n                return [-1, -1];\n            }\n            var length_1 = (trimRight) ? line.getTrimmedLength() : line.length;\n            for (var i = 0; i < length_1; ++i) {\n                if (line.get(i)[BufferLine_1.CHAR_DATA_WIDTH_INDEX]) {\n                    stringIndex -= line.get(i)[BufferLine_1.CHAR_DATA_CHAR_INDEX].length || 1;\n                }\n                if (stringIndex < 0) {\n                    return [lineIndex, i];\n                }\n            }\n            lineIndex++;\n        }\n        return [lineIndex, 0];\n    };\n    Buffer.prototype.translateBufferLineToString = function (lineIndex, trimRight, startCol, endCol) {\n        if (startCol === void 0) { startCol = 0; }\n        var line = this.lines.get(lineIndex);\n        if (!line) {\n            return '';\n        }\n        return line.translateToString(trimRight, startCol, endCol);\n    };\n    Buffer.prototype.getWrappedRangeForLine = function (y) {\n        var first = y;\n        var last = y;\n        while (first > 0 && this.lines.get(first).isWrapped) {\n            first--;\n        }\n        while (last + 1 < this.lines.length && this.lines.get(last + 1).isWrapped) {\n            last++;\n        }\n        return { first: first, last: last };\n    };\n    Buffer.prototype.setupTabStops = function (i) {\n        if (i !== null && i !== undefined) {\n            if (!this.tabs[i]) {\n                i = this.prevStop(i);\n            }\n        }\n        else {\n            this.tabs = {};\n            i = 0;\n        }\n        for (; i < this._cols; i += this._terminal.options.tabStopWidth) {\n            this.tabs[i] = true;\n        }\n    };\n    Buffer.prototype.prevStop = function (x) {\n        if (x === null || x === undefined) {\n            x = this.x;\n        }\n        while (!this.tabs[--x] && x > 0)\n            ;\n        return x >= this._cols ? this._cols - 1 : x < 0 ? 0 : x;\n    };\n    Buffer.prototype.nextStop = function (x) {\n        if (x === null || x === undefined) {\n            x = this.x;\n        }\n        while (!this.tabs[++x] && x < this._cols)\n            ;\n        return x >= this._cols ? this._cols - 1 : x < 0 ? 0 : x;\n    };\n    Buffer.prototype.addMarker = function (y) {\n        var _this = this;\n        var marker = new Marker_1.Marker(y);\n        this.markers.push(marker);\n        marker.register(this.lines.onTrim(function (amount) {\n            marker.line -= amount;\n            if (marker.line < 0) {\n                marker.dispose();\n            }\n        }));\n        marker.register(this.lines.onInsert(function (event) {\n            if (marker.line >= event.index) {\n                marker.line += event.amount;\n            }\n        }));\n        marker.register(this.lines.onDelete(function (event) {\n            if (marker.line >= event.index && marker.line < event.index + event.amount) {\n                marker.dispose();\n            }\n            if (marker.line > event.index) {\n                marker.line -= event.amount;\n            }\n        }));\n        marker.register(marker.onDispose(function () { return _this._removeMarker(marker); }));\n        return marker;\n    };\n    Buffer.prototype._removeMarker = function (marker) {\n        this.markers.splice(this.markers.indexOf(marker), 1);\n    };\n    Buffer.prototype.iterator = function (trimRight, startIndex, endIndex, startOverscan, endOverscan) {\n        return new BufferStringIterator(this, trimRight, startIndex, endIndex, startOverscan, endOverscan);\n    };\n    return Buffer;\n}());\nexports.Buffer = Buffer;\nvar BufferStringIterator = (function () {\n    function BufferStringIterator(_buffer, _trimRight, _startIndex, _endIndex, _startOverscan, _endOverscan) {\n        if (_startIndex === void 0) { _startIndex = 0; }\n        if (_endIndex === void 0) { _endIndex = _buffer.lines.length; }\n        if (_startOverscan === void 0) { _startOverscan = 0; }\n        if (_endOverscan === void 0) { _endOverscan = 0; }\n        this._buffer = _buffer;\n        this._trimRight = _trimRight;\n        this._startIndex = _startIndex;\n        this._endIndex = _endIndex;\n        this._startOverscan = _startOverscan;\n        this._endOverscan = _endOverscan;\n        if (this._startIndex < 0) {\n            this._startIndex = 0;\n        }\n        if (this._endIndex > this._buffer.lines.length) {\n            this._endIndex = this._buffer.lines.length;\n        }\n        this._current = this._startIndex;\n    }\n    BufferStringIterator.prototype.hasNext = function () {\n        return this._current < this._endIndex;\n    };\n    BufferStringIterator.prototype.next = function () {\n        var range = this._buffer.getWrappedRangeForLine(this._current);\n        if (range.first < this._startIndex - this._startOverscan) {\n            range.first = this._startIndex - this._startOverscan;\n        }\n        if (range.last > this._endIndex + this._endOverscan) {\n            range.last = this._endIndex + this._endOverscan;\n        }\n        range.first = Math.max(range.first, 0);\n        range.last = Math.min(range.last, this._buffer.lines.length);\n        var result = '';\n        for (var i = range.first; i <= range.last; ++i) {\n            result += this._buffer.translateBufferLineToString(i, this._trimRight);\n        }\n        this._current = range.last + 1;\n        return { range: range, content: result };\n    };\n    return BufferStringIterator;\n}());\nexports.BufferStringIterator = BufferStringIterator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/Buffer.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/BufferSet.js":
/*!*********************************************!*\
  !*** ./node_modules/xterm/lib/BufferSet.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Buffer_1 = __webpack_require__(/*! ./Buffer */ \"./node_modules/xterm/lib/Buffer.js\");\nvar EventEmitter2_1 = __webpack_require__(/*! ./common/EventEmitter2 */ \"./node_modules/xterm/lib/common/EventEmitter2.js\");\nvar BufferSet = (function () {\n    function BufferSet(_terminal) {\n        this._terminal = _terminal;\n        this._onBufferActivate = new EventEmitter2_1.EventEmitter2();\n        this._normal = new Buffer_1.Buffer(this._terminal, true);\n        this._normal.fillViewportRows();\n        this._alt = new Buffer_1.Buffer(this._terminal, false);\n        this._activeBuffer = this._normal;\n        this.setupTabStops();\n    }\n    Object.defineProperty(BufferSet.prototype, \"onBufferActivate\", {\n        get: function () { return this._onBufferActivate.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BufferSet.prototype, \"alt\", {\n        get: function () {\n            return this._alt;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BufferSet.prototype, \"active\", {\n        get: function () {\n            return this._activeBuffer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BufferSet.prototype, \"normal\", {\n        get: function () {\n            return this._normal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BufferSet.prototype.activateNormalBuffer = function () {\n        if (this._activeBuffer === this._normal) {\n            return;\n        }\n        this._normal.x = this._alt.x;\n        this._normal.y = this._alt.y;\n        this._alt.clear();\n        this._activeBuffer = this._normal;\n        this._onBufferActivate.fire({\n            activeBuffer: this._normal,\n            inactiveBuffer: this._alt\n        });\n    };\n    BufferSet.prototype.activateAltBuffer = function (fillAttr) {\n        if (this._activeBuffer === this._alt) {\n            return;\n        }\n        this._alt.fillViewportRows(fillAttr);\n        this._alt.x = this._normal.x;\n        this._alt.y = this._normal.y;\n        this._activeBuffer = this._alt;\n        this._onBufferActivate.fire({\n            activeBuffer: this._alt,\n            inactiveBuffer: this._normal\n        });\n    };\n    BufferSet.prototype.resize = function (newCols, newRows) {\n        this._normal.resize(newCols, newRows);\n        this._alt.resize(newCols, newRows);\n    };\n    BufferSet.prototype.setupTabStops = function (i) {\n        this._normal.setupTabStops(i);\n        this._alt.setupTabStops(i);\n    };\n    return BufferSet;\n}());\nexports.BufferSet = BufferSet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL0J1ZmZlclNldC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9zcmMvQnVmZmVyU2V0LnRzPzU0NWEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJVGVybWluYWwsIElCdWZmZXJTZXQsIElCdWZmZXIgfSBmcm9tICcuL1R5cGVzJztcbmltcG9ydCB7IElBdHRyaWJ1dGVEYXRhIH0gZnJvbSAnLi9jb3JlL1R5cGVzJztcbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJy4vQnVmZmVyJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlcjIsIElFdmVudCB9IGZyb20gJy4vY29tbW9uL0V2ZW50RW1pdHRlcjInO1xuXG4vKipcbiAqIFRoZSBCdWZmZXJTZXQgcmVwcmVzZW50cyB0aGUgc2V0IG9mIHR3byBidWZmZXJzIHVzZWQgYnkgeHRlcm0gdGVybWluYWxzIChub3JtYWwgYW5kIGFsdCkgYW5kXG4gKiBwcm92aWRlcyBhbHNvIHV0aWxpdGllcyBmb3Igd29ya2luZyB3aXRoIHRoZW0uXG4gKi9cbmV4cG9ydCBjbGFzcyBCdWZmZXJTZXQgaW1wbGVtZW50cyBJQnVmZmVyU2V0IHtcbiAgcHJpdmF0ZSBfbm9ybWFsOiBCdWZmZXI7XG4gIHByaXZhdGUgX2FsdDogQnVmZmVyO1xuICBwcml2YXRlIF9hY3RpdmVCdWZmZXI6IEJ1ZmZlcjtcblxuXG4gIHByaXZhdGUgX29uQnVmZmVyQWN0aXZhdGUgPSBuZXcgRXZlbnRFbWl0dGVyMjx7YWN0aXZlQnVmZmVyOiBJQnVmZmVyLCBpbmFjdGl2ZUJ1ZmZlcjogSUJ1ZmZlcn0+KCk7XG4gIHB1YmxpYyBnZXQgb25CdWZmZXJBY3RpdmF0ZSgpOiBJRXZlbnQ8e2FjdGl2ZUJ1ZmZlcjogSUJ1ZmZlciwgaW5hY3RpdmVCdWZmZXI6IElCdWZmZXJ9PiB7IHJldHVybiB0aGlzLl9vbkJ1ZmZlckFjdGl2YXRlLmV2ZW50OyB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBCdWZmZXJTZXQgZm9yIHRoZSBnaXZlbiB0ZXJtaW5hbC5cbiAgICogQHBhcmFtIF90ZXJtaW5hbCAtIFRoZSB0ZXJtaW5hbCB0aGUgQnVmZmVyU2V0IHdpbGwgYmVsb25nIHRvXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF90ZXJtaW5hbDogSVRlcm1pbmFsKSB7XG4gICAgdGhpcy5fbm9ybWFsID0gbmV3IEJ1ZmZlcih0aGlzLl90ZXJtaW5hbCwgdHJ1ZSk7XG4gICAgdGhpcy5fbm9ybWFsLmZpbGxWaWV3cG9ydFJvd3MoKTtcblxuICAgIC8vIFRoZSBhbHQgYnVmZmVyIHNob3VsZCBuZXZlciBoYXZlIHNjcm9sbGJhY2suXG4gICAgLy8gU2VlIGh0dHA6Ly9pbnZpc2libGUtaXNsYW5kLm5ldC94dGVybS9jdGxzZXFzL2N0bHNlcXMuaHRtbCNoMi1UaGUtQWx0ZXJuYXRlLVNjcmVlbi1CdWZmZXJcbiAgICB0aGlzLl9hbHQgPSBuZXcgQnVmZmVyKHRoaXMuX3Rlcm1pbmFsLCBmYWxzZSk7XG4gICAgdGhpcy5fYWN0aXZlQnVmZmVyID0gdGhpcy5fbm9ybWFsO1xuXG4gICAgdGhpcy5zZXR1cFRhYlN0b3BzKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYWx0IEJ1ZmZlciBvZiB0aGUgQnVmZmVyU2V0XG4gICAqL1xuICBwdWJsaWMgZ2V0IGFsdCgpOiBCdWZmZXIge1xuICAgIHJldHVybiB0aGlzLl9hbHQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbm9ybWFsIEJ1ZmZlciBvZiB0aGUgQnVmZmVyU2V0XG4gICAqL1xuICBwdWJsaWMgZ2V0IGFjdGl2ZSgpOiBCdWZmZXIge1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmVCdWZmZXI7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudGx5IGFjdGl2ZSBCdWZmZXIgb2YgdGhlIEJ1ZmZlclNldFxuICAgKi9cbiAgcHVibGljIGdldCBub3JtYWwoKTogQnVmZmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbm9ybWFsO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIG5vcm1hbCBCdWZmZXIgb2YgdGhlIEJ1ZmZlclNldCBhcyBpdHMgY3VycmVudGx5IGFjdGl2ZSBCdWZmZXJcbiAgICovXG4gIHB1YmxpYyBhY3RpdmF0ZU5vcm1hbEJ1ZmZlcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fYWN0aXZlQnVmZmVyID09PSB0aGlzLl9ub3JtYWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fbm9ybWFsLnggPSB0aGlzLl9hbHQueDtcbiAgICB0aGlzLl9ub3JtYWwueSA9IHRoaXMuX2FsdC55O1xuICAgIC8vIFRoZSBhbHQgYnVmZmVyIHNob3VsZCBhbHdheXMgYmUgY2xlYXJlZCB3aGVuIHdlIHN3aXRjaCB0byB0aGUgbm9ybWFsXG4gICAgLy8gYnVmZmVyLiBUaGlzIGZyZWVzIHVwIG1lbW9yeSBzaW5jZSB0aGUgYWx0IGJ1ZmZlciBzaG91bGQgYWx3YXlzIGJlIG5ld1xuICAgIC8vIHdoZW4gYWN0aXZhdGVkLlxuICAgIHRoaXMuX2FsdC5jbGVhcigpO1xuICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlciA9IHRoaXMuX25vcm1hbDtcbiAgICB0aGlzLl9vbkJ1ZmZlckFjdGl2YXRlLmZpcmUoe1xuICAgICAgYWN0aXZlQnVmZmVyOiB0aGlzLl9ub3JtYWwsXG4gICAgICBpbmFjdGl2ZUJ1ZmZlcjogdGhpcy5fYWx0XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgYWx0IEJ1ZmZlciBvZiB0aGUgQnVmZmVyU2V0IGFzIGl0cyBjdXJyZW50bHkgYWN0aXZlIEJ1ZmZlclxuICAgKi9cbiAgcHVibGljIGFjdGl2YXRlQWx0QnVmZmVyKGZpbGxBdHRyPzogSUF0dHJpYnV0ZURhdGEpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fYWN0aXZlQnVmZmVyID09PSB0aGlzLl9hbHQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gU2luY2UgdGhlIGFsdCBidWZmZXIgaXMgYWx3YXlzIGNsZWFyZWQgd2hlbiB0aGUgbm9ybWFsIGJ1ZmZlciBpc1xuICAgIC8vIGFjdGl2YXRlZCwgd2Ugd2FudCB0byBmaWxsIGl0IHdoZW4gc3dpdGNoaW5nIHRvIGl0LlxuICAgIHRoaXMuX2FsdC5maWxsVmlld3BvcnRSb3dzKGZpbGxBdHRyKTtcbiAgICB0aGlzLl9hbHQueCA9IHRoaXMuX25vcm1hbC54O1xuICAgIHRoaXMuX2FsdC55ID0gdGhpcy5fbm9ybWFsLnk7XG4gICAgdGhpcy5fYWN0aXZlQnVmZmVyID0gdGhpcy5fYWx0O1xuICAgIHRoaXMuX29uQnVmZmVyQWN0aXZhdGUuZmlyZSh7XG4gICAgICBhY3RpdmVCdWZmZXI6IHRoaXMuX2FsdCxcbiAgICAgIGluYWN0aXZlQnVmZmVyOiB0aGlzLl9ub3JtYWxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNpemVzIGJvdGggbm9ybWFsIGFuZCBhbHQgYnVmZmVycywgYWRqdXN0aW5nIHRoZWlyIGRhdGEgYWNjb3JkaW5nbHkuXG4gICAqIEBwYXJhbSBuZXdDb2xzIFRoZSBuZXcgbnVtYmVyIG9mIGNvbHVtbnMuXG4gICAqIEBwYXJhbSBuZXdSb3dzIFRoZSBuZXcgbnVtYmVyIG9mIHJvd3MuXG4gICAqL1xuICBwdWJsaWMgcmVzaXplKG5ld0NvbHM6IG51bWJlciwgbmV3Um93czogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fbm9ybWFsLnJlc2l6ZShuZXdDb2xzLCBuZXdSb3dzKTtcbiAgICB0aGlzLl9hbHQucmVzaXplKG5ld0NvbHMsIG5ld1Jvd3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHVwIHRoZSB0YWIgc3RvcHMuXG4gICAqIEBwYXJhbSBpIFRoZSBpbmRleCB0byBzdGFydCBzZXR0aW5nIHVwIHRhYiBzdG9wcyBmcm9tLlxuICAgKi9cbiAgcHVibGljIHNldHVwVGFiU3RvcHMoaT86IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX25vcm1hbC5zZXR1cFRhYlN0b3BzKGkpO1xuICAgIHRoaXMuX2FsdC5zZXR1cFRhYlN0b3BzKGkpO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7O0FBT0E7QUFDQTtBQU1BO0FBYUE7QUFBQTtBQVBBO0FBUUE7QUFDQTtBQUlBO0FBQ0E7QUFFQTtBQUNBO0FBaEJBO0FBQUE7OztBQUFBO0FBcUJBO0FBQUE7QUFDQTtBQUNBOzs7QUFBQTtBQUtBO0FBQUE7QUFDQTtBQUNBOzs7QUFBQTtBQUtBO0FBQUE7QUFDQTtBQUNBOzs7QUFBQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQXZHQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/BufferSet.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/CharMeasure.js":
/*!***********************************************!*\
  !*** ./node_modules/xterm/lib/CharMeasure.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EventEmitter2_1 = __webpack_require__(/*! ./common/EventEmitter2 */ \"./node_modules/xterm/lib/common/EventEmitter2.js\");\nvar CharMeasure = (function () {\n    function CharMeasure(document, parentElement) {\n        this._onCharSizeChanged = new EventEmitter2_1.EventEmitter2();\n        this._document = document;\n        this._parentElement = parentElement;\n        this._measureElement = this._document.createElement('span');\n        this._measureElement.classList.add('xterm-char-measure-element');\n        this._measureElement.textContent = 'W';\n        this._measureElement.setAttribute('aria-hidden', 'true');\n        this._parentElement.appendChild(this._measureElement);\n    }\n    Object.defineProperty(CharMeasure.prototype, \"onCharSizeChanged\", {\n        get: function () { return this._onCharSizeChanged.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CharMeasure.prototype, \"width\", {\n        get: function () {\n            return this._width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CharMeasure.prototype, \"height\", {\n        get: function () {\n            return this._height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CharMeasure.prototype.measure = function (options) {\n        this._measureElement.style.fontFamily = options.fontFamily;\n        this._measureElement.style.fontSize = options.fontSize + \"px\";\n        var geometry = this._measureElement.getBoundingClientRect();\n        if (geometry.width === 0 || geometry.height === 0) {\n            return;\n        }\n        var adjustedHeight = Math.ceil(geometry.height);\n        if (this._width !== geometry.width || this._height !== adjustedHeight) {\n            this._width = geometry.width;\n            this._height = adjustedHeight;\n            this._onCharSizeChanged.fire();\n        }\n    };\n    return CharMeasure;\n}());\nexports.CharMeasure = CharMeasure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL0NoYXJNZWFzdXJlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL3NyYy9DaGFyTWVhc3VyZS50cz81YmY0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE2IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSUNoYXJNZWFzdXJlLCBJVGVybWluYWxPcHRpb25zIH0gZnJvbSAnLi9UeXBlcyc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIyLCBJRXZlbnQgfSBmcm9tICcuL2NvbW1vbi9FdmVudEVtaXR0ZXIyJztcblxuLyoqXG4gKiBVdGlsaXR5IGNsYXNzIHRoYXQgbWVhc3VyZXMgdGhlIHNpemUgb2YgYSBjaGFyYWN0ZXIuIE1lYXN1cmVtZW50cyBhcmUgZG9uZSBpblxuICogdGhlIERPTSByYXRoZXIgdGhhbiB3aXRoIGEgY2FudmFzIGNvbnRleHQgYmVjYXVzZSBzdXBwb3J0IGZvciBleHRyYWN0aW5nIHRoZVxuICogaGVpZ2h0IG9mIGNoYXJhY3RlcnMgaXMgcGF0Y2h5IGFjcm9zcyBicm93c2Vycy5cbiAqL1xuZXhwb3J0IGNsYXNzIENoYXJNZWFzdXJlIGltcGxlbWVudHMgSUNoYXJNZWFzdXJlIHtcbiAgcHJpdmF0ZSBfZG9jdW1lbnQ6IERvY3VtZW50O1xuICBwcml2YXRlIF9wYXJlbnRFbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgcHJpdmF0ZSBfbWVhc3VyZUVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIF93aWR0aDogbnVtYmVyO1xuICBwcml2YXRlIF9oZWlnaHQ6IG51bWJlcjtcblxuICBwcml2YXRlIF9vbkNoYXJTaXplQ2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXIyPHZvaWQ+KCk7XG4gIHB1YmxpYyBnZXQgb25DaGFyU2l6ZUNoYW5nZWQoKTogSUV2ZW50PHZvaWQ+IHsgcmV0dXJuIHRoaXMuX29uQ2hhclNpemVDaGFuZ2VkLmV2ZW50OyB9XG5cbiAgY29uc3RydWN0b3IoZG9jdW1lbnQ6IERvY3VtZW50LCBwYXJlbnRFbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgIHRoaXMuX2RvY3VtZW50ID0gZG9jdW1lbnQ7XG4gICAgdGhpcy5fcGFyZW50RWxlbWVudCA9IHBhcmVudEVsZW1lbnQ7XG4gICAgdGhpcy5fbWVhc3VyZUVsZW1lbnQgPSB0aGlzLl9kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgdGhpcy5fbWVhc3VyZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgneHRlcm0tY2hhci1tZWFzdXJlLWVsZW1lbnQnKTtcbiAgICB0aGlzLl9tZWFzdXJlRWxlbWVudC50ZXh0Q29udGVudCA9ICdXJztcbiAgICB0aGlzLl9tZWFzdXJlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICB0aGlzLl9wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX21lYXN1cmVFbGVtZW50KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgd2lkdGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fd2lkdGg7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGhlaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9oZWlnaHQ7XG4gIH1cblxuICBwdWJsaWMgbWVhc3VyZShvcHRpb25zOiBJVGVybWluYWxPcHRpb25zKTogdm9pZCB7XG4gICAgdGhpcy5fbWVhc3VyZUVsZW1lbnQuc3R5bGUuZm9udEZhbWlseSA9IG9wdGlvbnMuZm9udEZhbWlseTtcbiAgICB0aGlzLl9tZWFzdXJlRWxlbWVudC5zdHlsZS5mb250U2l6ZSA9IGAke29wdGlvbnMuZm9udFNpemV9cHhgO1xuICAgIGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5fbWVhc3VyZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgLy8gVGhlIGVsZW1lbnQgaXMgbGlrZWx5IGN1cnJlbnRseSBkaXNwbGF5Om5vbmUsIHdlIHNob3VsZCByZXRhaW4gdGhlXG4gICAgLy8gcHJldmlvdXMgdmFsdWUuXG4gICAgaWYgKGdlb21ldHJ5LndpZHRoID09PSAwIHx8IGdlb21ldHJ5LmhlaWdodCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBhZGp1c3RlZEhlaWdodCA9IE1hdGguY2VpbChnZW9tZXRyeS5oZWlnaHQpO1xuICAgIGlmICh0aGlzLl93aWR0aCAhPT0gZ2VvbWV0cnkud2lkdGggfHwgdGhpcy5faGVpZ2h0ICE9PSBhZGp1c3RlZEhlaWdodCkge1xuICAgICAgdGhpcy5fd2lkdGggPSBnZW9tZXRyeS53aWR0aDtcbiAgICAgIHRoaXMuX2hlaWdodCA9IGFkanVzdGVkSGVpZ2h0O1xuICAgICAgdGhpcy5fb25DaGFyU2l6ZUNoYW5nZWQuZmlyZSgpO1xuICAgIH1cbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOztBQU1BO0FBT0E7QUFVQTtBQUhBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVZBO0FBQUE7OztBQUFBO0FBWUE7QUFBQTtBQUNBO0FBQ0E7OztBQUFBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7OztBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUE1Q0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/CharMeasure.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/CharWidth.js":
/*!*********************************************!*\
  !*** ./node_modules/xterm/lib/CharWidth.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TypedArrayUtils_1 = __webpack_require__(/*! ./common/TypedArrayUtils */ \"./node_modules/xterm/lib/common/TypedArrayUtils.js\");\nexports.wcwidth = (function (opts) {\n    var COMBINING_BMP = [\n        [0x0300, 0x036F], [0x0483, 0x0486], [0x0488, 0x0489],\n        [0x0591, 0x05BD], [0x05BF, 0x05BF], [0x05C1, 0x05C2],\n        [0x05C4, 0x05C5], [0x05C7, 0x05C7], [0x0600, 0x0603],\n        [0x0610, 0x0615], [0x064B, 0x065E], [0x0670, 0x0670],\n        [0x06D6, 0x06E4], [0x06E7, 0x06E8], [0x06EA, 0x06ED],\n        [0x070F, 0x070F], [0x0711, 0x0711], [0x0730, 0x074A],\n        [0x07A6, 0x07B0], [0x07EB, 0x07F3], [0x0901, 0x0902],\n        [0x093C, 0x093C], [0x0941, 0x0948], [0x094D, 0x094D],\n        [0x0951, 0x0954], [0x0962, 0x0963], [0x0981, 0x0981],\n        [0x09BC, 0x09BC], [0x09C1, 0x09C4], [0x09CD, 0x09CD],\n        [0x09E2, 0x09E3], [0x0A01, 0x0A02], [0x0A3C, 0x0A3C],\n        [0x0A41, 0x0A42], [0x0A47, 0x0A48], [0x0A4B, 0x0A4D],\n        [0x0A70, 0x0A71], [0x0A81, 0x0A82], [0x0ABC, 0x0ABC],\n        [0x0AC1, 0x0AC5], [0x0AC7, 0x0AC8], [0x0ACD, 0x0ACD],\n        [0x0AE2, 0x0AE3], [0x0B01, 0x0B01], [0x0B3C, 0x0B3C],\n        [0x0B3F, 0x0B3F], [0x0B41, 0x0B43], [0x0B4D, 0x0B4D],\n        [0x0B56, 0x0B56], [0x0B82, 0x0B82], [0x0BC0, 0x0BC0],\n        [0x0BCD, 0x0BCD], [0x0C3E, 0x0C40], [0x0C46, 0x0C48],\n        [0x0C4A, 0x0C4D], [0x0C55, 0x0C56], [0x0CBC, 0x0CBC],\n        [0x0CBF, 0x0CBF], [0x0CC6, 0x0CC6], [0x0CCC, 0x0CCD],\n        [0x0CE2, 0x0CE3], [0x0D41, 0x0D43], [0x0D4D, 0x0D4D],\n        [0x0DCA, 0x0DCA], [0x0DD2, 0x0DD4], [0x0DD6, 0x0DD6],\n        [0x0E31, 0x0E31], [0x0E34, 0x0E3A], [0x0E47, 0x0E4E],\n        [0x0EB1, 0x0EB1], [0x0EB4, 0x0EB9], [0x0EBB, 0x0EBC],\n        [0x0EC8, 0x0ECD], [0x0F18, 0x0F19], [0x0F35, 0x0F35],\n        [0x0F37, 0x0F37], [0x0F39, 0x0F39], [0x0F71, 0x0F7E],\n        [0x0F80, 0x0F84], [0x0F86, 0x0F87], [0x0F90, 0x0F97],\n        [0x0F99, 0x0FBC], [0x0FC6, 0x0FC6], [0x102D, 0x1030],\n        [0x1032, 0x1032], [0x1036, 0x1037], [0x1039, 0x1039],\n        [0x1058, 0x1059], [0x1160, 0x11FF], [0x135F, 0x135F],\n        [0x1712, 0x1714], [0x1732, 0x1734], [0x1752, 0x1753],\n        [0x1772, 0x1773], [0x17B4, 0x17B5], [0x17B7, 0x17BD],\n        [0x17C6, 0x17C6], [0x17C9, 0x17D3], [0x17DD, 0x17DD],\n        [0x180B, 0x180D], [0x18A9, 0x18A9], [0x1920, 0x1922],\n        [0x1927, 0x1928], [0x1932, 0x1932], [0x1939, 0x193B],\n        [0x1A17, 0x1A18], [0x1B00, 0x1B03], [0x1B34, 0x1B34],\n        [0x1B36, 0x1B3A], [0x1B3C, 0x1B3C], [0x1B42, 0x1B42],\n        [0x1B6B, 0x1B73], [0x1DC0, 0x1DCA], [0x1DFE, 0x1DFF],\n        [0x200B, 0x200F], [0x202A, 0x202E], [0x2060, 0x2063],\n        [0x206A, 0x206F], [0x20D0, 0x20EF], [0x302A, 0x302F],\n        [0x3099, 0x309A], [0xA806, 0xA806], [0xA80B, 0xA80B],\n        [0xA825, 0xA826], [0xFB1E, 0xFB1E], [0xFE00, 0xFE0F],\n        [0xFE20, 0xFE23], [0xFEFF, 0xFEFF], [0xFFF9, 0xFFFB]\n    ];\n    var COMBINING_HIGH = [\n        [0x10A01, 0x10A03], [0x10A05, 0x10A06], [0x10A0C, 0x10A0F],\n        [0x10A38, 0x10A3A], [0x10A3F, 0x10A3F], [0x1D167, 0x1D169],\n        [0x1D173, 0x1D182], [0x1D185, 0x1D18B], [0x1D1AA, 0x1D1AD],\n        [0x1D242, 0x1D244], [0xE0001, 0xE0001], [0xE0020, 0xE007F],\n        [0xE0100, 0xE01EF]\n    ];\n    function bisearch(ucs, data) {\n        var min = 0;\n        var max = data.length - 1;\n        var mid;\n        if (ucs < data[0][0] || ucs > data[max][1]) {\n            return false;\n        }\n        while (max >= min) {\n            mid = (min + max) >> 1;\n            if (ucs > data[mid][1]) {\n                min = mid + 1;\n            }\n            else if (ucs < data[mid][0]) {\n                max = mid - 1;\n            }\n            else {\n                return true;\n            }\n        }\n        return false;\n    }\n    function wcwidthHigh(ucs) {\n        if (bisearch(ucs, COMBINING_HIGH)) {\n            return 0;\n        }\n        if ((ucs >= 0x20000 && ucs <= 0x2fffd) || (ucs >= 0x30000 && ucs <= 0x3fffd)) {\n            return 2;\n        }\n        return 1;\n    }\n    var control = opts.control | 0;\n    var table = new Uint8Array(65536);\n    TypedArrayUtils_1.fill(table, 1);\n    table[0] = opts.nul;\n    TypedArrayUtils_1.fill(table, opts.control, 1, 32);\n    TypedArrayUtils_1.fill(table, opts.control, 0x7f, 0xa0);\n    TypedArrayUtils_1.fill(table, 2, 0x1100, 0x1160);\n    table[0x2329] = 2;\n    table[0x232a] = 2;\n    TypedArrayUtils_1.fill(table, 2, 0x2e80, 0xa4d0);\n    table[0x303f] = 1;\n    TypedArrayUtils_1.fill(table, 2, 0xac00, 0xd7a4);\n    TypedArrayUtils_1.fill(table, 2, 0xf900, 0xfb00);\n    TypedArrayUtils_1.fill(table, 2, 0xfe10, 0xfe1a);\n    TypedArrayUtils_1.fill(table, 2, 0xfe30, 0xfe70);\n    TypedArrayUtils_1.fill(table, 2, 0xff00, 0xff61);\n    TypedArrayUtils_1.fill(table, 2, 0xffe0, 0xffe7);\n    for (var r = 0; r < COMBINING_BMP.length; ++r) {\n        TypedArrayUtils_1.fill(table, 0, COMBINING_BMP[r][0], COMBINING_BMP[r][1] + 1);\n    }\n    return function (num) {\n        if (num < 32) {\n            return control | 0;\n        }\n        if (num < 127) {\n            return 1;\n        }\n        if (num < 65536) {\n            return table[num];\n        }\n        return wcwidthHigh(num);\n    };\n})({ nul: 0, control: 0 });\nfunction getStringCellWidth(s) {\n    var result = 0;\n    var length = s.length;\n    for (var i = 0; i < length; ++i) {\n        var code = s.charCodeAt(i);\n        if (0xD800 <= code && code <= 0xDBFF) {\n            if (++i >= length) {\n                return result + exports.wcwidth(code);\n            }\n            var second = s.charCodeAt(i);\n            if (0xDC00 <= second && second <= 0xDFFF) {\n                code = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n            }\n            else {\n                result += exports.wcwidth(second);\n            }\n        }\n        result += exports.wcwidth(code);\n    }\n    return result;\n}\nexports.getStringCellWidth = getStringCellWidth;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/CharWidth.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/Clipboard.js":
/*!*********************************************!*\
  !*** ./node_modules/xterm/lib/Clipboard.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction prepareTextForTerminal(text) {\n    return text.replace(/\\r?\\n/g, '\\r');\n}\nexports.prepareTextForTerminal = prepareTextForTerminal;\nfunction bracketTextForPaste(text, bracketedPasteMode) {\n    if (bracketedPasteMode) {\n        return '\\x1b[200~' + text + '\\x1b[201~';\n    }\n    return text;\n}\nexports.bracketTextForPaste = bracketTextForPaste;\nfunction copyHandler(ev, term, selectionManager) {\n    if (term.browser.isMSIE) {\n        window.clipboardData.setData('Text', selectionManager.selectionText);\n    }\n    else {\n        ev.clipboardData.setData('text/plain', selectionManager.selectionText);\n    }\n    ev.preventDefault();\n}\nexports.copyHandler = copyHandler;\nfunction pasteHandler(ev, term) {\n    ev.stopPropagation();\n    var text;\n    var dispatchPaste = function (text) {\n        text = prepareTextForTerminal(text);\n        text = bracketTextForPaste(text, term.bracketedPasteMode);\n        term.handler(text);\n        term.textarea.value = '';\n        term.emit('paste', text);\n        term.cancel(ev);\n    };\n    if (term.browser.isMSIE) {\n        if (window.clipboardData) {\n            text = window.clipboardData.getData('Text');\n            dispatchPaste(text);\n        }\n    }\n    else {\n        if (ev.clipboardData) {\n            text = ev.clipboardData.getData('text/plain');\n            dispatchPaste(text);\n        }\n    }\n}\nexports.pasteHandler = pasteHandler;\nfunction moveTextAreaUnderMouseCursor(ev, term) {\n    var pos = term.screenElement.getBoundingClientRect();\n    var left = ev.clientX - pos.left - 10;\n    var top = ev.clientY - pos.top - 10;\n    term.textarea.style.position = 'absolute';\n    term.textarea.style.width = '20px';\n    term.textarea.style.height = '20px';\n    term.textarea.style.left = left + \"px\";\n    term.textarea.style.top = top + \"px\";\n    term.textarea.style.zIndex = '1000';\n    term.textarea.focus();\n    setTimeout(function () {\n        term.textarea.style.position = null;\n        term.textarea.style.width = null;\n        term.textarea.style.height = null;\n        term.textarea.style.left = null;\n        term.textarea.style.top = null;\n        term.textarea.style.zIndex = null;\n    }, 200);\n}\nexports.moveTextAreaUnderMouseCursor = moveTextAreaUnderMouseCursor;\nfunction rightClickHandler(ev, term, selectionManager, shouldSelectWord) {\n    moveTextAreaUnderMouseCursor(ev, term);\n    if (shouldSelectWord && !selectionManager.isClickInSelection(ev)) {\n        selectionManager.selectWordAtCursor(ev);\n    }\n    term.textarea.value = selectionManager.selectionText;\n    term.textarea.select();\n}\nexports.rightClickHandler = rightClickHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL0NsaXBib2FyZC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9zcmMvQ2xpcGJvYXJkLnRzP2M1M2QiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJVGVybWluYWwsIElTZWxlY3Rpb25NYW5hZ2VyIH0gZnJvbSAnLi9UeXBlcyc7XG5cbmludGVyZmFjZSBJV2luZG93IGV4dGVuZHMgV2luZG93IHtcbiAgY2xpcGJvYXJkRGF0YT86IHtcbiAgICBnZXREYXRhKGZvcm1hdDogc3RyaW5nKTogc3RyaW5nO1xuICAgIHNldERhdGEoZm9ybWF0OiBzdHJpbmcsIGRhdGE6IHN0cmluZyk6IHZvaWQ7XG4gIH07XG59XG5cbmRlY2xhcmUgdmFyIHdpbmRvdzogSVdpbmRvdztcblxuLyoqXG4gKiBQcmVwYXJlcyB0ZXh0IHRvIGJlIHBhc3RlZCBpbnRvIHRoZSB0ZXJtaW5hbCBieSBub3JtYWxpemluZyB0aGUgbGluZSBlbmRpbmdzXG4gKiBAcGFyYW0gdGV4dCBUaGUgcGFzdGVkIHRleHQgdGhhdCBuZWVkcyBwcm9jZXNzaW5nIGJlZm9yZSBpbnNlcnRpbmcgaW50byB0aGUgdGVybWluYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVUZXh0Rm9yVGVybWluYWwodGV4dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHRleHQucmVwbGFjZSgvXFxyP1xcbi9nLCAnXFxyJyk7XG59XG5cbi8qKlxuICogQnJhY2tldCB0ZXh0IGZvciBwYXN0ZSwgaWYgbmVjZXNzYXJ5LCBhcyBwZXIgaHR0cHM6Ly9jaXJ3LmluL2Jsb2cvYnJhY2tldGVkLXBhc3RlXG4gKiBAcGFyYW0gdGV4dCBUaGUgcGFzdGVkIHRleHQgdG8gYnJhY2tldFxuICovXG5leHBvcnQgZnVuY3Rpb24gYnJhY2tldFRleHRGb3JQYXN0ZSh0ZXh0OiBzdHJpbmcsIGJyYWNrZXRlZFBhc3RlTW9kZTogYm9vbGVhbik6IHN0cmluZyB7XG4gIGlmIChicmFja2V0ZWRQYXN0ZU1vZGUpIHtcbiAgICByZXR1cm4gJ1xceDFiWzIwMH4nICsgdGV4dCArICdcXHgxYlsyMDF+JztcbiAgfVxuICByZXR1cm4gdGV4dDtcbn1cblxuLyoqXG4gKiBCaW5kcyBjb3B5IGZ1bmN0aW9uYWxpdHkgdG8gdGhlIGdpdmVuIHRlcm1pbmFsLlxuICogQHBhcmFtIGV2IFRoZSBvcmlnaW5hbCBjb3B5IGV2ZW50IHRvIGJlIGhhbmRsZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHlIYW5kbGVyKGV2OiBDbGlwYm9hcmRFdmVudCwgdGVybTogSVRlcm1pbmFsLCBzZWxlY3Rpb25NYW5hZ2VyOiBJU2VsZWN0aW9uTWFuYWdlcik6IHZvaWQge1xuICBpZiAodGVybS5icm93c2VyLmlzTVNJRSkge1xuICAgIHdpbmRvdy5jbGlwYm9hcmREYXRhLnNldERhdGEoJ1RleHQnLCBzZWxlY3Rpb25NYW5hZ2VyLnNlbGVjdGlvblRleHQpO1xuICB9IGVsc2Uge1xuICAgIGV2LmNsaXBib2FyZERhdGEuc2V0RGF0YSgndGV4dC9wbGFpbicsIHNlbGVjdGlvbk1hbmFnZXIuc2VsZWN0aW9uVGV4dCk7XG4gIH1cblxuICAvLyBQcmV2ZW50IG9yIHRoZSBvcmlnaW5hbCB0ZXh0IHdpbGwgYmUgY29waWVkLlxuICBldi5wcmV2ZW50RGVmYXVsdCgpO1xufVxuXG4vKipcbiAqIFJlZGlyZWN0IHRoZSBjbGlwYm9hcmQncyBkYXRhIHRvIHRoZSB0ZXJtaW5hbCdzIGlucHV0IGhhbmRsZXIuXG4gKiBAcGFyYW0gZXYgVGhlIG9yaWdpbmFsIHBhc3RlIGV2ZW50IHRvIGJlIGhhbmRsZWRcbiAqIEBwYXJhbSB0ZXJtIFRoZSB0ZXJtaW5hbCBvbiB3aGljaCB0byBhcHBseSB0aGUgaGFuZGxlZCBwYXN0ZSBldmVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFzdGVIYW5kbGVyKGV2OiBDbGlwYm9hcmRFdmVudCwgdGVybTogSVRlcm1pbmFsKTogdm9pZCB7XG4gIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gIGxldCB0ZXh0OiBzdHJpbmc7XG5cbiAgY29uc3QgZGlzcGF0Y2hQYXN0ZSA9IGZ1bmN0aW9uKHRleHQ6IHN0cmluZyk6IHZvaWQge1xuICAgIHRleHQgPSBwcmVwYXJlVGV4dEZvclRlcm1pbmFsKHRleHQpO1xuICAgIHRleHQgPSBicmFja2V0VGV4dEZvclBhc3RlKHRleHQsIHRlcm0uYnJhY2tldGVkUGFzdGVNb2RlKTtcbiAgICB0ZXJtLmhhbmRsZXIodGV4dCk7XG4gICAgdGVybS50ZXh0YXJlYS52YWx1ZSA9ICcnO1xuICAgIHRlcm0uZW1pdCgncGFzdGUnLCB0ZXh0KTtcbiAgICB0ZXJtLmNhbmNlbChldik7XG4gIH07XG5cbiAgaWYgKHRlcm0uYnJvd3Nlci5pc01TSUUpIHtcbiAgICBpZiAod2luZG93LmNsaXBib2FyZERhdGEpIHtcbiAgICAgIHRleHQgPSB3aW5kb3cuY2xpcGJvYXJkRGF0YS5nZXREYXRhKCdUZXh0Jyk7XG4gICAgICBkaXNwYXRjaFBhc3RlKHRleHQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZXYuY2xpcGJvYXJkRGF0YSkge1xuICAgICAgdGV4dCA9IGV2LmNsaXBib2FyZERhdGEuZ2V0RGF0YSgndGV4dC9wbGFpbicpO1xuICAgICAgZGlzcGF0Y2hQYXN0ZSh0ZXh0KTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBNb3ZlcyB0aGUgdGV4dGFyZWEgdW5kZXIgdGhlIG1vdXNlIGN1cnNvciBhbmQgZm9jdXNlcyBpdC5cbiAqIEBwYXJhbSBldiBUaGUgb3JpZ2luYWwgcmlnaHQgY2xpY2sgZXZlbnQgdG8gYmUgaGFuZGxlZC5cbiAqIEBwYXJhbSB0ZXh0YXJlYSBUaGUgdGVybWluYWwncyB0ZXh0YXJlYS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1vdmVUZXh0QXJlYVVuZGVyTW91c2VDdXJzb3IoZXY6IE1vdXNlRXZlbnQsIHRlcm06IElUZXJtaW5hbCk6IHZvaWQge1xuXG4gIC8vIENhbGN1bGF0ZSB0ZXh0YXJlYSBwb3NpdGlvbiByZWxhdGl2ZSB0byB0aGUgc2NyZWVuIGVsZW1lbnRcbiAgY29uc3QgcG9zID0gdGVybS5zY3JlZW5FbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICBjb25zdCBsZWZ0ID0gZXYuY2xpZW50WCAtIHBvcy5sZWZ0IC0gMTA7XG4gIGNvbnN0IHRvcCA9IGV2LmNsaWVudFkgLSBwb3MudG9wIC0gMTA7XG5cbiAgLy8gQnJpbmcgdGV4dGFyZWEgYXQgdGhlIGN1cnNvciBwb3NpdGlvblxuICB0ZXJtLnRleHRhcmVhLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgdGVybS50ZXh0YXJlYS5zdHlsZS53aWR0aCA9ICcyMHB4JztcbiAgdGVybS50ZXh0YXJlYS5zdHlsZS5oZWlnaHQgPSAnMjBweCc7XG4gIHRlcm0udGV4dGFyZWEuc3R5bGUubGVmdCA9IGAke2xlZnR9cHhgO1xuICB0ZXJtLnRleHRhcmVhLnN0eWxlLnRvcCA9IGAke3RvcH1weGA7XG4gIHRlcm0udGV4dGFyZWEuc3R5bGUuekluZGV4ID0gJzEwMDAnO1xuXG4gIHRlcm0udGV4dGFyZWEuZm9jdXMoKTtcblxuICAvLyBSZXNldCB0aGUgdGVybWluYWwgdGV4dGFyZWEncyBzdHlsaW5nXG4gIC8vIFRpbWVvdXQgbmVlZHMgdG8gYmUgbG9uZyBlbm91Z2ggZm9yIGNsaWNrIGV2ZW50IHRvIGJlIGhhbmRsZWQuXG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIHRlcm0udGV4dGFyZWEuc3R5bGUucG9zaXRpb24gPSBudWxsO1xuICAgIHRlcm0udGV4dGFyZWEuc3R5bGUud2lkdGggPSBudWxsO1xuICAgIHRlcm0udGV4dGFyZWEuc3R5bGUuaGVpZ2h0ID0gbnVsbDtcbiAgICB0ZXJtLnRleHRhcmVhLnN0eWxlLmxlZnQgPSBudWxsO1xuICAgIHRlcm0udGV4dGFyZWEuc3R5bGUudG9wID0gbnVsbDtcbiAgICB0ZXJtLnRleHRhcmVhLnN0eWxlLnpJbmRleCA9IG51bGw7XG4gIH0sIDIwMCk7XG59XG5cbi8qKlxuICogQmluZCB0byByaWdodC1jbGljayBldmVudCBhbmQgYWxsb3cgcmlnaHQtY2xpY2sgY29weSBhbmQgcGFzdGUuXG4gKiBAcGFyYW0gZXYgVGhlIG9yaWdpbmFsIHJpZ2h0IGNsaWNrIGV2ZW50IHRvIGJlIGhhbmRsZWQuXG4gKiBAcGFyYW0gdGV4dGFyZWEgVGhlIHRlcm1pbmFsJ3MgdGV4dGFyZWEuXG4gKiBAcGFyYW0gc2VsZWN0aW9uTWFuYWdlciBUaGUgdGVybWluYWwncyBzZWxlY3Rpb24gbWFuYWdlci5cbiAqIEBwYXJhbSBzaG91bGRTZWxlY3RXb3JkIElmIHRydWUgYW5kIHRoZXJlIGlzIG5vIHNlbGVjdGlvbiB0aGUgY3VycmVudCB3b3JkIHdpbGwgYmUgc2VsZWN0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJpZ2h0Q2xpY2tIYW5kbGVyKGV2OiBNb3VzZUV2ZW50LCB0ZXJtOiBJVGVybWluYWwsIHNlbGVjdGlvbk1hbmFnZXI6IElTZWxlY3Rpb25NYW5hZ2VyLCBzaG91bGRTZWxlY3RXb3JkOiBib29sZWFuKTogdm9pZCB7XG4gIG1vdmVUZXh0QXJlYVVuZGVyTW91c2VDdXJzb3IoZXYsIHRlcm0pO1xuXG4gIGlmIChzaG91bGRTZWxlY3RXb3JkICYmICFzZWxlY3Rpb25NYW5hZ2VyLmlzQ2xpY2tJblNlbGVjdGlvbihldikpIHtcbiAgICBzZWxlY3Rpb25NYW5hZ2VyLnNlbGVjdFdvcmRBdEN1cnNvcihldik7XG4gIH1cblxuICAvLyBHZXQgdGV4dGFyZWEgcmVhZHkgdG8gY29weSBmcm9tIHRoZSBjb250ZXh0IG1lbnVcbiAgdGVybS50ZXh0YXJlYS52YWx1ZSA9IHNlbGVjdGlvbk1hbmFnZXIuc2VsZWN0aW9uVGV4dDtcbiAgdGVybS50ZXh0YXJlYS5zZWxlY3QoKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7QUFvQkE7QUFDQTtBQUNBO0FBRkE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQVRBO0FBZ0JBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXpCQTtBQWdDQTtBQUdBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBM0JBO0FBb0NBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFWQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/Clipboard.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/CompositionHelper.js":
/*!*****************************************************!*\
  !*** ./node_modules/xterm/lib/CompositionHelper.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CompositionHelper = (function () {\n    function CompositionHelper(_textarea, _compositionView, _terminal) {\n        this._textarea = _textarea;\n        this._compositionView = _compositionView;\n        this._terminal = _terminal;\n        this._isComposing = false;\n        this._isSendingComposition = false;\n        this._compositionPosition = { start: null, end: null };\n    }\n    CompositionHelper.prototype.compositionstart = function () {\n        this._isComposing = true;\n        this._compositionPosition.start = this._textarea.value.length;\n        this._compositionView.textContent = '';\n        this._compositionView.classList.add('active');\n    };\n    CompositionHelper.prototype.compositionupdate = function (ev) {\n        var _this = this;\n        this._compositionView.textContent = ev.data;\n        this.updateCompositionElements();\n        setTimeout(function () {\n            _this._compositionPosition.end = _this._textarea.value.length;\n        }, 0);\n    };\n    CompositionHelper.prototype.compositionend = function () {\n        this._finalizeComposition(true);\n    };\n    CompositionHelper.prototype.keydown = function (ev) {\n        if (this._isComposing || this._isSendingComposition) {\n            if (ev.keyCode === 229) {\n                return false;\n            }\n            else if (ev.keyCode === 16 || ev.keyCode === 17 || ev.keyCode === 18) {\n                return false;\n            }\n            this._finalizeComposition(false);\n        }\n        if (ev.keyCode === 229) {\n            this._handleAnyTextareaChanges();\n            return false;\n        }\n        return true;\n    };\n    CompositionHelper.prototype._finalizeComposition = function (waitForPropagation) {\n        var _this = this;\n        this._compositionView.classList.remove('active');\n        this._isComposing = false;\n        this._clearTextareaPosition();\n        if (!waitForPropagation) {\n            this._isSendingComposition = false;\n            var input = this._textarea.value.substring(this._compositionPosition.start, this._compositionPosition.end);\n            this._terminal.handler(input);\n        }\n        else {\n            var currentCompositionPosition_1 = {\n                start: this._compositionPosition.start,\n                end: this._compositionPosition.end\n            };\n            this._isSendingComposition = true;\n            setTimeout(function () {\n                if (_this._isSendingComposition) {\n                    _this._isSendingComposition = false;\n                    var input = void 0;\n                    if (_this._isComposing) {\n                        input = _this._textarea.value.substring(currentCompositionPosition_1.start, currentCompositionPosition_1.end);\n                    }\n                    else {\n                        input = _this._textarea.value.substring(currentCompositionPosition_1.start);\n                    }\n                    _this._terminal.handler(input);\n                }\n            }, 0);\n        }\n    };\n    CompositionHelper.prototype._handleAnyTextareaChanges = function () {\n        var _this = this;\n        var oldValue = this._textarea.value;\n        setTimeout(function () {\n            if (!_this._isComposing) {\n                var newValue = _this._textarea.value;\n                var diff = newValue.replace(oldValue, '');\n                if (diff.length > 0) {\n                    _this._terminal.handler(diff);\n                }\n            }\n        }, 0);\n    };\n    CompositionHelper.prototype.updateCompositionElements = function (dontRecurse) {\n        var _this = this;\n        if (!this._isComposing) {\n            return;\n        }\n        if (this._terminal.buffer.isCursorInViewport) {\n            var cellHeight = Math.ceil(this._terminal.charMeasure.height * this._terminal.options.lineHeight);\n            var cursorTop = this._terminal.buffer.y * cellHeight;\n            var cursorLeft = this._terminal.buffer.x * this._terminal.charMeasure.width;\n            this._compositionView.style.left = cursorLeft + 'px';\n            this._compositionView.style.top = cursorTop + 'px';\n            this._compositionView.style.height = cellHeight + 'px';\n            this._compositionView.style.lineHeight = cellHeight + 'px';\n            this._compositionView.style.fontFamily = this._terminal.options.fontFamily;\n            this._compositionView.style.fontSize = this._terminal.options.fontSize + 'px';\n            var compositionViewBounds = this._compositionView.getBoundingClientRect();\n            this._textarea.style.left = cursorLeft + 'px';\n            this._textarea.style.top = cursorTop + 'px';\n            this._textarea.style.width = compositionViewBounds.width + 'px';\n            this._textarea.style.height = compositionViewBounds.height + 'px';\n            this._textarea.style.lineHeight = compositionViewBounds.height + 'px';\n        }\n        if (!dontRecurse) {\n            setTimeout(function () { return _this.updateCompositionElements(true); }, 0);\n        }\n    };\n    CompositionHelper.prototype._clearTextareaPosition = function () {\n        this._textarea.style.left = '';\n        this._textarea.style.top = '';\n    };\n    return CompositionHelper;\n}());\nexports.CompositionHelper = CompositionHelper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL0NvbXBvc2l0aW9uSGVscGVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL3NyYy9Db21wb3NpdGlvbkhlbHBlci50cz8zMzY3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE2IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSVRlcm1pbmFsIH0gZnJvbSAnLi9UeXBlcyc7XG5cbmludGVyZmFjZSBJUG9zaXRpb24ge1xuICBzdGFydDogbnVtYmVyO1xuICBlbmQ6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBFbmNhcHN1bGF0ZXMgdGhlIGxvZ2ljIGZvciBoYW5kbGluZyBjb21wb3NpdGlvbnN0YXJ0LCBjb21wb3NpdGlvbnVwZGF0ZSBhbmQgY29tcG9zaXRpb25lbmRcbiAqIGV2ZW50cywgZGlzcGxheWluZyB0aGUgaW4tcHJvZ3Jlc3MgY29tcG9zaXRpb24gdG8gdGhlIFVJIGFuZCBmb3J3YXJkaW5nIHRoZSBmaW5hbCBjb21wb3NpdGlvblxuICogdG8gdGhlIGhhbmRsZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21wb3NpdGlvbkhlbHBlciB7XG4gIC8qKlxuICAgKiBXaGV0aGVyIGlucHV0IGNvbXBvc2l0aW9uIGlzIGN1cnJlbnRseSBoYXBwZW5pbmcsIGVnLiB2aWEgYSBtb2JpbGUga2V5Ym9hcmQsIHNwZWVjaCBpbnB1dCBvclxuICAgKiBJTUUuIFRoaXMgdmFyaWFibGUgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBjb21wb3NpdGlvblRleHQgc2hvdWxkIGJlIGRpc3BsYXllZCBvbiB0aGUgVUkuXG4gICAqL1xuICBwcml2YXRlIF9pc0NvbXBvc2luZzogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhlIHBvc2l0aW9uIHdpdGhpbiB0aGUgaW5wdXQgdGV4dGFyZWEncyB2YWx1ZSBvZiB0aGUgY3VycmVudCBjb21wb3NpdGlvbi5cbiAgICovXG4gIHByaXZhdGUgX2NvbXBvc2l0aW9uUG9zaXRpb246IElQb3NpdGlvbjtcblxuICAvKipcbiAgICogV2hldGhlciBhIGNvbXBvc2l0aW9uIGlzIGluIHRoZSBwcm9jZXNzIG9mIGJlaW5nIHNlbnQsIHNldHRpbmcgdGhpcyB0byBmYWxzZSB3aWxsIGNhbmNlbCBhbnlcbiAgICogaW4tcHJvZ3Jlc3MgY29tcG9zaXRpb24uXG4gICAqL1xuICBwcml2YXRlIF9pc1NlbmRpbmdDb21wb3NpdGlvbjogYm9vbGVhbjtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBDb21wb3NpdGlvbkhlbHBlci5cbiAgICogQHBhcmFtIF90ZXh0YXJlYSBUaGUgdGV4dGFyZWEgdGhhdCB4dGVybSB1c2VzIGZvciBpbnB1dC5cbiAgICogQHBhcmFtIF9jb21wb3NpdGlvblZpZXcgVGhlIGVsZW1lbnQgdG8gZGlzcGxheSB0aGUgaW4tcHJvZ3Jlc3MgY29tcG9zaXRpb24gaW4uXG4gICAqIEBwYXJhbSBfdGVybWluYWwgVGhlIFRlcm1pbmFsIHRvIGZvcndhcmQgdGhlIGZpbmlzaGVkIGNvbXBvc2l0aW9uIHRvLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfdGV4dGFyZWE6IEhUTUxUZXh0QXJlYUVsZW1lbnQsXG4gICAgcHJpdmF0ZSBfY29tcG9zaXRpb25WaWV3OiBIVE1MRWxlbWVudCxcbiAgICBwcml2YXRlIF90ZXJtaW5hbDogSVRlcm1pbmFsXG4gICkge1xuICAgIHRoaXMuX2lzQ29tcG9zaW5nID0gZmFsc2U7XG4gICAgdGhpcy5faXNTZW5kaW5nQ29tcG9zaXRpb24gPSBmYWxzZTtcbiAgICB0aGlzLl9jb21wb3NpdGlvblBvc2l0aW9uID0geyBzdGFydDogbnVsbCwgZW5kOiBudWxsIH07XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyB0aGUgY29tcG9zaXRpb25zdGFydCBldmVudCwgYWN0aXZhdGluZyB0aGUgY29tcG9zaXRpb24gdmlldy5cbiAgICovXG4gIHB1YmxpYyBjb21wb3NpdGlvbnN0YXJ0KCk6IHZvaWQge1xuICAgIHRoaXMuX2lzQ29tcG9zaW5nID0gdHJ1ZTtcbiAgICB0aGlzLl9jb21wb3NpdGlvblBvc2l0aW9uLnN0YXJ0ID0gdGhpcy5fdGV4dGFyZWEudmFsdWUubGVuZ3RoO1xuICAgIHRoaXMuX2NvbXBvc2l0aW9uVmlldy50ZXh0Q29udGVudCA9ICcnO1xuICAgIHRoaXMuX2NvbXBvc2l0aW9uVmlldy5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHRoZSBjb21wb3NpdGlvbnVwZGF0ZSBldmVudCwgdXBkYXRpbmcgdGhlIGNvbXBvc2l0aW9uIHZpZXcuXG4gICAqIEBwYXJhbSBldiBUaGUgZXZlbnQuXG4gICAqL1xuICBwdWJsaWMgY29tcG9zaXRpb251cGRhdGUoZXY6IENvbXBvc2l0aW9uRXZlbnQpOiB2b2lkIHtcbiAgICB0aGlzLl9jb21wb3NpdGlvblZpZXcudGV4dENvbnRlbnQgPSBldi5kYXRhO1xuICAgIHRoaXMudXBkYXRlQ29tcG9zaXRpb25FbGVtZW50cygpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5fY29tcG9zaXRpb25Qb3NpdGlvbi5lbmQgPSB0aGlzLl90ZXh0YXJlYS52YWx1ZS5sZW5ndGg7XG4gICAgfSwgMCk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyB0aGUgY29tcG9zaXRpb25lbmQgZXZlbnQsIGhpZGluZyB0aGUgY29tcG9zaXRpb24gdmlldyBhbmQgc2VuZGluZyB0aGUgY29tcG9zaXRpb24gdG9cbiAgICogdGhlIGhhbmRsZXIuXG4gICAqL1xuICBwdWJsaWMgY29tcG9zaXRpb25lbmQoKTogdm9pZCB7XG4gICAgdGhpcy5fZmluYWxpemVDb21wb3NpdGlvbih0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHRoZSBrZXlkb3duIGV2ZW50LCByb3V0aW5nIGFueSBuZWNlc3NhcnkgZXZlbnRzIHRvIHRoZSBDb21wb3NpdGlvbkhlbHBlciBmdW5jdGlvbnMuXG4gICAqIEBwYXJhbSBldiBUaGUga2V5ZG93biBldmVudC5cbiAgICogQHJldHVybiBXaGV0aGVyIHRoZSBUZXJtaW5hbCBzaG91bGQgY29udGludWUgcHJvY2Vzc2luZyB0aGUga2V5ZG93biBldmVudC5cbiAgICovXG4gIHB1YmxpYyBrZXlkb3duKGV2OiBLZXlib2FyZEV2ZW50KTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMuX2lzQ29tcG9zaW5nIHx8IHRoaXMuX2lzU2VuZGluZ0NvbXBvc2l0aW9uKSB7XG4gICAgICBpZiAoZXYua2V5Q29kZSA9PT0gMjI5KSB7XG4gICAgICAgIC8vIENvbnRpbnVlIGNvbXBvc2luZyBpZiB0aGUga2V5Q29kZSBpcyB0aGUgXCJjb21wb3NpdGlvbiBjaGFyYWN0ZXJcIlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKGV2LmtleUNvZGUgPT09IDE2IHx8IGV2LmtleUNvZGUgPT09IDE3IHx8IGV2LmtleUNvZGUgPT09IDE4KSB7XG4gICAgICAgIC8vIENvbnRpbnVlIGNvbXBvc2luZyBpZiB0aGUga2V5Q29kZSBpcyBhIG1vZGlmaWVyIGtleVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBGaW5pc2ggY29tcG9zaXRpb24gaW1tZWRpYXRlbHkuIFRoaXMgaXMgbWFpbmx5IGhlcmUgZm9yIHRoZSBjYXNlIHdoZXJlIGVudGVyIGlzXG4gICAgICAvLyBwcmVzc2VkIGFuZCB0aGUgaGFuZGxlciBuZWVkcyB0byBiZSB0cmlnZ2VyZWQgYmVmb3JlIHRoZSBjb21tYW5kIGlzIGV4ZWN1dGVkLlxuICAgICAgdGhpcy5fZmluYWxpemVDb21wb3NpdGlvbihmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKGV2LmtleUNvZGUgPT09IDIyOSkge1xuICAgICAgLy8gSWYgdGhlIFwiY29tcG9zaXRpb24gY2hhcmFjdGVyXCIgaXMgdXNlZCBidXQgZ2V0cyB0byB0aGlzIHBvaW50IGl0IG1lYW5zIGEgbm9uLWNvbXBvc2l0aW9uXG4gICAgICAvLyBjaGFyYWN0ZXIgKGVnLiBudW1iZXJzIGFuZCBwdW5jdHVhdGlvbikgd2FzIHByZXNzZWQgd2hlbiB0aGUgSU1FIHdhcyBhY3RpdmUuXG4gICAgICB0aGlzLl9oYW5kbGVBbnlUZXh0YXJlYUNoYW5nZXMoKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5hbGl6ZXMgdGhlIGNvbXBvc2l0aW9uLCByZXN1bWluZyByZWd1bGFyIGlucHV0IGFjdGlvbnMuIFRoaXMgaXMgY2FsbGVkIHdoZW4gYSBjb21wb3NpdGlvblxuICAgKiBpcyBlbmRpbmcuXG4gICAqIEBwYXJhbSB3YWl0Rm9yUHJvcGFnYXRpb24gV2hldGhlciB0byB3YWl0IGZvciBldmVudHMgdG8gcHJvcGFnYXRlIGJlZm9yZSBzZW5kaW5nXG4gICAqICAgdGhlIGlucHV0LiBUaGlzIHNob3VsZCBiZSBmYWxzZSBpZiBhIG5vbi1jb21wb3NpdGlvbiBrZXlzdHJva2UgaXMgZW50ZXJlZCBiZWZvcmUgdGhlXG4gICAqICAgY29tcG9zaXRpb25lbmQgZXZlbnQgaXMgdHJpZ2dlcmVkLCBzdWNoIGFzIGVudGVyLCBzbyB0aGF0IHRoZSBjb21wb3NpdGlvbiBpcyBzZW50IGJlZm9yZVxuICAgKiAgIHRoZSBjb21tYW5kIGlzIGV4ZWN1dGVkLlxuICAgKi9cbiAgcHJpdmF0ZSBfZmluYWxpemVDb21wb3NpdGlvbih3YWl0Rm9yUHJvcGFnYXRpb246IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLl9jb21wb3NpdGlvblZpZXcuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgdGhpcy5faXNDb21wb3NpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9jbGVhclRleHRhcmVhUG9zaXRpb24oKTtcblxuICAgIGlmICghd2FpdEZvclByb3BhZ2F0aW9uKSB7XG4gICAgICAvLyBDYW5jZWwgYW55IGRlbGF5ZWQgY29tcG9zaXRpb24gc2VuZCByZXF1ZXN0cyBhbmQgc2VuZCB0aGUgaW5wdXQgaW1tZWRpYXRlbHkuXG4gICAgICB0aGlzLl9pc1NlbmRpbmdDb21wb3NpdGlvbiA9IGZhbHNlO1xuICAgICAgY29uc3QgaW5wdXQgPSB0aGlzLl90ZXh0YXJlYS52YWx1ZS5zdWJzdHJpbmcodGhpcy5fY29tcG9zaXRpb25Qb3NpdGlvbi5zdGFydCwgdGhpcy5fY29tcG9zaXRpb25Qb3NpdGlvbi5lbmQpO1xuICAgICAgdGhpcy5fdGVybWluYWwuaGFuZGxlcihpbnB1dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE1ha2UgYSBkZWVwIGNvcHkgb2YgdGhlIGNvbXBvc2l0aW9uIHBvc2l0aW9uIGhlcmUgYXMgYSBuZXcgY29tcG9zaXRpb25zdGFydCBldmVudCBtYXlcbiAgICAgIC8vIGZpcmUgYmVmb3JlIHRoZSBzZXRUaW1lb3V0IGV4ZWN1dGVzLlxuICAgICAgY29uc3QgY3VycmVudENvbXBvc2l0aW9uUG9zaXRpb24gPSB7XG4gICAgICAgIHN0YXJ0OiB0aGlzLl9jb21wb3NpdGlvblBvc2l0aW9uLnN0YXJ0LFxuICAgICAgICBlbmQ6IHRoaXMuX2NvbXBvc2l0aW9uUG9zaXRpb24uZW5kXG4gICAgICB9O1xuXG4gICAgICAvLyBTaW5jZSBjb21wb3NpdGlvbiogZXZlbnRzIGhhcHBlbiBiZWZvcmUgdGhlIGNoYW5nZXMgdGFrZSBwbGFjZSBpbiB0aGUgdGV4dGFyZWEgb24gbW9zdFxuICAgICAgLy8gYnJvd3NlcnMsIHVzZSBhIHNldFRpbWVvdXQgd2l0aCAwbXMgdGltZSB0byBhbGxvdyB0aGUgbmF0aXZlIGNvbXBvc2l0aW9uZW5kIGV2ZW50IHRvXG4gICAgICAvLyBjb21wbGV0ZS4gVGhpcyBlbnN1cmVzIHRoZSBjb3JyZWN0IGNoYXJhY3RlciBpcyByZXRyaWV2ZWQuXG4gICAgICAvLyBUaGlzIHNvbHV0aW9uIHdhcyB1c2VkIGJlY2F1c2U6XG4gICAgICAvLyAtIFRoZSBjb21wb3NpdGlvbmVuZCBldmVudCdzIGRhdGEgcHJvcGVydHkgaXMgdW5yZWxpYWJsZSwgYXQgbGVhc3Qgb24gQ2hyb21pdW1cbiAgICAgIC8vIC0gVGhlIGxhc3QgY29tcG9zaXRpb251cGRhdGUgZXZlbnQncyBkYXRhIHByb3BlcnR5IGRvZXMgbm90IGFsd2F5cyBhY2N1cmF0ZWx5IGRlc2NyaWJlXG4gICAgICAvLyAgIHRoZSBjaGFyYWN0ZXIsIGEgY291bnRlciBleGFtcGxlIGJlaW5nIEtvcmVhbiB3aGVyZSBhbiBlbmRpbmcgY29uc29uc2FudCBjYW4gbW92ZSB0b1xuICAgICAgLy8gICB0aGUgZm9sbG93aW5nIGNoYXJhY3RlciBpZiB0aGUgZm9sbG93aW5nIGlucHV0IGlzIGEgdm93ZWwuXG4gICAgICB0aGlzLl9pc1NlbmRpbmdDb21wb3NpdGlvbiA9IHRydWU7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgdGhlIGlucHV0IGhhcyBub3QgYWxyZWFkeSBiZWVuIHNlbnRcbiAgICAgICAgaWYgKHRoaXMuX2lzU2VuZGluZ0NvbXBvc2l0aW9uKSB7XG4gICAgICAgICAgdGhpcy5faXNTZW5kaW5nQ29tcG9zaXRpb24gPSBmYWxzZTtcbiAgICAgICAgICBsZXQgaW5wdXQ7XG4gICAgICAgICAgaWYgKHRoaXMuX2lzQ29tcG9zaW5nKSB7XG4gICAgICAgICAgICAvLyBVc2UgdGhlIGVuZCBwb3NpdGlvbiB0byBnZXQgdGhlIHN0cmluZyBpZiBhIG5ldyBjb21wb3NpdGlvbiBoYXMgc3RhcnRlZC5cbiAgICAgICAgICAgIGlucHV0ID0gdGhpcy5fdGV4dGFyZWEudmFsdWUuc3Vic3RyaW5nKGN1cnJlbnRDb21wb3NpdGlvblBvc2l0aW9uLnN0YXJ0LCBjdXJyZW50Q29tcG9zaXRpb25Qb3NpdGlvbi5lbmQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBEb24ndCB1c2UgdGhlIGVuZCBwb3NpdGlvbiBoZXJlIGluIG9yZGVyIHRvIHBpY2sgdXAgYW55IGNoYXJhY3RlcnMgYWZ0ZXIgdGhlXG4gICAgICAgICAgICAvLyBjb21wb3NpdGlvbiBoYXMgZmluaXNoZWQsIGZvciBleGFtcGxlIHdoZW4gdHlwaW5nIGEgbm9uLWNvbXBvc2l0aW9uIGNoYXJhY3RlclxuICAgICAgICAgICAgLy8gKGVnLiAyKSBhZnRlciBhIGNvbXBvc2l0aW9uIGNoYXJhY3Rlci5cbiAgICAgICAgICAgIGlucHV0ID0gdGhpcy5fdGV4dGFyZWEudmFsdWUuc3Vic3RyaW5nKGN1cnJlbnRDb21wb3NpdGlvblBvc2l0aW9uLnN0YXJ0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5fdGVybWluYWwuaGFuZGxlcihpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgIH0sIDApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBseSBhbnkgY2hhbmdlcyBtYWRlIHRvIHRoZSB0ZXh0YXJlYSBhZnRlciB0aGUgY3VycmVudCBldmVudCBjaGFpbiBpcyBhbGxvd2VkIHRvIGNvbXBsZXRlLlxuICAgKiBUaGlzIHNob3VsZCBiZSBjYWxsZWQgd2hlbiBub3QgY3VycmVudGx5IGNvbXBvc2luZyBidXQgYSBrZXlkb3duIGV2ZW50IHdpdGggdGhlIFwiY29tcG9zaXRpb25cbiAgICogY2hhcmFjdGVyXCIgKDIyOSkgaXMgdHJpZ2dlcmVkLCBpbiBvcmRlciB0byBhbGxvdyBub24tY29tcG9zaXRpb24gdGV4dCB0byBiZSBlbnRlcmVkIHdoZW4gYW5cbiAgICogSU1FIGlzIGFjdGl2ZS5cbiAgICovXG4gIHByaXZhdGUgX2hhbmRsZUFueVRleHRhcmVhQ2hhbmdlcygpOiB2b2lkIHtcbiAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMuX3RleHRhcmVhLnZhbHVlO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgLy8gSWdub3JlIGlmIGEgY29tcG9zaXRpb24gaGFzIHN0YXJ0ZWQgc2luY2UgdGhlIHRpbWVvdXRcbiAgICAgIGlmICghdGhpcy5faXNDb21wb3NpbmcpIHtcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSB0aGlzLl90ZXh0YXJlYS52YWx1ZTtcbiAgICAgICAgY29uc3QgZGlmZiA9IG5ld1ZhbHVlLnJlcGxhY2Uob2xkVmFsdWUsICcnKTtcbiAgICAgICAgaWYgKGRpZmYubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmhhbmRsZXIoZGlmZik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQb3NpdGlvbnMgdGhlIGNvbXBvc2l0aW9uIHZpZXcgb24gdG9wIG9mIHRoZSBjdXJzb3IgYW5kIHRoZSB0ZXh0YXJlYSBqdXN0IGJlbG93IGl0IChzbyB0aGVcbiAgICogSU1FIGhlbHBlciBkaWFsb2cgaXMgcG9zaXRpb25lZCBjb3JyZWN0bHkpLlxuICAgKiBAcGFyYW0gZG9udFJlY3Vyc2UgV2hldGhlciB0byB1c2Ugc2V0VGltZW91dCB0byByZWN1cnNpdmVseSB0cmlnZ2VyIGFub3RoZXIgdXBkYXRlLCB0aGlzIGlzXG4gICAqICAgbmVjZXNzYXJ5IGFzIHRoZSBJTUUgZXZlbnRzIGFjcm9zcyBicm93c2VycyBhcmUgbm90IGNvbnNpc3RlbnRseSB0cmlnZ2VyZWQuXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlQ29tcG9zaXRpb25FbGVtZW50cyhkb250UmVjdXJzZT86IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX2lzQ29tcG9zaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci5pc0N1cnNvckluVmlld3BvcnQpIHtcbiAgICAgIGNvbnN0IGNlbGxIZWlnaHQgPSBNYXRoLmNlaWwodGhpcy5fdGVybWluYWwuY2hhck1lYXN1cmUuaGVpZ2h0ICogdGhpcy5fdGVybWluYWwub3B0aW9ucy5saW5lSGVpZ2h0KTtcbiAgICAgIGNvbnN0IGN1cnNvclRvcCA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ICogY2VsbEhlaWdodDtcbiAgICAgIGNvbnN0IGN1cnNvckxlZnQgPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIueCAqIHRoaXMuX3Rlcm1pbmFsLmNoYXJNZWFzdXJlLndpZHRoO1xuXG4gICAgICB0aGlzLl9jb21wb3NpdGlvblZpZXcuc3R5bGUubGVmdCA9IGN1cnNvckxlZnQgKyAncHgnO1xuICAgICAgdGhpcy5fY29tcG9zaXRpb25WaWV3LnN0eWxlLnRvcCA9IGN1cnNvclRvcCArICdweCc7XG4gICAgICB0aGlzLl9jb21wb3NpdGlvblZpZXcuc3R5bGUuaGVpZ2h0ID0gY2VsbEhlaWdodCArICdweCc7XG4gICAgICB0aGlzLl9jb21wb3NpdGlvblZpZXcuc3R5bGUubGluZUhlaWdodCA9IGNlbGxIZWlnaHQgKyAncHgnO1xuICAgICAgdGhpcy5fY29tcG9zaXRpb25WaWV3LnN0eWxlLmZvbnRGYW1pbHkgPSB0aGlzLl90ZXJtaW5hbC5vcHRpb25zLmZvbnRGYW1pbHk7XG4gICAgICB0aGlzLl9jb21wb3NpdGlvblZpZXcuc3R5bGUuZm9udFNpemUgPSB0aGlzLl90ZXJtaW5hbC5vcHRpb25zLmZvbnRTaXplICsgJ3B4JztcbiAgICAgIC8vIFN5bmMgdGhlIHRleHRhcmVhIHRvIHRoZSBleGFjdCBwb3NpdGlvbiBvZiB0aGUgY29tcG9zaXRpb24gdmlldyBzbyB0aGUgSU1FIGtub3dzIHdoZXJlIHRoZVxuICAgICAgLy8gdGV4dCBpcy5cbiAgICAgIGNvbnN0IGNvbXBvc2l0aW9uVmlld0JvdW5kcyA9IHRoaXMuX2NvbXBvc2l0aW9uVmlldy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHRoaXMuX3RleHRhcmVhLnN0eWxlLmxlZnQgPSBjdXJzb3JMZWZ0ICsgJ3B4JztcbiAgICAgIHRoaXMuX3RleHRhcmVhLnN0eWxlLnRvcCA9IGN1cnNvclRvcCArICdweCc7XG4gICAgICB0aGlzLl90ZXh0YXJlYS5zdHlsZS53aWR0aCA9IGNvbXBvc2l0aW9uVmlld0JvdW5kcy53aWR0aCArICdweCc7XG4gICAgICB0aGlzLl90ZXh0YXJlYS5zdHlsZS5oZWlnaHQgPSBjb21wb3NpdGlvblZpZXdCb3VuZHMuaGVpZ2h0ICsgJ3B4JztcbiAgICAgIHRoaXMuX3RleHRhcmVhLnN0eWxlLmxpbmVIZWlnaHQgPSBjb21wb3NpdGlvblZpZXdCb3VuZHMuaGVpZ2h0ICsgJ3B4JztcbiAgICB9XG5cbiAgICBpZiAoIWRvbnRSZWN1cnNlKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMudXBkYXRlQ29tcG9zaXRpb25FbGVtZW50cyh0cnVlKSwgMCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsZWFycyB0aGUgdGV4dGFyZWEncyBwb3NpdGlvbiBzbyB0aGF0IHRoZSBjdXJzb3IgZG9lcyBub3QgYmxpbmsgb24gSUUuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcml2YXRlIF9jbGVhclRleHRhcmVhUG9zaXRpb24oKTogdm9pZCB7XG4gICAgdGhpcy5fdGV4dGFyZWEuc3R5bGUubGVmdCA9ICcnO1xuICAgIHRoaXMuX3RleHRhcmVhLnN0eWxlLnRvcCA9ICcnO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7O0FBaUJBO0FBd0JBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFVQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFVQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQXJOQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/CompositionHelper.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/EscapeSequenceParser.js":
/*!********************************************************!*\
  !*** ./node_modules/xterm/lib/EscapeSequenceParser.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Lifecycle_1 = __webpack_require__(/*! ./common/Lifecycle */ \"./node_modules/xterm/lib/common/Lifecycle.js\");\nvar TextDecoder_1 = __webpack_require__(/*! ./core/input/TextDecoder */ \"./node_modules/xterm/lib/core/input/TextDecoder.js\");\nfunction r(low, high) {\n    var c = high - low;\n    var arr = new Array(c);\n    while (c--) {\n        arr[c] = --high;\n    }\n    return arr;\n}\nvar TransitionTable = (function () {\n    function TransitionTable(length) {\n        this.table = (typeof Uint8Array === 'undefined')\n            ? new Array(length)\n            : new Uint8Array(length);\n    }\n    TransitionTable.prototype.add = function (code, state, action, next) {\n        this.table[state << 8 | code] = ((action | 0) << 4) | ((next === undefined) ? state : next);\n    };\n    TransitionTable.prototype.addMany = function (codes, state, action, next) {\n        for (var i = 0; i < codes.length; i++) {\n            this.add(codes[i], state, action, next);\n        }\n    };\n    return TransitionTable;\n}());\nexports.TransitionTable = TransitionTable;\nvar PRINTABLES = r(0x20, 0x7f);\nvar EXECUTABLES = r(0x00, 0x18);\nEXECUTABLES.push(0x19);\nEXECUTABLES.push.apply(EXECUTABLES, r(0x1c, 0x20));\nvar NON_ASCII_PRINTABLE = 0xA0;\nexports.VT500_TRANSITION_TABLE = (function () {\n    var table = new TransitionTable(4095);\n    var states = r(0, 13 + 1);\n    var state;\n    for (state in states) {\n        for (var code = 0; code <= NON_ASCII_PRINTABLE; ++code) {\n            table.add(code, state, 1, 0);\n        }\n    }\n    table.addMany(PRINTABLES, 0, 2, 0);\n    for (state in states) {\n        table.addMany([0x18, 0x1a, 0x99, 0x9a], state, 3, 0);\n        table.addMany(r(0x80, 0x90), state, 3, 0);\n        table.addMany(r(0x90, 0x98), state, 3, 0);\n        table.add(0x9c, state, 0, 0);\n        table.add(0x1b, state, 11, 1);\n        table.add(0x9d, state, 4, 8);\n        table.addMany([0x98, 0x9e, 0x9f], state, 0, 7);\n        table.add(0x9b, state, 11, 3);\n        table.add(0x90, state, 11, 9);\n    }\n    table.addMany(EXECUTABLES, 0, 3, 0);\n    table.addMany(EXECUTABLES, 1, 3, 1);\n    table.add(0x7f, 1, 0, 1);\n    table.addMany(EXECUTABLES, 8, 0, 8);\n    table.addMany(EXECUTABLES, 3, 3, 3);\n    table.add(0x7f, 3, 0, 3);\n    table.addMany(EXECUTABLES, 4, 3, 4);\n    table.add(0x7f, 4, 0, 4);\n    table.addMany(EXECUTABLES, 6, 3, 6);\n    table.addMany(EXECUTABLES, 5, 3, 5);\n    table.add(0x7f, 5, 0, 5);\n    table.addMany(EXECUTABLES, 2, 3, 2);\n    table.add(0x7f, 2, 0, 2);\n    table.add(0x5d, 1, 4, 8);\n    table.addMany(PRINTABLES, 8, 5, 8);\n    table.add(0x7f, 8, 5, 8);\n    table.addMany([0x9c, 0x1b, 0x18, 0x1a, 0x07], 8, 6, 0);\n    table.addMany(r(0x1c, 0x20), 8, 0, 8);\n    table.addMany([0x58, 0x5e, 0x5f], 1, 0, 7);\n    table.addMany(PRINTABLES, 7, 0, 7);\n    table.addMany(EXECUTABLES, 7, 0, 7);\n    table.add(0x9c, 7, 0, 0);\n    table.add(0x7f, 7, 0, 7);\n    table.add(0x5b, 1, 11, 3);\n    table.addMany(r(0x40, 0x7f), 3, 7, 0);\n    table.addMany(r(0x30, 0x3a), 3, 8, 4);\n    table.add(0x3b, 3, 8, 4);\n    table.addMany([0x3c, 0x3d, 0x3e, 0x3f], 3, 9, 4);\n    table.addMany(r(0x30, 0x3a), 4, 8, 4);\n    table.add(0x3b, 4, 8, 4);\n    table.addMany(r(0x40, 0x7f), 4, 7, 0);\n    table.addMany([0x3a, 0x3c, 0x3d, 0x3e, 0x3f], 4, 0, 6);\n    table.addMany(r(0x20, 0x40), 6, 0, 6);\n    table.add(0x7f, 6, 0, 6);\n    table.addMany(r(0x40, 0x7f), 6, 0, 0);\n    table.add(0x3a, 3, 0, 6);\n    table.addMany(r(0x20, 0x30), 3, 9, 5);\n    table.addMany(r(0x20, 0x30), 5, 9, 5);\n    table.addMany(r(0x30, 0x40), 5, 0, 6);\n    table.addMany(r(0x40, 0x7f), 5, 7, 0);\n    table.addMany(r(0x20, 0x30), 4, 9, 5);\n    table.addMany(r(0x20, 0x30), 1, 9, 2);\n    table.addMany(r(0x20, 0x30), 2, 9, 2);\n    table.addMany(r(0x30, 0x7f), 2, 10, 0);\n    table.addMany(r(0x30, 0x50), 1, 10, 0);\n    table.addMany(r(0x51, 0x58), 1, 10, 0);\n    table.addMany([0x59, 0x5a, 0x5c], 1, 10, 0);\n    table.addMany(r(0x60, 0x7f), 1, 10, 0);\n    table.add(0x50, 1, 11, 9);\n    table.addMany(EXECUTABLES, 9, 0, 9);\n    table.add(0x7f, 9, 0, 9);\n    table.addMany(r(0x1c, 0x20), 9, 0, 9);\n    table.addMany(r(0x20, 0x30), 9, 9, 12);\n    table.add(0x3a, 9, 0, 11);\n    table.addMany(r(0x30, 0x3a), 9, 8, 10);\n    table.add(0x3b, 9, 8, 10);\n    table.addMany([0x3c, 0x3d, 0x3e, 0x3f], 9, 9, 10);\n    table.addMany(EXECUTABLES, 11, 0, 11);\n    table.addMany(r(0x20, 0x80), 11, 0, 11);\n    table.addMany(r(0x1c, 0x20), 11, 0, 11);\n    table.addMany(EXECUTABLES, 10, 0, 10);\n    table.add(0x7f, 10, 0, 10);\n    table.addMany(r(0x1c, 0x20), 10, 0, 10);\n    table.addMany(r(0x30, 0x3a), 10, 8, 10);\n    table.add(0x3b, 10, 8, 10);\n    table.addMany([0x3a, 0x3c, 0x3d, 0x3e, 0x3f], 10, 0, 11);\n    table.addMany(r(0x20, 0x30), 10, 9, 12);\n    table.addMany(EXECUTABLES, 12, 0, 12);\n    table.add(0x7f, 12, 0, 12);\n    table.addMany(r(0x1c, 0x20), 12, 0, 12);\n    table.addMany(r(0x20, 0x30), 12, 9, 12);\n    table.addMany(r(0x30, 0x40), 12, 0, 11);\n    table.addMany(r(0x40, 0x7f), 12, 12, 13);\n    table.addMany(r(0x40, 0x7f), 10, 12, 13);\n    table.addMany(r(0x40, 0x7f), 9, 12, 13);\n    table.addMany(EXECUTABLES, 13, 13, 13);\n    table.addMany(PRINTABLES, 13, 13, 13);\n    table.add(0x7f, 13, 0, 13);\n    table.addMany([0x1b, 0x9c], 13, 14, 0);\n    table.add(NON_ASCII_PRINTABLE, 8, 5, 8);\n    return table;\n})();\nvar DcsDummy = (function () {\n    function DcsDummy() {\n    }\n    DcsDummy.prototype.hook = function (collect, params, flag) { };\n    DcsDummy.prototype.put = function (data, start, end) { };\n    DcsDummy.prototype.unhook = function () { };\n    return DcsDummy;\n}());\nvar EscapeSequenceParser = (function (_super) {\n    __extends(EscapeSequenceParser, _super);\n    function EscapeSequenceParser(TRANSITIONS) {\n        if (TRANSITIONS === void 0) { TRANSITIONS = exports.VT500_TRANSITION_TABLE; }\n        var _this = _super.call(this) || this;\n        _this.TRANSITIONS = TRANSITIONS;\n        _this.initialState = 0;\n        _this.currentState = _this.initialState;\n        _this._osc = '';\n        _this._params = [0];\n        _this._collect = '';\n        _this._printHandlerFb = function (data, start, end) { };\n        _this._executeHandlerFb = function (code) { };\n        _this._csiHandlerFb = function (collect, params, flag) { };\n        _this._escHandlerFb = function (collect, flag) { };\n        _this._oscHandlerFb = function (identifier, data) { };\n        _this._dcsHandlerFb = new DcsDummy();\n        _this._errorHandlerFb = function (state) { return state; };\n        _this._printHandler = _this._printHandlerFb;\n        _this._executeHandlers = Object.create(null);\n        _this._csiHandlers = Object.create(null);\n        _this._escHandlers = Object.create(null);\n        _this._oscHandlers = Object.create(null);\n        _this._dcsHandlers = Object.create(null);\n        _this._activeDcsHandler = null;\n        _this._errorHandler = _this._errorHandlerFb;\n        _this.setEscHandler('\\\\', function () { });\n        return _this;\n    }\n    EscapeSequenceParser.prototype.dispose = function () {\n        this._printHandlerFb = null;\n        this._executeHandlerFb = null;\n        this._csiHandlerFb = null;\n        this._escHandlerFb = null;\n        this._oscHandlerFb = null;\n        this._dcsHandlerFb = null;\n        this._errorHandlerFb = null;\n        this._printHandler = null;\n        this._executeHandlers = null;\n        this._escHandlers = null;\n        this._csiHandlers = null;\n        this._oscHandlers = null;\n        this._dcsHandlers = null;\n        this._activeDcsHandler = null;\n        this._errorHandler = null;\n    };\n    EscapeSequenceParser.prototype.setPrintHandler = function (callback) {\n        this._printHandler = callback;\n    };\n    EscapeSequenceParser.prototype.clearPrintHandler = function () {\n        this._printHandler = this._printHandlerFb;\n    };\n    EscapeSequenceParser.prototype.setExecuteHandler = function (flag, callback) {\n        this._executeHandlers[flag.charCodeAt(0)] = callback;\n    };\n    EscapeSequenceParser.prototype.clearExecuteHandler = function (flag) {\n        if (this._executeHandlers[flag.charCodeAt(0)])\n            delete this._executeHandlers[flag.charCodeAt(0)];\n    };\n    EscapeSequenceParser.prototype.setExecuteHandlerFallback = function (callback) {\n        this._executeHandlerFb = callback;\n    };\n    EscapeSequenceParser.prototype.addCsiHandler = function (flag, callback) {\n        var index = flag.charCodeAt(0);\n        if (this._csiHandlers[index] === undefined) {\n            this._csiHandlers[index] = [];\n        }\n        var handlerList = this._csiHandlers[index];\n        handlerList.push(callback);\n        return {\n            dispose: function () {\n                var handlerIndex = handlerList.indexOf(callback);\n                if (handlerIndex !== -1) {\n                    handlerList.splice(handlerIndex, 1);\n                }\n            }\n        };\n    };\n    EscapeSequenceParser.prototype.setCsiHandler = function (flag, callback) {\n        this._csiHandlers[flag.charCodeAt(0)] = [callback];\n    };\n    EscapeSequenceParser.prototype.clearCsiHandler = function (flag) {\n        if (this._csiHandlers[flag.charCodeAt(0)])\n            delete this._csiHandlers[flag.charCodeAt(0)];\n    };\n    EscapeSequenceParser.prototype.setCsiHandlerFallback = function (callback) {\n        this._csiHandlerFb = callback;\n    };\n    EscapeSequenceParser.prototype.setEscHandler = function (collectAndFlag, callback) {\n        this._escHandlers[collectAndFlag] = callback;\n    };\n    EscapeSequenceParser.prototype.clearEscHandler = function (collectAndFlag) {\n        if (this._escHandlers[collectAndFlag])\n            delete this._escHandlers[collectAndFlag];\n    };\n    EscapeSequenceParser.prototype.setEscHandlerFallback = function (callback) {\n        this._escHandlerFb = callback;\n    };\n    EscapeSequenceParser.prototype.addOscHandler = function (ident, callback) {\n        if (this._oscHandlers[ident] === undefined) {\n            this._oscHandlers[ident] = [];\n        }\n        var handlerList = this._oscHandlers[ident];\n        handlerList.push(callback);\n        return {\n            dispose: function () {\n                var handlerIndex = handlerList.indexOf(callback);\n                if (handlerIndex !== -1) {\n                    handlerList.splice(handlerIndex, 1);\n                }\n            }\n        };\n    };\n    EscapeSequenceParser.prototype.setOscHandler = function (ident, callback) {\n        this._oscHandlers[ident] = [callback];\n    };\n    EscapeSequenceParser.prototype.clearOscHandler = function (ident) {\n        if (this._oscHandlers[ident])\n            delete this._oscHandlers[ident];\n    };\n    EscapeSequenceParser.prototype.setOscHandlerFallback = function (callback) {\n        this._oscHandlerFb = callback;\n    };\n    EscapeSequenceParser.prototype.setDcsHandler = function (collectAndFlag, handler) {\n        this._dcsHandlers[collectAndFlag] = handler;\n    };\n    EscapeSequenceParser.prototype.clearDcsHandler = function (collectAndFlag) {\n        if (this._dcsHandlers[collectAndFlag])\n            delete this._dcsHandlers[collectAndFlag];\n    };\n    EscapeSequenceParser.prototype.setDcsHandlerFallback = function (handler) {\n        this._dcsHandlerFb = handler;\n    };\n    EscapeSequenceParser.prototype.setErrorHandler = function (callback) {\n        this._errorHandler = callback;\n    };\n    EscapeSequenceParser.prototype.clearErrorHandler = function () {\n        this._errorHandler = this._errorHandlerFb;\n    };\n    EscapeSequenceParser.prototype.reset = function () {\n        this.currentState = this.initialState;\n        this._osc = '';\n        this._params = [0];\n        this._collect = '';\n        this._activeDcsHandler = null;\n    };\n    EscapeSequenceParser.prototype.parse = function (data, length) {\n        var code = 0;\n        var transition = 0;\n        var error = false;\n        var currentState = this.currentState;\n        var print = -1;\n        var dcs = -1;\n        var osc = this._osc;\n        var collect = this._collect;\n        var params = this._params;\n        var table = this.TRANSITIONS.table;\n        var dcsHandler = this._activeDcsHandler;\n        var callback = null;\n        for (var i = 0; i < length; ++i) {\n            code = data[i];\n            if (currentState === 0 && code > 0x1f && code < 0x80) {\n                print = (~print) ? print : i;\n                do\n                    i++;\n                while (i < length && data[i] > 0x1f && data[i] < 0x80);\n                i--;\n                continue;\n            }\n            if (currentState === 4 && (code > 0x2f && code < 0x39)) {\n                params[params.length - 1] = params[params.length - 1] * 10 + code - 48;\n                continue;\n            }\n            transition = table[currentState << 8 | (code < 0xa0 ? code : NON_ASCII_PRINTABLE)];\n            switch (transition >> 4) {\n                case 2:\n                    print = (~print) ? print : i;\n                    break;\n                case 3:\n                    if (~print) {\n                        this._printHandler(data, print, i);\n                        print = -1;\n                    }\n                    callback = this._executeHandlers[code];\n                    if (callback)\n                        callback();\n                    else\n                        this._executeHandlerFb(code);\n                    break;\n                case 0:\n                    if (~print) {\n                        this._printHandler(data, print, i);\n                        print = -1;\n                    }\n                    else if (~dcs) {\n                        dcsHandler.put(data, dcs, i);\n                        dcs = -1;\n                    }\n                    break;\n                case 1:\n                    if (code > 0x9f) {\n                        switch (currentState) {\n                            case 0:\n                                print = (~print) ? print : i;\n                                break;\n                            case 6:\n                                transition |= 6;\n                                break;\n                            case 11:\n                                transition |= 11;\n                                break;\n                            case 13:\n                                dcs = (~dcs) ? dcs : i;\n                                transition |= 13;\n                                break;\n                            default:\n                                error = true;\n                        }\n                    }\n                    else {\n                        error = true;\n                    }\n                    if (error) {\n                        var inject = this._errorHandler({\n                            position: i,\n                            code: code,\n                            currentState: currentState,\n                            print: print,\n                            dcs: dcs,\n                            osc: osc,\n                            collect: collect,\n                            params: params,\n                            abort: false\n                        });\n                        if (inject.abort)\n                            return;\n                        error = false;\n                    }\n                    break;\n                case 7:\n                    var handlers = this._csiHandlers[code];\n                    var j = handlers ? handlers.length - 1 : -1;\n                    for (; j >= 0; j--) {\n                        if (handlers[j](params, collect) !== false) {\n                            break;\n                        }\n                    }\n                    if (j < 0) {\n                        this._csiHandlerFb(collect, params, code);\n                    }\n                    break;\n                case 8:\n                    if (code === 0x3b)\n                        params.push(0);\n                    else\n                        params[params.length - 1] = params[params.length - 1] * 10 + code - 48;\n                    break;\n                case 9:\n                    collect += String.fromCharCode(code);\n                    break;\n                case 10:\n                    callback = this._escHandlers[collect + String.fromCharCode(code)];\n                    if (callback)\n                        callback(collect, code);\n                    else\n                        this._escHandlerFb(collect, code);\n                    break;\n                case 11:\n                    if (~print) {\n                        this._printHandler(data, print, i);\n                        print = -1;\n                    }\n                    osc = '';\n                    params = [0];\n                    collect = '';\n                    dcs = -1;\n                    break;\n                case 12:\n                    dcsHandler = this._dcsHandlers[collect + String.fromCharCode(code)];\n                    if (!dcsHandler)\n                        dcsHandler = this._dcsHandlerFb;\n                    dcsHandler.hook(collect, params, code);\n                    break;\n                case 13:\n                    dcs = (~dcs) ? dcs : i;\n                    break;\n                case 14:\n                    if (dcsHandler) {\n                        if (~dcs)\n                            dcsHandler.put(data, dcs, i);\n                        dcsHandler.unhook();\n                        dcsHandler = null;\n                    }\n                    if (code === 0x1b)\n                        transition |= 1;\n                    osc = '';\n                    params = [0];\n                    collect = '';\n                    dcs = -1;\n                    break;\n                case 4:\n                    if (~print) {\n                        this._printHandler(data, print, i);\n                        print = -1;\n                    }\n                    osc = '';\n                    break;\n                case 5:\n                    for (var j_1 = i + 1;; j_1++) {\n                        if (j_1 >= length\n                            || (code = data[j_1]) < 0x20\n                            || (code > 0x7f && code <= 0x9f)) {\n                            osc += TextDecoder_1.utf32ToString(data, i, j_1);\n                            i = j_1 - 1;\n                            break;\n                        }\n                    }\n                    break;\n                case 6:\n                    if (osc && code !== 0x18 && code !== 0x1a) {\n                        var idx = osc.indexOf(';');\n                        if (idx === -1) {\n                            this._oscHandlerFb(-1, osc);\n                        }\n                        else {\n                            var identifier = parseInt(osc.substring(0, idx));\n                            var content = osc.substring(idx + 1);\n                            var handlers_1 = this._oscHandlers[identifier];\n                            var j_2 = handlers_1 ? handlers_1.length - 1 : -1;\n                            for (; j_2 >= 0; j_2--) {\n                                if (handlers_1[j_2](content) !== false) {\n                                    break;\n                                }\n                            }\n                            if (j_2 < 0) {\n                                this._oscHandlerFb(identifier, content);\n                            }\n                        }\n                    }\n                    if (code === 0x1b)\n                        transition |= 1;\n                    osc = '';\n                    params = [0];\n                    collect = '';\n                    dcs = -1;\n                    break;\n            }\n            currentState = transition & 15;\n        }\n        if (currentState === 0 && ~print) {\n            this._printHandler(data, print, length);\n        }\n        else if (currentState === 13 && ~dcs && dcsHandler) {\n            dcsHandler.put(data, dcs, length);\n        }\n        this._osc = osc;\n        this._collect = collect;\n        this._params = params;\n        this._activeDcsHandler = dcsHandler;\n        this.currentState = currentState;\n    };\n    return EscapeSequenceParser;\n}(Lifecycle_1.Disposable));\nexports.EscapeSequenceParser = EscapeSequenceParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/EscapeSequenceParser.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/InputHandler.js":
/*!************************************************!*\
  !*** ./node_modules/xterm/lib/InputHandler.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EscapeSequences_1 = __webpack_require__(/*! ./common/data/EscapeSequences */ \"./node_modules/xterm/lib/common/data/EscapeSequences.js\");\nvar Charsets_1 = __webpack_require__(/*! ./core/data/Charsets */ \"./node_modules/xterm/lib/core/data/Charsets.js\");\nvar CharWidth_1 = __webpack_require__(/*! ./CharWidth */ \"./node_modules/xterm/lib/CharWidth.js\");\nvar EscapeSequenceParser_1 = __webpack_require__(/*! ./EscapeSequenceParser */ \"./node_modules/xterm/lib/EscapeSequenceParser.js\");\nvar Lifecycle_1 = __webpack_require__(/*! ./common/Lifecycle */ \"./node_modules/xterm/lib/common/Lifecycle.js\");\nvar TypedArrayUtils_1 = __webpack_require__(/*! ./common/TypedArrayUtils */ \"./node_modules/xterm/lib/common/TypedArrayUtils.js\");\nvar TextDecoder_1 = __webpack_require__(/*! ./core/input/TextDecoder */ \"./node_modules/xterm/lib/core/input/TextDecoder.js\");\nvar BufferLine_1 = __webpack_require__(/*! ./core/buffer/BufferLine */ \"./node_modules/xterm/lib/core/buffer/BufferLine.js\");\nvar EventEmitter2_1 = __webpack_require__(/*! ./common/EventEmitter2 */ \"./node_modules/xterm/lib/common/EventEmitter2.js\");\nvar GLEVEL = { '(': 0, ')': 1, '*': 2, '+': 3, '-': 1, '.': 2 };\nvar DECRQSS = (function () {\n    function DECRQSS(_terminal) {\n        this._terminal = _terminal;\n        this._data = new Uint32Array(0);\n    }\n    DECRQSS.prototype.hook = function (collect, params, flag) {\n        this._data = new Uint32Array(0);\n    };\n    DECRQSS.prototype.put = function (data, start, end) {\n        this._data = TypedArrayUtils_1.concat(this._data, data.subarray(start, end));\n    };\n    DECRQSS.prototype.unhook = function () {\n        var data = TextDecoder_1.utf32ToString(this._data);\n        this._data = new Uint32Array(0);\n        switch (data) {\n            case '\"q':\n                return this._terminal.handler(EscapeSequences_1.C0.ESC + \"P1$r0\\\"q\" + EscapeSequences_1.C0.ESC + \"\\\\\");\n            case '\"p':\n                return this._terminal.handler(EscapeSequences_1.C0.ESC + \"P1$r61\\\"p\" + EscapeSequences_1.C0.ESC + \"\\\\\");\n            case 'r':\n                var pt = '' + (this._terminal.buffer.scrollTop + 1) +\n                    ';' + (this._terminal.buffer.scrollBottom + 1) + 'r';\n                return this._terminal.handler(EscapeSequences_1.C0.ESC + \"P1$r\" + pt + EscapeSequences_1.C0.ESC + \"\\\\\");\n            case 'm':\n                return this._terminal.handler(EscapeSequences_1.C0.ESC + \"P1$r0m\" + EscapeSequences_1.C0.ESC + \"\\\\\");\n            case ' q':\n                var STYLES = { 'block': 2, 'underline': 4, 'bar': 6 };\n                var style = STYLES[this._terminal.getOption('cursorStyle')];\n                style -= this._terminal.getOption('cursorBlink');\n                return this._terminal.handler(EscapeSequences_1.C0.ESC + \"P1$r\" + style + \" q\" + EscapeSequences_1.C0.ESC + \"\\\\\");\n            default:\n                this._terminal.error('Unknown DCS $q %s', data);\n                this._terminal.handler(EscapeSequences_1.C0.ESC + \"P0$r\" + EscapeSequences_1.C0.ESC + \"\\\\\");\n        }\n    };\n    return DECRQSS;\n}());\nvar InputHandler = (function (_super) {\n    __extends(InputHandler, _super);\n    function InputHandler(_terminal, _parser) {\n        if (_parser === void 0) { _parser = new EscapeSequenceParser_1.EscapeSequenceParser(); }\n        var _this = _super.call(this) || this;\n        _this._terminal = _terminal;\n        _this._parser = _parser;\n        _this._parseBuffer = new Uint32Array(4096);\n        _this._stringDecoder = new TextDecoder_1.StringToUtf32();\n        _this._utf8Decoder = new TextDecoder_1.Utf8ToUtf32();\n        _this._workCell = new BufferLine_1.CellData();\n        _this._onCursorMove = new EventEmitter2_1.EventEmitter2();\n        _this._onData = new EventEmitter2_1.EventEmitter2();\n        _this._onLineFeed = new EventEmitter2_1.EventEmitter2();\n        _this._onScroll = new EventEmitter2_1.EventEmitter2();\n        _this.register(_this._parser);\n        _this._parser.setCsiHandlerFallback(function (collect, params, flag) {\n            _this._terminal.error('Unknown CSI code: ', { collect: collect, params: params, flag: String.fromCharCode(flag) });\n        });\n        _this._parser.setEscHandlerFallback(function (collect, flag) {\n            _this._terminal.error('Unknown ESC code: ', { collect: collect, flag: String.fromCharCode(flag) });\n        });\n        _this._parser.setExecuteHandlerFallback(function (code) {\n            _this._terminal.error('Unknown EXECUTE code: ', { code: code });\n        });\n        _this._parser.setOscHandlerFallback(function (identifier, data) {\n            _this._terminal.error('Unknown OSC code: ', { identifier: identifier, data: data });\n        });\n        _this._parser.setPrintHandler(function (data, start, end) { return _this.print(data, start, end); });\n        _this._parser.setCsiHandler('@', function (params, collect) { return _this.insertChars(params); });\n        _this._parser.setCsiHandler('A', function (params, collect) { return _this.cursorUp(params); });\n        _this._parser.setCsiHandler('B', function (params, collect) { return _this.cursorDown(params); });\n        _this._parser.setCsiHandler('C', function (params, collect) { return _this.cursorForward(params); });\n        _this._parser.setCsiHandler('D', function (params, collect) { return _this.cursorBackward(params); });\n        _this._parser.setCsiHandler('E', function (params, collect) { return _this.cursorNextLine(params); });\n        _this._parser.setCsiHandler('F', function (params, collect) { return _this.cursorPrecedingLine(params); });\n        _this._parser.setCsiHandler('G', function (params, collect) { return _this.cursorCharAbsolute(params); });\n        _this._parser.setCsiHandler('H', function (params, collect) { return _this.cursorPosition(params); });\n        _this._parser.setCsiHandler('I', function (params, collect) { return _this.cursorForwardTab(params); });\n        _this._parser.setCsiHandler('J', function (params, collect) { return _this.eraseInDisplay(params); });\n        _this._parser.setCsiHandler('K', function (params, collect) { return _this.eraseInLine(params); });\n        _this._parser.setCsiHandler('L', function (params, collect) { return _this.insertLines(params); });\n        _this._parser.setCsiHandler('M', function (params, collect) { return _this.deleteLines(params); });\n        _this._parser.setCsiHandler('P', function (params, collect) { return _this.deleteChars(params); });\n        _this._parser.setCsiHandler('S', function (params, collect) { return _this.scrollUp(params); });\n        _this._parser.setCsiHandler('T', function (params, collect) { return _this.scrollDown(params, collect); });\n        _this._parser.setCsiHandler('X', function (params, collect) { return _this.eraseChars(params); });\n        _this._parser.setCsiHandler('Z', function (params, collect) { return _this.cursorBackwardTab(params); });\n        _this._parser.setCsiHandler('`', function (params, collect) { return _this.charPosAbsolute(params); });\n        _this._parser.setCsiHandler('a', function (params, collect) { return _this.hPositionRelative(params); });\n        _this._parser.setCsiHandler('b', function (params, collect) { return _this.repeatPrecedingCharacter(params); });\n        _this._parser.setCsiHandler('c', function (params, collect) { return _this.sendDeviceAttributes(params, collect); });\n        _this._parser.setCsiHandler('d', function (params, collect) { return _this.linePosAbsolute(params); });\n        _this._parser.setCsiHandler('e', function (params, collect) { return _this.vPositionRelative(params); });\n        _this._parser.setCsiHandler('f', function (params, collect) { return _this.hVPosition(params); });\n        _this._parser.setCsiHandler('g', function (params, collect) { return _this.tabClear(params); });\n        _this._parser.setCsiHandler('h', function (params, collect) { return _this.setMode(params, collect); });\n        _this._parser.setCsiHandler('l', function (params, collect) { return _this.resetMode(params, collect); });\n        _this._parser.setCsiHandler('m', function (params, collect) { return _this.charAttributes(params); });\n        _this._parser.setCsiHandler('n', function (params, collect) { return _this.deviceStatus(params, collect); });\n        _this._parser.setCsiHandler('p', function (params, collect) { return _this.softReset(params, collect); });\n        _this._parser.setCsiHandler('q', function (params, collect) { return _this.setCursorStyle(params, collect); });\n        _this._parser.setCsiHandler('r', function (params, collect) { return _this.setScrollRegion(params, collect); });\n        _this._parser.setCsiHandler('s', function (params, collect) { return _this.saveCursor(params); });\n        _this._parser.setCsiHandler('u', function (params, collect) { return _this.restoreCursor(params); });\n        _this._parser.setExecuteHandler(EscapeSequences_1.C0.BEL, function () { return _this.bell(); });\n        _this._parser.setExecuteHandler(EscapeSequences_1.C0.LF, function () { return _this.lineFeed(); });\n        _this._parser.setExecuteHandler(EscapeSequences_1.C0.VT, function () { return _this.lineFeed(); });\n        _this._parser.setExecuteHandler(EscapeSequences_1.C0.FF, function () { return _this.lineFeed(); });\n        _this._parser.setExecuteHandler(EscapeSequences_1.C0.CR, function () { return _this.carriageReturn(); });\n        _this._parser.setExecuteHandler(EscapeSequences_1.C0.BS, function () { return _this.backspace(); });\n        _this._parser.setExecuteHandler(EscapeSequences_1.C0.HT, function () { return _this.tab(); });\n        _this._parser.setExecuteHandler(EscapeSequences_1.C0.SO, function () { return _this.shiftOut(); });\n        _this._parser.setExecuteHandler(EscapeSequences_1.C0.SI, function () { return _this.shiftIn(); });\n        _this._parser.setExecuteHandler(EscapeSequences_1.C1.IND, function () { return _this.index(); });\n        _this._parser.setExecuteHandler(EscapeSequences_1.C1.NEL, function () { return _this.nextLine(); });\n        _this._parser.setExecuteHandler(EscapeSequences_1.C1.HTS, function () { return _this.tabSet(); });\n        _this._parser.setOscHandler(0, function (data) { return _this.setTitle(data); });\n        _this._parser.setOscHandler(2, function (data) { return _this.setTitle(data); });\n        _this._parser.setEscHandler('7', function () { return _this.saveCursor([]); });\n        _this._parser.setEscHandler('8', function () { return _this.restoreCursor([]); });\n        _this._parser.setEscHandler('D', function () { return _this.index(); });\n        _this._parser.setEscHandler('E', function () { return _this.nextLine(); });\n        _this._parser.setEscHandler('H', function () { return _this.tabSet(); });\n        _this._parser.setEscHandler('M', function () { return _this.reverseIndex(); });\n        _this._parser.setEscHandler('=', function () { return _this.keypadApplicationMode(); });\n        _this._parser.setEscHandler('>', function () { return _this.keypadNumericMode(); });\n        _this._parser.setEscHandler('c', function () { return _this.reset(); });\n        _this._parser.setEscHandler('n', function () { return _this.setgLevel(2); });\n        _this._parser.setEscHandler('o', function () { return _this.setgLevel(3); });\n        _this._parser.setEscHandler('|', function () { return _this.setgLevel(3); });\n        _this._parser.setEscHandler('}', function () { return _this.setgLevel(2); });\n        _this._parser.setEscHandler('~', function () { return _this.setgLevel(1); });\n        _this._parser.setEscHandler('%@', function () { return _this.selectDefaultCharset(); });\n        _this._parser.setEscHandler('%G', function () { return _this.selectDefaultCharset(); });\n        var _loop_1 = function (flag) {\n            this_1._parser.setEscHandler('(' + flag, function () { return _this.selectCharset('(' + flag); });\n            this_1._parser.setEscHandler(')' + flag, function () { return _this.selectCharset(')' + flag); });\n            this_1._parser.setEscHandler('*' + flag, function () { return _this.selectCharset('*' + flag); });\n            this_1._parser.setEscHandler('+' + flag, function () { return _this.selectCharset('+' + flag); });\n            this_1._parser.setEscHandler('-' + flag, function () { return _this.selectCharset('-' + flag); });\n            this_1._parser.setEscHandler('.' + flag, function () { return _this.selectCharset('.' + flag); });\n            this_1._parser.setEscHandler('/' + flag, function () { return _this.selectCharset('/' + flag); });\n        };\n        var this_1 = this;\n        for (var flag in Charsets_1.CHARSETS) {\n            _loop_1(flag);\n        }\n        _this._parser.setErrorHandler(function (state) {\n            _this._terminal.error('Parsing error: ', state);\n            return state;\n        });\n        _this._parser.setDcsHandler('$q', new DECRQSS(_this._terminal));\n        return _this;\n    }\n    Object.defineProperty(InputHandler.prototype, \"onCursorMove\", {\n        get: function () { return this._onCursorMove.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(InputHandler.prototype, \"onData\", {\n        get: function () { return this._onData.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(InputHandler.prototype, \"onLineFeed\", {\n        get: function () { return this._onLineFeed.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(InputHandler.prototype, \"onScroll\", {\n        get: function () { return this._onScroll.event; },\n        enumerable: true,\n        configurable: true\n    });\n    InputHandler.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._terminal = null;\n    };\n    InputHandler.prototype.parse = function (data) {\n        if (!this._terminal) {\n            return;\n        }\n        var buffer = this._terminal.buffer;\n        var cursorStartX = buffer.x;\n        var cursorStartY = buffer.y;\n        if (this._terminal.debug) {\n            this._terminal.log('data: ' + data);\n        }\n        if (this._parseBuffer.length < data.length) {\n            this._parseBuffer = new Uint32Array(data.length);\n        }\n        this._parser.parse(this._parseBuffer, this._stringDecoder.decode(data, this._parseBuffer));\n        buffer = this._terminal.buffer;\n        if (buffer.x !== cursorStartX || buffer.y !== cursorStartY) {\n            this._onCursorMove.fire();\n        }\n    };\n    InputHandler.prototype.parseUtf8 = function (data) {\n        if (!this._terminal) {\n            return;\n        }\n        var buffer = this._terminal.buffer;\n        var cursorStartX = buffer.x;\n        var cursorStartY = buffer.y;\n        if (this._terminal.debug) {\n            this._terminal.log('data: ' + data);\n        }\n        if (this._parseBuffer.length < data.length) {\n            this._parseBuffer = new Uint32Array(data.length);\n        }\n        this._parser.parse(this._parseBuffer, this._utf8Decoder.decode(data, this._parseBuffer));\n        buffer = this._terminal.buffer;\n        if (buffer.x !== cursorStartX || buffer.y !== cursorStartY) {\n            this._terminal.emit('cursormove');\n        }\n    };\n    InputHandler.prototype.print = function (data, start, end) {\n        var code;\n        var chWidth;\n        var buffer = this._terminal.buffer;\n        var charset = this._terminal.charset;\n        var screenReaderMode = this._terminal.options.screenReaderMode;\n        var cols = this._terminal.cols;\n        var wraparoundMode = this._terminal.wraparoundMode;\n        var insertMode = this._terminal.insertMode;\n        var curAttr = this._terminal.curAttrData;\n        var bufferRow = buffer.lines.get(buffer.y + buffer.ybase);\n        this._terminal.updateRange(buffer.y);\n        for (var pos = start; pos < end; ++pos) {\n            code = data[pos];\n            chWidth = CharWidth_1.wcwidth(code);\n            if (code < 127 && charset) {\n                var ch = charset[String.fromCharCode(code)];\n                if (ch) {\n                    code = ch.charCodeAt(0);\n                }\n            }\n            if (screenReaderMode) {\n                this._terminal.emit('a11y.char', TextDecoder_1.stringFromCodePoint(code));\n            }\n            if (!chWidth && buffer.x) {\n                if (!bufferRow.getWidth(buffer.x - 1)) {\n                    bufferRow.addCodepointToCell(buffer.x - 2, code);\n                }\n                else {\n                    bufferRow.addCodepointToCell(buffer.x - 1, code);\n                }\n                continue;\n            }\n            if (buffer.x + chWidth - 1 >= cols) {\n                if (wraparoundMode) {\n                    buffer.x = 0;\n                    buffer.y++;\n                    if (buffer.y > buffer.scrollBottom) {\n                        buffer.y--;\n                        this._terminal.scroll(true);\n                    }\n                    else {\n                        buffer.lines.get(buffer.y).isWrapped = true;\n                    }\n                    bufferRow = buffer.lines.get(buffer.y + buffer.ybase);\n                }\n                else {\n                    if (chWidth === 2) {\n                        continue;\n                    }\n                }\n            }\n            if (insertMode) {\n                bufferRow.insertCells(buffer.x, chWidth, buffer.getNullCell(curAttr));\n                if (bufferRow.getWidth(cols - 1) === 2) {\n                    bufferRow.setCellFromCodePoint(cols - 1, BufferLine_1.NULL_CELL_CODE, BufferLine_1.NULL_CELL_WIDTH, curAttr.fg, curAttr.bg);\n                }\n            }\n            bufferRow.setCellFromCodePoint(buffer.x++, code, chWidth, curAttr.fg, curAttr.bg);\n            if (chWidth > 0) {\n                while (--chWidth) {\n                    bufferRow.setCellFromCodePoint(buffer.x++, 0, 0, curAttr.fg, curAttr.bg);\n                }\n            }\n        }\n        this._terminal.updateRange(buffer.y);\n    };\n    InputHandler.prototype.addCsiHandler = function (flag, callback) {\n        return this._parser.addCsiHandler(flag, callback);\n    };\n    InputHandler.prototype.addOscHandler = function (ident, callback) {\n        return this._parser.addOscHandler(ident, callback);\n    };\n    InputHandler.prototype.bell = function () {\n        this._terminal.bell();\n    };\n    InputHandler.prototype.lineFeed = function () {\n        var buffer = this._terminal.buffer;\n        if (this._terminal.options.convertEol) {\n            buffer.x = 0;\n        }\n        buffer.y++;\n        if (buffer.y > buffer.scrollBottom) {\n            buffer.y--;\n            this._terminal.scroll();\n        }\n        if (buffer.x >= this._terminal.cols) {\n            buffer.x--;\n        }\n        this._onLineFeed.fire();\n    };\n    InputHandler.prototype.carriageReturn = function () {\n        this._terminal.buffer.x = 0;\n    };\n    InputHandler.prototype.backspace = function () {\n        if (this._terminal.buffer.x > 0) {\n            this._terminal.buffer.x--;\n        }\n    };\n    InputHandler.prototype.tab = function () {\n        var originalX = this._terminal.buffer.x;\n        this._terminal.buffer.x = this._terminal.buffer.nextStop();\n        if (this._terminal.options.screenReaderMode) {\n            this._terminal.emit('a11y.tab', this._terminal.buffer.x - originalX);\n        }\n    };\n    InputHandler.prototype.shiftOut = function () {\n        this._terminal.setgLevel(1);\n    };\n    InputHandler.prototype.shiftIn = function () {\n        this._terminal.setgLevel(0);\n    };\n    InputHandler.prototype.insertChars = function (params) {\n        this._terminal.buffer.lines.get(this._terminal.buffer.y + this._terminal.buffer.ybase).insertCells(this._terminal.buffer.x, params[0] || 1, this._terminal.buffer.getNullCell(this._terminal.eraseAttrData()));\n        this._terminal.updateRange(this._terminal.buffer.y);\n    };\n    InputHandler.prototype.cursorUp = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.buffer.y -= param;\n        if (this._terminal.buffer.y < 0) {\n            this._terminal.buffer.y = 0;\n        }\n    };\n    InputHandler.prototype.cursorDown = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.buffer.y += param;\n        if (this._terminal.buffer.y >= this._terminal.rows) {\n            this._terminal.buffer.y = this._terminal.rows - 1;\n        }\n        if (this._terminal.buffer.x >= this._terminal.cols) {\n            this._terminal.buffer.x--;\n        }\n    };\n    InputHandler.prototype.cursorForward = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.buffer.x += param;\n        if (this._terminal.buffer.x >= this._terminal.cols) {\n            this._terminal.buffer.x = this._terminal.cols - 1;\n        }\n    };\n    InputHandler.prototype.cursorBackward = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        if (this._terminal.buffer.x >= this._terminal.cols) {\n            this._terminal.buffer.x--;\n        }\n        this._terminal.buffer.x -= param;\n        if (this._terminal.buffer.x < 0) {\n            this._terminal.buffer.x = 0;\n        }\n    };\n    InputHandler.prototype.cursorNextLine = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.buffer.y += param;\n        if (this._terminal.buffer.y >= this._terminal.rows) {\n            this._terminal.buffer.y = this._terminal.rows - 1;\n        }\n        this._terminal.buffer.x = 0;\n    };\n    InputHandler.prototype.cursorPrecedingLine = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.buffer.y -= param;\n        if (this._terminal.buffer.y < 0) {\n            this._terminal.buffer.y = 0;\n        }\n        this._terminal.buffer.x = 0;\n    };\n    InputHandler.prototype.cursorCharAbsolute = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.buffer.x = param - 1;\n    };\n    InputHandler.prototype.cursorPosition = function (params) {\n        var col;\n        var row = params[0] - 1;\n        if (params.length >= 2) {\n            col = params[1] - 1;\n        }\n        else {\n            col = 0;\n        }\n        if (row < 0) {\n            row = 0;\n        }\n        else if (row >= this._terminal.rows) {\n            row = this._terminal.rows - 1;\n        }\n        if (col < 0) {\n            col = 0;\n        }\n        else if (col >= this._terminal.cols) {\n            col = this._terminal.cols - 1;\n        }\n        this._terminal.buffer.x = col;\n        this._terminal.buffer.y = row;\n    };\n    InputHandler.prototype.cursorForwardTab = function (params) {\n        var param = params[0] || 1;\n        while (param--) {\n            this._terminal.buffer.x = this._terminal.buffer.nextStop();\n        }\n    };\n    InputHandler.prototype._eraseInBufferLine = function (y, start, end, clearWrap) {\n        if (clearWrap === void 0) { clearWrap = false; }\n        var line = this._terminal.buffer.lines.get(this._terminal.buffer.ybase + y);\n        line.replaceCells(start, end, this._terminal.buffer.getNullCell(this._terminal.eraseAttrData()));\n        if (clearWrap) {\n            line.isWrapped = false;\n        }\n    };\n    InputHandler.prototype._resetBufferLine = function (y) {\n        this._eraseInBufferLine(y, 0, this._terminal.cols, true);\n    };\n    InputHandler.prototype.eraseInDisplay = function (params) {\n        var j;\n        switch (params[0]) {\n            case 0:\n                j = this._terminal.buffer.y;\n                this._terminal.updateRange(j);\n                this._eraseInBufferLine(j++, this._terminal.buffer.x, this._terminal.cols, this._terminal.buffer.x === 0);\n                for (; j < this._terminal.rows; j++) {\n                    this._resetBufferLine(j);\n                }\n                this._terminal.updateRange(j);\n                break;\n            case 1:\n                j = this._terminal.buffer.y;\n                this._terminal.updateRange(j);\n                this._eraseInBufferLine(j, 0, this._terminal.buffer.x + 1, true);\n                if (this._terminal.buffer.x + 1 >= this._terminal.cols) {\n                    this._terminal.buffer.lines.get(j + 1).isWrapped = false;\n                }\n                while (j--) {\n                    this._resetBufferLine(j);\n                }\n                this._terminal.updateRange(0);\n                break;\n            case 2:\n                j = this._terminal.rows;\n                this._terminal.updateRange(j - 1);\n                while (j--) {\n                    this._resetBufferLine(j);\n                }\n                this._terminal.updateRange(0);\n                break;\n            case 3:\n                var scrollBackSize = this._terminal.buffer.lines.length - this._terminal.rows;\n                if (scrollBackSize > 0) {\n                    this._terminal.buffer.lines.trimStart(scrollBackSize);\n                    this._terminal.buffer.ybase = Math.max(this._terminal.buffer.ybase - scrollBackSize, 0);\n                    this._terminal.buffer.ydisp = Math.max(this._terminal.buffer.ydisp - scrollBackSize, 0);\n                    this._onScroll.fire(0);\n                }\n                break;\n        }\n    };\n    InputHandler.prototype.eraseInLine = function (params) {\n        switch (params[0]) {\n            case 0:\n                this._eraseInBufferLine(this._terminal.buffer.y, this._terminal.buffer.x, this._terminal.cols);\n                break;\n            case 1:\n                this._eraseInBufferLine(this._terminal.buffer.y, 0, this._terminal.buffer.x + 1);\n                break;\n            case 2:\n                this._eraseInBufferLine(this._terminal.buffer.y, 0, this._terminal.cols);\n                break;\n        }\n        this._terminal.updateRange(this._terminal.buffer.y);\n    };\n    InputHandler.prototype.insertLines = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        var buffer = this._terminal.buffer;\n        var row = buffer.y + buffer.ybase;\n        var scrollBottomRowsOffset = this._terminal.rows - 1 - buffer.scrollBottom;\n        var scrollBottomAbsolute = this._terminal.rows - 1 + buffer.ybase - scrollBottomRowsOffset + 1;\n        while (param--) {\n            buffer.lines.splice(scrollBottomAbsolute - 1, 1);\n            buffer.lines.splice(row, 0, buffer.getBlankLine(this._terminal.eraseAttrData()));\n        }\n        this._terminal.updateRange(buffer.y);\n        this._terminal.updateRange(buffer.scrollBottom);\n    };\n    InputHandler.prototype.deleteLines = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        var buffer = this._terminal.buffer;\n        var row = buffer.y + buffer.ybase;\n        var j;\n        j = this._terminal.rows - 1 - buffer.scrollBottom;\n        j = this._terminal.rows - 1 + buffer.ybase - j;\n        while (param--) {\n            buffer.lines.splice(row, 1);\n            buffer.lines.splice(j, 0, buffer.getBlankLine(this._terminal.eraseAttrData()));\n        }\n        this._terminal.updateRange(buffer.y);\n        this._terminal.updateRange(buffer.scrollBottom);\n    };\n    InputHandler.prototype.deleteChars = function (params) {\n        this._terminal.buffer.lines.get(this._terminal.buffer.y + this._terminal.buffer.ybase).deleteCells(this._terminal.buffer.x, params[0] || 1, this._terminal.buffer.getNullCell(this._terminal.eraseAttrData()));\n        this._terminal.updateRange(this._terminal.buffer.y);\n    };\n    InputHandler.prototype.scrollUp = function (params) {\n        var param = params[0] || 1;\n        var buffer = this._terminal.buffer;\n        while (param--) {\n            buffer.lines.splice(buffer.ybase + buffer.scrollTop, 1);\n            buffer.lines.splice(buffer.ybase + buffer.scrollBottom, 0, buffer.getBlankLine(BufferLine_1.DEFAULT_ATTR_DATA));\n        }\n        this._terminal.updateRange(buffer.scrollTop);\n        this._terminal.updateRange(buffer.scrollBottom);\n    };\n    InputHandler.prototype.scrollDown = function (params, collect) {\n        if (params.length < 2 && !collect) {\n            var param = params[0] || 1;\n            var buffer = this._terminal.buffer;\n            while (param--) {\n                buffer.lines.splice(buffer.ybase + buffer.scrollBottom, 1);\n                buffer.lines.splice(buffer.ybase + buffer.scrollTop, 0, buffer.getBlankLine(BufferLine_1.DEFAULT_ATTR_DATA));\n            }\n            this._terminal.updateRange(buffer.scrollTop);\n            this._terminal.updateRange(buffer.scrollBottom);\n        }\n    };\n    InputHandler.prototype.eraseChars = function (params) {\n        this._terminal.buffer.lines.get(this._terminal.buffer.y + this._terminal.buffer.ybase).replaceCells(this._terminal.buffer.x, this._terminal.buffer.x + (params[0] || 1), this._terminal.buffer.getNullCell(this._terminal.eraseAttrData()));\n    };\n    InputHandler.prototype.cursorBackwardTab = function (params) {\n        var param = params[0] || 1;\n        var buffer = this._terminal.buffer;\n        while (param--) {\n            buffer.x = buffer.prevStop();\n        }\n    };\n    InputHandler.prototype.charPosAbsolute = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.buffer.x = param - 1;\n        if (this._terminal.buffer.x >= this._terminal.cols) {\n            this._terminal.buffer.x = this._terminal.cols - 1;\n        }\n    };\n    InputHandler.prototype.hPositionRelative = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.buffer.x += param;\n        if (this._terminal.buffer.x >= this._terminal.cols) {\n            this._terminal.buffer.x = this._terminal.cols - 1;\n        }\n    };\n    InputHandler.prototype.repeatPrecedingCharacter = function (params) {\n        var buffer = this._terminal.buffer;\n        var line = buffer.lines.get(buffer.ybase + buffer.y);\n        line.loadCell(buffer.x - 1, this._workCell);\n        line.replaceCells(buffer.x, buffer.x + (params[0] || 1), (this._workCell.content !== undefined) ? this._workCell : buffer.getNullCell(BufferLine_1.DEFAULT_ATTR_DATA));\n    };\n    InputHandler.prototype.sendDeviceAttributes = function (params, collect) {\n        if (params[0] > 0) {\n            return;\n        }\n        if (!collect) {\n            if (this._terminal.is('xterm') || this._terminal.is('rxvt-unicode') || this._terminal.is('screen')) {\n                this._terminal.handler(EscapeSequences_1.C0.ESC + '[?1;2c');\n            }\n            else if (this._terminal.is('linux')) {\n                this._terminal.handler(EscapeSequences_1.C0.ESC + '[?6c');\n            }\n        }\n        else if (collect === '>') {\n            if (this._terminal.is('xterm')) {\n                this._terminal.handler(EscapeSequences_1.C0.ESC + '[>0;276;0c');\n            }\n            else if (this._terminal.is('rxvt-unicode')) {\n                this._terminal.handler(EscapeSequences_1.C0.ESC + '[>85;95;0c');\n            }\n            else if (this._terminal.is('linux')) {\n                this._terminal.handler(params[0] + 'c');\n            }\n            else if (this._terminal.is('screen')) {\n                this._terminal.handler(EscapeSequences_1.C0.ESC + '[>83;40003;0c');\n            }\n        }\n    };\n    InputHandler.prototype.linePosAbsolute = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.buffer.y = param - 1;\n        if (this._terminal.buffer.y >= this._terminal.rows) {\n            this._terminal.buffer.y = this._terminal.rows - 1;\n        }\n    };\n    InputHandler.prototype.vPositionRelative = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.buffer.y += param;\n        if (this._terminal.buffer.y >= this._terminal.rows) {\n            this._terminal.buffer.y = this._terminal.rows - 1;\n        }\n        if (this._terminal.buffer.x >= this._terminal.cols) {\n            this._terminal.buffer.x--;\n        }\n    };\n    InputHandler.prototype.hVPosition = function (params) {\n        if (params[0] < 1)\n            params[0] = 1;\n        if (params[1] < 1)\n            params[1] = 1;\n        this._terminal.buffer.y = params[0] - 1;\n        if (this._terminal.buffer.y >= this._terminal.rows) {\n            this._terminal.buffer.y = this._terminal.rows - 1;\n        }\n        this._terminal.buffer.x = params[1] - 1;\n        if (this._terminal.buffer.x >= this._terminal.cols) {\n            this._terminal.buffer.x = this._terminal.cols - 1;\n        }\n    };\n    InputHandler.prototype.tabClear = function (params) {\n        var param = params[0];\n        if (param <= 0) {\n            delete this._terminal.buffer.tabs[this._terminal.buffer.x];\n        }\n        else if (param === 3) {\n            this._terminal.buffer.tabs = {};\n        }\n    };\n    InputHandler.prototype.setMode = function (params, collect) {\n        if (params.length > 1) {\n            for (var i = 0; i < params.length; i++) {\n                this.setMode([params[i]]);\n            }\n            return;\n        }\n        if (!collect) {\n            switch (params[0]) {\n                case 4:\n                    this._terminal.insertMode = true;\n                    break;\n                case 20:\n                    break;\n            }\n        }\n        else if (collect === '?') {\n            switch (params[0]) {\n                case 1:\n                    this._terminal.applicationCursor = true;\n                    break;\n                case 2:\n                    this._terminal.setgCharset(0, Charsets_1.DEFAULT_CHARSET);\n                    this._terminal.setgCharset(1, Charsets_1.DEFAULT_CHARSET);\n                    this._terminal.setgCharset(2, Charsets_1.DEFAULT_CHARSET);\n                    this._terminal.setgCharset(3, Charsets_1.DEFAULT_CHARSET);\n                    break;\n                case 3:\n                    this._terminal.savedCols = this._terminal.cols;\n                    this._terminal.resize(132, this._terminal.rows);\n                    break;\n                case 6:\n                    this._terminal.originMode = true;\n                    break;\n                case 7:\n                    this._terminal.wraparoundMode = true;\n                    break;\n                case 12:\n                    break;\n                case 66:\n                    this._terminal.log('Serial port requested application keypad.');\n                    this._terminal.applicationKeypad = true;\n                    if (this._terminal.viewport) {\n                        this._terminal.viewport.syncScrollArea();\n                    }\n                    break;\n                case 9:\n                case 1000:\n                case 1002:\n                case 1003:\n                    this._terminal.x10Mouse = params[0] === 9;\n                    this._terminal.vt200Mouse = params[0] === 1000;\n                    this._terminal.normalMouse = params[0] > 1000;\n                    this._terminal.mouseEvents = true;\n                    if (this._terminal.element) {\n                        this._terminal.element.classList.add('enable-mouse-events');\n                    }\n                    if (this._terminal.selectionManager) {\n                        this._terminal.selectionManager.disable();\n                    }\n                    this._terminal.log('Binding to mouse events.');\n                    break;\n                case 1004:\n                    this._terminal.sendFocus = true;\n                    break;\n                case 1005:\n                    this._terminal.utfMouse = true;\n                    break;\n                case 1006:\n                    this._terminal.sgrMouse = true;\n                    break;\n                case 1015:\n                    this._terminal.urxvtMouse = true;\n                    break;\n                case 25:\n                    this._terminal.cursorHidden = false;\n                    break;\n                case 1048:\n                    this.saveCursor(params);\n                    break;\n                case 1049:\n                    this.saveCursor(params);\n                case 47:\n                case 1047:\n                    this._terminal.buffers.activateAltBuffer(this._terminal.eraseAttrData());\n                    this._terminal.refresh(0, this._terminal.rows - 1);\n                    if (this._terminal.viewport) {\n                        this._terminal.viewport.syncScrollArea();\n                    }\n                    this._terminal.showCursor();\n                    break;\n                case 2004:\n                    this._terminal.bracketedPasteMode = true;\n                    break;\n            }\n        }\n    };\n    InputHandler.prototype.resetMode = function (params, collect) {\n        if (params.length > 1) {\n            for (var i = 0; i < params.length; i++) {\n                this.resetMode([params[i]]);\n            }\n            return;\n        }\n        if (!collect) {\n            switch (params[0]) {\n                case 4:\n                    this._terminal.insertMode = false;\n                    break;\n                case 20:\n                    break;\n            }\n        }\n        else if (collect === '?') {\n            switch (params[0]) {\n                case 1:\n                    this._terminal.applicationCursor = false;\n                    break;\n                case 3:\n                    if (this._terminal.cols === 132 && this._terminal.savedCols) {\n                        this._terminal.resize(this._terminal.savedCols, this._terminal.rows);\n                    }\n                    delete this._terminal.savedCols;\n                    break;\n                case 6:\n                    this._terminal.originMode = false;\n                    break;\n                case 7:\n                    this._terminal.wraparoundMode = false;\n                    break;\n                case 12:\n                    break;\n                case 66:\n                    this._terminal.log('Switching back to normal keypad.');\n                    this._terminal.applicationKeypad = false;\n                    if (this._terminal.viewport) {\n                        this._terminal.viewport.syncScrollArea();\n                    }\n                    break;\n                case 9:\n                case 1000:\n                case 1002:\n                case 1003:\n                    this._terminal.x10Mouse = false;\n                    this._terminal.vt200Mouse = false;\n                    this._terminal.normalMouse = false;\n                    this._terminal.mouseEvents = false;\n                    if (this._terminal.element) {\n                        this._terminal.element.classList.remove('enable-mouse-events');\n                    }\n                    if (this._terminal.selectionManager) {\n                        this._terminal.selectionManager.enable();\n                    }\n                    break;\n                case 1004:\n                    this._terminal.sendFocus = false;\n                    break;\n                case 1005:\n                    this._terminal.utfMouse = false;\n                    break;\n                case 1006:\n                    this._terminal.sgrMouse = false;\n                    break;\n                case 1015:\n                    this._terminal.urxvtMouse = false;\n                    break;\n                case 25:\n                    this._terminal.cursorHidden = true;\n                    break;\n                case 1048:\n                    this.restoreCursor(params);\n                    break;\n                case 1049:\n                case 47:\n                case 1047:\n                    this._terminal.buffers.activateNormalBuffer();\n                    if (params[0] === 1049) {\n                        this.restoreCursor(params);\n                    }\n                    this._terminal.refresh(0, this._terminal.rows - 1);\n                    if (this._terminal.viewport) {\n                        this._terminal.viewport.syncScrollArea();\n                    }\n                    this._terminal.showCursor();\n                    break;\n                case 2004:\n                    this._terminal.bracketedPasteMode = false;\n                    break;\n            }\n        }\n    };\n    InputHandler.prototype.charAttributes = function (params) {\n        if (params.length === 1 && params[0] === 0) {\n            this._terminal.curAttrData.fg = BufferLine_1.DEFAULT_ATTR_DATA.fg;\n            this._terminal.curAttrData.bg = BufferLine_1.DEFAULT_ATTR_DATA.bg;\n            return;\n        }\n        var l = params.length;\n        var p;\n        var attr = this._terminal.curAttrData;\n        for (var i = 0; i < l; i++) {\n            p = params[i];\n            if (p >= 30 && p <= 37) {\n                attr.fg &= ~(50331648 | 255);\n                attr.fg |= 16777216 | (p - 30);\n            }\n            else if (p >= 40 && p <= 47) {\n                attr.bg &= ~(50331648 | 255);\n                attr.bg |= 16777216 | (p - 40);\n            }\n            else if (p >= 90 && p <= 97) {\n                attr.fg &= ~(50331648 | 255);\n                attr.fg |= 16777216 | (p - 90) | 8;\n            }\n            else if (p >= 100 && p <= 107) {\n                attr.bg &= ~(50331648 | 255);\n                attr.bg |= 16777216 | (p - 100) | 8;\n            }\n            else if (p === 0) {\n                attr.fg = BufferLine_1.DEFAULT_ATTR_DATA.fg;\n                attr.bg = BufferLine_1.DEFAULT_ATTR_DATA.bg;\n            }\n            else if (p === 1) {\n                attr.fg |= 134217728;\n            }\n            else if (p === 3) {\n                attr.bg |= 67108864;\n            }\n            else if (p === 4) {\n                attr.fg |= 268435456;\n            }\n            else if (p === 5) {\n                attr.fg |= 536870912;\n            }\n            else if (p === 7) {\n                attr.fg |= 67108864;\n            }\n            else if (p === 8) {\n                attr.fg |= 1073741824;\n            }\n            else if (p === 2) {\n                attr.bg |= 134217728;\n            }\n            else if (p === 22) {\n                attr.fg &= ~134217728;\n                attr.bg &= ~134217728;\n            }\n            else if (p === 23) {\n                attr.bg &= ~67108864;\n            }\n            else if (p === 24) {\n                attr.fg &= ~268435456;\n            }\n            else if (p === 25) {\n                attr.fg &= ~536870912;\n            }\n            else if (p === 27) {\n                attr.fg &= ~67108864;\n            }\n            else if (p === 28) {\n                attr.fg &= ~1073741824;\n            }\n            else if (p === 39) {\n                attr.fg &= ~(50331648 | 16777215);\n                attr.fg |= BufferLine_1.DEFAULT_ATTR_DATA.fg & (255 | 16777215);\n            }\n            else if (p === 49) {\n                attr.bg &= ~(50331648 | 16777215);\n                attr.bg |= BufferLine_1.DEFAULT_ATTR_DATA.bg & (255 | 16777215);\n            }\n            else if (p === 38) {\n                if (params[i + 1] === 2) {\n                    i += 2;\n                    attr.fg |= 50331648;\n                    attr.fg &= ~16777215;\n                    attr.fg |= BufferLine_1.AttributeData.fromColorRGB([params[i], params[i + 1], params[i + 2]]);\n                    i += 2;\n                }\n                else if (params[i + 1] === 5) {\n                    i += 2;\n                    p = params[i] & 0xff;\n                    attr.fg &= ~(50331648 | 255);\n                    attr.fg |= 33554432 | p;\n                }\n            }\n            else if (p === 48) {\n                if (params[i + 1] === 2) {\n                    i += 2;\n                    attr.bg |= 50331648;\n                    attr.bg &= ~16777215;\n                    attr.bg |= BufferLine_1.AttributeData.fromColorRGB([params[i], params[i + 1], params[i + 2]]);\n                    i += 2;\n                }\n                else if (params[i + 1] === 5) {\n                    i += 2;\n                    p = params[i] & 0xff;\n                    attr.bg &= ~(50331648 | 255);\n                    attr.bg |= 33554432 | p;\n                }\n            }\n            else if (p === 100) {\n                attr.fg &= ~(50331648 | 16777215);\n                attr.fg |= BufferLine_1.DEFAULT_ATTR_DATA.fg & (255 | 16777215);\n                attr.bg &= ~(50331648 | 16777215);\n                attr.bg |= BufferLine_1.DEFAULT_ATTR_DATA.bg & (255 | 16777215);\n            }\n            else {\n                this._terminal.error('Unknown SGR attribute: %d.', p);\n            }\n        }\n    };\n    InputHandler.prototype.deviceStatus = function (params, collect) {\n        if (!collect) {\n            switch (params[0]) {\n                case 5:\n                    this._onData.fire(EscapeSequences_1.C0.ESC + \"[0n\");\n                    break;\n                case 6:\n                    var y = this._terminal.buffer.y + 1;\n                    var x = this._terminal.buffer.x + 1;\n                    this._onData.fire(EscapeSequences_1.C0.ESC + \"[\" + y + \";\" + x + \"R\");\n                    break;\n            }\n        }\n        else if (collect === '?') {\n            switch (params[0]) {\n                case 6:\n                    var y = this._terminal.buffer.y + 1;\n                    var x = this._terminal.buffer.x + 1;\n                    this._onData.fire(EscapeSequences_1.C0.ESC + \"[?\" + y + \";\" + x + \"R\");\n                    break;\n                case 15:\n                    break;\n                case 25:\n                    break;\n                case 26:\n                    break;\n                case 53:\n                    break;\n            }\n        }\n    };\n    InputHandler.prototype.softReset = function (params, collect) {\n        if (collect === '!') {\n            this._terminal.cursorHidden = false;\n            this._terminal.insertMode = false;\n            this._terminal.originMode = false;\n            this._terminal.wraparoundMode = true;\n            this._terminal.applicationKeypad = false;\n            if (this._terminal.viewport) {\n                this._terminal.viewport.syncScrollArea();\n            }\n            this._terminal.applicationCursor = false;\n            this._terminal.buffer.scrollTop = 0;\n            this._terminal.buffer.scrollBottom = this._terminal.rows - 1;\n            this._terminal.curAttrData = BufferLine_1.DEFAULT_ATTR_DATA.clone();\n            this._terminal.buffer.x = this._terminal.buffer.y = 0;\n            this._terminal.charset = null;\n            this._terminal.glevel = 0;\n            this._terminal.charsets = [null];\n        }\n    };\n    InputHandler.prototype.setCursorStyle = function (params, collect) {\n        if (collect === ' ') {\n            var param = params[0] < 1 ? 1 : params[0];\n            switch (param) {\n                case 1:\n                case 2:\n                    this._terminal.setOption('cursorStyle', 'block');\n                    break;\n                case 3:\n                case 4:\n                    this._terminal.setOption('cursorStyle', 'underline');\n                    break;\n                case 5:\n                case 6:\n                    this._terminal.setOption('cursorStyle', 'bar');\n                    break;\n            }\n            var isBlinking = param % 2 === 1;\n            this._terminal.setOption('cursorBlink', isBlinking);\n        }\n    };\n    InputHandler.prototype.setScrollRegion = function (params, collect) {\n        if (collect) {\n            return;\n        }\n        this._terminal.buffer.scrollTop = (params[0] || 1) - 1;\n        this._terminal.buffer.scrollBottom = (params[1] && params[1] <= this._terminal.rows ? params[1] : this._terminal.rows) - 1;\n        this._terminal.buffer.x = 0;\n        this._terminal.buffer.y = 0;\n    };\n    InputHandler.prototype.saveCursor = function (params) {\n        this._terminal.buffer.savedX = this._terminal.buffer.x;\n        this._terminal.buffer.savedY = this._terminal.buffer.y;\n        this._terminal.buffer.savedCurAttrData.fg = this._terminal.curAttrData.fg;\n        this._terminal.buffer.savedCurAttrData.bg = this._terminal.curAttrData.bg;\n    };\n    InputHandler.prototype.restoreCursor = function (params) {\n        this._terminal.buffer.x = this._terminal.buffer.savedX || 0;\n        this._terminal.buffer.y = this._terminal.buffer.savedY || 0;\n        this._terminal.curAttrData.fg = this._terminal.buffer.savedCurAttrData.fg;\n        this._terminal.curAttrData.bg = this._terminal.buffer.savedCurAttrData.bg;\n    };\n    InputHandler.prototype.setTitle = function (data) {\n        this._terminal.handleTitle(data);\n    };\n    InputHandler.prototype.nextLine = function () {\n        this._terminal.buffer.x = 0;\n        this.index();\n    };\n    InputHandler.prototype.keypadApplicationMode = function () {\n        this._terminal.log('Serial port requested application keypad.');\n        this._terminal.applicationKeypad = true;\n        if (this._terminal.viewport) {\n            this._terminal.viewport.syncScrollArea();\n        }\n    };\n    InputHandler.prototype.keypadNumericMode = function () {\n        this._terminal.log('Switching back to normal keypad.');\n        this._terminal.applicationKeypad = false;\n        if (this._terminal.viewport) {\n            this._terminal.viewport.syncScrollArea();\n        }\n    };\n    InputHandler.prototype.selectDefaultCharset = function () {\n        this._terminal.setgLevel(0);\n        this._terminal.setgCharset(0, Charsets_1.DEFAULT_CHARSET);\n    };\n    InputHandler.prototype.selectCharset = function (collectAndFlag) {\n        if (collectAndFlag.length !== 2) {\n            this.selectDefaultCharset();\n            return;\n        }\n        if (collectAndFlag[0] === '/') {\n            return;\n        }\n        this._terminal.setgCharset(GLEVEL[collectAndFlag[0]], Charsets_1.CHARSETS[collectAndFlag[1]] || Charsets_1.DEFAULT_CHARSET);\n        return;\n    };\n    InputHandler.prototype.index = function () {\n        this._terminal.index();\n    };\n    InputHandler.prototype.tabSet = function () {\n        this._terminal.tabSet();\n    };\n    InputHandler.prototype.reverseIndex = function () {\n        this._terminal.reverseIndex();\n    };\n    InputHandler.prototype.reset = function () {\n        this._parser.reset();\n        this._terminal.reset();\n    };\n    InputHandler.prototype.setgLevel = function (level) {\n        this._terminal.setgLevel(level);\n    };\n    return InputHandler;\n}(Lifecycle_1.Disposable));\nexports.InputHandler = InputHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/InputHandler.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/Linkifier.js":
/*!*********************************************!*\
  !*** ./node_modules/xterm/lib/Linkifier.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MouseZoneManager_1 = __webpack_require__(/*! ./MouseZoneManager */ \"./node_modules/xterm/lib/MouseZoneManager.js\");\nvar CharWidth_1 = __webpack_require__(/*! ./CharWidth */ \"./node_modules/xterm/lib/CharWidth.js\");\nvar EventEmitter2_1 = __webpack_require__(/*! ./common/EventEmitter2 */ \"./node_modules/xterm/lib/common/EventEmitter2.js\");\nvar Linkifier = (function () {\n    function Linkifier(_terminal) {\n        this._terminal = _terminal;\n        this._linkMatchers = [];\n        this._nextLinkMatcherId = 0;\n        this._onLinkHover = new EventEmitter2_1.EventEmitter2();\n        this._onLinkLeave = new EventEmitter2_1.EventEmitter2();\n        this._onLinkTooltip = new EventEmitter2_1.EventEmitter2();\n        this._rowsToLinkify = {\n            start: null,\n            end: null\n        };\n    }\n    Object.defineProperty(Linkifier.prototype, \"onLinkHover\", {\n        get: function () { return this._onLinkHover.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Linkifier.prototype, \"onLinkLeave\", {\n        get: function () { return this._onLinkLeave.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Linkifier.prototype, \"onLinkTooltip\", {\n        get: function () { return this._onLinkTooltip.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Linkifier.prototype.attachToDom = function (mouseZoneManager) {\n        this._mouseZoneManager = mouseZoneManager;\n    };\n    Linkifier.prototype.linkifyRows = function (start, end) {\n        var _this = this;\n        if (!this._mouseZoneManager) {\n            return;\n        }\n        if (this._rowsToLinkify.start === null) {\n            this._rowsToLinkify.start = start;\n            this._rowsToLinkify.end = end;\n        }\n        else {\n            this._rowsToLinkify.start = Math.min(this._rowsToLinkify.start, start);\n            this._rowsToLinkify.end = Math.max(this._rowsToLinkify.end, end);\n        }\n        this._mouseZoneManager.clearAll(start, end);\n        if (this._rowsTimeoutId) {\n            clearTimeout(this._rowsTimeoutId);\n        }\n        this._rowsTimeoutId = setTimeout(function () { return _this._linkifyRows(); }, Linkifier.TIME_BEFORE_LINKIFY);\n    };\n    Linkifier.prototype._linkifyRows = function () {\n        this._rowsTimeoutId = null;\n        var buffer = this._terminal.buffer;\n        var absoluteRowIndexStart = buffer.ydisp + this._rowsToLinkify.start;\n        if (absoluteRowIndexStart >= buffer.lines.length) {\n            return;\n        }\n        var absoluteRowIndexEnd = buffer.ydisp + Math.min(this._rowsToLinkify.end, this._terminal.rows) + 1;\n        var overscanLineLimit = Math.ceil(Linkifier.OVERSCAN_CHAR_LIMIT / this._terminal.cols);\n        var iterator = this._terminal.buffer.iterator(false, absoluteRowIndexStart, absoluteRowIndexEnd, overscanLineLimit, overscanLineLimit);\n        while (iterator.hasNext()) {\n            var lineData = iterator.next();\n            for (var i = 0; i < this._linkMatchers.length; i++) {\n                this._doLinkifyRow(lineData.range.first, lineData.content, this._linkMatchers[i]);\n            }\n        }\n        this._rowsToLinkify.start = null;\n        this._rowsToLinkify.end = null;\n    };\n    Linkifier.prototype.registerLinkMatcher = function (regex, handler, options) {\n        if (options === void 0) { options = {}; }\n        if (!handler) {\n            throw new Error('handler must be defined');\n        }\n        var matcher = {\n            id: this._nextLinkMatcherId++,\n            regex: regex,\n            handler: handler,\n            matchIndex: options.matchIndex,\n            validationCallback: options.validationCallback,\n            hoverTooltipCallback: options.tooltipCallback,\n            hoverLeaveCallback: options.leaveCallback,\n            willLinkActivate: options.willLinkActivate,\n            priority: options.priority || 0\n        };\n        this._addLinkMatcherToList(matcher);\n        return matcher.id;\n    };\n    Linkifier.prototype._addLinkMatcherToList = function (matcher) {\n        if (this._linkMatchers.length === 0) {\n            this._linkMatchers.push(matcher);\n            return;\n        }\n        for (var i = this._linkMatchers.length - 1; i >= 0; i--) {\n            if (matcher.priority <= this._linkMatchers[i].priority) {\n                this._linkMatchers.splice(i + 1, 0, matcher);\n                return;\n            }\n        }\n        this._linkMatchers.splice(0, 0, matcher);\n    };\n    Linkifier.prototype.deregisterLinkMatcher = function (matcherId) {\n        for (var i = 0; i < this._linkMatchers.length; i++) {\n            if (this._linkMatchers[i].id === matcherId) {\n                this._linkMatchers.splice(i, 1);\n                return true;\n            }\n        }\n        return false;\n    };\n    Linkifier.prototype._doLinkifyRow = function (rowIndex, text, matcher) {\n        var _this = this;\n        var rex = new RegExp(matcher.regex.source, matcher.regex.flags + 'g');\n        var match;\n        var stringIndex = -1;\n        var _loop_1 = function () {\n            var uri = match[typeof matcher.matchIndex !== 'number' ? 0 : matcher.matchIndex];\n            if (!uri) {\n                if (this_1._terminal.debug) {\n                    console.log({ match: match, matcher: matcher });\n                    throw new Error('match found without corresponding matchIndex');\n                }\n                return \"break\";\n            }\n            stringIndex = text.indexOf(uri, stringIndex + 1);\n            rex.lastIndex = stringIndex + uri.length;\n            if (stringIndex < 0) {\n                return \"break\";\n            }\n            var bufferIndex = this_1._terminal.buffer.stringIndexToBufferIndex(rowIndex, stringIndex);\n            if (bufferIndex[0] < 0) {\n                return \"break\";\n            }\n            var line = this_1._terminal.buffer.lines.get(bufferIndex[0]);\n            var attr = line.getFg(bufferIndex[1]);\n            var fg;\n            if (attr) {\n                fg = (attr >> 9) & 0x1ff;\n            }\n            if (matcher.validationCallback) {\n                matcher.validationCallback(uri, function (isValid) {\n                    if (_this._rowsTimeoutId) {\n                        return;\n                    }\n                    if (isValid) {\n                        _this._addLink(bufferIndex[1], bufferIndex[0] - _this._terminal.buffer.ydisp, uri, matcher, fg);\n                    }\n                });\n            }\n            else {\n                this_1._addLink(bufferIndex[1], bufferIndex[0] - this_1._terminal.buffer.ydisp, uri, matcher, fg);\n            }\n        };\n        var this_1 = this;\n        while ((match = rex.exec(text)) !== null) {\n            var state_1 = _loop_1();\n            if (state_1 === \"break\")\n                break;\n        }\n    };\n    Linkifier.prototype._addLink = function (x, y, uri, matcher, fg) {\n        var _this = this;\n        var width = CharWidth_1.getStringCellWidth(uri);\n        var x1 = x % this._terminal.cols;\n        var y1 = y + Math.floor(x / this._terminal.cols);\n        var x2 = (x1 + width) % this._terminal.cols;\n        var y2 = y1 + Math.floor((x1 + width) / this._terminal.cols);\n        if (x2 === 0) {\n            x2 = this._terminal.cols;\n            y2--;\n        }\n        this._mouseZoneManager.add(new MouseZoneManager_1.MouseZone(x1 + 1, y1 + 1, x2 + 1, y2 + 1, function (e) {\n            if (matcher.handler) {\n                return matcher.handler(e, uri);\n            }\n            window.open(uri, '_blank');\n        }, function () {\n            _this._onLinkHover.fire(_this._createLinkHoverEvent(x1, y1, x2, y2, fg));\n            _this._terminal.element.classList.add('xterm-cursor-pointer');\n        }, function (e) {\n            _this._onLinkTooltip.fire(_this._createLinkHoverEvent(x1, y1, x2, y2, fg));\n            if (matcher.hoverTooltipCallback) {\n                matcher.hoverTooltipCallback(e, uri);\n            }\n        }, function () {\n            _this._onLinkLeave.fire(_this._createLinkHoverEvent(x1, y1, x2, y2, fg));\n            _this._terminal.element.classList.remove('xterm-cursor-pointer');\n            if (matcher.hoverLeaveCallback) {\n                matcher.hoverLeaveCallback();\n            }\n        }, function (e) {\n            if (matcher.willLinkActivate) {\n                return matcher.willLinkActivate(e, uri);\n            }\n            return true;\n        }));\n    };\n    Linkifier.prototype._createLinkHoverEvent = function (x1, y1, x2, y2, fg) {\n        return { x1: x1, y1: y1, x2: x2, y2: y2, cols: this._terminal.cols, fg: fg };\n    };\n    Linkifier.TIME_BEFORE_LINKIFY = 200;\n    Linkifier.OVERSCAN_CHAR_LIMIT = 2000;\n    return Linkifier;\n}());\nexports.Linkifier = Linkifier;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/Linkifier.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/MouseHelper.js":
/*!***********************************************!*\
  !*** ./node_modules/xterm/lib/MouseHelper.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MouseHelper = (function () {\n    function MouseHelper(_renderCoordinator) {\n        this._renderCoordinator = _renderCoordinator;\n    }\n    MouseHelper.getCoordsRelativeToElement = function (event, element) {\n        var rect = element.getBoundingClientRect();\n        return [event.clientX - rect.left, event.clientY - rect.top];\n    };\n    MouseHelper.prototype.getCoords = function (event, element, charMeasure, colCount, rowCount, isSelection) {\n        if (!charMeasure.width || !charMeasure.height) {\n            return null;\n        }\n        var coords = MouseHelper.getCoordsRelativeToElement(event, element);\n        if (!coords) {\n            return null;\n        }\n        coords[0] = Math.ceil((coords[0] + (isSelection ? this._renderCoordinator.dimensions.actualCellWidth / 2 : 0)) / this._renderCoordinator.dimensions.actualCellWidth);\n        coords[1] = Math.ceil(coords[1] / this._renderCoordinator.dimensions.actualCellHeight);\n        coords[0] = Math.min(Math.max(coords[0], 1), colCount + (isSelection ? 1 : 0));\n        coords[1] = Math.min(Math.max(coords[1], 1), rowCount);\n        return coords;\n    };\n    MouseHelper.prototype.getRawByteCoords = function (event, element, charMeasure, colCount, rowCount) {\n        var coords = this.getCoords(event, element, charMeasure, colCount, rowCount);\n        var x = coords[0];\n        var y = coords[1];\n        x += 32;\n        y += 32;\n        return { x: x, y: y };\n    };\n    return MouseHelper;\n}());\nexports.MouseHelper = MouseHelper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL01vdXNlSGVscGVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL3NyYy9Nb3VzZUhlbHBlci50cz8yZjgwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSUNoYXJNZWFzdXJlLCBJTW91c2VIZWxwZXIgfSBmcm9tICcuL1R5cGVzJztcbmltcG9ydCB7IFJlbmRlckNvb3JkaW5hdG9yIH0gZnJvbSAnLi9yZW5kZXJlci9SZW5kZXJDb29yZGluYXRvcic7XG5cbmV4cG9ydCBjbGFzcyBNb3VzZUhlbHBlciBpbXBsZW1lbnRzIElNb3VzZUhlbHBlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX3JlbmRlckNvb3JkaW5hdG9yOiBSZW5kZXJDb29yZGluYXRvclxuICApIHtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0Q29vcmRzUmVsYXRpdmVUb0VsZW1lbnQoZXZlbnQ6IHtjbGllbnRYOiBudW1iZXIsIGNsaWVudFk6IG51bWJlcn0sIGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogW251bWJlciwgbnVtYmVyXSB7XG4gICAgY29uc3QgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgcmV0dXJuIFtldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0LCBldmVudC5jbGllbnRZIC0gcmVjdC50b3BdO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY29vcmRpbmF0ZXMgd2l0aGluIHRoZSB0ZXJtaW5hbCBmb3IgYSBwYXJ0aWN1bGFyIG1vdXNlIGV2ZW50LiBUaGUgcmVzdWx0XG4gICAqIGlzIHJldHVybmVkIGFzIGFuIGFycmF5IGluIHRoZSBmb3JtIFt4LCB5XSBpbnN0ZWFkIG9mIGFuIG9iamVjdCBhcyBpdCdzIGFcbiAgICogbGl0dGxlIGZhc3RlciBhbmQgdGhpcyBmdW5jdGlvbiBpcyB1c2VkIGluIHNvbWUgbG93IGxldmVsIGNvZGUuXG4gICAqIEBwYXJhbSBldmVudCBUaGUgbW91c2UgZXZlbnQuXG4gICAqIEBwYXJhbSBlbGVtZW50IFRoZSB0ZXJtaW5hbCdzIGNvbnRhaW5lciBlbGVtZW50LlxuICAgKiBAcGFyYW0gY2hhck1lYXN1cmUgVGhlIGNoYXIgbWVhc3VyZSBvYmplY3QgdXNlZCB0byBkZXRlcm1pbmUgY2hhcmFjdGVyIHNpemVzLlxuICAgKiBAcGFyYW0gY29sQ291bnQgVGhlIG51bWJlciBvZiBjb2x1bW5zIGluIHRoZSB0ZXJtaW5hbC5cbiAgICogQHBhcmFtIHJvd0NvdW50IFRoZSBudW1iZXIgb2Ygcm93cyBuIHRoZSB0ZXJtaW5hbC5cbiAgICogQHBhcmFtIGlzU2VsZWN0aW9uIFdoZXRoZXIgdGhlIHJlcXVlc3QgaXMgZm9yIHRoZSBzZWxlY3Rpb24gb3Igbm90LiBUaGlzIHdpbGxcbiAgICogYXBwbHkgYW4gb2Zmc2V0IHRvIHRoZSB4IHZhbHVlIHN1Y2ggdGhhdCB0aGUgbGVmdCBoYWxmIG9mIHRoZSBjZWxsIHdpbGxcbiAgICogc2VsZWN0IHRoYXQgY2VsbCBhbmQgdGhlIHJpZ2h0IGhhbGYgd2lsbCBzZWxlY3QgdGhlIG5leHQgY2VsbC5cbiAgICovXG4gIHB1YmxpYyBnZXRDb29yZHMoZXZlbnQ6IHtjbGllbnRYOiBudW1iZXIsIGNsaWVudFk6IG51bWJlcn0sIGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBjaGFyTWVhc3VyZTogSUNoYXJNZWFzdXJlLCBjb2xDb3VudDogbnVtYmVyLCByb3dDb3VudDogbnVtYmVyLCBpc1NlbGVjdGlvbj86IGJvb2xlYW4pOiBbbnVtYmVyLCBudW1iZXJdIHtcbiAgICAvLyBDb29yZGluYXRlcyBjYW5ub3QgYmUgbWVhc3VyZWQgaWYgY2hhck1lYXN1cmUgaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkXG4gICAgaWYgKCFjaGFyTWVhc3VyZS53aWR0aCB8fCAhY2hhck1lYXN1cmUuaGVpZ2h0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBjb29yZHMgPSBNb3VzZUhlbHBlci5nZXRDb29yZHNSZWxhdGl2ZVRvRWxlbWVudChldmVudCwgZWxlbWVudCk7XG4gICAgaWYgKCFjb29yZHMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvb3Jkc1swXSA9IE1hdGguY2VpbCgoY29vcmRzWzBdICsgKGlzU2VsZWN0aW9uID8gdGhpcy5fcmVuZGVyQ29vcmRpbmF0b3IuZGltZW5zaW9ucy5hY3R1YWxDZWxsV2lkdGggLyAyIDogMCkpIC8gdGhpcy5fcmVuZGVyQ29vcmRpbmF0b3IuZGltZW5zaW9ucy5hY3R1YWxDZWxsV2lkdGgpO1xuICAgIGNvb3Jkc1sxXSA9IE1hdGguY2VpbChjb29yZHNbMV0gLyB0aGlzLl9yZW5kZXJDb29yZGluYXRvci5kaW1lbnNpb25zLmFjdHVhbENlbGxIZWlnaHQpO1xuXG4gICAgLy8gRW5zdXJlIGNvb3JkaW5hdGVzIGFyZSB3aXRoaW4gdGhlIHRlcm1pbmFsIHZpZXdwb3J0LiBOb3RlIHRoYXQgc2VsZWN0aW9uc1xuICAgIC8vIG5lZWQgYW4gYWRkaXRpb24gcG9pbnQgb2YgcHJlY2lzaW9uIHRvIGNvdmVyIHRoZSBlbmQgcG9pbnQgKGFzIGNoYXJhY3RlcnNcbiAgICAvLyBjb3ZlciBoYWxmIG9mIG9uZSBjaGFyIGFuZCBoYWxmIG9mIHRoZSBuZXh0KS5cbiAgICBjb29yZHNbMF0gPSBNYXRoLm1pbihNYXRoLm1heChjb29yZHNbMF0sIDEpLCBjb2xDb3VudCArIChpc1NlbGVjdGlvbiA/IDEgOiAwKSk7XG4gICAgY29vcmRzWzFdID0gTWF0aC5taW4oTWF0aC5tYXgoY29vcmRzWzFdLCAxKSwgcm93Q291bnQpO1xuXG4gICAgcmV0dXJuIGNvb3JkcztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNvb3JkaW5hdGVzIHdpdGhpbiB0aGUgdGVybWluYWwgZm9yIGEgcGFydGljdWxhciBtb3VzZSBldmVudCwgd3JhcHBpbmdcbiAgICogdGhlbSB0byB0aGUgYm91bmRzIG9mIHRoZSB0ZXJtaW5hbCBhbmQgYWRkaW5nIDMyIHRvIGJvdGggdGhlIHggYW5kIHkgdmFsdWVzXG4gICAqIGFzIGV4cGVjdGVkIGJ5IHh0ZXJtLlxuICAgKiBAcGFyYW0gZXZlbnQgVGhlIG1vdXNlIGV2ZW50LlxuICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgdGVybWluYWwncyBjb250YWluZXIgZWxlbWVudC5cbiAgICogQHBhcmFtIGNoYXJNZWFzdXJlIFRoZSBjaGFyIG1lYXN1cmUgb2JqZWN0IHVzZWQgdG8gZGV0ZXJtaW5lIGNoYXJhY3RlciBzaXplcy5cbiAgICogQHBhcmFtIGNvbENvdW50IFRoZSBudW1iZXIgb2YgY29sdW1ucyBpbiB0aGUgdGVybWluYWwuXG4gICAqIEBwYXJhbSByb3dDb3VudCBUaGUgbnVtYmVyIG9mIHJvd3MgaW4gdGhlIHRlcm1pbmFsLlxuICAgKi9cbiAgcHVibGljIGdldFJhd0J5dGVDb29yZHMoZXZlbnQ6IE1vdXNlRXZlbnQsIGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBjaGFyTWVhc3VyZTogSUNoYXJNZWFzdXJlLCBjb2xDb3VudDogbnVtYmVyLCByb3dDb3VudDogbnVtYmVyKTogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9IHtcbiAgICBjb25zdCBjb29yZHMgPSB0aGlzLmdldENvb3JkcyhldmVudCwgZWxlbWVudCwgY2hhck1lYXN1cmUsIGNvbENvdW50LCByb3dDb3VudCk7XG4gICAgbGV0IHggPSBjb29yZHNbMF07XG4gICAgbGV0IHkgPSBjb29yZHNbMV07XG5cbiAgICAvLyB4dGVybSBzZW5kcyByYXcgYnl0ZXMgYW5kIHN0YXJ0cyBhdCAzMiAoU1ApIGZvciBlYWNoLlxuICAgIHggKz0gMzI7XG4gICAgeSArPSAzMjtcblxuICAgIHJldHVybiB7IHgsIHkgfTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOztBQVFBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFlQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUtBO0FBQ0E7QUFFQTtBQUNBO0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFwRUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/MouseHelper.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/MouseZoneManager.js":
/*!****************************************************!*\
  !*** ./node_modules/xterm/lib/MouseZoneManager.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Lifecycle_1 = __webpack_require__(/*! ./common/Lifecycle */ \"./node_modules/xterm/lib/common/Lifecycle.js\");\nvar Lifecycle_2 = __webpack_require__(/*! ./ui/Lifecycle */ \"./node_modules/xterm/lib/ui/Lifecycle.js\");\nvar HOVER_DURATION = 500;\nvar MouseZoneManager = (function (_super) {\n    __extends(MouseZoneManager, _super);\n    function MouseZoneManager(_terminal) {\n        var _this = _super.call(this) || this;\n        _this._terminal = _terminal;\n        _this._zones = [];\n        _this._areZonesActive = false;\n        _this._tooltipTimeout = null;\n        _this._currentZone = null;\n        _this._lastHoverCoords = [null, null];\n        _this.register(Lifecycle_2.addDisposableDomListener(_this._terminal.element, 'mousedown', function (e) { return _this._onMouseDown(e); }));\n        _this._mouseMoveListener = function (e) { return _this._onMouseMove(e); };\n        _this._mouseLeaveListener = function (e) { return _this._onMouseLeave(e); };\n        _this._clickListener = function (e) { return _this._onClick(e); };\n        return _this;\n    }\n    MouseZoneManager.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._deactivate();\n    };\n    MouseZoneManager.prototype.add = function (zone) {\n        this._zones.push(zone);\n        if (this._zones.length === 1) {\n            this._activate();\n        }\n    };\n    MouseZoneManager.prototype.clearAll = function (start, end) {\n        if (this._zones.length === 0) {\n            return;\n        }\n        if (!end) {\n            start = 0;\n            end = this._terminal.rows - 1;\n        }\n        for (var i = 0; i < this._zones.length; i++) {\n            var zone = this._zones[i];\n            if ((zone.y1 > start && zone.y1 <= end + 1) ||\n                (zone.y2 > start && zone.y2 <= end + 1) ||\n                (zone.y1 < start && zone.y2 > end + 1)) {\n                if (this._currentZone && this._currentZone === zone) {\n                    this._currentZone.leaveCallback();\n                    this._currentZone = null;\n                }\n                this._zones.splice(i--, 1);\n            }\n        }\n        if (this._zones.length === 0) {\n            this._deactivate();\n        }\n    };\n    MouseZoneManager.prototype._activate = function () {\n        if (!this._areZonesActive) {\n            this._areZonesActive = true;\n            this._terminal.element.addEventListener('mousemove', this._mouseMoveListener);\n            this._terminal.element.addEventListener('mouseleave', this._mouseLeaveListener);\n            this._terminal.element.addEventListener('click', this._clickListener);\n        }\n    };\n    MouseZoneManager.prototype._deactivate = function () {\n        if (this._areZonesActive) {\n            this._areZonesActive = false;\n            this._terminal.element.removeEventListener('mousemove', this._mouseMoveListener);\n            this._terminal.element.removeEventListener('mouseleave', this._mouseLeaveListener);\n            this._terminal.element.removeEventListener('click', this._clickListener);\n        }\n    };\n    MouseZoneManager.prototype._onMouseMove = function (e) {\n        if (this._lastHoverCoords[0] !== e.pageX || this._lastHoverCoords[1] !== e.pageY) {\n            this._onHover(e);\n            this._lastHoverCoords = [e.pageX, e.pageY];\n        }\n    };\n    MouseZoneManager.prototype._onHover = function (e) {\n        var _this = this;\n        var zone = this._findZoneEventAt(e);\n        if (zone === this._currentZone) {\n            return;\n        }\n        if (this._currentZone) {\n            this._currentZone.leaveCallback();\n            this._currentZone = null;\n            if (this._tooltipTimeout) {\n                clearTimeout(this._tooltipTimeout);\n            }\n        }\n        if (!zone) {\n            return;\n        }\n        this._currentZone = zone;\n        if (zone.hoverCallback) {\n            zone.hoverCallback(e);\n        }\n        this._tooltipTimeout = setTimeout(function () { return _this._onTooltip(e); }, HOVER_DURATION);\n    };\n    MouseZoneManager.prototype._onTooltip = function (e) {\n        this._tooltipTimeout = null;\n        var zone = this._findZoneEventAt(e);\n        if (zone && zone.tooltipCallback) {\n            zone.tooltipCallback(e);\n        }\n    };\n    MouseZoneManager.prototype._onMouseDown = function (e) {\n        this._initialSelectionLength = this._terminal.getSelection().length;\n        if (!this._areZonesActive) {\n            return;\n        }\n        var zone = this._findZoneEventAt(e);\n        if (zone) {\n            if (zone.willLinkActivate(e)) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n            }\n        }\n    };\n    MouseZoneManager.prototype._onMouseLeave = function (e) {\n        if (this._currentZone) {\n            this._currentZone.leaveCallback();\n            this._currentZone = null;\n            if (this._tooltipTimeout) {\n                clearTimeout(this._tooltipTimeout);\n            }\n        }\n    };\n    MouseZoneManager.prototype._onClick = function (e) {\n        var zone = this._findZoneEventAt(e);\n        var currentSelectionLength = this._terminal.getSelection().length;\n        if (zone && currentSelectionLength === this._initialSelectionLength) {\n            zone.clickCallback(e);\n            e.preventDefault();\n            e.stopImmediatePropagation();\n        }\n    };\n    MouseZoneManager.prototype._findZoneEventAt = function (e) {\n        var coords = this._terminal.mouseHelper.getCoords(e, this._terminal.screenElement, this._terminal.charMeasure, this._terminal.cols, this._terminal.rows);\n        if (!coords) {\n            return null;\n        }\n        var x = coords[0];\n        var y = coords[1];\n        for (var i = 0; i < this._zones.length; i++) {\n            var zone = this._zones[i];\n            if (zone.y1 === zone.y2) {\n                if (y === zone.y1 && x >= zone.x1 && x < zone.x2) {\n                    return zone;\n                }\n            }\n            else {\n                if ((y === zone.y1 && x >= zone.x1) ||\n                    (y === zone.y2 && x < zone.x2) ||\n                    (y > zone.y1 && y < zone.y2)) {\n                    return zone;\n                }\n            }\n        }\n        return null;\n    };\n    return MouseZoneManager;\n}(Lifecycle_1.Disposable));\nexports.MouseZoneManager = MouseZoneManager;\nvar MouseZone = (function () {\n    function MouseZone(x1, y1, x2, y2, clickCallback, hoverCallback, tooltipCallback, leaveCallback, willLinkActivate) {\n        this.x1 = x1;\n        this.y1 = y1;\n        this.x2 = x2;\n        this.y2 = y2;\n        this.clickCallback = clickCallback;\n        this.hoverCallback = hoverCallback;\n        this.tooltipCallback = tooltipCallback;\n        this.leaveCallback = leaveCallback;\n        this.willLinkActivate = willLinkActivate;\n    }\n    return MouseZone;\n}());\nexports.MouseZone = MouseZone;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/MouseZoneManager.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/SelectionManager.js":
/*!****************************************************!*\
  !*** ./node_modules/xterm/lib/SelectionManager.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MouseHelper_1 = __webpack_require__(/*! ./MouseHelper */ \"./node_modules/xterm/lib/MouseHelper.js\");\nvar Browser = __webpack_require__(/*! ./common/Platform */ \"./node_modules/xterm/lib/common/Platform.js\");\nvar SelectionModel_1 = __webpack_require__(/*! ./SelectionModel */ \"./node_modules/xterm/lib/SelectionModel.js\");\nvar AltClickHandler_1 = __webpack_require__(/*! ./handlers/AltClickHandler */ \"./node_modules/xterm/lib/handlers/AltClickHandler.js\");\nvar BufferLine_1 = __webpack_require__(/*! ./core/buffer/BufferLine */ \"./node_modules/xterm/lib/core/buffer/BufferLine.js\");\nvar EventEmitter2_1 = __webpack_require__(/*! ./common/EventEmitter2 */ \"./node_modules/xterm/lib/common/EventEmitter2.js\");\nvar DRAG_SCROLL_MAX_THRESHOLD = 50;\nvar DRAG_SCROLL_MAX_SPEED = 15;\nvar DRAG_SCROLL_INTERVAL = 50;\nvar ALT_CLICK_MOVE_CURSOR_TIME = 500;\nvar WORD_SEPARATORS = ' ()[]{}\\'\"';\nvar NON_BREAKING_SPACE_CHAR = String.fromCharCode(160);\nvar ALL_NON_BREAKING_SPACE_REGEX = new RegExp(NON_BREAKING_SPACE_CHAR, 'g');\nvar SelectionManager = (function () {\n    function SelectionManager(_terminal, _charMeasure) {\n        this._terminal = _terminal;\n        this._charMeasure = _charMeasure;\n        this._enabled = true;\n        this._workCell = new BufferLine_1.CellData();\n        this._onLinuxMouseSelection = new EventEmitter2_1.EventEmitter2();\n        this._onRedrawRequest = new EventEmitter2_1.EventEmitter2();\n        this._onSelectionChange = new EventEmitter2_1.EventEmitter2();\n        this._initListeners();\n        this.enable();\n        this._model = new SelectionModel_1.SelectionModel(_terminal);\n        this._activeSelectionMode = 0;\n    }\n    Object.defineProperty(SelectionManager.prototype, \"onLinuxMouseSelection\", {\n        get: function () { return this._onLinuxMouseSelection.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionManager.prototype, \"onRedrawRequest\", {\n        get: function () { return this._onRedrawRequest.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionManager.prototype, \"onSelectionChange\", {\n        get: function () { return this._onSelectionChange.event; },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionManager.prototype.dispose = function () {\n        this._removeMouseDownListeners();\n    };\n    Object.defineProperty(SelectionManager.prototype, \"_buffer\", {\n        get: function () {\n            return this._terminal.buffers.active;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionManager.prototype._initListeners = function () {\n        var _this = this;\n        this._mouseMoveListener = function (event) { return _this._onMouseMove(event); };\n        this._mouseUpListener = function (event) { return _this._onMouseUp(event); };\n        this.initBuffersListeners();\n    };\n    SelectionManager.prototype.initBuffersListeners = function () {\n        var _this = this;\n        this._trimListener = this._terminal.buffer.lines.onTrim(function (amount) { return _this._onTrim(amount); });\n        this._terminal.buffers.onBufferActivate(function (e) { return _this._onBufferActivate(e); });\n    };\n    SelectionManager.prototype.disable = function () {\n        this.clearSelection();\n        this._enabled = false;\n    };\n    SelectionManager.prototype.enable = function () {\n        this._enabled = true;\n    };\n    Object.defineProperty(SelectionManager.prototype, \"selectionStart\", {\n        get: function () { return this._model.finalSelectionStart; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionManager.prototype, \"selectionEnd\", {\n        get: function () { return this._model.finalSelectionEnd; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionManager.prototype, \"hasSelection\", {\n        get: function () {\n            var start = this._model.finalSelectionStart;\n            var end = this._model.finalSelectionEnd;\n            if (!start || !end) {\n                return false;\n            }\n            return start[0] !== end[0] || start[1] !== end[1];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionManager.prototype, \"selectionText\", {\n        get: function () {\n            var start = this._model.finalSelectionStart;\n            var end = this._model.finalSelectionEnd;\n            if (!start || !end) {\n                return '';\n            }\n            var result = [];\n            if (this._activeSelectionMode === 3) {\n                if (start[0] === end[0]) {\n                    return '';\n                }\n                for (var i = start[1]; i <= end[1]; i++) {\n                    var lineText = this._buffer.translateBufferLineToString(i, true, start[0], end[0]);\n                    result.push(lineText);\n                }\n            }\n            else {\n                var startRowEndCol = start[1] === end[1] ? end[0] : undefined;\n                result.push(this._buffer.translateBufferLineToString(start[1], true, start[0], startRowEndCol));\n                for (var i = start[1] + 1; i <= end[1] - 1; i++) {\n                    var bufferLine = this._buffer.lines.get(i);\n                    var lineText = this._buffer.translateBufferLineToString(i, true);\n                    if (bufferLine.isWrapped) {\n                        result[result.length - 1] += lineText;\n                    }\n                    else {\n                        result.push(lineText);\n                    }\n                }\n                if (start[1] !== end[1]) {\n                    var bufferLine = this._buffer.lines.get(end[1]);\n                    var lineText = this._buffer.translateBufferLineToString(end[1], true, 0, end[0]);\n                    if (bufferLine.isWrapped) {\n                        result[result.length - 1] += lineText;\n                    }\n                    else {\n                        result.push(lineText);\n                    }\n                }\n            }\n            var formattedResult = result.map(function (line) {\n                return line.replace(ALL_NON_BREAKING_SPACE_REGEX, ' ');\n            }).join(Browser.isMSWindows ? '\\r\\n' : '\\n');\n            return formattedResult;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionManager.prototype.clearSelection = function () {\n        this._model.clearSelection();\n        this._removeMouseDownListeners();\n        this.refresh();\n        this._onSelectionChange.fire();\n    };\n    SelectionManager.prototype.refresh = function (isLinuxMouseSelection) {\n        var _this = this;\n        if (!this._refreshAnimationFrame) {\n            this._refreshAnimationFrame = window.requestAnimationFrame(function () { return _this._refresh(); });\n        }\n        if (Browser.isLinux && isLinuxMouseSelection) {\n            var selectionText = this.selectionText;\n            if (selectionText.length) {\n                this._onLinuxMouseSelection.fire(this.selectionText);\n            }\n        }\n    };\n    SelectionManager.prototype._refresh = function () {\n        this._refreshAnimationFrame = null;\n        this._onRedrawRequest.fire({\n            start: this._model.finalSelectionStart,\n            end: this._model.finalSelectionEnd,\n            columnSelectMode: this._activeSelectionMode === 3\n        });\n    };\n    SelectionManager.prototype.isClickInSelection = function (event) {\n        var coords = this._getMouseBufferCoords(event);\n        var start = this._model.finalSelectionStart;\n        var end = this._model.finalSelectionEnd;\n        if (!start || !end) {\n            return false;\n        }\n        return this._areCoordsInSelection(coords, start, end);\n    };\n    SelectionManager.prototype._areCoordsInSelection = function (coords, start, end) {\n        return (coords[1] > start[1] && coords[1] < end[1]) ||\n            (start[1] === end[1] && coords[1] === start[1] && coords[0] >= start[0] && coords[0] < end[0]) ||\n            (start[1] < end[1] && coords[1] === end[1] && coords[0] < end[0]) ||\n            (start[1] < end[1] && coords[1] === start[1] && coords[0] >= start[0]);\n    };\n    SelectionManager.prototype.selectWordAtCursor = function (event) {\n        var coords = this._getMouseBufferCoords(event);\n        if (coords) {\n            this._selectWordAt(coords, false);\n            this._model.selectionEnd = null;\n            this.refresh(true);\n        }\n    };\n    SelectionManager.prototype.selectAll = function () {\n        this._model.isSelectAllActive = true;\n        this.refresh();\n        this._onSelectionChange.fire();\n    };\n    SelectionManager.prototype.selectLines = function (start, end) {\n        this._model.clearSelection();\n        start = Math.max(start, 0);\n        end = Math.min(end, this._terminal.buffer.lines.length - 1);\n        this._model.selectionStart = [0, start];\n        this._model.selectionEnd = [this._terminal.cols, end];\n        this.refresh();\n        this._onSelectionChange.fire();\n    };\n    SelectionManager.prototype._onTrim = function (amount) {\n        var needsRefresh = this._model.onTrim(amount);\n        if (needsRefresh) {\n            this.refresh();\n        }\n    };\n    SelectionManager.prototype._getMouseBufferCoords = function (event) {\n        var coords = this._terminal.mouseHelper.getCoords(event, this._terminal.screenElement, this._charMeasure, this._terminal.cols, this._terminal.rows, true);\n        if (!coords) {\n            return null;\n        }\n        coords[0]--;\n        coords[1]--;\n        coords[1] += this._terminal.buffer.ydisp;\n        return coords;\n    };\n    SelectionManager.prototype._getMouseEventScrollAmount = function (event) {\n        var offset = MouseHelper_1.MouseHelper.getCoordsRelativeToElement(event, this._terminal.screenElement)[1];\n        var terminalHeight = this._terminal.rows * Math.ceil(this._charMeasure.height * this._terminal.options.lineHeight);\n        if (offset >= 0 && offset <= terminalHeight) {\n            return 0;\n        }\n        if (offset > terminalHeight) {\n            offset -= terminalHeight;\n        }\n        offset = Math.min(Math.max(offset, -DRAG_SCROLL_MAX_THRESHOLD), DRAG_SCROLL_MAX_THRESHOLD);\n        offset /= DRAG_SCROLL_MAX_THRESHOLD;\n        return (offset / Math.abs(offset)) + Math.round(offset * (DRAG_SCROLL_MAX_SPEED - 1));\n    };\n    SelectionManager.prototype.shouldForceSelection = function (event) {\n        if (Browser.isMac) {\n            return event.altKey && this._terminal.options.macOptionClickForcesSelection;\n        }\n        return event.shiftKey;\n    };\n    SelectionManager.prototype.onMouseDown = function (event) {\n        this._mouseDownTimeStamp = event.timeStamp;\n        if (event.button === 2 && this.hasSelection) {\n            return;\n        }\n        if (event.button !== 0) {\n            return;\n        }\n        if (!this._enabled) {\n            if (!this.shouldForceSelection(event)) {\n                return;\n            }\n            event.stopPropagation();\n        }\n        event.preventDefault();\n        this._dragScrollAmount = 0;\n        if (this._enabled && event.shiftKey) {\n            this._onIncrementalClick(event);\n        }\n        else {\n            if (event.detail === 1) {\n                this._onSingleClick(event);\n            }\n            else if (event.detail === 2) {\n                this._onDoubleClick(event);\n            }\n            else if (event.detail === 3) {\n                this._onTripleClick(event);\n            }\n        }\n        this._addMouseDownListeners();\n        this.refresh(true);\n    };\n    SelectionManager.prototype._addMouseDownListeners = function () {\n        var _this = this;\n        this._terminal.element.ownerDocument.addEventListener('mousemove', this._mouseMoveListener);\n        this._terminal.element.ownerDocument.addEventListener('mouseup', this._mouseUpListener);\n        this._dragScrollIntervalTimer = setInterval(function () { return _this._dragScroll(); }, DRAG_SCROLL_INTERVAL);\n    };\n    SelectionManager.prototype._removeMouseDownListeners = function () {\n        if (this._terminal.element.ownerDocument) {\n            this._terminal.element.ownerDocument.removeEventListener('mousemove', this._mouseMoveListener);\n            this._terminal.element.ownerDocument.removeEventListener('mouseup', this._mouseUpListener);\n        }\n        clearInterval(this._dragScrollIntervalTimer);\n        this._dragScrollIntervalTimer = null;\n    };\n    SelectionManager.prototype._onIncrementalClick = function (event) {\n        if (this._model.selectionStart) {\n            this._model.selectionEnd = this._getMouseBufferCoords(event);\n        }\n    };\n    SelectionManager.prototype._onSingleClick = function (event) {\n        this._model.selectionStartLength = 0;\n        this._model.isSelectAllActive = false;\n        this._activeSelectionMode = this.shouldColumnSelect(event) ? 3 : 0;\n        this._model.selectionStart = this._getMouseBufferCoords(event);\n        if (!this._model.selectionStart) {\n            return;\n        }\n        this._model.selectionEnd = null;\n        var line = this._buffer.lines.get(this._model.selectionStart[1]);\n        if (!line) {\n            return;\n        }\n        if (line.length >= this._model.selectionStart[0]) {\n            return;\n        }\n        if (line.hasWidth(this._model.selectionStart[0]) === 0) {\n            this._model.selectionStart[0]++;\n        }\n    };\n    SelectionManager.prototype._onDoubleClick = function (event) {\n        var coords = this._getMouseBufferCoords(event);\n        if (coords) {\n            this._activeSelectionMode = 1;\n            this._selectWordAt(coords, true);\n        }\n    };\n    SelectionManager.prototype._onTripleClick = function (event) {\n        var coords = this._getMouseBufferCoords(event);\n        if (coords) {\n            this._activeSelectionMode = 2;\n            this._selectLineAt(coords[1]);\n        }\n    };\n    SelectionManager.prototype.shouldColumnSelect = function (event) {\n        return event.altKey && !(Browser.isMac && this._terminal.options.macOptionClickForcesSelection);\n    };\n    SelectionManager.prototype._onMouseMove = function (event) {\n        event.stopImmediatePropagation();\n        var previousSelectionEnd = this._model.selectionEnd ? [this._model.selectionEnd[0], this._model.selectionEnd[1]] : null;\n        this._model.selectionEnd = this._getMouseBufferCoords(event);\n        if (!this._model.selectionEnd) {\n            this.refresh(true);\n            return;\n        }\n        if (this._activeSelectionMode === 2) {\n            if (this._model.selectionEnd[1] < this._model.selectionStart[1]) {\n                this._model.selectionEnd[0] = 0;\n            }\n            else {\n                this._model.selectionEnd[0] = this._terminal.cols;\n            }\n        }\n        else if (this._activeSelectionMode === 1) {\n            this._selectToWordAt(this._model.selectionEnd);\n        }\n        this._dragScrollAmount = this._getMouseEventScrollAmount(event);\n        if (this._activeSelectionMode !== 3) {\n            if (this._dragScrollAmount > 0) {\n                this._model.selectionEnd[0] = this._terminal.cols;\n            }\n            else if (this._dragScrollAmount < 0) {\n                this._model.selectionEnd[0] = 0;\n            }\n        }\n        if (this._model.selectionEnd[1] < this._buffer.lines.length) {\n            if (this._buffer.lines.get(this._model.selectionEnd[1]).hasWidth(this._model.selectionEnd[0]) === 0) {\n                this._model.selectionEnd[0]++;\n            }\n        }\n        if (!previousSelectionEnd ||\n            previousSelectionEnd[0] !== this._model.selectionEnd[0] ||\n            previousSelectionEnd[1] !== this._model.selectionEnd[1]) {\n            this.refresh(true);\n        }\n    };\n    SelectionManager.prototype._dragScroll = function () {\n        if (this._dragScrollAmount) {\n            this._terminal.scrollLines(this._dragScrollAmount, false);\n            if (this._dragScrollAmount > 0) {\n                if (this._activeSelectionMode !== 3) {\n                    this._model.selectionEnd[0] = this._terminal.cols;\n                }\n                this._model.selectionEnd[1] = Math.min(this._terminal.buffer.ydisp + this._terminal.rows, this._terminal.buffer.lines.length - 1);\n            }\n            else {\n                if (this._activeSelectionMode !== 3) {\n                    this._model.selectionEnd[0] = 0;\n                }\n                this._model.selectionEnd[1] = this._terminal.buffer.ydisp;\n            }\n            this.refresh();\n        }\n    };\n    SelectionManager.prototype._onMouseUp = function (event) {\n        var timeElapsed = event.timeStamp - this._mouseDownTimeStamp;\n        this._removeMouseDownListeners();\n        if (this.selectionText.length <= 1 && timeElapsed < ALT_CLICK_MOVE_CURSOR_TIME) {\n            (new AltClickHandler_1.AltClickHandler(event, this._terminal)).move();\n        }\n        else if (this.hasSelection) {\n            this._onSelectionChange.fire();\n        }\n    };\n    SelectionManager.prototype._onBufferActivate = function (e) {\n        var _this = this;\n        this.clearSelection();\n        if (this._trimListener) {\n            this._trimListener.dispose();\n        }\n        this._trimListener = e.activeBuffer.lines.onTrim(function (amount) { return _this._onTrim(amount); });\n    };\n    SelectionManager.prototype._convertViewportColToCharacterIndex = function (bufferLine, coords) {\n        var charIndex = coords[0];\n        for (var i = 0; coords[0] >= i; i++) {\n            var length_1 = bufferLine.loadCell(i, this._workCell).getChars().length;\n            if (this._workCell.getWidth() === 0) {\n                charIndex--;\n            }\n            else if (length_1 > 1 && coords[0] !== i) {\n                charIndex += length_1 - 1;\n            }\n        }\n        return charIndex;\n    };\n    SelectionManager.prototype.setSelection = function (col, row, length) {\n        this._model.clearSelection();\n        this._removeMouseDownListeners();\n        this._model.selectionStart = [col, row];\n        this._model.selectionStartLength = length;\n        this.refresh();\n    };\n    SelectionManager.prototype._getWordAt = function (coords, allowWhitespaceOnlySelection, followWrappedLinesAbove, followWrappedLinesBelow) {\n        if (followWrappedLinesAbove === void 0) { followWrappedLinesAbove = true; }\n        if (followWrappedLinesBelow === void 0) { followWrappedLinesBelow = true; }\n        if (coords[0] >= this._terminal.cols) {\n            return null;\n        }\n        var bufferLine = this._buffer.lines.get(coords[1]);\n        if (!bufferLine) {\n            return null;\n        }\n        var line = this._buffer.translateBufferLineToString(coords[1], false);\n        var startIndex = this._convertViewportColToCharacterIndex(bufferLine, coords);\n        var endIndex = startIndex;\n        var charOffset = coords[0] - startIndex;\n        var leftWideCharCount = 0;\n        var rightWideCharCount = 0;\n        var leftLongCharOffset = 0;\n        var rightLongCharOffset = 0;\n        if (line.charAt(startIndex) === ' ') {\n            while (startIndex > 0 && line.charAt(startIndex - 1) === ' ') {\n                startIndex--;\n            }\n            while (endIndex < line.length && line.charAt(endIndex + 1) === ' ') {\n                endIndex++;\n            }\n        }\n        else {\n            var startCol = coords[0];\n            var endCol = coords[0];\n            if (bufferLine.getWidth(startCol) === 0) {\n                leftWideCharCount++;\n                startCol--;\n            }\n            if (bufferLine.getWidth(endCol) === 2) {\n                rightWideCharCount++;\n                endCol++;\n            }\n            var length_2 = bufferLine.getString(endCol).length;\n            if (length_2 > 1) {\n                rightLongCharOffset += length_2 - 1;\n                endIndex += length_2 - 1;\n            }\n            while (startCol > 0 && startIndex > 0 && !this._isCharWordSeparator(bufferLine.loadCell(startCol - 1, this._workCell))) {\n                bufferLine.loadCell(startCol - 1, this._workCell);\n                var length_3 = this._workCell.getChars().length;\n                if (this._workCell.getWidth() === 0) {\n                    leftWideCharCount++;\n                    startCol--;\n                }\n                else if (length_3 > 1) {\n                    leftLongCharOffset += length_3 - 1;\n                    startIndex -= length_3 - 1;\n                }\n                startIndex--;\n                startCol--;\n            }\n            while (endCol < bufferLine.length && endIndex + 1 < line.length && !this._isCharWordSeparator(bufferLine.loadCell(endCol + 1, this._workCell))) {\n                bufferLine.loadCell(endCol + 1, this._workCell);\n                var length_4 = this._workCell.getChars().length;\n                if (this._workCell.getWidth() === 2) {\n                    rightWideCharCount++;\n                    endCol++;\n                }\n                else if (length_4 > 1) {\n                    rightLongCharOffset += length_4 - 1;\n                    endIndex += length_4 - 1;\n                }\n                endIndex++;\n                endCol++;\n            }\n        }\n        endIndex++;\n        var start = startIndex\n            + charOffset\n            - leftWideCharCount\n            + leftLongCharOffset;\n        var length = Math.min(this._terminal.cols, endIndex\n            - startIndex\n            + leftWideCharCount\n            + rightWideCharCount\n            - leftLongCharOffset\n            - rightLongCharOffset);\n        if (!allowWhitespaceOnlySelection && line.slice(startIndex, endIndex).trim() === '') {\n            return null;\n        }\n        if (followWrappedLinesAbove) {\n            if (start === 0 && bufferLine.getCodePoint(0) !== 32) {\n                var previousBufferLine = this._buffer.lines.get(coords[1] - 1);\n                if (previousBufferLine && bufferLine.isWrapped && previousBufferLine.getCodePoint(this._terminal.cols - 1) !== 32) {\n                    var previousLineWordPosition = this._getWordAt([this._terminal.cols - 1, coords[1] - 1], false, true, false);\n                    if (previousLineWordPosition) {\n                        var offset = this._terminal.cols - previousLineWordPosition.start;\n                        start -= offset;\n                        length += offset;\n                    }\n                }\n            }\n        }\n        if (followWrappedLinesBelow) {\n            if (start + length === this._terminal.cols && bufferLine.getCodePoint(this._terminal.cols - 1) !== 32) {\n                var nextBufferLine = this._buffer.lines.get(coords[1] + 1);\n                if (nextBufferLine && nextBufferLine.isWrapped && nextBufferLine.getCodePoint(0) !== 32) {\n                    var nextLineWordPosition = this._getWordAt([0, coords[1] + 1], false, false, true);\n                    if (nextLineWordPosition) {\n                        length += nextLineWordPosition.length;\n                    }\n                }\n            }\n        }\n        return { start: start, length: length };\n    };\n    SelectionManager.prototype._selectWordAt = function (coords, allowWhitespaceOnlySelection) {\n        var wordPosition = this._getWordAt(coords, allowWhitespaceOnlySelection);\n        if (wordPosition) {\n            while (wordPosition.start < 0) {\n                wordPosition.start += this._terminal.cols;\n                coords[1]--;\n            }\n            this._model.selectionStart = [wordPosition.start, coords[1]];\n            this._model.selectionStartLength = wordPosition.length;\n        }\n    };\n    SelectionManager.prototype._selectToWordAt = function (coords) {\n        var wordPosition = this._getWordAt(coords, true);\n        if (wordPosition) {\n            var endRow = coords[1];\n            while (wordPosition.start < 0) {\n                wordPosition.start += this._terminal.cols;\n                endRow--;\n            }\n            if (!this._model.areSelectionValuesReversed()) {\n                while (wordPosition.start + wordPosition.length > this._terminal.cols) {\n                    wordPosition.length -= this._terminal.cols;\n                    endRow++;\n                }\n            }\n            this._model.selectionEnd = [this._model.areSelectionValuesReversed() ? wordPosition.start : wordPosition.start + wordPosition.length, endRow];\n        }\n    };\n    SelectionManager.prototype._isCharWordSeparator = function (cell) {\n        if (cell.getWidth() === 0) {\n            return false;\n        }\n        return WORD_SEPARATORS.indexOf(cell.getChars()) >= 0;\n    };\n    SelectionManager.prototype._selectLineAt = function (line) {\n        var wrappedRange = this._buffer.getWrappedRangeForLine(line);\n        this._model.selectionStart = [0, wrappedRange.first];\n        this._model.selectionEnd = [this._terminal.cols, wrappedRange.last];\n        this._model.selectionStartLength = 0;\n    };\n    return SelectionManager;\n}());\nexports.SelectionManager = SelectionManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/SelectionManager.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/SelectionModel.js":
/*!**************************************************!*\
  !*** ./node_modules/xterm/lib/SelectionModel.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SelectionModel = (function () {\n    function SelectionModel(_terminal) {\n        this._terminal = _terminal;\n        this.clearSelection();\n    }\n    SelectionModel.prototype.clearSelection = function () {\n        this.selectionStart = null;\n        this.selectionEnd = null;\n        this.isSelectAllActive = false;\n        this.selectionStartLength = 0;\n    };\n    Object.defineProperty(SelectionModel.prototype, \"finalSelectionStart\", {\n        get: function () {\n            if (this.isSelectAllActive) {\n                return [0, 0];\n            }\n            if (!this.selectionEnd || !this.selectionStart) {\n                return this.selectionStart;\n            }\n            return this.areSelectionValuesReversed() ? this.selectionEnd : this.selectionStart;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionModel.prototype, \"finalSelectionEnd\", {\n        get: function () {\n            if (this.isSelectAllActive) {\n                return [this._terminal.cols, this._terminal.buffer.ybase + this._terminal.rows - 1];\n            }\n            if (!this.selectionStart) {\n                return null;\n            }\n            if (!this.selectionEnd || this.areSelectionValuesReversed()) {\n                var startPlusLength = this.selectionStart[0] + this.selectionStartLength;\n                if (startPlusLength > this._terminal.cols) {\n                    return [startPlusLength % this._terminal.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._terminal.cols)];\n                }\n                return [startPlusLength, this.selectionStart[1]];\n            }\n            if (this.selectionStartLength) {\n                if (this.selectionEnd[1] === this.selectionStart[1]) {\n                    return [Math.max(this.selectionStart[0] + this.selectionStartLength, this.selectionEnd[0]), this.selectionEnd[1]];\n                }\n            }\n            return this.selectionEnd;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionModel.prototype.areSelectionValuesReversed = function () {\n        var start = this.selectionStart;\n        var end = this.selectionEnd;\n        if (!start || !end) {\n            return false;\n        }\n        return start[1] > end[1] || (start[1] === end[1] && start[0] > end[0]);\n    };\n    SelectionModel.prototype.onTrim = function (amount) {\n        if (this.selectionStart) {\n            this.selectionStart[1] -= amount;\n        }\n        if (this.selectionEnd) {\n            this.selectionEnd[1] -= amount;\n        }\n        if (this.selectionEnd && this.selectionEnd[1] < 0) {\n            this.clearSelection();\n            return true;\n        }\n        if (this.selectionStart && this.selectionStart[1] < 0) {\n            this.selectionStart[1] = 0;\n        }\n        return false;\n    };\n    return SelectionModel;\n}());\nexports.SelectionModel = SelectionModel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL1NlbGVjdGlvbk1vZGVsLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL3NyYy9TZWxlY3Rpb25Nb2RlbC50cz9jNGQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSVRlcm1pbmFsIH0gZnJvbSAnLi9UeXBlcyc7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHNlbGVjdGlvbiB3aXRoaW4gdGhlIGJ1ZmZlci4gVGhpcyBtb2RlbCBvbmx5IGNhcmVzIGFib3V0IGNvbHVtblxuICogYW5kIHJvdyBjb29yZGluYXRlcywgbm90IHdpZGUgY2hhcmFjdGVycy5cbiAqL1xuZXhwb3J0IGNsYXNzIFNlbGVjdGlvbk1vZGVsIHtcbiAgLyoqXG4gICAqIFdoZXRoZXIgc2VsZWN0IGFsbCBpcyBjdXJyZW50bHkgYWN0aXZlLlxuICAgKi9cbiAgcHVibGljIGlzU2VsZWN0QWxsQWN0aXZlOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgW3gsIHldIHBvc2l0aW9uIHRoZSBzZWxlY3Rpb24gc3RhcnRzIGF0LlxuICAgKi9cbiAgcHVibGljIHNlbGVjdGlvblN0YXJ0OiBbbnVtYmVyLCBudW1iZXJdO1xuXG4gIC8qKlxuICAgKiBUaGUgbWluaW1hbCBsZW5ndGggb2YgdGhlIHNlbGVjdGlvbiBmcm9tIHRoZSBzdGFydCBwb3NpdGlvbi4gV2hlbiBkb3VibGVcbiAgICogY2xpY2tpbmcgb24gYSB3b3JkLCB0aGUgd29yZCB3aWxsIGJlIHNlbGVjdGVkIHdoaWNoIG1ha2VzIHRoZSBzZWxlY3Rpb25cbiAgICogc3RhcnQgYXQgdGhlIHN0YXJ0IG9mIHRoZSB3b3JkIGFuZCBtYWtlcyB0aGlzIHZhcmlhYmxlIHRoZSBsZW5ndGguXG4gICAqL1xuICBwdWJsaWMgc2VsZWN0aW9uU3RhcnRMZW5ndGg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIFt4LCB5XSBwb3NpdGlvbiB0aGUgc2VsZWN0aW9uIGVuZHMgYXQuXG4gICAqL1xuICBwdWJsaWMgc2VsZWN0aW9uRW5kOiBbbnVtYmVyLCBudW1iZXJdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX3Rlcm1pbmFsOiBJVGVybWluYWxcbiAgKSB7XG4gICAgdGhpcy5jbGVhclNlbGVjdGlvbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFycyB0aGUgY3VycmVudCBzZWxlY3Rpb24uXG4gICAqL1xuICBwdWJsaWMgY2xlYXJTZWxlY3Rpb24oKTogdm9pZCB7XG4gICAgdGhpcy5zZWxlY3Rpb25TdGFydCA9IG51bGw7XG4gICAgdGhpcy5zZWxlY3Rpb25FbmQgPSBudWxsO1xuICAgIHRoaXMuaXNTZWxlY3RBbGxBY3RpdmUgPSBmYWxzZTtcbiAgICB0aGlzLnNlbGVjdGlvblN0YXJ0TGVuZ3RoID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZmluYWwgc2VsZWN0aW9uIHN0YXJ0LCB0YWtpbmcgaW50byBjb25zaWRlcmF0aW9uIHNlbGVjdCBhbGwuXG4gICAqL1xuICBwdWJsaWMgZ2V0IGZpbmFsU2VsZWN0aW9uU3RhcnQoKTogW251bWJlciwgbnVtYmVyXSB7XG4gICAgaWYgKHRoaXMuaXNTZWxlY3RBbGxBY3RpdmUpIHtcbiAgICAgIHJldHVybiBbMCwgMF07XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnNlbGVjdGlvbkVuZCB8fCAhdGhpcy5zZWxlY3Rpb25TdGFydCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uU3RhcnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuYXJlU2VsZWN0aW9uVmFsdWVzUmV2ZXJzZWQoKSA/IHRoaXMuc2VsZWN0aW9uRW5kIDogdGhpcy5zZWxlY3Rpb25TdGFydDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZmluYWwgc2VsZWN0aW9uIGVuZCwgdGFraW5nIGludG8gY29uc2lkZXJhdGlvbiBzZWxlY3QgYWxsLCBkb3VibGUgY2xpY2tcbiAgICogd29yZCBzZWxlY3Rpb24gYW5kIHRyaXBsZSBjbGljayBsaW5lIHNlbGVjdGlvbi5cbiAgICovXG4gIHB1YmxpYyBnZXQgZmluYWxTZWxlY3Rpb25FbmQoKTogW251bWJlciwgbnVtYmVyXSB7XG4gICAgaWYgKHRoaXMuaXNTZWxlY3RBbGxBY3RpdmUpIHtcbiAgICAgIHJldHVybiBbdGhpcy5fdGVybWluYWwuY29scywgdGhpcy5fdGVybWluYWwuYnVmZmVyLnliYXNlICsgdGhpcy5fdGVybWluYWwucm93cyAtIDFdO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5zZWxlY3Rpb25TdGFydCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gVXNlIHRoZSBzZWxlY3Rpb24gc3RhcnQgKyBsZW5ndGggaWYgdGhlIGVuZCBkb2Vzbid0IGV4aXN0IG9yIHRoZXkncmUgcmV2ZXJzZWRcbiAgICBpZiAoIXRoaXMuc2VsZWN0aW9uRW5kIHx8IHRoaXMuYXJlU2VsZWN0aW9uVmFsdWVzUmV2ZXJzZWQoKSkge1xuICAgICAgY29uc3Qgc3RhcnRQbHVzTGVuZ3RoID0gdGhpcy5zZWxlY3Rpb25TdGFydFswXSArIHRoaXMuc2VsZWN0aW9uU3RhcnRMZW5ndGg7XG4gICAgICBpZiAoc3RhcnRQbHVzTGVuZ3RoID4gdGhpcy5fdGVybWluYWwuY29scykge1xuICAgICAgICByZXR1cm4gW3N0YXJ0UGx1c0xlbmd0aCAlIHRoaXMuX3Rlcm1pbmFsLmNvbHMsIHRoaXMuc2VsZWN0aW9uU3RhcnRbMV0gKyBNYXRoLmZsb29yKHN0YXJ0UGx1c0xlbmd0aCAvIHRoaXMuX3Rlcm1pbmFsLmNvbHMpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbc3RhcnRQbHVzTGVuZ3RoLCB0aGlzLnNlbGVjdGlvblN0YXJ0WzFdXTtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgdGhlIHRoZSB3b3JkL2xpbmUgaXMgc2VsZWN0ZWQgYWZ0ZXIgYSBkb3VibGUvdHJpcGxlIGNsaWNrXG4gICAgaWYgKHRoaXMuc2VsZWN0aW9uU3RhcnRMZW5ndGgpIHtcbiAgICAgIC8vIFNlbGVjdCB0aGUgbGFyZ2VyIG9mIHRoZSB0d28gd2hlbiBzdGFydCBhbmQgZW5kIGFyZSBvbiB0aGUgc2FtZSBsaW5lXG4gICAgICBpZiAodGhpcy5zZWxlY3Rpb25FbmRbMV0gPT09IHRoaXMuc2VsZWN0aW9uU3RhcnRbMV0pIHtcbiAgICAgICAgcmV0dXJuIFtNYXRoLm1heCh0aGlzLnNlbGVjdGlvblN0YXJ0WzBdICsgdGhpcy5zZWxlY3Rpb25TdGFydExlbmd0aCwgdGhpcy5zZWxlY3Rpb25FbmRbMF0pLCB0aGlzLnNlbGVjdGlvbkVuZFsxXV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNlbGVjdGlvbkVuZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHNlbGVjdGlvbiBzdGFydCBhbmQgZW5kIGFyZSByZXZlcnNlZC5cbiAgICovXG4gIHB1YmxpYyBhcmVTZWxlY3Rpb25WYWx1ZXNSZXZlcnNlZCgpOiBib29sZWFuIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuc2VsZWN0aW9uU3RhcnQ7XG4gICAgY29uc3QgZW5kID0gdGhpcy5zZWxlY3Rpb25FbmQ7XG4gICAgaWYgKCFzdGFydCB8fCAhZW5kKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBzdGFydFsxXSA+IGVuZFsxXSB8fCAoc3RhcnRbMV0gPT09IGVuZFsxXSAmJiBzdGFydFswXSA+IGVuZFswXSk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIHRoZSBidWZmZXIgYmVpbmcgdHJpbW1lZCwgYWRqdXN0IHRoZSBzZWxlY3Rpb24gcG9zaXRpb24uXG4gICAqIEBwYXJhbSBhbW91bnQgVGhlIGFtb3VudCB0aGUgYnVmZmVyIGlzIGJlaW5nIHRyaW1tZWQuXG4gICAqIEByZXR1cm4gV2hldGhlciBhIHJlZnJlc2ggaXMgbmVjZXNzYXJ5LlxuICAgKi9cbiAgcHVibGljIG9uVHJpbShhbW91bnQ6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIC8vIEFkanVzdCB0aGUgc2VsZWN0aW9uIHBvc2l0aW9uIGJhc2VkIG9uIHRoZSB0cmltbWVkIGFtb3VudC5cbiAgICBpZiAodGhpcy5zZWxlY3Rpb25TdGFydCkge1xuICAgICAgdGhpcy5zZWxlY3Rpb25TdGFydFsxXSAtPSBhbW91bnQ7XG4gICAgfVxuICAgIGlmICh0aGlzLnNlbGVjdGlvbkVuZCkge1xuICAgICAgdGhpcy5zZWxlY3Rpb25FbmRbMV0gLT0gYW1vdW50O1xuICAgIH1cblxuICAgIC8vIFRoZSBzZWxlY3Rpb24gaGFzIG1vdmVkIG9mZiB0aGUgYnVmZmVyLCBjbGVhciBpdC5cbiAgICBpZiAodGhpcy5zZWxlY3Rpb25FbmQgJiYgdGhpcy5zZWxlY3Rpb25FbmRbMV0gPCAwKSB7XG4gICAgICB0aGlzLmNsZWFyU2VsZWN0aW9uKCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgc2VsZWN0aW9uIHN0YXJ0IGlzIHRyaW1tZWQsIGVuc3VyZSB0aGUgc3RhcnQgY29sdW1uIGlzIDAuXG4gICAgaWYgKHRoaXMuc2VsZWN0aW9uU3RhcnQgJiYgdGhpcy5zZWxlY3Rpb25TdGFydFsxXSA8IDApIHtcbiAgICAgIHRoaXMuc2VsZWN0aW9uU3RhcnRbMV0gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7QUFXQTtBQXVCQTtBQUNBO0FBRUE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUFBQTtBQU1BO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUE1SEE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/SelectionModel.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/SoundManager.js":
/*!************************************************!*\
  !*** ./node_modules/xterm/lib/SoundManager.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_BELL_SOUND = 'data:audio/wav;base64,UklGRigBAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQQBAADpAFgCwAMlBZoG/wdmCcoKRAypDQ8PbRDBEQQTOxRtFYcWlBePGIUZXhoiG88bcBz7HHIdzh0WHlMeZx51HmkeUx4WHs8dah0AHXwc3hs9G4saxRnyGBIYGBcQFv8U4RPAEoYRQBACD70NWwwHC6gJOwjWBloF7gOBAhABkf8b/qv8R/ve+Xf4Ife79W/0JfPZ8Z/wde9N7ijtE+wU6xvqM+lb6H7nw+YX5mrlxuQz5Mzje+Ma49fioeKD4nXiYeJy4pHitOL04j/jn+MN5IPkFOWs5U3mDefM55/ogOl36m7rdOyE7abuyu8D8Unyj/Pg9D/2qfcb+Yn6/vuK/Qj/lAAlAg==';\nvar SoundManager = (function () {\n    function SoundManager(_terminal) {\n        this._terminal = _terminal;\n    }\n    Object.defineProperty(SoundManager, \"audioContext\", {\n        get: function () {\n            if (!SoundManager._audioContext) {\n                var audioContextCtor = window.AudioContext || window.webkitAudioContext;\n                if (!audioContextCtor) {\n                    console.warn('Web Audio API is not supported by this browser. Consider upgrading to the latest version');\n                    return null;\n                }\n                SoundManager._audioContext = new audioContextCtor();\n            }\n            return SoundManager._audioContext;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SoundManager.prototype.playBellSound = function () {\n        var ctx = SoundManager.audioContext;\n        if (!ctx) {\n            return;\n        }\n        var bellAudioSource = ctx.createBufferSource();\n        ctx.decodeAudioData(this._base64ToArrayBuffer(this._removeMimeType(this._terminal.options.bellSound)), function (buffer) {\n            bellAudioSource.buffer = buffer;\n            bellAudioSource.connect(ctx.destination);\n            bellAudioSource.start(0);\n        });\n    };\n    SoundManager.prototype._base64ToArrayBuffer = function (base64) {\n        var binaryString = window.atob(base64);\n        var len = binaryString.length;\n        var bytes = new Uint8Array(len);\n        for (var i = 0; i < len; i++) {\n            bytes[i] = binaryString.charCodeAt(i);\n        }\n        return bytes.buffer;\n    };\n    SoundManager.prototype._removeMimeType = function (dataURI) {\n        var splitUri = dataURI.split(',');\n        return splitUri[1];\n    };\n    return SoundManager;\n}());\nexports.SoundManager = SoundManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL1NvdW5kTWFuYWdlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9zcmMvU291bmRNYW5hZ2VyLnRzP2U5MDgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJVGVybWluYWwsIElTb3VuZE1hbmFnZXIgfSBmcm9tICcuL1R5cGVzJztcblxuLy8gU291cmNlOiBodHRwczovL2ZyZWVzb3VuZC5vcmcvcGVvcGxlL2FsdGVtYXJrL3NvdW5kcy80NTc1OS9cbi8vIFRoaXMgc291bmQgaXMgcmVsZWFzZWQgdW5kZXIgdGhlIENyZWF0aXZlIENvbW1vbnMgQXR0cmlidXRpb24gMy4wIFVucG9ydGVkXG4vLyAoQ0MgQlkgMy4wKSBsaWNlbnNlLiBJdCB3YXMgY3JlYXRlZCBieSAnYWx0ZW1hcmsnLiBObyBtb2RpZmljYXRpb25zIGhhdmUgYmVlblxuLy8gbWFkZSwgYXBhcnQgZnJvbSB0aGUgY29udmVyc2lvbiB0byBiYXNlNjQuXG5leHBvcnQgY29uc3QgREVGQVVMVF9CRUxMX1NPVU5EID0gJ2RhdGE6YXVkaW8vd2F2O2Jhc2U2NCxVa2xHUmlnQkFBQlhRVlpGWm0xMElCQUFBQUFCQUFFQVJLd0FBSWhZQVFBQ0FCQUFaR0YwWVFRQkFBRHBBRmdDd0FNbEJab0cvd2RtQ2NvS1JBeXBEUThQYlJEQkVRUVRPeFJ0RlljV2xCZVBHSVVaWGhvaUc4OGJjQno3SEhJZHpoMFdIbE1lWng1MUhta2VVeDRXSHM4ZGFoMEFIWHdjM2hzOUc0c2F4Um55R0JJWUdCY1FGdjhVNFJQQUVvWVJRQkFDRDcwTld3d0hDNmdKT3dqV0Jsb0Y3Z09CQWhBQmtmOGIvcXY4Ui92ZStYZjRJZmU3OVcvMEpmUFo4Wi93ZGU5TjdpanRFK3dVNnh2cU0rbGI2SDdudytZWDVtcmx4dVF6NU16amUrTWE0OWZpb2VLRDRuWGlZZUp5NHBIaXRPTDA0ai9qbitNTjVJUGtGT1dzNVUzbURlZk01NS9vZ09sMzZtN3JkT3lFN2FidXl1OEQ4VW55ai9QZzlELzJxZmNiK1luNi92dUsvUWovbEFBbEFnPT0nO1xuXG5leHBvcnQgY2xhc3MgU291bmRNYW5hZ2VyIGltcGxlbWVudHMgSVNvdW5kTWFuYWdlciB7XG4gIHByaXZhdGUgc3RhdGljIF9hdWRpb0NvbnRleHQ6IEF1ZGlvQ29udGV4dDtcblxuICBzdGF0aWMgZ2V0IGF1ZGlvQ29udGV4dCgpOiBBdWRpb0NvbnRleHQgfCBudWxsIHtcbiAgICBpZiAoIVNvdW5kTWFuYWdlci5fYXVkaW9Db250ZXh0KSB7XG4gICAgICBjb25zdCBhdWRpb0NvbnRleHRDdG9yOiB0eXBlb2YgQXVkaW9Db250ZXh0ID0gKDxhbnk+d2luZG93KS5BdWRpb0NvbnRleHQgfHwgKDxhbnk+d2luZG93KS53ZWJraXRBdWRpb0NvbnRleHQ7XG4gICAgICBpZiAoIWF1ZGlvQ29udGV4dEN0b3IpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdXZWIgQXVkaW8gQVBJIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyLiBDb25zaWRlciB1cGdyYWRpbmcgdG8gdGhlIGxhdGVzdCB2ZXJzaW9uJyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgU291bmRNYW5hZ2VyLl9hdWRpb0NvbnRleHQgPSBuZXcgYXVkaW9Db250ZXh0Q3RvcigpO1xuICAgIH1cbiAgICByZXR1cm4gU291bmRNYW5hZ2VyLl9hdWRpb0NvbnRleHQ7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF90ZXJtaW5hbDogSVRlcm1pbmFsXG4gICkge1xuICB9XG5cbiAgcHVibGljIHBsYXlCZWxsU291bmQoKTogdm9pZCB7XG4gICAgY29uc3QgY3R4ID0gU291bmRNYW5hZ2VyLmF1ZGlvQ29udGV4dDtcbiAgICBpZiAoIWN0eCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBiZWxsQXVkaW9Tb3VyY2UgPSBjdHguY3JlYXRlQnVmZmVyU291cmNlKCk7XG4gICAgY3R4LmRlY29kZUF1ZGlvRGF0YSh0aGlzLl9iYXNlNjRUb0FycmF5QnVmZmVyKHRoaXMuX3JlbW92ZU1pbWVUeXBlKHRoaXMuX3Rlcm1pbmFsLm9wdGlvbnMuYmVsbFNvdW5kKSksIChidWZmZXIpID0+IHtcbiAgICAgIGJlbGxBdWRpb1NvdXJjZS5idWZmZXIgPSBidWZmZXI7XG4gICAgICBiZWxsQXVkaW9Tb3VyY2UuY29ubmVjdChjdHguZGVzdGluYXRpb24pO1xuICAgICAgYmVsbEF1ZGlvU291cmNlLnN0YXJ0KDApO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBfYmFzZTY0VG9BcnJheUJ1ZmZlcihiYXNlNjQ6IHN0cmluZyk6IEFycmF5QnVmZmVyIHtcbiAgICBjb25zdCBiaW5hcnlTdHJpbmcgPSB3aW5kb3cuYXRvYihiYXNlNjQpO1xuICAgIGNvbnN0IGxlbiA9IGJpbmFyeVN0cmluZy5sZW5ndGg7XG4gICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShsZW4pO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgYnl0ZXNbaV0gPSBiaW5hcnlTdHJpbmcuY2hhckNvZGVBdChpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnl0ZXMuYnVmZmVyO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVtb3ZlTWltZVR5cGUoZGF0YVVSSTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAvLyBTcGxpdCB0aGUgaW5wdXQgdG8gZ2V0IHRoZSBtaW1lLXR5cGUgYW5kIHRoZSBkYXRhIGl0c2VsZlxuICAgIGNvbnN0IHNwbGl0VXJpID0gZGF0YVVSSS5zcGxpdCgnLCcpO1xuXG4gICAgLy8gUmV0dXJuIG9ubHkgdGhlIGRhdGFcbiAgICByZXR1cm4gc3BsaXRVcmlbMV07XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7QUFXQTtBQUVBO0FBZUE7QUFDQTtBQUVBO0FBZkE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQXBEQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/SoundManager.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/Strings.js":
/*!*******************************************!*\
  !*** ./node_modules/xterm/lib/Strings.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.blankLine = 'Blank line';\nexports.promptLabel = 'Terminal input';\nexports.tooMuchOutput = 'Too much output to announce, navigate to rows manually to read';\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL1N0cmluZ3MuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL1N0cmluZ3MudHM/Mjk1MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOCBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmV4cG9ydCBsZXQgYmxhbmtMaW5lID0gJ0JsYW5rIGxpbmUnO1xuZXhwb3J0IGxldCBwcm9tcHRMYWJlbCA9ICdUZXJtaW5hbCBpbnB1dCc7XG5leHBvcnQgbGV0IHRvb011Y2hPdXRwdXQgPSAnVG9vIG11Y2ggb3V0cHV0IHRvIGFubm91bmNlLCBuYXZpZ2F0ZSB0byByb3dzIG1hbnVhbGx5IHRvIHJlYWQnO1xuIl0sIm1hcHBpbmdzIjoiOztBQUtBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/Strings.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/Terminal.js":
/*!********************************************!*\
  !*** ./node_modules/xterm/lib/Terminal.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BufferSet_1 = __webpack_require__(/*! ./BufferSet */ \"./node_modules/xterm/lib/BufferSet.js\");\nvar Buffer_1 = __webpack_require__(/*! ./Buffer */ \"./node_modules/xterm/lib/Buffer.js\");\nvar CompositionHelper_1 = __webpack_require__(/*! ./CompositionHelper */ \"./node_modules/xterm/lib/CompositionHelper.js\");\nvar EventEmitter_1 = __webpack_require__(/*! ./common/EventEmitter */ \"./node_modules/xterm/lib/common/EventEmitter.js\");\nvar Viewport_1 = __webpack_require__(/*! ./Viewport */ \"./node_modules/xterm/lib/Viewport.js\");\nvar Clipboard_1 = __webpack_require__(/*! ./Clipboard */ \"./node_modules/xterm/lib/Clipboard.js\");\nvar EscapeSequences_1 = __webpack_require__(/*! ./common/data/EscapeSequences */ \"./node_modules/xterm/lib/common/data/EscapeSequences.js\");\nvar InputHandler_1 = __webpack_require__(/*! ./InputHandler */ \"./node_modules/xterm/lib/InputHandler.js\");\nvar Renderer_1 = __webpack_require__(/*! ./renderer/Renderer */ \"./node_modules/xterm/lib/renderer/Renderer.js\");\nvar Linkifier_1 = __webpack_require__(/*! ./Linkifier */ \"./node_modules/xterm/lib/Linkifier.js\");\nvar SelectionManager_1 = __webpack_require__(/*! ./SelectionManager */ \"./node_modules/xterm/lib/SelectionManager.js\");\nvar CharMeasure_1 = __webpack_require__(/*! ./CharMeasure */ \"./node_modules/xterm/lib/CharMeasure.js\");\nvar Browser = __webpack_require__(/*! ./common/Platform */ \"./node_modules/xterm/lib/common/Platform.js\");\nvar Lifecycle_1 = __webpack_require__(/*! ./ui/Lifecycle */ \"./node_modules/xterm/lib/ui/Lifecycle.js\");\nvar Strings = __webpack_require__(/*! ./Strings */ \"./node_modules/xterm/lib/Strings.js\");\nvar MouseHelper_1 = __webpack_require__(/*! ./MouseHelper */ \"./node_modules/xterm/lib/MouseHelper.js\");\nvar SoundManager_1 = __webpack_require__(/*! ./SoundManager */ \"./node_modules/xterm/lib/SoundManager.js\");\nvar MouseZoneManager_1 = __webpack_require__(/*! ./MouseZoneManager */ \"./node_modules/xterm/lib/MouseZoneManager.js\");\nvar AccessibilityManager_1 = __webpack_require__(/*! ./AccessibilityManager */ \"./node_modules/xterm/lib/AccessibilityManager.js\");\nvar CharAtlasCache_1 = __webpack_require__(/*! ./renderer/atlas/CharAtlasCache */ \"./node_modules/xterm/lib/renderer/atlas/CharAtlasCache.js\");\nvar DomRenderer_1 = __webpack_require__(/*! ./renderer/dom/DomRenderer */ \"./node_modules/xterm/lib/renderer/dom/DomRenderer.js\");\nvar Keyboard_1 = __webpack_require__(/*! ./core/input/Keyboard */ \"./node_modules/xterm/lib/core/input/Keyboard.js\");\nvar Clone_1 = __webpack_require__(/*! ./common/Clone */ \"./node_modules/xterm/lib/common/Clone.js\");\nvar EventEmitter2_1 = __webpack_require__(/*! ./common/EventEmitter2 */ \"./node_modules/xterm/lib/common/EventEmitter2.js\");\nvar BufferLine_1 = __webpack_require__(/*! ./core/buffer/BufferLine */ \"./node_modules/xterm/lib/core/buffer/BufferLine.js\");\nvar WindowsMode_1 = __webpack_require__(/*! ./WindowsMode */ \"./node_modules/xterm/lib/WindowsMode.js\");\nvar ColorManager_1 = __webpack_require__(/*! ./ui/ColorManager */ \"./node_modules/xterm/lib/ui/ColorManager.js\");\nvar RenderCoordinator_1 = __webpack_require__(/*! ./renderer/RenderCoordinator */ \"./node_modules/xterm/lib/renderer/RenderCoordinator.js\");\nvar document = (typeof window !== 'undefined') ? window.document : null;\nvar WRITE_BUFFER_PAUSE_THRESHOLD = 5;\nvar WRITE_TIMEOUT_MS = 12;\nvar WRITE_BUFFER_LENGTH_THRESHOLD = 50;\nvar MINIMUM_COLS = 2;\nvar MINIMUM_ROWS = 1;\nvar CONSTRUCTOR_ONLY_OPTIONS = ['cols', 'rows'];\nvar DEFAULT_OPTIONS = {\n    cols: 80,\n    rows: 24,\n    convertEol: false,\n    termName: 'xterm',\n    cursorBlink: false,\n    cursorStyle: 'block',\n    bellSound: SoundManager_1.DEFAULT_BELL_SOUND,\n    bellStyle: 'none',\n    drawBoldTextInBrightColors: true,\n    enableBold: true,\n    experimentalCharAtlas: 'static',\n    fontFamily: 'courier-new, courier, monospace',\n    fontSize: 15,\n    fontWeight: 'normal',\n    fontWeightBold: 'bold',\n    lineHeight: 1.0,\n    letterSpacing: 0,\n    scrollback: 1000,\n    screenKeys: false,\n    screenReaderMode: false,\n    debug: false,\n    macOptionIsMeta: false,\n    macOptionClickForcesSelection: false,\n    cancelEvents: false,\n    disableStdin: false,\n    useFlowControl: false,\n    allowTransparency: false,\n    tabStopWidth: 8,\n    theme: undefined,\n    rightClickSelectsWord: Browser.isMac,\n    rendererType: 'canvas',\n    windowsMode: false\n};\nvar Terminal = (function (_super) {\n    __extends(Terminal, _super);\n    function Terminal(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this) || this;\n        _this.browser = Browser;\n        _this._blankLine = null;\n        _this._onCursorMove = new EventEmitter2_1.EventEmitter2();\n        _this._onData = new EventEmitter2_1.EventEmitter2();\n        _this._onKey = new EventEmitter2_1.EventEmitter2();\n        _this._onLineFeed = new EventEmitter2_1.EventEmitter2();\n        _this._onRender = new EventEmitter2_1.EventEmitter2();\n        _this._onResize = new EventEmitter2_1.EventEmitter2();\n        _this._onScroll = new EventEmitter2_1.EventEmitter2();\n        _this._onSelectionChange = new EventEmitter2_1.EventEmitter2();\n        _this._onTitleChange = new EventEmitter2_1.EventEmitter2();\n        _this.options = Clone_1.clone(options);\n        _this._setup();\n        _this.onCursorMove(function () { return _this.emit('cursormove'); });\n        _this.onData(function (e) { return _this.emit('data', e); });\n        _this.onKey(function (e) { return _this.emit('key', e.key, e.domEvent); });\n        _this.onLineFeed(function () { return _this.emit('linefeed'); });\n        _this.onRender(function (e) { return _this.emit('refresh', e); });\n        _this.onResize(function (e) { return _this.emit('resize', e); });\n        _this.onSelectionChange(function () { return _this.emit('selection'); });\n        _this.onScroll(function (e) { return _this.emit('scroll', e); });\n        _this.onTitleChange(function (e) { return _this.emit('title', e); });\n        return _this;\n    }\n    Object.defineProperty(Terminal.prototype, \"onCursorMove\", {\n        get: function () { return this._onCursorMove.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"onData\", {\n        get: function () { return this._onData.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"onKey\", {\n        get: function () { return this._onKey.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"onLineFeed\", {\n        get: function () { return this._onLineFeed.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"onRender\", {\n        get: function () { return this._onRender.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"onResize\", {\n        get: function () { return this._onResize.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"onScroll\", {\n        get: function () { return this._onScroll.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"onSelectionChange\", {\n        get: function () { return this._onSelectionChange.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"onTitleChange\", {\n        get: function () { return this._onTitleChange.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Terminal.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        if (this._windowsMode) {\n            this._windowsMode.dispose();\n            this._windowsMode = undefined;\n        }\n        this._customKeyEventHandler = null;\n        CharAtlasCache_1.removeTerminalFromCache(this);\n        this.handler = function () { };\n        this.write = function () { };\n        if (this.element && this.element.parentNode) {\n            this.element.parentNode.removeChild(this.element);\n        }\n    };\n    Terminal.prototype.destroy = function () {\n        this.dispose();\n    };\n    Terminal.prototype._setup = function () {\n        var _this = this;\n        Object.keys(DEFAULT_OPTIONS).forEach(function (key) {\n            if (_this.options[key] === null || _this.options[key] === undefined) {\n                _this.options[key] = DEFAULT_OPTIONS[key];\n            }\n        });\n        this._parent = document ? document.body : null;\n        this.cols = Math.max(this.options.cols, MINIMUM_COLS);\n        this.rows = Math.max(this.options.rows, MINIMUM_ROWS);\n        if (this.options.handler) {\n            this.onData(this.options.handler);\n        }\n        this.cursorState = 0;\n        this.cursorHidden = false;\n        this._customKeyEventHandler = null;\n        this.applicationKeypad = false;\n        this.applicationCursor = false;\n        this.originMode = false;\n        this.insertMode = false;\n        this.wraparoundMode = true;\n        this.bracketedPasteMode = false;\n        this.charset = null;\n        this.gcharset = null;\n        this.glevel = 0;\n        this.charsets = [null];\n        this.curAttrData = BufferLine_1.DEFAULT_ATTR_DATA.clone();\n        this._eraseAttrData = BufferLine_1.DEFAULT_ATTR_DATA.clone();\n        this.params = [];\n        this.currentParam = 0;\n        this.writeBuffer = [];\n        this.writeBufferUtf8 = [];\n        this._writeInProgress = false;\n        this._xoffSentToCatchUp = false;\n        this._userScrolling = false;\n        this._inputHandler = new InputHandler_1.InputHandler(this);\n        this._inputHandler.onCursorMove(function () { return _this._onCursorMove.fire(); });\n        this._inputHandler.onLineFeed(function () { return _this._onLineFeed.fire(); });\n        this._inputHandler.onData(function (e) { return _this._onData.fire(e); });\n        this.register(this._inputHandler);\n        this.selectionManager = this.selectionManager || null;\n        this.linkifier = this.linkifier || new Linkifier_1.Linkifier(this);\n        this._mouseZoneManager = this._mouseZoneManager || null;\n        this.soundManager = this.soundManager || new SoundManager_1.SoundManager(this);\n        this.buffers = new BufferSet_1.BufferSet(this);\n        if (this.selectionManager) {\n            this.selectionManager.clearSelection();\n            this.selectionManager.initBuffersListeners();\n        }\n        if (this.options.windowsMode) {\n            this._windowsMode = WindowsMode_1.applyWindowsMode(this);\n        }\n    };\n    Object.defineProperty(Terminal.prototype, \"buffer\", {\n        get: function () {\n            return this.buffers.active;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Terminal.prototype.eraseAttrData = function () {\n        this._eraseAttrData.bg &= ~(50331648 | 0xFFFFFF);\n        this._eraseAttrData.bg |= this.curAttrData.bg & ~0xFC000000;\n        return this._eraseAttrData;\n    };\n    Terminal.prototype.focus = function () {\n        if (this.textarea) {\n            this.textarea.focus({ preventScroll: true });\n        }\n    };\n    Object.defineProperty(Terminal.prototype, \"isFocused\", {\n        get: function () {\n            return document.activeElement === this.textarea && document.hasFocus();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Terminal.prototype.getOption = function (key) {\n        if (!(key in DEFAULT_OPTIONS)) {\n            throw new Error('No option with key \"' + key + '\"');\n        }\n        return this.options[key];\n    };\n    Terminal.prototype.setOption = function (key, value) {\n        if (!(key in DEFAULT_OPTIONS)) {\n            throw new Error('No option with key \"' + key + '\"');\n        }\n        if (CONSTRUCTOR_ONLY_OPTIONS.indexOf(key) !== -1) {\n            console.error(\"Option \\\"\" + key + \"\\\" can only be set in the constructor\");\n        }\n        if (this.options[key] === value) {\n            return;\n        }\n        switch (key) {\n            case 'bellStyle':\n                if (!value) {\n                    value = 'none';\n                }\n                break;\n            case 'cursorStyle':\n                if (!value) {\n                    value = 'block';\n                }\n                break;\n            case 'fontWeight':\n                if (!value) {\n                    value = 'normal';\n                }\n                break;\n            case 'fontWeightBold':\n                if (!value) {\n                    value = 'bold';\n                }\n                break;\n            case 'lineHeight':\n                if (value < 1) {\n                    console.warn(key + \" cannot be less than 1, value: \" + value);\n                    return;\n                }\n            case 'rendererType':\n                if (!value) {\n                    value = 'canvas';\n                }\n                break;\n            case 'tabStopWidth':\n                if (value < 1) {\n                    console.warn(key + \" cannot be less than 1, value: \" + value);\n                    return;\n                }\n                break;\n            case 'theme':\n                this._setTheme(value);\n                break;\n            case 'scrollback':\n                value = Math.min(value, Buffer_1.MAX_BUFFER_SIZE);\n                if (value < 0) {\n                    console.warn(key + \" cannot be less than 0, value: \" + value);\n                    return;\n                }\n                if (this.options[key] !== value) {\n                    var newBufferLength = this.rows + value;\n                    if (this.buffer.lines.length > newBufferLength) {\n                        var amountToTrim = this.buffer.lines.length - newBufferLength;\n                        var needsRefresh = (this.buffer.ydisp - amountToTrim < 0);\n                        this.buffer.lines.trimStart(amountToTrim);\n                        this.buffer.ybase = Math.max(this.buffer.ybase - amountToTrim, 0);\n                        this.buffer.ydisp = Math.max(this.buffer.ydisp - amountToTrim, 0);\n                        if (needsRefresh) {\n                            this.refresh(0, this.rows - 1);\n                        }\n                    }\n                }\n                break;\n        }\n        this.options[key] = value;\n        switch (key) {\n            case 'fontFamily':\n            case 'fontSize':\n                if (this._renderCoordinator) {\n                    this._renderCoordinator.clear();\n                    this.charMeasure.measure(this.options);\n                }\n                break;\n            case 'drawBoldTextInBrightColors':\n            case 'experimentalCharAtlas':\n            case 'enableBold':\n            case 'letterSpacing':\n            case 'lineHeight':\n            case 'fontWeight':\n            case 'fontWeightBold':\n                if (this._renderCoordinator) {\n                    this._renderCoordinator.clear();\n                    this._renderCoordinator.onResize(this.cols, this.rows);\n                    this.refresh(0, this.rows - 1);\n                }\n                break;\n            case 'rendererType':\n                if (this._renderCoordinator) {\n                    this._renderCoordinator.setRenderer(this._createRenderer());\n                }\n                break;\n            case 'scrollback':\n                this.buffers.resize(this.cols, this.rows);\n                if (this.viewport) {\n                    this.viewport.syncScrollArea();\n                }\n                break;\n            case 'screenReaderMode':\n                if (value) {\n                    if (!this._accessibilityManager && this._renderCoordinator) {\n                        this._accessibilityManager = new AccessibilityManager_1.AccessibilityManager(this, this._renderCoordinator.dimensions);\n                    }\n                }\n                else {\n                    if (this._accessibilityManager) {\n                        this._accessibilityManager.dispose();\n                        this._accessibilityManager = null;\n                    }\n                }\n                break;\n            case 'tabStopWidth':\n                this.buffers.setupTabStops();\n                break;\n            case 'windowsMode':\n                if (value) {\n                    if (!this._windowsMode) {\n                        this._windowsMode = WindowsMode_1.applyWindowsMode(this);\n                    }\n                }\n                else {\n                    if (this._windowsMode) {\n                        this._windowsMode.dispose();\n                        this._windowsMode = undefined;\n                    }\n                }\n                break;\n        }\n        if (this._renderCoordinator) {\n            this._renderCoordinator.onOptionsChanged();\n        }\n    };\n    Terminal.prototype._onTextAreaFocus = function (ev) {\n        if (this.sendFocus) {\n            this.handler(EscapeSequences_1.C0.ESC + '[I');\n        }\n        this.updateCursorStyle(ev);\n        this.element.classList.add('focus');\n        this.showCursor();\n        this.emit('focus');\n    };\n    Terminal.prototype.blur = function () {\n        return this.textarea.blur();\n    };\n    Terminal.prototype._onTextAreaBlur = function () {\n        this.textarea.value = '';\n        this.refresh(this.buffer.y, this.buffer.y);\n        if (this.sendFocus) {\n            this.handler(EscapeSequences_1.C0.ESC + '[O');\n        }\n        this.element.classList.remove('focus');\n        this.emit('blur');\n    };\n    Terminal.prototype._initGlobal = function () {\n        var _this = this;\n        this._bindKeys();\n        this.register(Lifecycle_1.addDisposableDomListener(this.element, 'copy', function (event) {\n            if (!_this.hasSelection()) {\n                return;\n            }\n            Clipboard_1.copyHandler(event, _this, _this.selectionManager);\n        }));\n        var pasteHandlerWrapper = function (event) { return Clipboard_1.pasteHandler(event, _this); };\n        this.register(Lifecycle_1.addDisposableDomListener(this.textarea, 'paste', pasteHandlerWrapper));\n        this.register(Lifecycle_1.addDisposableDomListener(this.element, 'paste', pasteHandlerWrapper));\n        if (Browser.isFirefox) {\n            this.register(Lifecycle_1.addDisposableDomListener(this.element, 'mousedown', function (event) {\n                if (event.button === 2) {\n                    Clipboard_1.rightClickHandler(event, _this, _this.selectionManager, _this.options.rightClickSelectsWord);\n                }\n            }));\n        }\n        else {\n            this.register(Lifecycle_1.addDisposableDomListener(this.element, 'contextmenu', function (event) {\n                Clipboard_1.rightClickHandler(event, _this, _this.selectionManager, _this.options.rightClickSelectsWord);\n            }));\n        }\n        if (Browser.isLinux) {\n            this.register(Lifecycle_1.addDisposableDomListener(this.element, 'auxclick', function (event) {\n                if (event.button === 1) {\n                    Clipboard_1.moveTextAreaUnderMouseCursor(event, _this);\n                }\n            }));\n        }\n    };\n    Terminal.prototype._bindKeys = function () {\n        var _this = this;\n        var self = this;\n        this.register(Lifecycle_1.addDisposableDomListener(this.element, 'keydown', function (ev) {\n            if (document.activeElement !== this) {\n                return;\n            }\n            self._keyDown(ev);\n        }, true));\n        this.register(Lifecycle_1.addDisposableDomListener(this.element, 'keypress', function (ev) {\n            if (document.activeElement !== this) {\n                return;\n            }\n            self._keyPress(ev);\n        }, true));\n        this.register(Lifecycle_1.addDisposableDomListener(this.element, 'keyup', function (ev) {\n            if (!wasModifierKeyOnlyEvent(ev)) {\n                _this.focus();\n            }\n            self._keyUp(ev);\n        }, true));\n        this.register(Lifecycle_1.addDisposableDomListener(this.textarea, 'keydown', function (ev) { return _this._keyDown(ev); }, true));\n        this.register(Lifecycle_1.addDisposableDomListener(this.textarea, 'keypress', function (ev) { return _this._keyPress(ev); }, true));\n        this.register(Lifecycle_1.addDisposableDomListener(this.textarea, 'compositionstart', function () { return _this._compositionHelper.compositionstart(); }));\n        this.register(Lifecycle_1.addDisposableDomListener(this.textarea, 'compositionupdate', function (e) { return _this._compositionHelper.compositionupdate(e); }));\n        this.register(Lifecycle_1.addDisposableDomListener(this.textarea, 'compositionend', function () { return _this._compositionHelper.compositionend(); }));\n        this.register(this.onRender(function () { return _this._compositionHelper.updateCompositionElements(); }));\n        this.register(this.onRender(function (e) { return _this._queueLinkification(e.start, e.end); }));\n    };\n    Terminal.prototype.open = function (parent) {\n        var _this = this;\n        this._parent = parent || this._parent;\n        if (!this._parent) {\n            throw new Error('Terminal requires a parent element.');\n        }\n        this._context = this._parent.ownerDocument.defaultView;\n        this._document = this._parent.ownerDocument;\n        this.element = this._document.createElement('div');\n        this.element.dir = 'ltr';\n        this.element.classList.add('terminal');\n        this.element.classList.add('xterm');\n        this.element.setAttribute('tabindex', '0');\n        this._parent.appendChild(this.element);\n        var fragment = document.createDocumentFragment();\n        this._viewportElement = document.createElement('div');\n        this._viewportElement.classList.add('xterm-viewport');\n        fragment.appendChild(this._viewportElement);\n        this._viewportScrollArea = document.createElement('div');\n        this._viewportScrollArea.classList.add('xterm-scroll-area');\n        this._viewportElement.appendChild(this._viewportScrollArea);\n        this.screenElement = document.createElement('div');\n        this.screenElement.classList.add('xterm-screen');\n        this._helperContainer = document.createElement('div');\n        this._helperContainer.classList.add('xterm-helpers');\n        this.screenElement.appendChild(this._helperContainer);\n        fragment.appendChild(this.screenElement);\n        this._mouseZoneManager = new MouseZoneManager_1.MouseZoneManager(this);\n        this.register(this._mouseZoneManager);\n        this.register(this.onScroll(function () { return _this._mouseZoneManager.clearAll(); }));\n        this.linkifier.attachToDom(this._mouseZoneManager);\n        this.textarea = document.createElement('textarea');\n        this.textarea.classList.add('xterm-helper-textarea');\n        this.textarea.setAttribute('aria-label', Strings.promptLabel);\n        this.textarea.setAttribute('aria-multiline', 'false');\n        this.textarea.setAttribute('autocorrect', 'off');\n        this.textarea.setAttribute('autocapitalize', 'off');\n        this.textarea.setAttribute('spellcheck', 'false');\n        this.textarea.tabIndex = 0;\n        this.register(Lifecycle_1.addDisposableDomListener(this.textarea, 'focus', function (ev) { return _this._onTextAreaFocus(ev); }));\n        this.register(Lifecycle_1.addDisposableDomListener(this.textarea, 'blur', function () { return _this._onTextAreaBlur(); }));\n        this._helperContainer.appendChild(this.textarea);\n        this._compositionView = document.createElement('div');\n        this._compositionView.classList.add('composition-view');\n        this._compositionHelper = new CompositionHelper_1.CompositionHelper(this.textarea, this._compositionView, this);\n        this._helperContainer.appendChild(this._compositionView);\n        this.charMeasure = new CharMeasure_1.CharMeasure(document, this._helperContainer);\n        this.element.appendChild(fragment);\n        this._theme = this.options.theme;\n        this._colorManager = new ColorManager_1.ColorManager(document, this.options.allowTransparency);\n        this._colorManager.setTheme(this._theme);\n        var renderer = this._createRenderer();\n        this._renderCoordinator = new RenderCoordinator_1.RenderCoordinator(renderer, this.rows, this.screenElement);\n        this._renderCoordinator.onRender(function (e) { return _this._onRender.fire(e); });\n        this.onResize(function (e) { return _this._renderCoordinator.resize(e.cols, e.rows); });\n        this.viewport = new Viewport_1.Viewport(this, this._viewportElement, this._viewportScrollArea, this.charMeasure, this._renderCoordinator.dimensions);\n        this.viewport.onThemeChange(this._colorManager.colors);\n        this.register(this.viewport);\n        this.register(this.onCursorMove(function () { return _this._renderCoordinator.onCursorMove(); }));\n        this.register(this.onResize(function () { return _this._renderCoordinator.onResize(_this.cols, _this.rows); }));\n        this.register(this.addDisposableListener('blur', function () { return _this._renderCoordinator.onBlur(); }));\n        this.register(this.addDisposableListener('focus', function () { return _this._renderCoordinator.onFocus(); }));\n        this.register(this.charMeasure.onCharSizeChanged(function () { return _this._renderCoordinator.onCharSizeChanged(); }));\n        this.register(this._renderCoordinator.onDimensionsChange(function () { return _this.viewport.syncScrollArea(); }));\n        this.selectionManager = new SelectionManager_1.SelectionManager(this, this.charMeasure);\n        this.register(this.selectionManager.onSelectionChange(function () { return _this._onSelectionChange.fire(); }));\n        this.register(Lifecycle_1.addDisposableDomListener(this.element, 'mousedown', function (e) { return _this.selectionManager.onMouseDown(e); }));\n        this.register(this.selectionManager.onRedrawRequest(function (e) { return _this._renderCoordinator.onSelectionChanged(e.start, e.end, e.columnSelectMode); }));\n        this.register(this.selectionManager.onLinuxMouseSelection(function (text) {\n            _this.textarea.value = text;\n            _this.textarea.focus();\n            _this.textarea.select();\n        }));\n        this.register(this.onScroll(function () {\n            _this.viewport.syncScrollArea();\n            _this.selectionManager.refresh();\n        }));\n        this.register(Lifecycle_1.addDisposableDomListener(this._viewportElement, 'scroll', function () { return _this.selectionManager.refresh(); }));\n        this.mouseHelper = new MouseHelper_1.MouseHelper(this._renderCoordinator);\n        this.element.classList.toggle('enable-mouse-events', this.mouseEvents);\n        if (this.mouseEvents) {\n            this.selectionManager.disable();\n        }\n        else {\n            this.selectionManager.enable();\n        }\n        if (this.options.screenReaderMode) {\n            this._accessibilityManager = new AccessibilityManager_1.AccessibilityManager(this, this._renderCoordinator.dimensions);\n            this._accessibilityManager.register(this._renderCoordinator.onDimensionsChange(function (e) { return _this._accessibilityManager.setDimensions(e); }));\n        }\n        this.charMeasure.measure(this.options);\n        this.refresh(0, this.rows - 1);\n        this._initGlobal();\n        this.bindMouse();\n    };\n    Terminal.prototype._createRenderer = function () {\n        switch (this.options.rendererType) {\n            case 'canvas':\n                return new Renderer_1.Renderer(this, this._colorManager.colors);\n                break;\n            case 'dom':\n                return new DomRenderer_1.DomRenderer(this, this._colorManager.colors);\n                break;\n            default: throw new Error(\"Unrecognized rendererType \\\"\" + this.options.rendererType + \"\\\"\");\n        }\n    };\n    Terminal.prototype._setTheme = function (theme) {\n        this._theme = theme;\n        if (this._colorManager) {\n            this._colorManager.setTheme(theme);\n        }\n        if (this._renderCoordinator) {\n            this._renderCoordinator.setColors(this._colorManager.colors);\n        }\n        if (this.viewport) {\n            this.viewport.onThemeChange(this._colorManager.colors);\n        }\n    };\n    Terminal.prototype.bindMouse = function () {\n        var _this = this;\n        var el = this.element;\n        var self = this;\n        var pressed = 32;\n        function sendButton(ev) {\n            var button;\n            var pos;\n            button = getButton(ev);\n            pos = self.mouseHelper.getRawByteCoords(ev, self.screenElement, self.charMeasure, self.cols, self.rows);\n            if (!pos)\n                return;\n            sendEvent(button, pos);\n            switch (ev.overrideType || ev.type) {\n                case 'mousedown':\n                    pressed = button;\n                    break;\n                case 'mouseup':\n                    pressed = 32;\n                    break;\n                case 'wheel':\n                    break;\n            }\n        }\n        function sendMove(ev) {\n            var button = pressed;\n            var pos = self.mouseHelper.getRawByteCoords(ev, self.screenElement, self.charMeasure, self.cols, self.rows);\n            if (!pos)\n                return;\n            button += 32;\n            sendEvent(button, pos);\n        }\n        function encode(data, ch) {\n            if (!self.utfMouse) {\n                if (ch === 255) {\n                    data.push(0);\n                    return;\n                }\n                if (ch > 127)\n                    ch = 127;\n                data.push(ch);\n            }\n            else {\n                if (ch > 2047) {\n                    data.push(2047);\n                    return;\n                }\n                data.push(ch);\n            }\n        }\n        function sendEvent(button, pos) {\n            if (self._vt300Mouse) {\n                button &= 3;\n                pos.x -= 32;\n                pos.y -= 32;\n                var data_1 = EscapeSequences_1.C0.ESC + '[24';\n                if (button === 0)\n                    data_1 += '1';\n                else if (button === 1)\n                    data_1 += '3';\n                else if (button === 2)\n                    data_1 += '5';\n                else if (button === 3)\n                    return;\n                else\n                    data_1 += '0';\n                data_1 += '~[' + pos.x + ',' + pos.y + ']\\r';\n                self.handler(data_1);\n                return;\n            }\n            if (self._decLocator) {\n                button &= 3;\n                pos.x -= 32;\n                pos.y -= 32;\n                if (button === 0)\n                    button = 2;\n                else if (button === 1)\n                    button = 4;\n                else if (button === 2)\n                    button = 6;\n                else if (button === 3)\n                    button = 3;\n                self.handler(EscapeSequences_1.C0.ESC + '['\n                    + button\n                    + ';'\n                    + (button === 3 ? 4 : 0)\n                    + ';'\n                    + pos.y\n                    + ';'\n                    + pos.x\n                    + ';'\n                    + pos.page || 0\n                    + '&w');\n                return;\n            }\n            if (self.urxvtMouse) {\n                pos.x -= 32;\n                pos.y -= 32;\n                pos.x++;\n                pos.y++;\n                self.handler(EscapeSequences_1.C0.ESC + '[' + button + ';' + pos.x + ';' + pos.y + 'M');\n                return;\n            }\n            if (self.sgrMouse) {\n                pos.x -= 32;\n                pos.y -= 32;\n                self.handler(EscapeSequences_1.C0.ESC + '[<'\n                    + (((button & 3) === 3 ? button & ~3 : button) - 32)\n                    + ';'\n                    + pos.x\n                    + ';'\n                    + pos.y\n                    + ((button & 3) === 3 ? 'm' : 'M'));\n                return;\n            }\n            var data = [];\n            encode(data, button);\n            encode(data, pos.x);\n            encode(data, pos.y);\n            self.handler(EscapeSequences_1.C0.ESC + '[M' + String.fromCharCode.apply(String, data));\n        }\n        function getButton(ev) {\n            var button;\n            var shift;\n            var meta;\n            var ctrl;\n            var mod;\n            switch (ev.overrideType || ev.type) {\n                case 'mousedown':\n                    button = ev.button !== null && ev.button !== undefined\n                        ? +ev.button\n                        : ev.which !== null && ev.which !== undefined\n                            ? ev.which - 1\n                            : null;\n                    if (Browser.isMSIE) {\n                        button = button === 1 ? 0 : button === 4 ? 1 : button;\n                    }\n                    break;\n                case 'mouseup':\n                    button = 3;\n                    break;\n                case 'DOMMouseScroll':\n                    button = ev.detail < 0\n                        ? 64\n                        : 65;\n                    break;\n                case 'wheel':\n                    button = ev.deltaY < 0\n                        ? 64\n                        : 65;\n                    break;\n            }\n            shift = ev.shiftKey ? 4 : 0;\n            meta = ev.metaKey ? 8 : 0;\n            ctrl = ev.ctrlKey ? 16 : 0;\n            mod = shift | meta | ctrl;\n            if (self.vt200Mouse) {\n                mod &= ctrl;\n            }\n            else if (!self.normalMouse) {\n                mod = 0;\n            }\n            button = (32 + (mod << 2)) + button;\n            return button;\n        }\n        this.register(Lifecycle_1.addDisposableDomListener(el, 'mousedown', function (ev) {\n            ev.preventDefault();\n            _this.focus();\n            if (!_this.mouseEvents || _this.selectionManager.shouldForceSelection(ev)) {\n                return;\n            }\n            sendButton(ev);\n            if (_this.vt200Mouse) {\n                ev.overrideType = 'mouseup';\n                sendButton(ev);\n                return _this.cancel(ev);\n            }\n            var moveHandler;\n            if (_this.normalMouse) {\n                moveHandler = function (event) {\n                    if (!_this.normalMouse) {\n                        return;\n                    }\n                    sendMove(event);\n                };\n                _this._document.addEventListener('mousemove', moveHandler);\n            }\n            var handler = function (ev) {\n                if (_this.normalMouse && !_this.x10Mouse) {\n                    sendButton(ev);\n                }\n                if (moveHandler) {\n                    _this._document.removeEventListener('mousemove', moveHandler);\n                    moveHandler = null;\n                }\n                _this._document.removeEventListener('mouseup', handler);\n                return _this.cancel(ev);\n            };\n            _this._document.addEventListener('mouseup', handler);\n            return _this.cancel(ev);\n        }));\n        this.register(Lifecycle_1.addDisposableDomListener(el, 'wheel', function (ev) {\n            if (!_this.mouseEvents) {\n                if (!_this.buffer.hasScrollback) {\n                    var amount = _this.viewport.getLinesScrolled(ev);\n                    if (amount === 0) {\n                        return;\n                    }\n                    var sequence = EscapeSequences_1.C0.ESC + (_this.applicationCursor ? 'O' : '[') + (ev.deltaY < 0 ? 'A' : 'B');\n                    var data = '';\n                    for (var i = 0; i < Math.abs(amount); i++) {\n                        data += sequence;\n                    }\n                    _this.handler(data);\n                }\n                return;\n            }\n            if (_this.x10Mouse || _this._vt300Mouse || _this._decLocator)\n                return;\n            sendButton(ev);\n            ev.preventDefault();\n        }));\n        this.register(Lifecycle_1.addDisposableDomListener(el, 'wheel', function (ev) {\n            if (_this.mouseEvents)\n                return;\n            _this.viewport.onWheel(ev);\n            return _this.cancel(ev);\n        }));\n        this.register(Lifecycle_1.addDisposableDomListener(el, 'touchstart', function (ev) {\n            if (_this.mouseEvents)\n                return;\n            _this.viewport.onTouchStart(ev);\n            return _this.cancel(ev);\n        }));\n        this.register(Lifecycle_1.addDisposableDomListener(el, 'touchmove', function (ev) {\n            if (_this.mouseEvents)\n                return;\n            _this.viewport.onTouchMove(ev);\n            return _this.cancel(ev);\n        }));\n    };\n    Terminal.prototype.refresh = function (start, end) {\n        if (this._renderCoordinator) {\n            this._renderCoordinator.refreshRows(start, end);\n        }\n    };\n    Terminal.prototype._queueLinkification = function (start, end) {\n        if (this.linkifier) {\n            this.linkifier.linkifyRows(start, end);\n        }\n    };\n    Terminal.prototype.updateCursorStyle = function (ev) {\n        if (this.selectionManager && this.selectionManager.shouldColumnSelect(ev)) {\n            this.element.classList.add('column-select');\n        }\n        else {\n            this.element.classList.remove('column-select');\n        }\n    };\n    Terminal.prototype.showCursor = function () {\n        if (!this.cursorState) {\n            this.cursorState = 1;\n            this.refresh(this.buffer.y, this.buffer.y);\n        }\n    };\n    Terminal.prototype.scroll = function (isWrapped) {\n        if (isWrapped === void 0) { isWrapped = false; }\n        var newLine;\n        newLine = this._blankLine;\n        var eraseAttr = this.eraseAttrData();\n        if (!newLine || newLine.length !== this.cols || newLine.getFg(0) !== eraseAttr.fg || newLine.getBg(0) !== eraseAttr.bg) {\n            newLine = this.buffer.getBlankLine(eraseAttr, isWrapped);\n            this._blankLine = newLine;\n        }\n        newLine.isWrapped = isWrapped;\n        var topRow = this.buffer.ybase + this.buffer.scrollTop;\n        var bottomRow = this.buffer.ybase + this.buffer.scrollBottom;\n        if (this.buffer.scrollTop === 0) {\n            var willBufferBeTrimmed = this.buffer.lines.isFull;\n            if (bottomRow === this.buffer.lines.length - 1) {\n                if (willBufferBeTrimmed) {\n                    this.buffer.lines.recycle().copyFrom(newLine);\n                }\n                else {\n                    this.buffer.lines.push(newLine.clone());\n                }\n            }\n            else {\n                this.buffer.lines.splice(bottomRow + 1, 0, newLine.clone());\n            }\n            if (!willBufferBeTrimmed) {\n                this.buffer.ybase++;\n                if (!this._userScrolling) {\n                    this.buffer.ydisp++;\n                }\n            }\n            else {\n                if (this._userScrolling) {\n                    this.buffer.ydisp = Math.max(this.buffer.ydisp - 1, 0);\n                }\n            }\n        }\n        else {\n            var scrollRegionHeight = bottomRow - topRow + 1;\n            this.buffer.lines.shiftElements(topRow + 1, scrollRegionHeight - 1, -1);\n            this.buffer.lines.set(bottomRow, newLine.clone());\n        }\n        if (!this._userScrolling) {\n            this.buffer.ydisp = this.buffer.ybase;\n        }\n        this.updateRange(this.buffer.scrollTop);\n        this.updateRange(this.buffer.scrollBottom);\n        this._onScroll.fire(this.buffer.ydisp);\n    };\n    Terminal.prototype.scrollLines = function (disp, suppressScrollEvent) {\n        if (disp < 0) {\n            if (this.buffer.ydisp === 0) {\n                return;\n            }\n            this._userScrolling = true;\n        }\n        else if (disp + this.buffer.ydisp >= this.buffer.ybase) {\n            this._userScrolling = false;\n        }\n        var oldYdisp = this.buffer.ydisp;\n        this.buffer.ydisp = Math.max(Math.min(this.buffer.ydisp + disp, this.buffer.ybase), 0);\n        if (oldYdisp === this.buffer.ydisp) {\n            return;\n        }\n        if (!suppressScrollEvent) {\n            this._onScroll.fire(this.buffer.ydisp);\n        }\n        this.refresh(0, this.rows - 1);\n    };\n    Terminal.prototype.scrollPages = function (pageCount) {\n        this.scrollLines(pageCount * (this.rows - 1));\n    };\n    Terminal.prototype.scrollToTop = function () {\n        this.scrollLines(-this.buffer.ydisp);\n    };\n    Terminal.prototype.scrollToBottom = function () {\n        this.scrollLines(this.buffer.ybase - this.buffer.ydisp);\n    };\n    Terminal.prototype.scrollToLine = function (line) {\n        var scrollAmount = line - this.buffer.ydisp;\n        if (scrollAmount !== 0) {\n            this.scrollLines(scrollAmount);\n        }\n    };\n    Terminal.prototype.writeUtf8 = function (data) {\n        var _this = this;\n        if (this._isDisposed) {\n            return;\n        }\n        if (!data) {\n            return;\n        }\n        this.writeBufferUtf8.push(data);\n        if (this.options.useFlowControl && !this._xoffSentToCatchUp && this.writeBufferUtf8.length >= WRITE_BUFFER_PAUSE_THRESHOLD) {\n            this.handler(EscapeSequences_1.C0.DC3);\n            this._xoffSentToCatchUp = true;\n        }\n        if (!this._writeInProgress && this.writeBufferUtf8.length > 0) {\n            this._writeInProgress = true;\n            setTimeout(function () {\n                _this._innerWriteUtf8();\n            });\n        }\n    };\n    Terminal.prototype._innerWriteUtf8 = function (bufferOffset) {\n        var _this = this;\n        if (bufferOffset === void 0) { bufferOffset = 0; }\n        if (this._isDisposed) {\n            this.writeBufferUtf8 = [];\n        }\n        var startTime = Date.now();\n        while (this.writeBufferUtf8.length > bufferOffset) {\n            var data = this.writeBufferUtf8[bufferOffset];\n            bufferOffset++;\n            if (this._xoffSentToCatchUp && this.writeBufferUtf8.length === bufferOffset) {\n                this.handler(EscapeSequences_1.C0.DC1);\n                this._xoffSentToCatchUp = false;\n            }\n            this._refreshStart = this.buffer.y;\n            this._refreshEnd = this.buffer.y;\n            this._inputHandler.parseUtf8(data);\n            this.updateRange(this.buffer.y);\n            this.refresh(this._refreshStart, this._refreshEnd);\n            if (Date.now() - startTime >= WRITE_TIMEOUT_MS) {\n                break;\n            }\n        }\n        if (this.writeBufferUtf8.length > bufferOffset) {\n            if (bufferOffset > WRITE_BUFFER_LENGTH_THRESHOLD) {\n                this.writeBufferUtf8 = this.writeBufferUtf8.slice(bufferOffset);\n                bufferOffset = 0;\n            }\n            setTimeout(function () { return _this._innerWriteUtf8(bufferOffset); }, 0);\n        }\n        else {\n            this._writeInProgress = false;\n            this.writeBufferUtf8 = [];\n        }\n    };\n    Terminal.prototype.write = function (data) {\n        var _this = this;\n        if (this._isDisposed) {\n            return;\n        }\n        if (!data) {\n            return;\n        }\n        this.writeBuffer.push(data);\n        if (this.options.useFlowControl && !this._xoffSentToCatchUp && this.writeBuffer.length >= WRITE_BUFFER_PAUSE_THRESHOLD) {\n            this.handler(EscapeSequences_1.C0.DC3);\n            this._xoffSentToCatchUp = true;\n        }\n        if (!this._writeInProgress && this.writeBuffer.length > 0) {\n            this._writeInProgress = true;\n            setTimeout(function () {\n                _this._innerWrite();\n            });\n        }\n    };\n    Terminal.prototype._innerWrite = function (bufferOffset) {\n        var _this = this;\n        if (bufferOffset === void 0) { bufferOffset = 0; }\n        if (this._isDisposed) {\n            this.writeBuffer = [];\n        }\n        var startTime = Date.now();\n        while (this.writeBuffer.length > bufferOffset) {\n            var data = this.writeBuffer[bufferOffset];\n            bufferOffset++;\n            if (this._xoffSentToCatchUp && this.writeBuffer.length === bufferOffset) {\n                this.handler(EscapeSequences_1.C0.DC1);\n                this._xoffSentToCatchUp = false;\n            }\n            this._refreshStart = this.buffer.y;\n            this._refreshEnd = this.buffer.y;\n            this._inputHandler.parse(data);\n            this.updateRange(this.buffer.y);\n            this.refresh(this._refreshStart, this._refreshEnd);\n            if (Date.now() - startTime >= WRITE_TIMEOUT_MS) {\n                break;\n            }\n        }\n        if (this.writeBuffer.length > bufferOffset) {\n            if (bufferOffset > WRITE_BUFFER_LENGTH_THRESHOLD) {\n                this.writeBuffer = this.writeBuffer.slice(bufferOffset);\n                bufferOffset = 0;\n            }\n            setTimeout(function () { return _this._innerWrite(bufferOffset); }, 0);\n        }\n        else {\n            this._writeInProgress = false;\n            this.writeBuffer = [];\n        }\n    };\n    Terminal.prototype.writeln = function (data) {\n        this.write(data + '\\r\\n');\n    };\n    Terminal.prototype.attachCustomKeyEventHandler = function (customKeyEventHandler) {\n        this._customKeyEventHandler = customKeyEventHandler;\n    };\n    Terminal.prototype.addCsiHandler = function (flag, callback) {\n        return this._inputHandler.addCsiHandler(flag, callback);\n    };\n    Terminal.prototype.addOscHandler = function (ident, callback) {\n        return this._inputHandler.addOscHandler(ident, callback);\n    };\n    Terminal.prototype.registerLinkMatcher = function (regex, handler, options) {\n        var matcherId = this.linkifier.registerLinkMatcher(regex, handler, options);\n        this.refresh(0, this.rows - 1);\n        return matcherId;\n    };\n    Terminal.prototype.deregisterLinkMatcher = function (matcherId) {\n        if (this.linkifier.deregisterLinkMatcher(matcherId)) {\n            this.refresh(0, this.rows - 1);\n        }\n    };\n    Terminal.prototype.registerCharacterJoiner = function (handler) {\n        var joinerId = this._renderCoordinator.registerCharacterJoiner(handler);\n        this.refresh(0, this.rows - 1);\n        return joinerId;\n    };\n    Terminal.prototype.deregisterCharacterJoiner = function (joinerId) {\n        if (this._renderCoordinator.deregisterCharacterJoiner(joinerId)) {\n            this.refresh(0, this.rows - 1);\n        }\n    };\n    Object.defineProperty(Terminal.prototype, \"markers\", {\n        get: function () {\n            return this.buffer.markers;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Terminal.prototype.addMarker = function (cursorYOffset) {\n        if (this.buffer !== this.buffers.normal) {\n            return;\n        }\n        return this.buffer.addMarker(this.buffer.ybase + this.buffer.y + cursorYOffset);\n    };\n    Terminal.prototype.hasSelection = function () {\n        return this.selectionManager ? this.selectionManager.hasSelection : false;\n    };\n    Terminal.prototype.select = function (column, row, length) {\n        this.selectionManager.setSelection(column, row, length);\n    };\n    Terminal.prototype.getSelection = function () {\n        return this.selectionManager ? this.selectionManager.selectionText : '';\n    };\n    Terminal.prototype.getSelectionPosition = function () {\n        if (!this.selectionManager.hasSelection) {\n            return undefined;\n        }\n        return {\n            startColumn: this.selectionManager.selectionStart[0],\n            startRow: this.selectionManager.selectionStart[1],\n            endColumn: this.selectionManager.selectionEnd[0],\n            endRow: this.selectionManager.selectionEnd[1]\n        };\n    };\n    Terminal.prototype.clearSelection = function () {\n        if (this.selectionManager) {\n            this.selectionManager.clearSelection();\n        }\n    };\n    Terminal.prototype.selectAll = function () {\n        if (this.selectionManager) {\n            this.selectionManager.selectAll();\n        }\n    };\n    Terminal.prototype.selectLines = function (start, end) {\n        if (this.selectionManager) {\n            this.selectionManager.selectLines(start, end);\n        }\n    };\n    Terminal.prototype._keyDown = function (event) {\n        if (this._customKeyEventHandler && this._customKeyEventHandler(event) === false) {\n            return false;\n        }\n        if (!this._compositionHelper.keydown(event)) {\n            if (this.buffer.ybase !== this.buffer.ydisp) {\n                this.scrollToBottom();\n            }\n            return false;\n        }\n        var result = Keyboard_1.evaluateKeyboardEvent(event, this.applicationCursor, this.browser.isMac, this.options.macOptionIsMeta);\n        this.updateCursorStyle(event);\n        if (result.type === 3 || result.type === 2) {\n            var scrollCount = this.rows - 1;\n            this.scrollLines(result.type === 2 ? -scrollCount : scrollCount);\n            return this.cancel(event, true);\n        }\n        if (result.type === 1) {\n            this.selectAll();\n        }\n        if (this._isThirdLevelShift(this.browser, event)) {\n            return true;\n        }\n        if (result.cancel) {\n            this.cancel(event, true);\n        }\n        if (!result.key) {\n            return true;\n        }\n        this.emit('keydown', event);\n        this._onKey.fire({ key: result.key, domEvent: event });\n        this.showCursor();\n        this.handler(result.key);\n        return this.cancel(event, true);\n    };\n    Terminal.prototype._isThirdLevelShift = function (browser, ev) {\n        var thirdLevelKey = (browser.isMac && !this.options.macOptionIsMeta && ev.altKey && !ev.ctrlKey && !ev.metaKey) ||\n            (browser.isMSWindows && ev.altKey && ev.ctrlKey && !ev.metaKey);\n        if (ev.type === 'keypress') {\n            return thirdLevelKey;\n        }\n        return thirdLevelKey && (!ev.keyCode || ev.keyCode > 47);\n    };\n    Terminal.prototype.setgLevel = function (g) {\n        this.glevel = g;\n        this.charset = this.charsets[g];\n    };\n    Terminal.prototype.setgCharset = function (g, charset) {\n        this.charsets[g] = charset;\n        if (this.glevel === g) {\n            this.charset = charset;\n        }\n    };\n    Terminal.prototype._keyUp = function (ev) {\n        this.updateCursorStyle(ev);\n    };\n    Terminal.prototype._keyPress = function (ev) {\n        var key;\n        if (this._customKeyEventHandler && this._customKeyEventHandler(ev) === false) {\n            return false;\n        }\n        this.cancel(ev);\n        if (ev.charCode) {\n            key = ev.charCode;\n        }\n        else if (ev.which === null || ev.which === undefined) {\n            key = ev.keyCode;\n        }\n        else if (ev.which !== 0 && ev.charCode !== 0) {\n            key = ev.which;\n        }\n        else {\n            return false;\n        }\n        if (!key || ((ev.altKey || ev.ctrlKey || ev.metaKey) && !this._isThirdLevelShift(this.browser, ev))) {\n            return false;\n        }\n        key = String.fromCharCode(key);\n        this.emit('keypress', key, ev);\n        this._onKey.fire({ key: key, domEvent: ev });\n        this.showCursor();\n        this.handler(key);\n        return true;\n    };\n    Terminal.prototype.bell = function () {\n        var _this = this;\n        this.emit('bell');\n        if (this._soundBell()) {\n            this.soundManager.playBellSound();\n        }\n        if (this._visualBell()) {\n            this.element.classList.add('visual-bell-active');\n            clearTimeout(this._visualBellTimer);\n            this._visualBellTimer = window.setTimeout(function () {\n                _this.element.classList.remove('visual-bell-active');\n            }, 200);\n        }\n    };\n    Terminal.prototype.log = function (text, data) {\n        if (!this.options.debug)\n            return;\n        if (!this._context.console || !this._context.console.log)\n            return;\n        this._context.console.log(text, data);\n    };\n    Terminal.prototype.error = function (text, data) {\n        if (!this.options.debug)\n            return;\n        if (!this._context.console || !this._context.console.error)\n            return;\n        this._context.console.error(text, data);\n    };\n    Terminal.prototype.resize = function (x, y) {\n        if (isNaN(x) || isNaN(y)) {\n            return;\n        }\n        if (x === this.cols && y === this.rows) {\n            if (this.charMeasure && (!this.charMeasure.width || !this.charMeasure.height)) {\n                this.charMeasure.measure(this.options);\n            }\n            return;\n        }\n        if (x < MINIMUM_COLS)\n            x = MINIMUM_COLS;\n        if (y < MINIMUM_ROWS)\n            y = MINIMUM_ROWS;\n        this.buffers.resize(x, y);\n        this.cols = x;\n        this.rows = y;\n        this.buffers.setupTabStops(this.cols);\n        if (this.charMeasure) {\n            this.charMeasure.measure(this.options);\n        }\n        this.refresh(0, this.rows - 1);\n        this._onResize.fire({ cols: x, rows: y });\n    };\n    Terminal.prototype.updateRange = function (y) {\n        if (y < this._refreshStart)\n            this._refreshStart = y;\n        if (y > this._refreshEnd)\n            this._refreshEnd = y;\n    };\n    Terminal.prototype.maxRange = function () {\n        this._refreshStart = 0;\n        this._refreshEnd = this.rows - 1;\n    };\n    Terminal.prototype.clear = function () {\n        if (this.buffer.ybase === 0 && this.buffer.y === 0) {\n            return;\n        }\n        this.buffer.lines.set(0, this.buffer.lines.get(this.buffer.ybase + this.buffer.y));\n        this.buffer.lines.length = 1;\n        this.buffer.ydisp = 0;\n        this.buffer.ybase = 0;\n        this.buffer.y = 0;\n        for (var i = 1; i < this.rows; i++) {\n            this.buffer.lines.push(this.buffer.getBlankLine(BufferLine_1.DEFAULT_ATTR_DATA));\n        }\n        this.refresh(0, this.rows - 1);\n        this._onScroll.fire(this.buffer.ydisp);\n    };\n    Terminal.prototype.is = function (term) {\n        return (this.options.termName + '').indexOf(term) === 0;\n    };\n    Terminal.prototype.handler = function (data) {\n        if (this.options.disableStdin) {\n            return;\n        }\n        if (this.selectionManager && this.selectionManager.hasSelection) {\n            this.selectionManager.clearSelection();\n        }\n        if (this.buffer.ybase !== this.buffer.ydisp) {\n            this.scrollToBottom();\n        }\n        this._onData.fire(data);\n    };\n    Terminal.prototype.handleTitle = function (title) {\n        this._onTitleChange.fire(title);\n    };\n    Terminal.prototype.index = function () {\n        this.buffer.y++;\n        if (this.buffer.y > this.buffer.scrollBottom) {\n            this.buffer.y--;\n            this.scroll();\n        }\n        if (this.buffer.x >= this.cols) {\n            this.buffer.x--;\n        }\n    };\n    Terminal.prototype.reverseIndex = function () {\n        if (this.buffer.y === this.buffer.scrollTop) {\n            var scrollRegionHeight = this.buffer.scrollBottom - this.buffer.scrollTop;\n            this.buffer.lines.shiftElements(this.buffer.y + this.buffer.ybase, scrollRegionHeight, 1);\n            this.buffer.lines.set(this.buffer.y + this.buffer.ybase, this.buffer.getBlankLine(this.eraseAttrData()));\n            this.updateRange(this.buffer.scrollTop);\n            this.updateRange(this.buffer.scrollBottom);\n        }\n        else {\n            this.buffer.y--;\n        }\n    };\n    Terminal.prototype.reset = function () {\n        this.options.rows = this.rows;\n        this.options.cols = this.cols;\n        var customKeyEventHandler = this._customKeyEventHandler;\n        var inputHandler = this._inputHandler;\n        var cursorState = this.cursorState;\n        var writeBuffer = this.writeBuffer;\n        var writeBufferUtf8 = this.writeBufferUtf8;\n        var writeInProgress = this._writeInProgress;\n        var xoffSentToCatchUp = this._xoffSentToCatchUp;\n        var userScrolling = this._userScrolling;\n        this._setup();\n        this._customKeyEventHandler = customKeyEventHandler;\n        this._inputHandler = inputHandler;\n        this.cursorState = cursorState;\n        this.writeBuffer = writeBuffer;\n        this.writeBufferUtf8 = writeBufferUtf8;\n        this._writeInProgress = writeInProgress;\n        this._xoffSentToCatchUp = xoffSentToCatchUp;\n        this._userScrolling = userScrolling;\n        this.refresh(0, this.rows - 1);\n        if (this.viewport) {\n            this.viewport.syncScrollArea();\n        }\n    };\n    Terminal.prototype.tabSet = function () {\n        this.buffer.tabs[this.buffer.x] = true;\n    };\n    Terminal.prototype.cancel = function (ev, force) {\n        if (!this.options.cancelEvents && !force) {\n            return;\n        }\n        ev.preventDefault();\n        ev.stopPropagation();\n        return false;\n    };\n    Terminal.prototype._visualBell = function () {\n        return false;\n    };\n    Terminal.prototype._soundBell = function () {\n        return this.options.bellStyle === 'sound';\n    };\n    return Terminal;\n}(EventEmitter_1.EventEmitter));\nexports.Terminal = Terminal;\nfunction wasModifierKeyOnlyEvent(ev) {\n    return ev.keyCode === 16 ||\n        ev.keyCode === 17 ||\n        ev.keyCode === 18;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/Terminal.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/Viewport.js":
/*!********************************************!*\
  !*** ./node_modules/xterm/lib/Viewport.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Lifecycle_1 = __webpack_require__(/*! ./common/Lifecycle */ \"./node_modules/xterm/lib/common/Lifecycle.js\");\nvar Lifecycle_2 = __webpack_require__(/*! ./ui/Lifecycle */ \"./node_modules/xterm/lib/ui/Lifecycle.js\");\nvar FALLBACK_SCROLL_BAR_WIDTH = 15;\nvar Viewport = (function (_super) {\n    __extends(Viewport, _super);\n    function Viewport(_terminal, _viewportElement, _scrollArea, _charMeasure, _dimensions) {\n        var _this = _super.call(this) || this;\n        _this._terminal = _terminal;\n        _this._viewportElement = _viewportElement;\n        _this._scrollArea = _scrollArea;\n        _this._charMeasure = _charMeasure;\n        _this._dimensions = _dimensions;\n        _this.scrollBarWidth = 0;\n        _this._currentRowHeight = 0;\n        _this._lastRecordedBufferLength = 0;\n        _this._lastRecordedViewportHeight = 0;\n        _this._lastRecordedBufferHeight = 0;\n        _this._lastScrollTop = 0;\n        _this._wheelPartialScroll = 0;\n        _this._refreshAnimationFrame = null;\n        _this._ignoreNextScrollEvent = false;\n        _this.scrollBarWidth = (_this._viewportElement.offsetWidth - _this._scrollArea.offsetWidth) || FALLBACK_SCROLL_BAR_WIDTH;\n        _this.register(Lifecycle_2.addDisposableDomListener(_this._viewportElement, 'scroll', _this._onScroll.bind(_this)));\n        setTimeout(function () { return _this.syncScrollArea(); }, 0);\n        return _this;\n    }\n    Viewport.prototype.onDimensionsChance = function (dimensions) {\n        this._dimensions = dimensions;\n    };\n    Viewport.prototype.onThemeChange = function (colors) {\n        this._viewportElement.style.backgroundColor = colors.background.css;\n    };\n    Viewport.prototype._refresh = function () {\n        var _this = this;\n        if (this._refreshAnimationFrame === null) {\n            this._refreshAnimationFrame = requestAnimationFrame(function () { return _this._innerRefresh(); });\n        }\n    };\n    Viewport.prototype._innerRefresh = function () {\n        if (this._charMeasure.height > 0) {\n            this._currentRowHeight = this._dimensions.scaledCellHeight / window.devicePixelRatio;\n            this._lastRecordedViewportHeight = this._viewportElement.offsetHeight;\n            var newBufferHeight = Math.round(this._currentRowHeight * this._lastRecordedBufferLength) + (this._lastRecordedViewportHeight - this._dimensions.canvasHeight);\n            if (this._lastRecordedBufferHeight !== newBufferHeight) {\n                this._lastRecordedBufferHeight = newBufferHeight;\n                this._scrollArea.style.height = this._lastRecordedBufferHeight + 'px';\n            }\n        }\n        var scrollTop = this._terminal.buffer.ydisp * this._currentRowHeight;\n        if (this._viewportElement.scrollTop !== scrollTop) {\n            this._ignoreNextScrollEvent = true;\n            this._viewportElement.scrollTop = scrollTop;\n        }\n        this._refreshAnimationFrame = null;\n    };\n    Viewport.prototype.syncScrollArea = function () {\n        if (this._lastRecordedBufferLength !== this._terminal.buffer.lines.length) {\n            this._lastRecordedBufferLength = this._terminal.buffer.lines.length;\n            this._refresh();\n            return;\n        }\n        if (this._lastRecordedViewportHeight !== this._dimensions.canvasHeight) {\n            this._refresh();\n            return;\n        }\n        var newScrollTop = this._terminal.buffer.ydisp * this._currentRowHeight;\n        if (this._lastScrollTop !== newScrollTop) {\n            this._refresh();\n            return;\n        }\n        if (this._lastScrollTop !== this._viewportElement.scrollTop) {\n            this._refresh();\n            return;\n        }\n        if (this._dimensions.scaledCellHeight / window.devicePixelRatio !== this._currentRowHeight) {\n            this._refresh();\n            return;\n        }\n    };\n    Viewport.prototype._onScroll = function (ev) {\n        this._lastScrollTop = this._viewportElement.scrollTop;\n        if (!this._viewportElement.offsetParent) {\n            return;\n        }\n        if (this._ignoreNextScrollEvent) {\n            this._ignoreNextScrollEvent = false;\n            return;\n        }\n        var newRow = Math.round(this._lastScrollTop / this._currentRowHeight);\n        var diff = newRow - this._terminal.buffer.ydisp;\n        this._terminal.scrollLines(diff, true);\n    };\n    Viewport.prototype.onWheel = function (ev) {\n        var amount = this._getPixelsScrolled(ev);\n        if (amount === 0) {\n            return;\n        }\n        this._viewportElement.scrollTop += amount;\n        ev.preventDefault();\n    };\n    Viewport.prototype._getPixelsScrolled = function (ev) {\n        if (ev.deltaY === 0) {\n            return 0;\n        }\n        var amount = ev.deltaY;\n        if (ev.deltaMode === WheelEvent.DOM_DELTA_LINE) {\n            amount *= this._currentRowHeight;\n        }\n        else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n            amount *= this._currentRowHeight * this._terminal.rows;\n        }\n        return amount;\n    };\n    Viewport.prototype.getLinesScrolled = function (ev) {\n        if (ev.deltaY === 0) {\n            return 0;\n        }\n        var amount = ev.deltaY;\n        if (ev.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {\n            amount /= this._currentRowHeight + 0.0;\n            this._wheelPartialScroll += amount;\n            amount = Math.floor(Math.abs(this._wheelPartialScroll)) * (this._wheelPartialScroll > 0 ? 1 : -1);\n            this._wheelPartialScroll %= 1;\n        }\n        else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n            amount *= this._terminal.rows;\n        }\n        return amount;\n    };\n    Viewport.prototype.onTouchStart = function (ev) {\n        this._lastTouchY = ev.touches[0].pageY;\n    };\n    Viewport.prototype.onTouchMove = function (ev) {\n        var deltaY = this._lastTouchY - ev.touches[0].pageY;\n        this._lastTouchY = ev.touches[0].pageY;\n        if (deltaY === 0) {\n            return;\n        }\n        this._viewportElement.scrollTop += deltaY;\n        ev.preventDefault();\n    };\n    return Viewport;\n}(Lifecycle_1.Disposable));\nexports.Viewport = Viewport;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/Viewport.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/WindowsMode.js":
/*!***********************************************!*\
  !*** ./node_modules/xterm/lib/WindowsMode.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BufferLine_1 = __webpack_require__(/*! ./core/buffer/BufferLine */ \"./node_modules/xterm/lib/core/buffer/BufferLine.js\");\nfunction applyWindowsMode(terminal) {\n    return terminal.onLineFeed(function () {\n        var line = terminal.buffer.lines.get(terminal.buffer.ybase + terminal.buffer.y - 1);\n        var lastChar = line.get(terminal.cols - 1);\n        var nextLine = terminal.buffer.lines.get(terminal.buffer.ybase + terminal.buffer.y);\n        nextLine.isWrapped = (lastChar[BufferLine_1.CHAR_DATA_CODE_INDEX] !== BufferLine_1.NULL_CELL_CODE && lastChar[BufferLine_1.CHAR_DATA_CODE_INDEX] !== BufferLine_1.WHITESPACE_CELL_CODE);\n    });\n}\nexports.applyWindowsMode = applyWindowsMode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL1dpbmRvd3NNb2RlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL3NyYy9XaW5kb3dzTW9kZS50cz8xYTg4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSURpc3Bvc2FibGUgfSBmcm9tICd4dGVybSc7XG5pbXBvcnQgeyBJVGVybWluYWwgfSBmcm9tICcuL1R5cGVzJztcbmltcG9ydCB7IENIQVJfREFUQV9DT0RFX0lOREVYLCBOVUxMX0NFTExfQ09ERSwgV0hJVEVTUEFDRV9DRUxMX0NPREUgfSBmcm9tICcuL2NvcmUvYnVmZmVyL0J1ZmZlckxpbmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlXaW5kb3dzTW9kZSh0ZXJtaW5hbDogSVRlcm1pbmFsKTogSURpc3Bvc2FibGUge1xuICAvLyBXaW5wdHkgZG9lcyBub3Qgc3VwcG9ydCB3cmFwYXJvdW5kIG1vZGUgd2hpY2ggbWVhbnMgdGhhdCBsaW5lcyB3aWxsIG5ldmVyXG4gIC8vIGJlIG1hcmtlZCBhcyB3cmFwcGVkLiBUaGlzIGNhdXNlcyBpc3N1ZXMgZm9yIHRoaW5ncyBsaWtlIGNvcHlpbmcgYSBsaW5lXG4gIC8vIHJldGFpbmluZyB0aGUgd3JhcHBlZCBuZXcgbGluZSBjaGFyYWN0ZXJzIG9yIGlmIGNvbnN1bWVycyBhcmUgbGlzdGVuaW5nXG4gIC8vIGluIG9uIHRoZSBkYXRhIHN0cmVhbS5cbiAgLy9cbiAgLy8gVGhlIHdvcmthcm91bmQgZm9yIHRoaXMgaXMgdG8gbGlzdGVuIHRvIGV2ZXJ5IGluY29taW5nIGxpbmUgZmVlZCBhbmQgbWFya1xuICAvLyB0aGUgbGluZSBhcyB3cmFwcGVkIGlmIHRoZSBsYXN0IGNoYXJhY3RlciBpbiB0aGUgcHJldmlvdXMgbGluZSBpcyBub3QgYVxuICAvLyBzcGFjZS4gVGhpcyBpcyBjZXJ0YWlubHkgbm90IHdpdGhvdXQgaXRzIHByb2JsZW1zLCBidXQgZ2VuZXJhbGx5IG9uXG4gIC8vIFdpbmRvd3Mgd2hlbiB0ZXh0IHJlYWNoZXMgdGhlIGVuZCBvZiB0aGUgdGVybWluYWwgaXQncyBsaWtlbHkgZ29pbmcgdG8gYmVcbiAgLy8gd3JhcHBlZC5cbiAgcmV0dXJuIHRlcm1pbmFsLm9uTGluZUZlZWQoKCkgPT4ge1xuICAgIGNvbnN0IGxpbmUgPSB0ZXJtaW5hbC5idWZmZXIubGluZXMuZ2V0KHRlcm1pbmFsLmJ1ZmZlci55YmFzZSArIHRlcm1pbmFsLmJ1ZmZlci55IC0gMSk7XG4gICAgY29uc3QgbGFzdENoYXIgPSBsaW5lLmdldCh0ZXJtaW5hbC5jb2xzIC0gMSk7XG5cbiAgICBjb25zdCBuZXh0TGluZSA9IHRlcm1pbmFsLmJ1ZmZlci5saW5lcy5nZXQodGVybWluYWwuYnVmZmVyLnliYXNlICsgdGVybWluYWwuYnVmZmVyLnkpO1xuICAgIG5leHRMaW5lLmlzV3JhcHBlZCA9IChsYXN0Q2hhcltDSEFSX0RBVEFfQ09ERV9JTkRFWF0gIT09IE5VTExfQ0VMTF9DT0RFICYmIGxhc3RDaGFyW0NIQVJfREFUQV9DT0RFX0lOREVYXSAhPT0gV0hJVEVTUEFDRV9DRUxMX0NPREUpO1xuICB9KTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7QUFPQTtBQUVBO0FBV0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFsQkE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/WindowsMode.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/addons/fit/fit.js":
/*!**************************************************!*\
  !*** ./node_modules/xterm/lib/addons/fit/fit.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction proposeGeometry(term) {\n    if (!term.element.parentElement) {\n        return null;\n    }\n    var parentElementStyle = window.getComputedStyle(term.element.parentElement);\n    var parentElementHeight = parseInt(parentElementStyle.getPropertyValue('height'));\n    var parentElementWidth = Math.max(0, parseInt(parentElementStyle.getPropertyValue('width')));\n    var elementStyle = window.getComputedStyle(term.element);\n    var elementPadding = {\n        top: parseInt(elementStyle.getPropertyValue('padding-top')),\n        bottom: parseInt(elementStyle.getPropertyValue('padding-bottom')),\n        right: parseInt(elementStyle.getPropertyValue('padding-right')),\n        left: parseInt(elementStyle.getPropertyValue('padding-left'))\n    };\n    var elementPaddingVer = elementPadding.top + elementPadding.bottom;\n    var elementPaddingHor = elementPadding.right + elementPadding.left;\n    var availableHeight = parentElementHeight - elementPaddingVer;\n    var availableWidth = parentElementWidth - elementPaddingHor - term._core.viewport.scrollBarWidth;\n    var geometry = {\n        cols: Math.floor(availableWidth / term._core._renderCoordinator.dimensions.actualCellWidth),\n        rows: Math.floor(availableHeight / term._core._renderCoordinator.dimensions.actualCellHeight)\n    };\n    return geometry;\n}\nexports.proposeGeometry = proposeGeometry;\nfunction fit(term) {\n    var geometry = proposeGeometry(term);\n    if (geometry) {\n        if (term.rows !== geometry.rows || term.cols !== geometry.cols) {\n            term._core._renderCoordinator.clear();\n            term.resize(geometry.cols, geometry.rows);\n        }\n    }\n}\nexports.fit = fit;\nfunction apply(terminalConstructor) {\n    terminalConstructor.prototype.proposeGeometry = function () {\n        return proposeGeometry(this);\n    };\n    terminalConstructor.prototype.fit = function () {\n        fit(this);\n    };\n}\nexports.apply = apply;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL2FkZG9ucy9maXQvZml0LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL3NyYy9hZGRvbnMvZml0L2ZpdC50cz82YjRjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKlxuICogRml0IHRlcm1pbmFsIGNvbHVtbnMgYW5kIHJvd3MgdG8gdGhlIGRpbWVuc2lvbnMgb2YgaXRzIERPTSBlbGVtZW50LlxuICpcbiAqICMjIEFwcHJvYWNoXG4gKlxuICogICAgUm93czogVHJ1bmNhdGUgdGhlIGRpdmlzaW9uIG9mIHRoZSB0ZXJtaW5hbCBwYXJlbnQgZWxlbWVudCBoZWlnaHQgYnkgdGhlXG4gKiAgICAgICAgICB0ZXJtaW5hbCByb3cgaGVpZ2h0LlxuICogQ29sdW1uczogVHJ1bmNhdGUgdGhlIGRpdmlzaW9uIG9mIHRoZSB0ZXJtaW5hbCBwYXJlbnQgZWxlbWVudCB3aWR0aCBieSB0aGVcbiAqICAgICAgICAgIHRlcm1pbmFsIGNoYXJhY3RlciB3aWR0aCAoYXBwbHkgZGlzcGxheTogaW5saW5lIGF0IHRoZSB0ZXJtaW5hbFxuICogICAgICAgICAgcm93IGFuZCB0cnVuY2F0ZSBpdHMgd2lkdGggd2l0aCB0aGUgY3VycmVudCBudW1iZXIgb2YgY29sdW1ucykuXG4gKi9cblxuaW1wb3J0IHsgVGVybWluYWwgfSBmcm9tICd4dGVybSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUdlb21ldHJ5IHtcbiAgcm93czogbnVtYmVyO1xuICBjb2xzOiBudW1iZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9wb3NlR2VvbWV0cnkodGVybTogVGVybWluYWwpOiBJR2VvbWV0cnkge1xuICBpZiAoIXRlcm0uZWxlbWVudC5wYXJlbnRFbGVtZW50KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgcGFyZW50RWxlbWVudFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGVybS5lbGVtZW50LnBhcmVudEVsZW1lbnQpO1xuICBjb25zdCBwYXJlbnRFbGVtZW50SGVpZ2h0ID0gcGFyc2VJbnQocGFyZW50RWxlbWVudFN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2hlaWdodCcpKTtcbiAgY29uc3QgcGFyZW50RWxlbWVudFdpZHRoID0gTWF0aC5tYXgoMCwgcGFyc2VJbnQocGFyZW50RWxlbWVudFN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3dpZHRoJykpKTtcbiAgY29uc3QgZWxlbWVudFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGVybS5lbGVtZW50KTtcbiAgY29uc3QgZWxlbWVudFBhZGRpbmcgPSB7XG4gICAgdG9wOiBwYXJzZUludChlbGVtZW50U3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy10b3AnKSksXG4gICAgYm90dG9tOiBwYXJzZUludChlbGVtZW50U3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy1ib3R0b20nKSksXG4gICAgcmlnaHQ6IHBhcnNlSW50KGVsZW1lbnRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLXJpZ2h0JykpLFxuICAgIGxlZnQ6IHBhcnNlSW50KGVsZW1lbnRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLWxlZnQnKSlcbiAgfTtcbiAgY29uc3QgZWxlbWVudFBhZGRpbmdWZXIgPSBlbGVtZW50UGFkZGluZy50b3AgKyBlbGVtZW50UGFkZGluZy5ib3R0b207XG4gIGNvbnN0IGVsZW1lbnRQYWRkaW5nSG9yID0gZWxlbWVudFBhZGRpbmcucmlnaHQgKyBlbGVtZW50UGFkZGluZy5sZWZ0O1xuICBjb25zdCBhdmFpbGFibGVIZWlnaHQgPSBwYXJlbnRFbGVtZW50SGVpZ2h0IC0gZWxlbWVudFBhZGRpbmdWZXI7XG4gIGNvbnN0IGF2YWlsYWJsZVdpZHRoID0gcGFyZW50RWxlbWVudFdpZHRoIC0gZWxlbWVudFBhZGRpbmdIb3IgLSAoPGFueT50ZXJtKS5fY29yZS52aWV3cG9ydC5zY3JvbGxCYXJXaWR0aDtcbiAgY29uc3QgZ2VvbWV0cnkgPSB7XG4gICAgY29sczogTWF0aC5mbG9vcihhdmFpbGFibGVXaWR0aCAvICg8YW55PnRlcm0pLl9jb3JlLl9yZW5kZXJDb29yZGluYXRvci5kaW1lbnNpb25zLmFjdHVhbENlbGxXaWR0aCksXG4gICAgcm93czogTWF0aC5mbG9vcihhdmFpbGFibGVIZWlnaHQgLyAoPGFueT50ZXJtKS5fY29yZS5fcmVuZGVyQ29vcmRpbmF0b3IuZGltZW5zaW9ucy5hY3R1YWxDZWxsSGVpZ2h0KVxuICB9O1xuICByZXR1cm4gZ2VvbWV0cnk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaXQodGVybTogVGVybWluYWwpOiB2b2lkIHtcbiAgY29uc3QgZ2VvbWV0cnkgPSBwcm9wb3NlR2VvbWV0cnkodGVybSk7XG4gIGlmIChnZW9tZXRyeSkge1xuICAgIC8vIEZvcmNlIGEgZnVsbCByZW5kZXJcbiAgICBpZiAodGVybS5yb3dzICE9PSBnZW9tZXRyeS5yb3dzIHx8IHRlcm0uY29scyAhPT0gZ2VvbWV0cnkuY29scykge1xuICAgICAgKDxhbnk+dGVybSkuX2NvcmUuX3JlbmRlckNvb3JkaW5hdG9yLmNsZWFyKCk7XG4gICAgICB0ZXJtLnJlc2l6ZShnZW9tZXRyeS5jb2xzLCBnZW9tZXRyeS5yb3dzKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5KHRlcm1pbmFsQ29uc3RydWN0b3I6IHR5cGVvZiBUZXJtaW5hbCk6IHZvaWQge1xuICAoPGFueT50ZXJtaW5hbENvbnN0cnVjdG9yLnByb3RvdHlwZSkucHJvcG9zZUdlb21ldHJ5ID0gZnVuY3Rpb24gKCk6IElHZW9tZXRyeSB7XG4gICAgcmV0dXJuIHByb3Bvc2VHZW9tZXRyeSh0aGlzKTtcbiAgfTtcblxuICAoPGFueT50ZXJtaW5hbENvbnN0cnVjdG9yLnByb3RvdHlwZSkuZml0ID0gZnVuY3Rpb24gKCk6IHZvaWQge1xuICAgIGZpdCh0aGlzKTtcbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7QUFzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBdkJBO0FBeUJBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVRBO0FBV0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQVJBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/addons/fit/fit.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/common/CircularList.js":
/*!*******************************************************!*\
  !*** ./node_modules/xterm/lib/common/CircularList.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EventEmitter2_1 = __webpack_require__(/*! ./EventEmitter2 */ \"./node_modules/xterm/lib/common/EventEmitter2.js\");\nvar CircularList = (function () {\n    function CircularList(_maxLength) {\n        this._maxLength = _maxLength;\n        this.onDeleteEmitter = new EventEmitter2_1.EventEmitter2();\n        this.onInsertEmitter = new EventEmitter2_1.EventEmitter2();\n        this.onTrimEmitter = new EventEmitter2_1.EventEmitter2();\n        this._array = new Array(this._maxLength);\n        this._startIndex = 0;\n        this._length = 0;\n    }\n    Object.defineProperty(CircularList.prototype, \"onDelete\", {\n        get: function () { return this.onDeleteEmitter.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CircularList.prototype, \"onInsert\", {\n        get: function () { return this.onInsertEmitter.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CircularList.prototype, \"onTrim\", {\n        get: function () { return this.onTrimEmitter.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CircularList.prototype, \"maxLength\", {\n        get: function () {\n            return this._maxLength;\n        },\n        set: function (newMaxLength) {\n            if (this._maxLength === newMaxLength) {\n                return;\n            }\n            var newArray = new Array(newMaxLength);\n            for (var i = 0; i < Math.min(newMaxLength, this.length); i++) {\n                newArray[i] = this._array[this._getCyclicIndex(i)];\n            }\n            this._array = newArray;\n            this._maxLength = newMaxLength;\n            this._startIndex = 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CircularList.prototype, \"length\", {\n        get: function () {\n            return this._length;\n        },\n        set: function (newLength) {\n            if (newLength > this._length) {\n                for (var i = this._length; i < newLength; i++) {\n                    this._array[i] = undefined;\n                }\n            }\n            this._length = newLength;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CircularList.prototype.get = function (index) {\n        return this._array[this._getCyclicIndex(index)];\n    };\n    CircularList.prototype.set = function (index, value) {\n        this._array[this._getCyclicIndex(index)] = value;\n    };\n    CircularList.prototype.push = function (value) {\n        this._array[this._getCyclicIndex(this._length)] = value;\n        if (this._length === this._maxLength) {\n            this._startIndex = ++this._startIndex % this._maxLength;\n            this.onTrimEmitter.fire(1);\n        }\n        else {\n            this._length++;\n        }\n    };\n    CircularList.prototype.recycle = function () {\n        if (this._length !== this._maxLength) {\n            throw new Error('Can only recycle when the buffer is full');\n        }\n        this._startIndex = ++this._startIndex % this._maxLength;\n        this.onTrimEmitter.fire(1);\n        return this._array[this._getCyclicIndex(this._length - 1)];\n    };\n    Object.defineProperty(CircularList.prototype, \"isFull\", {\n        get: function () {\n            return this._length === this._maxLength;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CircularList.prototype.pop = function () {\n        return this._array[this._getCyclicIndex(this._length-- - 1)];\n    };\n    CircularList.prototype.splice = function (start, deleteCount) {\n        var items = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            items[_i - 2] = arguments[_i];\n        }\n        if (deleteCount) {\n            for (var i = start; i < this._length - deleteCount; i++) {\n                this._array[this._getCyclicIndex(i)] = this._array[this._getCyclicIndex(i + deleteCount)];\n            }\n            this._length -= deleteCount;\n        }\n        for (var i = this._length - 1; i >= start; i--) {\n            this._array[this._getCyclicIndex(i + items.length)] = this._array[this._getCyclicIndex(i)];\n        }\n        for (var i = 0; i < items.length; i++) {\n            this._array[this._getCyclicIndex(start + i)] = items[i];\n        }\n        if (this._length + items.length > this._maxLength) {\n            var countToTrim = (this._length + items.length) - this._maxLength;\n            this._startIndex += countToTrim;\n            this._length = this._maxLength;\n            this.onTrimEmitter.fire(countToTrim);\n        }\n        else {\n            this._length += items.length;\n        }\n    };\n    CircularList.prototype.trimStart = function (count) {\n        if (count > this._length) {\n            count = this._length;\n        }\n        this._startIndex += count;\n        this._length -= count;\n        this.onTrimEmitter.fire(count);\n    };\n    CircularList.prototype.shiftElements = function (start, count, offset) {\n        if (count <= 0) {\n            return;\n        }\n        if (start < 0 || start >= this._length) {\n            throw new Error('start argument out of range');\n        }\n        if (start + offset < 0) {\n            throw new Error('Cannot shift elements in list beyond index 0');\n        }\n        if (offset > 0) {\n            for (var i = count - 1; i >= 0; i--) {\n                this.set(start + i + offset, this.get(start + i));\n            }\n            var expandListBy = (start + count + offset) - this._length;\n            if (expandListBy > 0) {\n                this._length += expandListBy;\n                while (this._length > this._maxLength) {\n                    this._length--;\n                    this._startIndex++;\n                    this.onTrimEmitter.fire(1);\n                }\n            }\n        }\n        else {\n            for (var i = 0; i < count; i++) {\n                this.set(start + i + offset, this.get(start + i));\n            }\n        }\n    };\n    CircularList.prototype._getCyclicIndex = function (index) {\n        return (this._startIndex + index) % this._maxLength;\n    };\n    return CircularList;\n}());\nexports.CircularList = CircularList;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL2NvbW1vbi9DaXJjdWxhckxpc3QuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL2NvbW1vbi9DaXJjdWxhckxpc3QudHM/Zjg4YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNiBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElDaXJjdWxhckxpc3QgfSBmcm9tICcuL1R5cGVzJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlcjIsIElFdmVudCB9IGZyb20gJy4vRXZlbnRFbWl0dGVyMic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUluc2VydEV2ZW50IHtcbiAgaW5kZXg6IG51bWJlcjtcbiAgYW1vdW50OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSURlbGV0ZUV2ZW50IHtcbiAgaW5kZXg6IG51bWJlcjtcbiAgYW1vdW50OiBudW1iZXI7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGNpcmN1bGFyIGxpc3Q7IGEgbGlzdCB3aXRoIGEgbWF4aW11bSBzaXplIHRoYXQgd3JhcHMgYXJvdW5kIHdoZW4gcHVzaCBpcyBjYWxsZWQsXG4gKiBvdmVycmlkaW5nIHZhbHVlcyBhdCB0aGUgc3RhcnQgb2YgdGhlIGxpc3QuXG4gKi9cbmV4cG9ydCBjbGFzcyBDaXJjdWxhckxpc3Q8VD4gaW1wbGVtZW50cyBJQ2lyY3VsYXJMaXN0PFQ+IHtcbiAgcHJvdGVjdGVkIF9hcnJheTogKFQgfCB1bmRlZmluZWQpW107XG4gIHByaXZhdGUgX3N0YXJ0SW5kZXg6IG51bWJlcjtcbiAgcHJpdmF0ZSBfbGVuZ3RoOiBudW1iZXI7XG5cbiAgcHVibGljIG9uRGVsZXRlRW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIyPElEZWxldGVFdmVudD4oKTtcbiAgcHVibGljIGdldCBvbkRlbGV0ZSgpOiBJRXZlbnQ8SURlbGV0ZUV2ZW50PiB7IHJldHVybiB0aGlzLm9uRGVsZXRlRW1pdHRlci5ldmVudDsgfVxuICBwdWJsaWMgb25JbnNlcnRFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcjI8SUluc2VydEV2ZW50PigpO1xuICBwdWJsaWMgZ2V0IG9uSW5zZXJ0KCk6IElFdmVudDxJSW5zZXJ0RXZlbnQ+IHsgcmV0dXJuIHRoaXMub25JbnNlcnRFbWl0dGVyLmV2ZW50OyB9XG4gIHB1YmxpYyBvblRyaW1FbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcjI8bnVtYmVyPigpO1xuICBwdWJsaWMgZ2V0IG9uVHJpbSgpOiBJRXZlbnQ8bnVtYmVyPiB7IHJldHVybiB0aGlzLm9uVHJpbUVtaXR0ZXIuZXZlbnQ7IH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF9tYXhMZW5ndGg6IG51bWJlclxuICApIHtcbiAgICB0aGlzLl9hcnJheSA9IG5ldyBBcnJheTxUPih0aGlzLl9tYXhMZW5ndGgpO1xuICAgIHRoaXMuX3N0YXJ0SW5kZXggPSAwO1xuICAgIHRoaXMuX2xlbmd0aCA9IDA7XG4gIH1cblxuICBwdWJsaWMgZ2V0IG1heExlbmd0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9tYXhMZW5ndGg7XG4gIH1cblxuICBwdWJsaWMgc2V0IG1heExlbmd0aChuZXdNYXhMZW5ndGg6IG51bWJlcikge1xuICAgIC8vIFRoZXJlIHdhcyBubyBjaGFuZ2UgaW4gbWF4TGVuZ3RoLCByZXR1cm4gZWFybHkuXG4gICAgaWYgKHRoaXMuX21heExlbmd0aCA9PT0gbmV3TWF4TGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gUmVjb25zdHJ1Y3QgYXJyYXksIHN0YXJ0aW5nIGF0IGluZGV4IDAuIE9ubHkgdHJhbnNmZXIgdmFsdWVzIGZyb20gdGhlXG4gICAgLy8gaW5kZXhlcyAwIHRvIGxlbmd0aC5cbiAgICBjb25zdCBuZXdBcnJheSA9IG5ldyBBcnJheTxUIHwgdW5kZWZpbmVkPihuZXdNYXhMZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5taW4obmV3TWF4TGVuZ3RoLCB0aGlzLmxlbmd0aCk7IGkrKykge1xuICAgICAgbmV3QXJyYXlbaV0gPSB0aGlzLl9hcnJheVt0aGlzLl9nZXRDeWNsaWNJbmRleChpKV07XG4gICAgfVxuICAgIHRoaXMuX2FycmF5ID0gbmV3QXJyYXk7XG4gICAgdGhpcy5fbWF4TGVuZ3RoID0gbmV3TWF4TGVuZ3RoO1xuICAgIHRoaXMuX3N0YXJ0SW5kZXggPSAwO1xuICB9XG5cbiAgcHVibGljIGdldCBsZW5ndGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGVuZ3RoO1xuICB9XG5cbiAgcHVibGljIHNldCBsZW5ndGgobmV3TGVuZ3RoOiBudW1iZXIpIHtcbiAgICBpZiAobmV3TGVuZ3RoID4gdGhpcy5fbGVuZ3RoKSB7XG4gICAgICBmb3IgKGxldCBpID0gdGhpcy5fbGVuZ3RoOyBpIDwgbmV3TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5fYXJyYXlbaV0gPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2xlbmd0aCA9IG5ld0xlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBhbiBpbmRleC5cbiAgICpcbiAgICogTm90ZSB0aGF0IGZvciBwZXJmb3JtYW5jZSByZWFzb25zIHRoZXJlIGlzIG5vIGJvdW5kcyBjaGVja2luZyBoZXJlLCB0aGUgaW5kZXggcmVmZXJlbmNlIGlzXG4gICAqIGNpcmN1bGFyIHNvIHRoaXMgc2hvdWxkIGFsd2F5cyByZXR1cm4gYSB2YWx1ZSBhbmQgbmV2ZXIgdGhyb3cuXG4gICAqIEBwYXJhbSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICogQHJldHVybiBUaGUgdmFsdWUgY29ycmVzcG9uZGluZyB0byB0aGUgaW5kZXguXG4gICAqL1xuICBwdWJsaWMgZ2V0KGluZGV4OiBudW1iZXIpOiBUIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fYXJyYXlbdGhpcy5fZ2V0Q3ljbGljSW5kZXgoaW5kZXgpXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB2YWx1ZSBhdCBhbiBpbmRleC5cbiAgICpcbiAgICogTm90ZSB0aGF0IGZvciBwZXJmb3JtYW5jZSByZWFzb25zIHRoZXJlIGlzIG5vIGJvdW5kcyBjaGVja2luZyBoZXJlLCB0aGUgaW5kZXggcmVmZXJlbmNlIGlzXG4gICAqIGNpcmN1bGFyIHNvIHRoaXMgc2hvdWxkIGFsd2F5cyByZXR1cm4gYSB2YWx1ZSBhbmQgbmV2ZXIgdGhyb3cuXG4gICAqIEBwYXJhbSBpbmRleCBUaGUgaW5kZXggdG8gc2V0LlxuICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICovXG4gIHB1YmxpYyBzZXQoaW5kZXg6IG51bWJlciwgdmFsdWU6IFQgfCB1bmRlZmluZWQpOiB2b2lkIHtcbiAgICB0aGlzLl9hcnJheVt0aGlzLl9nZXRDeWNsaWNJbmRleChpbmRleCldID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogUHVzaGVzIGEgbmV3IHZhbHVlIG9udG8gdGhlIGxpc3QsIHdyYXBwaW5nIGFyb3VuZCB0byB0aGUgc3RhcnQgb2YgdGhlIGFycmF5LCBvdmVycmlkaW5nIGluZGV4IDBcbiAgICogaWYgdGhlIG1heGltdW0gbGVuZ3RoIGlzIHJlYWNoZWQuXG4gICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHVzaCBvbnRvIHRoZSBsaXN0LlxuICAgKi9cbiAgcHVibGljIHB1c2godmFsdWU6IFQpOiB2b2lkIHtcbiAgICB0aGlzLl9hcnJheVt0aGlzLl9nZXRDeWNsaWNJbmRleCh0aGlzLl9sZW5ndGgpXSA9IHZhbHVlO1xuICAgIGlmICh0aGlzLl9sZW5ndGggPT09IHRoaXMuX21heExlbmd0aCkge1xuICAgICAgdGhpcy5fc3RhcnRJbmRleCA9ICsrdGhpcy5fc3RhcnRJbmRleCAlIHRoaXMuX21heExlbmd0aDtcbiAgICAgIHRoaXMub25UcmltRW1pdHRlci5maXJlKDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9sZW5ndGgrKztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWR2YW5jZSByaW5nYnVmZmVyIGluZGV4IGFuZCByZXR1cm4gY3VycmVudCBlbGVtZW50IGZvciByZWN5Y2xpbmcuXG4gICAqIE5vdGU6IFRoZSBidWZmZXIgbXVzdCBiZSBmdWxsIGZvciB0aGlzIG1ldGhvZCB0byB3b3JrLlxuICAgKiBAdGhyb3dzIFdoZW4gdGhlIGJ1ZmZlciBpcyBub3QgZnVsbC5cbiAgICovXG4gIHB1YmxpYyByZWN5Y2xlKCk6IFQge1xuICAgIGlmICh0aGlzLl9sZW5ndGggIT09IHRoaXMuX21heExlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gb25seSByZWN5Y2xlIHdoZW4gdGhlIGJ1ZmZlciBpcyBmdWxsJyk7XG4gICAgfVxuICAgIHRoaXMuX3N0YXJ0SW5kZXggPSArK3RoaXMuX3N0YXJ0SW5kZXggJSB0aGlzLl9tYXhMZW5ndGg7XG4gICAgdGhpcy5vblRyaW1FbWl0dGVyLmZpcmUoMSk7XG4gICAgcmV0dXJuIHRoaXMuX2FycmF5W3RoaXMuX2dldEN5Y2xpY0luZGV4KHRoaXMuX2xlbmd0aCAtIDEpXSE7XG4gIH1cblxuICAvKipcbiAgICogUmluZ2J1ZmZlciBpcyBhdCBtYXggbGVuZ3RoLlxuICAgKi9cbiAgcHVibGljIGdldCBpc0Z1bGwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2xlbmd0aCA9PT0gdGhpcy5fbWF4TGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYW5kIHJldHVybnMgdGhlIGxhc3QgdmFsdWUgb24gdGhlIGxpc3QuXG4gICAqIEByZXR1cm4gVGhlIHBvcHBlZCB2YWx1ZS5cbiAgICovXG4gIHB1YmxpYyBwb3AoKTogVCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX2FycmF5W3RoaXMuX2dldEN5Y2xpY0luZGV4KHRoaXMuX2xlbmd0aC0tIC0gMSldO1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYW5kL29yIGluc2VydHMgaXRlbXMgYXQgYSBwYXJ0aWN1bGFyIGluZGV4IChpbiB0aGF0IG9yZGVyKS4gVW5saWtlXG4gICAqIEFycmF5LnByb3RvdHlwZS5zcGxpY2UsIHRoaXMgb3BlcmF0aW9uIGRvZXMgbm90IHJldHVybiB0aGUgZGVsZXRlZCBpdGVtcyBhcyBhIG5ldyBhcnJheSBpblxuICAgKiBvcmRlciB0byBzYXZlIGNyZWF0aW5nIGEgbmV3IGFycmF5LiBOb3RlIHRoYXQgdGhpcyBvcGVyYXRpb24gbWF5IHNoaWZ0IGFsbCB2YWx1ZXMgaW4gdGhlIGxpc3RcbiAgICogaW4gdGhlIHdvcnN0IGNhc2UuXG4gICAqIEBwYXJhbSBzdGFydCBUaGUgaW5kZXggdG8gZGVsZXRlIGFuZC9vciBpbnNlcnQuXG4gICAqIEBwYXJhbSBkZWxldGVDb3VudCBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRlbGV0ZS5cbiAgICogQHBhcmFtIGl0ZW1zIFRoZSBpdGVtcyB0byBpbnNlcnQuXG4gICAqL1xuICBwdWJsaWMgc3BsaWNlKHN0YXJ0OiBudW1iZXIsIGRlbGV0ZUNvdW50OiBudW1iZXIsIC4uLml0ZW1zOiBUW10pOiB2b2lkIHtcbiAgICAvLyBEZWxldGUgaXRlbXNcbiAgICBpZiAoZGVsZXRlQ291bnQpIHtcbiAgICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IHRoaXMuX2xlbmd0aCAtIGRlbGV0ZUNvdW50OyBpKyspIHtcbiAgICAgICAgdGhpcy5fYXJyYXlbdGhpcy5fZ2V0Q3ljbGljSW5kZXgoaSldID0gdGhpcy5fYXJyYXlbdGhpcy5fZ2V0Q3ljbGljSW5kZXgoaSArIGRlbGV0ZUNvdW50KV07XG4gICAgICB9XG4gICAgICB0aGlzLl9sZW5ndGggLT0gZGVsZXRlQ291bnQ7XG4gICAgfVxuXG4gICAgLy8gQWRkIGl0ZW1zXG4gICAgZm9yIChsZXQgaSA9IHRoaXMuX2xlbmd0aCAtIDE7IGkgPj0gc3RhcnQ7IGktLSkge1xuICAgICAgdGhpcy5fYXJyYXlbdGhpcy5fZ2V0Q3ljbGljSW5kZXgoaSArIGl0ZW1zLmxlbmd0aCldID0gdGhpcy5fYXJyYXlbdGhpcy5fZ2V0Q3ljbGljSW5kZXgoaSldO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLl9hcnJheVt0aGlzLl9nZXRDeWNsaWNJbmRleChzdGFydCArIGkpXSA9IGl0ZW1zW2ldO1xuICAgIH1cblxuICAgIC8vIEFkanVzdCBsZW5ndGggYXMgbmVlZGVkXG4gICAgaWYgKHRoaXMuX2xlbmd0aCArIGl0ZW1zLmxlbmd0aCA+IHRoaXMuX21heExlbmd0aCkge1xuICAgICAgY29uc3QgY291bnRUb1RyaW0gPSAodGhpcy5fbGVuZ3RoICsgaXRlbXMubGVuZ3RoKSAtIHRoaXMuX21heExlbmd0aDtcbiAgICAgIHRoaXMuX3N0YXJ0SW5kZXggKz0gY291bnRUb1RyaW07XG4gICAgICB0aGlzLl9sZW5ndGggPSB0aGlzLl9tYXhMZW5ndGg7XG4gICAgICB0aGlzLm9uVHJpbUVtaXR0ZXIuZmlyZShjb3VudFRvVHJpbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2xlbmd0aCArPSBpdGVtcy5sZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRyaW1zIGEgbnVtYmVyIG9mIGl0ZW1zIGZyb20gdGhlIHN0YXJ0IG9mIHRoZSBsaXN0LlxuICAgKiBAcGFyYW0gY291bnQgVGhlIG51bWJlciBvZiBpdGVtcyB0byByZW1vdmUuXG4gICAqL1xuICBwdWJsaWMgdHJpbVN0YXJ0KGNvdW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoY291bnQgPiB0aGlzLl9sZW5ndGgpIHtcbiAgICAgIGNvdW50ID0gdGhpcy5fbGVuZ3RoO1xuICAgIH1cbiAgICB0aGlzLl9zdGFydEluZGV4ICs9IGNvdW50O1xuICAgIHRoaXMuX2xlbmd0aCAtPSBjb3VudDtcbiAgICB0aGlzLm9uVHJpbUVtaXR0ZXIuZmlyZShjb3VudCk7XG4gIH1cblxuICBwdWJsaWMgc2hpZnRFbGVtZW50cyhzdGFydDogbnVtYmVyLCBjb3VudDogbnVtYmVyLCBvZmZzZXQ6IG51bWJlcik6IHZvaWQge1xuICAgIGlmIChjb3VudCA8PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5fbGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N0YXJ0IGFyZ3VtZW50IG91dCBvZiByYW5nZScpO1xuICAgIH1cbiAgICBpZiAoc3RhcnQgKyBvZmZzZXQgPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBzaGlmdCBlbGVtZW50cyBpbiBsaXN0IGJleW9uZCBpbmRleCAwJyk7XG4gICAgfVxuXG4gICAgaWYgKG9mZnNldCA+IDApIHtcbiAgICAgIGZvciAobGV0IGkgPSBjb3VudCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHRoaXMuc2V0KHN0YXJ0ICsgaSArIG9mZnNldCwgdGhpcy5nZXQoc3RhcnQgKyBpKSk7XG4gICAgICB9XG4gICAgICBjb25zdCBleHBhbmRMaXN0QnkgPSAoc3RhcnQgKyBjb3VudCArIG9mZnNldCkgLSB0aGlzLl9sZW5ndGg7XG4gICAgICBpZiAoZXhwYW5kTGlzdEJ5ID4gMCkge1xuICAgICAgICB0aGlzLl9sZW5ndGggKz0gZXhwYW5kTGlzdEJ5O1xuICAgICAgICB3aGlsZSAodGhpcy5fbGVuZ3RoID4gdGhpcy5fbWF4TGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5fbGVuZ3RoLS07XG4gICAgICAgICAgdGhpcy5fc3RhcnRJbmRleCsrO1xuICAgICAgICAgIHRoaXMub25UcmltRW1pdHRlci5maXJlKDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICB0aGlzLnNldChzdGFydCArIGkgKyBvZmZzZXQsIHRoaXMuZ2V0KHN0YXJ0ICsgaSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBjeWNsaWMgaW5kZXggZm9yIHRoZSBzcGVjaWZpZWQgcmVndWxhciBpbmRleC4gVGhlIGN5Y2xpYyBpbmRleCBjYW4gdGhlbiBiZSB1c2VkIG9uIHRoZVxuICAgKiBiYWNraW5nIGFycmF5IHRvIGdldCB0aGUgZWxlbWVudCBhc3NvY2lhdGVkIHdpdGggdGhlIHJlZ3VsYXIgaW5kZXguXG4gICAqIEBwYXJhbSBpbmRleCBUaGUgcmVndWxhciBpbmRleC5cbiAgICogQHJldHVybnMgVGhlIGN5Y2xpYyBpbmRleC5cbiAgICovXG4gIHByaXZhdGUgX2dldEN5Y2xpY0luZGV4KGluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiAodGhpcy5fc3RhcnRJbmRleCArIGluZGV4KSAlIHRoaXMuX21heExlbmd0aDtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOztBQU1BO0FBZ0JBO0FBWUE7QUFDQTtBQVJBO0FBRUE7QUFFQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBWkE7QUFBQTs7O0FBQUE7QUFFQTtBQUFBOzs7QUFBQTtBQUVBO0FBQUE7OztBQUFBO0FBVUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQWpCQTtBQW1CQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQVRBO0FBbUJBO0FBQ0E7QUFDQTtBQVVBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQUE7QUFDQTtBQUNBOzs7QUFBQTtBQU1BO0FBQ0E7QUFDQTtBQVdBO0FBQUE7QUFBQTtBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFwTkE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/common/CircularList.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/common/Clone.js":
/*!************************************************!*\
  !*** ./node_modules/xterm/lib/common/Clone.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction clone(val, depth) {\n    if (depth === void 0) { depth = 5; }\n    if (typeof val !== 'object') {\n        return val;\n    }\n    if (val === null) {\n        return null;\n    }\n    var clonedObject = Array.isArray(val) ? [] : {};\n    for (var key in val) {\n        clonedObject[key] = depth <= 1 ? val[key] : clone(val[key], depth - 1);\n    }\n    return clonedObject;\n}\nexports.clone = clone;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL2NvbW1vbi9DbG9uZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9zcmMvY29tbW9uL0Nsb25lLnRzP2E1NDUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG4vKlxuICogQSBzaW1wbGUgdXRpbGl0eSBmb3IgY2xvbmluZyB2YWx1ZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsb25lPFQ+KHZhbDogVCwgZGVwdGg6IG51bWJlciA9IDUpOiBUIHwgbnVsbCB7XG4gIGlmICh0eXBlb2YgdmFsICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICAvLyBjbG9uaW5nIG51bGwgYWx3YXlzIHJldHVybnMgbnVsbFxuICBpZiAodmFsID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBJZiB3ZSdyZSBjbG9uaW5nIGFuIGFycmF5LCB1c2UgYW4gYXJyYXkgYXMgdGhlIGJhc2UsIG90aGVyd2lzZSB1c2UgYW4gb2JqZWN0XG4gIGNvbnN0IGNsb25lZE9iamVjdDogYW55ID0gQXJyYXkuaXNBcnJheSh2YWwpID8gW10gOiB7fTtcblxuICBmb3IgKGNvbnN0IGtleSBpbiB2YWwpIHtcbiAgICAvLyBSZWN1cnNpdmVseSBjbG9uZSBlYWNrIGl0ZW0gdW5sZXNzIHdlJ3JlIGF0IHRoZSBtYXhpbXVtIGRlcHRoXG4gICAgY2xvbmVkT2JqZWN0W2tleV0gPSBkZXB0aCA8PSAxID8gdmFsW2tleV0gOiBjbG9uZSh2YWxba2V5XSwgZGVwdGggLSAxKTtcbiAgfVxuXG4gIHJldHVybiBjbG9uZWRPYmplY3QgYXMgVDtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7QUFRQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBR0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBbkJBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/common/Clone.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/common/EventEmitter.js":
/*!*******************************************************!*\
  !*** ./node_modules/xterm/lib/common/EventEmitter.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Lifecycle_1 = __webpack_require__(/*! ./Lifecycle */ \"./node_modules/xterm/lib/common/Lifecycle.js\");\nvar EventEmitter = (function (_super) {\n    __extends(EventEmitter, _super);\n    function EventEmitter() {\n        var _this = _super.call(this) || this;\n        _this._events = _this._events || {};\n        return _this;\n    }\n    EventEmitter.prototype.on = function (type, listener) {\n        this._events[type] = this._events[type] || [];\n        this._events[type].push(listener);\n    };\n    EventEmitter.prototype.addDisposableListener = function (type, handler) {\n        var _this = this;\n        this.on(type, handler);\n        var disposed = false;\n        return {\n            dispose: function () {\n                if (disposed) {\n                    return;\n                }\n                _this.off(type, handler);\n                disposed = true;\n            }\n        };\n    };\n    EventEmitter.prototype.off = function (type, listener) {\n        if (!this._events[type]) {\n            return;\n        }\n        var obj = this._events[type];\n        var i = obj.length;\n        while (i--) {\n            if (obj[i] === listener) {\n                obj.splice(i, 1);\n                return;\n            }\n        }\n    };\n    EventEmitter.prototype.removeAllListeners = function (type) {\n        if (this._events[type]) {\n            delete this._events[type];\n        }\n    };\n    EventEmitter.prototype.emit = function (type) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (!this._events[type]) {\n            return;\n        }\n        var obj = this._events[type];\n        for (var i = 0; i < obj.length; i++) {\n            obj[i].apply(this, args);\n        }\n    };\n    EventEmitter.prototype.emitMayRemoveListeners = function (type) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (!this._events[type]) {\n            return;\n        }\n        var obj = this._events[type];\n        var length = obj.length;\n        for (var i = 0; i < obj.length; i++) {\n            obj[i].apply(this, args);\n            i -= length - obj.length;\n            length = obj.length;\n        }\n    };\n    EventEmitter.prototype.listeners = function (type) {\n        return this._events[type] || [];\n    };\n    EventEmitter.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._events = {};\n    };\n    return EventEmitter;\n}(Lifecycle_1.Disposable));\nexports.EventEmitter = EventEmitter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL2NvbW1vbi9FdmVudEVtaXR0ZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL2NvbW1vbi9FdmVudEVtaXR0ZXIudHM/NWRiZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElEaXNwb3NhYmxlLCBJRXZlbnRFbWl0dGVyLCBYdGVybUxpc3RlbmVyIH0gZnJvbSAnLi9UeXBlcyc7XG5pbXBvcnQgeyBEaXNwb3NhYmxlIH0gZnJvbSAnLi9MaWZlY3ljbGUnO1xuXG5leHBvcnQgY2xhc3MgRXZlbnRFbWl0dGVyIGV4dGVuZHMgRGlzcG9zYWJsZSBpbXBsZW1lbnRzIElFdmVudEVtaXR0ZXIsIElEaXNwb3NhYmxlIHtcbiAgcHJpdmF0ZSBfZXZlbnRzOiB7W3R5cGU6IHN0cmluZ106IFh0ZXJtTGlzdGVuZXJbXX07XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICAvLyBSZXN0b3JlIHRoZSBwcmV2aW91cyBldmVudHMgaWYgYXZhaWxhYmxlLCB0aGlzIHdpbGwgaGFwcGVuIGlmIHRoZVxuICAgIC8vIGNvbnN0cnVjdG9yIGlzIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyBvbiB0aGUgc2FtZSBvYmplY3QgKHRlcm1pbmFsIHJlc2V0KS5cbiAgICB0aGlzLl9ldmVudHMgPSAoPGFueT50aGlzKS5fZXZlbnRzIHx8IHt9O1xuICB9XG5cbiAgcHVibGljIG9uKHR5cGU6IHN0cmluZywgbGlzdGVuZXI6IFh0ZXJtTGlzdGVuZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSB0aGlzLl9ldmVudHNbdHlwZV0gfHwgW107XG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBkaXNwb3NhYmxlIGxpc3RlbmVyIHRvIHRoZSBFdmVudEVtaXR0ZXIsIHJldHVybmluZyB0aGUgZGlzcG9zYWJsZS5cbiAgICogQHBhcmFtIHR5cGUgVGhlIGV2ZW50IHR5cGUuXG4gICAqIEBwYXJhbSBoYW5kbGVyIFRoZSBoYW5kbGVyIGZvciB0aGUgbGlzdGVuZXIuXG4gICAqL1xuICBwdWJsaWMgYWRkRGlzcG9zYWJsZUxpc3RlbmVyKHR5cGU6IHN0cmluZywgaGFuZGxlcjogWHRlcm1MaXN0ZW5lcik6IElEaXNwb3NhYmxlIHtcbiAgICAvLyBUT0RPOiBSZW5hbWUgYWRkRGlzcG9zYWJsZUV2ZW50TGlzdGVuZXIgdG8gbW9yZSBlYXNpbHkgZGlzYW1iaWd1YXRlIGZyb20gRG9tIGxpc3RlbmVyXG4gICAgdGhpcy5vbih0eXBlLCBoYW5kbGVyKTtcbiAgICBsZXQgZGlzcG9zZWQgPSBmYWxzZTtcbiAgICByZXR1cm4ge1xuICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICBpZiAoZGlzcG9zZWQpIHtcbiAgICAgICAgICAvLyBBbHJlYWR5IGRpc3Bvc2VkXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub2ZmKHR5cGUsIGhhbmRsZXIpO1xuICAgICAgICBkaXNwb3NlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBvZmYodHlwZTogc3RyaW5nLCBsaXN0ZW5lcjogWHRlcm1MaXN0ZW5lcik6IHZvaWQge1xuICAgIGlmICghdGhpcy5fZXZlbnRzW3R5cGVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgb2JqID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIGxldCBpID0gb2JqLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmIChvYmpbaV0gPT09IGxpc3RlbmVyKSB7XG4gICAgICAgIG9iai5zcGxpY2UoaSwgMSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlQWxsTGlzdGVuZXJzKHR5cGU6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9ldmVudHNbdHlwZV0pIHtcbiAgICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBlbWl0KHR5cGU6IHN0cmluZywgLi4uYXJnczogYW55W10pOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBvYmogPSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgIG9ialtpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZW1pdE1heVJlbW92ZUxpc3RlbmVycyh0eXBlOiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl9ldmVudHNbdHlwZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgb2JqID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIGxldCBsZW5ndGggPSBvYmoubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvYmpbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICBpIC09IGxlbmd0aCAtIG9iai5sZW5ndGg7XG4gICAgICBsZW5ndGggPSBvYmoubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBsaXN0ZW5lcnModHlwZTogc3RyaW5nKTogWHRlcm1MaXN0ZW5lcltdIHtcbiAgICByZXR1cm4gdGhpcy5fZXZlbnRzW3R5cGVdIHx8IFtdO1xuICB9XG5cbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgc3VwZXIuZGlzcG9zZSgpO1xuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQU1BO0FBRUE7QUFBQTtBQUdBO0FBQUE7QUFJQTs7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBekZBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/common/EventEmitter.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/common/EventEmitter2.js":
/*!********************************************************!*\
  !*** ./node_modules/xterm/lib/common/EventEmitter2.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EventEmitter2 = (function () {\n    function EventEmitter2() {\n        this._listeners = [];\n    }\n    Object.defineProperty(EventEmitter2.prototype, \"event\", {\n        get: function () {\n            var _this = this;\n            if (!this._event) {\n                this._event = function (listener) {\n                    _this._listeners.push(listener);\n                    var disposable = {\n                        dispose: function () {\n                            for (var i = 0; i < _this._listeners.length; i++) {\n                                if (_this._listeners[i] === listener) {\n                                    _this._listeners.splice(i, 1);\n                                    return;\n                                }\n                            }\n                        }\n                    };\n                    return disposable;\n                };\n            }\n            return this._event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    EventEmitter2.prototype.fire = function (data) {\n        var queue = [];\n        for (var i = 0; i < this._listeners.length; i++) {\n            queue.push(this._listeners[i]);\n        }\n        for (var i = 0; i < queue.length; i++) {\n            queue[i].call(undefined, data);\n        }\n    };\n    return EventEmitter2;\n}());\nexports.EventEmitter2 = EventEmitter2;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL2NvbW1vbi9FdmVudEVtaXR0ZXIyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL3NyYy9jb21tb24vRXZlbnRFbWl0dGVyMi50cz8yNzE2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSURpc3Bvc2FibGUgfSBmcm9tICcuL1R5cGVzJztcblxuaW50ZXJmYWNlIElMaXN0ZW5lcjxUPiB7XG4gIChlOiBUKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRXZlbnQ8VD4ge1xuICAobGlzdGVuZXI6IChlOiBUKSA9PiBhbnkpOiBJRGlzcG9zYWJsZTtcbn1cblxuZXhwb3J0IGNsYXNzIEV2ZW50RW1pdHRlcjI8VD4ge1xuICBwcml2YXRlIF9saXN0ZW5lcnM6IElMaXN0ZW5lcjxUPltdID0gW107XG4gIHByaXZhdGUgX2V2ZW50PzogSUV2ZW50PFQ+O1xuXG4gIHB1YmxpYyBnZXQgZXZlbnQoKTogSUV2ZW50PFQ+IHtcbiAgICBpZiAoIXRoaXMuX2V2ZW50KSB7XG4gICAgICB0aGlzLl9ldmVudCA9IChsaXN0ZW5lcjogKGU6IFQpID0+IGFueSkgPT4ge1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgIGNvbnN0IGRpc3Bvc2FibGUgPSB7XG4gICAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9saXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKHRoaXMuX2xpc3RlbmVyc1tpXSA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0ZW5lcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGRpc3Bvc2FibGU7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fZXZlbnQ7XG4gIH1cblxuICBwdWJsaWMgZmlyZShkYXRhOiBUKTogdm9pZCB7XG4gICAgY29uc3QgcXVldWU6IElMaXN0ZW5lcjxUPltdID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9saXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHF1ZXVlLnB1c2godGhpcy5fbGlzdGVuZXJzW2ldKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgcXVldWVbaV0uY2FsbCh1bmRlZmluZWQsIGRhdGEpO1xuICAgIH1cbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOztBQWVBO0FBQUE7QUFDQTtBQWdDQTtBQTdCQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQWpDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/common/EventEmitter2.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/common/Lifecycle.js":
/*!****************************************************!*\
  !*** ./node_modules/xterm/lib/common/Lifecycle.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Disposable = (function () {\n    function Disposable() {\n        this._disposables = [];\n        this._isDisposed = false;\n    }\n    Disposable.prototype.dispose = function () {\n        this._isDisposed = true;\n        this._disposables.forEach(function (d) { return d.dispose(); });\n        this._disposables.length = 0;\n    };\n    Disposable.prototype.register = function (d) {\n        this._disposables.push(d);\n    };\n    Disposable.prototype.unregister = function (d) {\n        var index = this._disposables.indexOf(d);\n        if (index !== -1) {\n            this._disposables.splice(index, 1);\n        }\n    };\n    return Disposable;\n}());\nexports.Disposable = Disposable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL2NvbW1vbi9MaWZlY3ljbGUuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL2NvbW1vbi9MaWZlY3ljbGUudHM/YmNmMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOCBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElEaXNwb3NhYmxlIH0gZnJvbSAnLi9UeXBlcyc7XG5cbi8qKlxuICogQSBiYXNlIGNsYXNzIHRoYXQgY2FuIGJlIGV4dGVuZGVkIHRvIHByb3ZpZGUgY29udmVuaWVuY2UgbWV0aG9kcyBmb3IgbWFuYWdpbmcgdGhlIGxpZmVjeWNsZSBvZiBhblxuICogb2JqZWN0IGFuZCBpdHMgY29tcG9uZW50cy5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIERpc3Bvc2FibGUgaW1wbGVtZW50cyBJRGlzcG9zYWJsZSB7XG4gIHByb3RlY3RlZCBfZGlzcG9zYWJsZXM6IElEaXNwb3NhYmxlW10gPSBbXTtcbiAgcHJvdGVjdGVkIF9pc0Rpc3Bvc2VkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICAvKipcbiAgICogRGlzcG9zZXMgdGhlIG9iamVjdCwgdHJpZ2dlcmluZyB0aGUgYGRpc3Bvc2VgIG1ldGhvZCBvbiBhbGwgcmVnaXN0ZXJlZCBJRGlzcG9zYWJsZXMuXG4gICAqL1xuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9pc0Rpc3Bvc2VkID0gdHJ1ZTtcbiAgICB0aGlzLl9kaXNwb3NhYmxlcy5mb3JFYWNoKGQgPT4gZC5kaXNwb3NlKCkpO1xuICAgIHRoaXMuX2Rpc3Bvc2FibGVzLmxlbmd0aCA9IDA7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGEgZGlzcG9zYWJsZSBvYmplY3QuXG4gICAqIEBwYXJhbSBkIFRoZSBkaXNwb3NhYmxlIHRvIHJlZ2lzdGVyLlxuICAgKi9cbiAgcHVibGljIHJlZ2lzdGVyPFQgZXh0ZW5kcyBJRGlzcG9zYWJsZT4oZDogVCk6IHZvaWQge1xuICAgIHRoaXMuX2Rpc3Bvc2FibGVzLnB1c2goZCk7XG4gIH1cblxuICAvKipcbiAgICogVW5yZWdpc3RlcnMgYSBkaXNwb3NhYmxlIG9iamVjdCBpZiBpdCBoYXMgYmVlbiByZWdpc3RlcmVkLCBpZiBub3QgZG9cbiAgICogbm90aGluZy5cbiAgICogQHBhcmFtIGQgVGhlIGRpc3Bvc2FibGUgdG8gdW5yZWdpc3Rlci5cbiAgICovXG4gIHB1YmxpYyB1bnJlZ2lzdGVyPFQgZXh0ZW5kcyBJRGlzcG9zYWJsZT4oZDogVCk6IHZvaWQge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fZGlzcG9zYWJsZXMuaW5kZXhPZihkKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLl9kaXNwb3NhYmxlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOztBQVdBO0FBSUE7QUFIQTtBQUNBO0FBR0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQW5DQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/common/Lifecycle.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/common/Platform.js":
/*!***************************************************!*\
  !*** ./node_modules/xterm/lib/common/Platform.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar isNode = (typeof navigator === 'undefined') ? true : false;\nvar userAgent = (isNode) ? 'node' : navigator.userAgent;\nvar platform = (isNode) ? 'node' : navigator.platform;\nexports.isFirefox = !!~userAgent.indexOf('Firefox');\nexports.isSafari = /^((?!chrome|android).)*safari/i.test(userAgent);\nexports.isMSIE = !!~userAgent.indexOf('MSIE') || !!~userAgent.indexOf('Trident');\nexports.isMac = contains(['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'], platform);\nexports.isIpad = platform === 'iPad';\nexports.isIphone = platform === 'iPhone';\nexports.isMSWindows = contains(['Windows', 'Win16', 'Win32', 'WinCE'], platform);\nexports.isLinux = platform.indexOf('Linux') >= 0;\nfunction contains(arr, el) {\n    return arr.indexOf(el) >= 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL2NvbW1vbi9QbGF0Zm9ybS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9zcmMvY29tbW9uL1BsYXRmb3JtLnRzPzg3ZjkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbnRlcmZhY2UgSU5hdmlnYXRvciB7XG4gIHVzZXJBZ2VudDogc3RyaW5nO1xuICBsYW5ndWFnZTogc3RyaW5nO1xuICBwbGF0Zm9ybTogc3RyaW5nO1xufVxuXG4vLyBXZSdyZSBkZWNsYXJpbmcgYSBuYXZpZ2F0b3IgZ2xvYmFsIGhlcmUgYXMgd2UgZXhwZWN0IGl0IGluIGFsbCBydW50aW1lcyAobm9kZSBhbmQgYnJvd3NlciksIGJ1dFxuLy8gd2Ugd2FudCB0aGlzIG1vZHVsZSB0byBsaXZlIGluIGNvbW1vbi5cbmRlY2xhcmUgY29uc3QgbmF2aWdhdG9yOiBJTmF2aWdhdG9yO1xuXG5jb25zdCBpc05vZGUgPSAodHlwZW9mIG5hdmlnYXRvciA9PT0gJ3VuZGVmaW5lZCcpID8gdHJ1ZSA6IGZhbHNlO1xuY29uc3QgdXNlckFnZW50ID0gKGlzTm9kZSkgPyAnbm9kZScgOiBuYXZpZ2F0b3IudXNlckFnZW50O1xuY29uc3QgcGxhdGZvcm0gPSAoaXNOb2RlKSA/ICdub2RlJyA6IG5hdmlnYXRvci5wbGF0Zm9ybTtcblxuZXhwb3J0IGNvbnN0IGlzRmlyZWZveCA9ICEhfnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94Jyk7XG5leHBvcnQgY29uc3QgaXNTYWZhcmkgPSAvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KHVzZXJBZ2VudCk7XG5leHBvcnQgY29uc3QgaXNNU0lFID0gISF+dXNlckFnZW50LmluZGV4T2YoJ01TSUUnKSB8fCAhIX51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpO1xuXG4vLyBGaW5kIHRoZSB1c2VycyBwbGF0Zm9ybS4gV2UgdXNlIHRoaXMgdG8gaW50ZXJwcmV0IHRoZSBtZXRhIGtleVxuLy8gYW5kIElTTyB0aGlyZCBsZXZlbCBzaGlmdHMuXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcS8xOTg3NzkyNC81Nzc1OThcbmV4cG9ydCBjb25zdCBpc01hYyA9IGNvbnRhaW5zKFsnTWFjaW50b3NoJywgJ01hY0ludGVsJywgJ01hY1BQQycsICdNYWM2OEsnXSwgcGxhdGZvcm0pO1xuZXhwb3J0IGNvbnN0IGlzSXBhZCA9IHBsYXRmb3JtID09PSAnaVBhZCc7XG5leHBvcnQgY29uc3QgaXNJcGhvbmUgPSBwbGF0Zm9ybSA9PT0gJ2lQaG9uZSc7XG5leHBvcnQgY29uc3QgaXNNU1dpbmRvd3MgPSBjb250YWlucyhbJ1dpbmRvd3MnLCAnV2luMTYnLCAnV2luMzInLCAnV2luQ0UnXSwgcGxhdGZvcm0pO1xuZXhwb3J0IGNvbnN0IGlzTGludXggPSBwbGF0Zm9ybS5pbmRleE9mKCdMaW51eCcpID49IDA7XG5cbi8qKlxuICogUmV0dXJuIGlmIHRoZSBnaXZlbiBhcnJheSBjb250YWlucyB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQHBhcmFtIGFyciBUaGUgYXJyYXkgdG8gc2VhcmNoIGZvciB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAqIEBwYXJhbSBlbCBUaGUgZWxlbWVudCB0byBsb29rIGZvciBpbnRvIHRoZSBhcnJheVxuICovXG5mdW5jdGlvbiBjb250YWlucyhhcnI6IGFueVtdLCBlbDogYW55KTogYm9vbGVhbiB7XG4gIHJldHVybiBhcnIuaW5kZXhPZihlbCkgPj0gMDtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7QUFlQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/common/Platform.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/common/TypedArrayUtils.js":
/*!**********************************************************!*\
  !*** ./node_modules/xterm/lib/common/TypedArrayUtils.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction fill(array, value, start, end) {\n    if (array.fill) {\n        return array.fill(value, start, end);\n    }\n    return fillFallback(array, value, start, end);\n}\nexports.fill = fill;\nfunction fillFallback(array, value, start, end) {\n    if (start === void 0) { start = 0; }\n    if (end === void 0) { end = array.length; }\n    if (start >= array.length) {\n        return array;\n    }\n    start = (array.length + start) % array.length;\n    if (end >= array.length) {\n        end = array.length;\n    }\n    else {\n        end = (array.length + end) % array.length;\n    }\n    for (var i = start; i < end; ++i) {\n        array[i] = value;\n    }\n    return array;\n}\nexports.fillFallback = fillFallback;\nfunction concat(a, b) {\n    var result = new a.constructor(a.length + b.length);\n    result.set(a);\n    result.set(b, a.length);\n    return result;\n}\nexports.concat = concat;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL2NvbW1vbi9UeXBlZEFycmF5VXRpbHMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL2NvbW1vbi9UeXBlZEFycmF5VXRpbHMudHM/YzA3MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOCBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmV4cG9ydCB0eXBlIFR5cGVkQXJyYXkgPSBVaW50OEFycmF5IHwgVWludDE2QXJyYXkgfCBVaW50MzJBcnJheSB8IFVpbnQ4Q2xhbXBlZEFycmF5XG4gIHwgSW50OEFycmF5IHwgSW50MTZBcnJheSB8IEludDMyQXJyYXlcbiAgfCBGbG9hdDMyQXJyYXkgfCBGbG9hdDY0QXJyYXk7XG5cblxuLyoqXG4gKiBwb2x5ZmlsbCBmb3IgVHlwZWRBcnJheS5maWxsXG4gKiBUaGlzIGlzIG5lZWRlZCB0byBzdXBwb3J0IC5maWxsIGluIGFsbCBzYWZhcmkgdmVyc2lvbnMgYW5kIElFIDExLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZmlsbDxUIGV4dGVuZHMgVHlwZWRBcnJheT4oYXJyYXk6IFQsIHZhbHVlOiBudW1iZXIsIHN0YXJ0PzogbnVtYmVyLCBlbmQ/OiBudW1iZXIpOiBUIHtcbiAgLy8gYWxsIG1vZGVybiBlbmdpbmVzIHRoYXQgc3VwcG9ydCAuZmlsbFxuICBpZiAoYXJyYXkuZmlsbCkge1xuICAgIHJldHVybiBhcnJheS5maWxsKHZhbHVlLCBzdGFydCwgZW5kKSBhcyBUO1xuICB9XG4gIHJldHVybiBmaWxsRmFsbGJhY2soYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbGxGYWxsYmFjazxUIGV4dGVuZHMgVHlwZWRBcnJheT4oYXJyYXk6IFQsIHZhbHVlOiBudW1iZXIsIHN0YXJ0OiBudW1iZXIgPSAwLCBlbmQ6IG51bWJlciA9IGFycmF5Lmxlbmd0aCk6IFQge1xuICAvLyBzYWZhcmkgYW5kIElFIDExXG4gIC8vIHNpbmNlIElFIDExIGRvZXMgbm90IHN1cHBvcnQgQXJyYXkucHJvdG90eXBlLmZpbGwgZWl0aGVyXG4gIC8vIHdlIGNhbm5vdCB1c2UgdGhlIHN1Z2dlc3RlZCBwb2x5ZmlsbCBmcm9tIE1ETlxuICAvLyBpbnN0ZWFkIHdlIHNpbXBseSBmYWxsIGJhY2sgdG8gbG9vcGluZ1xuICBpZiAoc3RhcnQgPj0gYXJyYXkubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG4gIHN0YXJ0ID0gKGFycmF5Lmxlbmd0aCArIHN0YXJ0KSAlIGFycmF5Lmxlbmd0aDtcbiAgaWYgKGVuZCA+PSBhcnJheS5sZW5ndGgpIHtcbiAgICBlbmQgPSBhcnJheS5sZW5ndGg7XG4gIH0gZWxzZSB7XG4gICAgZW5kID0gKGFycmF5Lmxlbmd0aCArIGVuZCkgJSBhcnJheS5sZW5ndGg7XG4gIH1cbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBhcnJheVtpXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuLyoqXG4gKiBDb25jYXQgdHdvIHR5cGVkIGFycmF5cyBgYWAgYW5kIGBiYC5cbiAqIFJldHVybnMgYSBuZXcgdHlwZWQgYXJyYXkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXQ8VCBleHRlbmRzIFR5cGVkQXJyYXk+KGE6IFQsIGI6IFQpOiBUIHtcbiAgY29uc3QgcmVzdWx0ID0gbmV3IChhLmNvbnN0cnVjdG9yIGFzIGFueSkoYS5sZW5ndGggKyBiLmxlbmd0aCk7XG4gIHJlc3VsdC5zZXQoYSk7XG4gIHJlc3VsdC5zZXQoYiwgYS5sZW5ndGgpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuIl0sIm1hcHBpbmdzIjoiOztBQWNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU5BO0FBUUE7QUFBQTtBQUFBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBbEJBO0FBd0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/common/TypedArrayUtils.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/common/Types.js":
/*!************************************************!*\
  !*** ./node_modules/xterm/lib/common/Types.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_COLOR = 256;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL2NvbW1vbi9UeXBlcy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9zcmMvY29tbW9uL1R5cGVzLnRzPzMxOTMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJRXZlbnQsIEV2ZW50RW1pdHRlcjIgfSBmcm9tICcuL0V2ZW50RW1pdHRlcjInO1xuaW1wb3J0IHsgSURlbGV0ZUV2ZW50LCBJSW5zZXJ0RXZlbnQgfSBmcm9tICcuL0NpcmN1bGFyTGlzdCc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0NPTE9SID0gMjU2O1xuXG5leHBvcnQgaW50ZXJmYWNlIElEaXNwb3NhYmxlIHtcbiAgZGlzcG9zZSgpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElFdmVudEVtaXR0ZXIge1xuICBvbih0eXBlOiBzdHJpbmcsIGxpc3RlbmVyOiAoLi4uYXJnczogYW55W10pID0+IHZvaWQpOiB2b2lkO1xuICBvZmYodHlwZTogc3RyaW5nLCBsaXN0ZW5lcjogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkKTogdm9pZDtcbiAgZW1pdCh0eXBlOiBzdHJpbmcsIGRhdGE/OiBhbnkpOiB2b2lkO1xuICBhZGREaXNwb3NhYmxlTGlzdGVuZXIodHlwZTogc3RyaW5nLCBoYW5kbGVyOiAoLi4uYXJnczogYW55W10pID0+IHZvaWQpOiBJRGlzcG9zYWJsZTtcbn1cblxuZXhwb3J0IHR5cGUgWHRlcm1MaXN0ZW5lciA9ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZDtcblxuLyoqXG4gKiBBIGtleWJvYXJkIGV2ZW50IGludGVyZmFjZSB3aGljaCBkb2VzIG5vdCBkZXBlbmQgb24gdGhlIERPTSwgS2V5Ym9hcmRFdmVudCBpbXBsaWNpdGx5IGV4dGVuZHNcbiAqIHRoaXMgZXZlbnQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUtleWJvYXJkRXZlbnQge1xuICBhbHRLZXk6IGJvb2xlYW47XG4gIGN0cmxLZXk6IGJvb2xlYW47XG4gIHNoaWZ0S2V5OiBib29sZWFuO1xuICBtZXRhS2V5OiBib29sZWFuO1xuICBrZXlDb2RlOiBudW1iZXI7XG4gIGtleTogc3RyaW5nO1xuICB0eXBlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNpcmN1bGFyTGlzdDxUPiB7XG4gIGxlbmd0aDogbnVtYmVyO1xuICBtYXhMZW5ndGg6IG51bWJlcjtcbiAgaXNGdWxsOiBib29sZWFuO1xuXG4gIG9uRGVsZXRlRW1pdHRlcjogRXZlbnRFbWl0dGVyMjxJRGVsZXRlRXZlbnQ+O1xuICBvbkRlbGV0ZTogSUV2ZW50PElEZWxldGVFdmVudD47XG4gIG9uSW5zZXJ0RW1pdHRlcjogRXZlbnRFbWl0dGVyMjxJSW5zZXJ0RXZlbnQ+O1xuICBvbkluc2VydDogSUV2ZW50PElJbnNlcnRFdmVudD47XG4gIG9uVHJpbUVtaXR0ZXI6IEV2ZW50RW1pdHRlcjI8bnVtYmVyPjtcbiAgb25UcmltOiBJRXZlbnQ8bnVtYmVyPjtcblxuICBnZXQoaW5kZXg6IG51bWJlcik6IFQgfCB1bmRlZmluZWQ7XG4gIHNldChpbmRleDogbnVtYmVyLCB2YWx1ZTogVCk6IHZvaWQ7XG4gIHB1c2godmFsdWU6IFQpOiB2b2lkO1xuICByZWN5Y2xlKCk6IFQgfCB1bmRlZmluZWQ7XG4gIHBvcCgpOiBUIHwgdW5kZWZpbmVkO1xuICBzcGxpY2Uoc3RhcnQ6IG51bWJlciwgZGVsZXRlQ291bnQ6IG51bWJlciwgLi4uaXRlbXM6IFRbXSk6IHZvaWQ7XG4gIHRyaW1TdGFydChjb3VudDogbnVtYmVyKTogdm9pZDtcbiAgc2hpZnRFbGVtZW50cyhzdGFydDogbnVtYmVyLCBjb3VudDogbnVtYmVyLCBvZmZzZXQ6IG51bWJlcik6IHZvaWQ7XG59XG4iXSwibWFwcGluZ3MiOiI7O0FBUUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/common/Types.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/common/data/EscapeSequences.js":
/*!***************************************************************!*\
  !*** ./node_modules/xterm/lib/common/data/EscapeSequences.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar C0;\n(function (C0) {\n    C0.NUL = '\\x00';\n    C0.SOH = '\\x01';\n    C0.STX = '\\x02';\n    C0.ETX = '\\x03';\n    C0.EOT = '\\x04';\n    C0.ENQ = '\\x05';\n    C0.ACK = '\\x06';\n    C0.BEL = '\\x07';\n    C0.BS = '\\x08';\n    C0.HT = '\\x09';\n    C0.LF = '\\x0a';\n    C0.VT = '\\x0b';\n    C0.FF = '\\x0c';\n    C0.CR = '\\x0d';\n    C0.SO = '\\x0e';\n    C0.SI = '\\x0f';\n    C0.DLE = '\\x10';\n    C0.DC1 = '\\x11';\n    C0.DC2 = '\\x12';\n    C0.DC3 = '\\x13';\n    C0.DC4 = '\\x14';\n    C0.NAK = '\\x15';\n    C0.SYN = '\\x16';\n    C0.ETB = '\\x17';\n    C0.CAN = '\\x18';\n    C0.EM = '\\x19';\n    C0.SUB = '\\x1a';\n    C0.ESC = '\\x1b';\n    C0.FS = '\\x1c';\n    C0.GS = '\\x1d';\n    C0.RS = '\\x1e';\n    C0.US = '\\x1f';\n    C0.SP = '\\x20';\n    C0.DEL = '\\x7f';\n})(C0 = exports.C0 || (exports.C0 = {}));\nvar C1;\n(function (C1) {\n    C1.PAD = '\\x80';\n    C1.HOP = '\\x81';\n    C1.BPH = '\\x82';\n    C1.NBH = '\\x83';\n    C1.IND = '\\x84';\n    C1.NEL = '\\x85';\n    C1.SSA = '\\x86';\n    C1.ESA = '\\x87';\n    C1.HTS = '\\x88';\n    C1.HTJ = '\\x89';\n    C1.VTS = '\\x8a';\n    C1.PLD = '\\x8b';\n    C1.PLU = '\\x8c';\n    C1.RI = '\\x8d';\n    C1.SS2 = '\\x8e';\n    C1.SS3 = '\\x8f';\n    C1.DCS = '\\x90';\n    C1.PU1 = '\\x91';\n    C1.PU2 = '\\x92';\n    C1.STS = '\\x93';\n    C1.CCH = '\\x94';\n    C1.MW = '\\x95';\n    C1.SPA = '\\x96';\n    C1.EPA = '\\x97';\n    C1.SOS = '\\x98';\n    C1.SGCI = '\\x99';\n    C1.SCI = '\\x9a';\n    C1.CSI = '\\x9b';\n    C1.ST = '\\x9c';\n    C1.OSC = '\\x9d';\n    C1.PM = '\\x9e';\n    C1.APC = '\\x9f';\n})(C1 = exports.C1 || (exports.C1 = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL2NvbW1vbi9kYXRhL0VzY2FwZVNlcXVlbmNlcy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9zcmMvY29tbW9uL2RhdGEvRXNjYXBlU2VxdWVuY2VzLnRzPzc1ZWUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG4vKipcbiAqIEMwIGNvbnRyb2wgY29kZXNcbiAqIFNlZSA9IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0MwX2FuZF9DMV9jb250cm9sX2NvZGVzXG4gKi9cbmV4cG9ydCBuYW1lc3BhY2UgQzAge1xuICAvKiogTnVsbCAoQ2FyZXQgPSBeQCwgQyA9IFxcMCkgKi9cbiAgZXhwb3J0IGNvbnN0IE5VTCA9ICdcXHgwMCc7XG4gIC8qKiBTdGFydCBvZiBIZWFkaW5nIChDYXJldCA9IF5BKSAqL1xuICBleHBvcnQgY29uc3QgU09IID0gJ1xceDAxJztcbiAgLyoqIFN0YXJ0IG9mIFRleHQgKENhcmV0ID0gXkIpICovXG4gIGV4cG9ydCBjb25zdCBTVFggPSAnXFx4MDInO1xuICAvKiogRW5kIG9mIFRleHQgKENhcmV0ID0gXkMpICovXG4gIGV4cG9ydCBjb25zdCBFVFggPSAnXFx4MDMnO1xuICAvKiogRW5kIG9mIFRyYW5zbWlzc2lvbiAoQ2FyZXQgPSBeRCkgKi9cbiAgZXhwb3J0IGNvbnN0IEVPVCA9ICdcXHgwNCc7XG4gIC8qKiBFbnF1aXJ5IChDYXJldCA9IF5FKSAqL1xuICBleHBvcnQgY29uc3QgRU5RID0gJ1xceDA1JztcbiAgLyoqIEFja25vd2xlZGdlIChDYXJldCA9IF5GKSAqL1xuICBleHBvcnQgY29uc3QgQUNLID0gJ1xceDA2JztcbiAgLyoqIEJlbGwgKENhcmV0ID0gXkcsIEMgPSBcXGEpICovXG4gIGV4cG9ydCBjb25zdCBCRUwgPSAnXFx4MDcnO1xuICAvKiogQmFja3NwYWNlIChDYXJldCA9IF5ILCBDID0gXFxiKSAqL1xuICBleHBvcnQgY29uc3QgQlMgID0gJ1xceDA4JztcbiAgLyoqIENoYXJhY3RlciBUYWJ1bGF0aW9uLCBIb3Jpem9udGFsIFRhYnVsYXRpb24gKENhcmV0ID0gXkksIEMgPSBcXHQpICovXG4gIGV4cG9ydCBjb25zdCBIVCAgPSAnXFx4MDknO1xuICAvKiogTGluZSBGZWVkIChDYXJldCA9IF5KLCBDID0gXFxuKSAqL1xuICBleHBvcnQgY29uc3QgTEYgID0gJ1xceDBhJztcbiAgLyoqIExpbmUgVGFidWxhdGlvbiwgVmVydGljYWwgVGFidWxhdGlvbiAoQ2FyZXQgPSBeSywgQyA9IFxcdikgKi9cbiAgZXhwb3J0IGNvbnN0IFZUICA9ICdcXHgwYic7XG4gIC8qKiBGb3JtIEZlZWQgKENhcmV0ID0gXkwsIEMgPSBcXGYpICovXG4gIGV4cG9ydCBjb25zdCBGRiAgPSAnXFx4MGMnO1xuICAvKiogQ2FycmlhZ2UgUmV0dXJuIChDYXJldCA9IF5NLCBDID0gXFxyKSAqL1xuICBleHBvcnQgY29uc3QgQ1IgID0gJ1xceDBkJztcbiAgLyoqIFNoaWZ0IE91dCAoQ2FyZXQgPSBeTikgKi9cbiAgZXhwb3J0IGNvbnN0IFNPICA9ICdcXHgwZSc7XG4gIC8qKiBTaGlmdCBJbiAoQ2FyZXQgPSBeTykgKi9cbiAgZXhwb3J0IGNvbnN0IFNJICA9ICdcXHgwZic7XG4gIC8qKiBEYXRhIExpbmsgRXNjYXBlIChDYXJldCA9IF5QKSAqL1xuICBleHBvcnQgY29uc3QgRExFID0gJ1xceDEwJztcbiAgLyoqIERldmljZSBDb250cm9sIE9uZSAoWE9OKSAoQ2FyZXQgPSBeUSkgKi9cbiAgZXhwb3J0IGNvbnN0IERDMSA9ICdcXHgxMSc7XG4gIC8qKiBEZXZpY2UgQ29udHJvbCBUd28gKENhcmV0ID0gXlIpICovXG4gIGV4cG9ydCBjb25zdCBEQzIgPSAnXFx4MTInO1xuICAvKiogRGV2aWNlIENvbnRyb2wgVGhyZWUgKFhPRkYpIChDYXJldCA9IF5TKSAqL1xuICBleHBvcnQgY29uc3QgREMzID0gJ1xceDEzJztcbiAgLyoqIERldmljZSBDb250cm9sIEZvdXIgKENhcmV0ID0gXlQpICovXG4gIGV4cG9ydCBjb25zdCBEQzQgPSAnXFx4MTQnO1xuICAvKiogTmVnYXRpdmUgQWNrbm93bGVkZ2UgKENhcmV0ID0gXlUpICovXG4gIGV4cG9ydCBjb25zdCBOQUsgPSAnXFx4MTUnO1xuICAvKiogU3luY2hyb25vdXMgSWRsZSAoQ2FyZXQgPSBeVikgKi9cbiAgZXhwb3J0IGNvbnN0IFNZTiA9ICdcXHgxNic7XG4gIC8qKiBFbmQgb2YgVHJhbnNtaXNzaW9uIEJsb2NrIChDYXJldCA9IF5XKSAqL1xuICBleHBvcnQgY29uc3QgRVRCID0gJ1xceDE3JztcbiAgLyoqIENhbmNlbCAoQ2FyZXQgPSBeWCkgKi9cbiAgZXhwb3J0IGNvbnN0IENBTiA9ICdcXHgxOCc7XG4gIC8qKiBFbmQgb2YgTWVkaXVtIChDYXJldCA9IF5ZKSAqL1xuICBleHBvcnQgY29uc3QgRU0gID0gJ1xceDE5JztcbiAgLyoqIFN1YnN0aXR1dGUgKENhcmV0ID0gXlopICovXG4gIGV4cG9ydCBjb25zdCBTVUIgPSAnXFx4MWEnO1xuICAvKiogRXNjYXBlIChDYXJldCA9IF5bLCBDID0gXFxlKSAqL1xuICBleHBvcnQgY29uc3QgRVNDID0gJ1xceDFiJztcbiAgLyoqIEZpbGUgU2VwYXJhdG9yIChDYXJldCA9IF5cXCkgKi9cbiAgZXhwb3J0IGNvbnN0IEZTICA9ICdcXHgxYyc7XG4gIC8qKiBHcm91cCBTZXBhcmF0b3IgKENhcmV0ID0gXl0pICovXG4gIGV4cG9ydCBjb25zdCBHUyAgPSAnXFx4MWQnO1xuICAvKiogUmVjb3JkIFNlcGFyYXRvciAoQ2FyZXQgPSBeXikgKi9cbiAgZXhwb3J0IGNvbnN0IFJTICA9ICdcXHgxZSc7XG4gIC8qKiBVbml0IFNlcGFyYXRvciAoQ2FyZXQgPSBeXykgKi9cbiAgZXhwb3J0IGNvbnN0IFVTICA9ICdcXHgxZic7XG4gIC8qKiBTcGFjZSAqL1xuICBleHBvcnQgY29uc3QgU1AgID0gJ1xceDIwJztcbiAgLyoqIERlbGV0ZSAoQ2FyZXQgPSBePykgKi9cbiAgZXhwb3J0IGNvbnN0IERFTCA9ICdcXHg3Zic7XG59XG5cbi8qKlxuICogQzEgY29udHJvbCBjb2Rlc1xuICogU2VlID0gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQzBfYW5kX0MxX2NvbnRyb2xfY29kZXNcbiAqL1xuZXhwb3J0IG5hbWVzcGFjZSBDMSB7XG4gIC8qKiBwYWRkaW5nIGNoYXJhY3RlciAqL1xuICBleHBvcnQgY29uc3QgUEFEID0gJ1xceDgwJztcbiAgLyoqIEhpZ2ggT2N0ZXQgUHJlc2V0ICovXG4gIGV4cG9ydCBjb25zdCBIT1AgPSAnXFx4ODEnO1xuICAvKiogQnJlYWsgUGVybWl0dGVkIEhlcmUgKi9cbiAgZXhwb3J0IGNvbnN0IEJQSCA9ICdcXHg4Mic7XG4gIC8qKiBObyBCcmVhayBIZXJlICovXG4gIGV4cG9ydCBjb25zdCBOQkggPSAnXFx4ODMnO1xuICAvKiogSW5kZXggKi9cbiAgZXhwb3J0IGNvbnN0IElORCA9ICdcXHg4NCc7XG4gIC8qKiBOZXh0IExpbmUgKi9cbiAgZXhwb3J0IGNvbnN0IE5FTCA9ICdcXHg4NSc7XG4gIC8qKiBTdGFydCBvZiBTZWxlY3RlZCBBcmVhICovXG4gIGV4cG9ydCBjb25zdCBTU0EgPSAnXFx4ODYnO1xuICAvKiogRW5kIG9mIFNlbGVjdGVkIEFyZWEgKi9cbiAgZXhwb3J0IGNvbnN0IEVTQSA9ICdcXHg4Nyc7XG4gIC8qKiBIb3Jpem9udGFsIFRhYnVsYXRpb24gU2V0ICovXG4gIGV4cG9ydCBjb25zdCBIVFMgPSAnXFx4ODgnO1xuICAvKiogSG9yaXpvbnRhbCBUYWJ1bGF0aW9uIFdpdGggSnVzdGlmaWNhdGlvbiAqL1xuICBleHBvcnQgY29uc3QgSFRKID0gJ1xceDg5JztcbiAgLyoqIFZlcnRpY2FsIFRhYnVsYXRpb24gU2V0ICovXG4gIGV4cG9ydCBjb25zdCBWVFMgPSAnXFx4OGEnO1xuICAvKiogUGFydGlhbCBMaW5lIERvd24gKi9cbiAgZXhwb3J0IGNvbnN0IFBMRCA9ICdcXHg4Yic7XG4gIC8qKiBQYXJ0aWFsIExpbmUgVXAgKi9cbiAgZXhwb3J0IGNvbnN0IFBMVSA9ICdcXHg4Yyc7XG4gIC8qKiBSZXZlcnNlIEluZGV4ICovXG4gIGV4cG9ydCBjb25zdCBSSSA9ICdcXHg4ZCc7XG4gIC8qKiBTaW5nbGUtU2hpZnQgMiAqL1xuICBleHBvcnQgY29uc3QgU1MyID0gJ1xceDhlJztcbiAgLyoqIFNpbmdsZS1TaGlmdCAzICovXG4gIGV4cG9ydCBjb25zdCBTUzMgPSAnXFx4OGYnO1xuICAvKiogRGV2aWNlIENvbnRyb2wgU3RyaW5nICovXG4gIGV4cG9ydCBjb25zdCBEQ1MgPSAnXFx4OTAnO1xuICAvKiogUHJpdmF0ZSBVc2UgMSAqL1xuICBleHBvcnQgY29uc3QgUFUxID0gJ1xceDkxJztcbiAgLyoqIFByaXZhdGUgVXNlIDIgKi9cbiAgZXhwb3J0IGNvbnN0IFBVMiA9ICdcXHg5Mic7XG4gIC8qKiBTZXQgVHJhbnNtaXQgU3RhdGUgKi9cbiAgZXhwb3J0IGNvbnN0IFNUUyA9ICdcXHg5Myc7XG4gIC8qKiBEZXN0cnVjdGl2ZSBiYWNrc3BhY2UsIGludGVuZGVkIHRvIGVsaW1pbmF0ZSBhbWJpZ3VpdHkgYWJvdXQgbWVhbmluZyBvZiBCUy4gKi9cbiAgZXhwb3J0IGNvbnN0IENDSCA9ICdcXHg5NCc7XG4gIC8qKiBNZXNzYWdlIFdhaXRpbmcgKi9cbiAgZXhwb3J0IGNvbnN0IE1XID0gJ1xceDk1JztcbiAgLyoqIFN0YXJ0IG9mIFByb3RlY3RlZCBBcmVhICovXG4gIGV4cG9ydCBjb25zdCBTUEEgPSAnXFx4OTYnO1xuICAvKiogRW5kIG9mIFByb3RlY3RlZCBBcmVhICovXG4gIGV4cG9ydCBjb25zdCBFUEEgPSAnXFx4OTcnO1xuICAvKiogU3RhcnQgb2YgU3RyaW5nICovXG4gIGV4cG9ydCBjb25zdCBTT1MgPSAnXFx4OTgnO1xuICAvKiogU2luZ2xlIEdyYXBoaWMgQ2hhcmFjdGVyIEludHJvZHVjZXIgKi9cbiAgZXhwb3J0IGNvbnN0IFNHQ0kgPSAnXFx4OTknO1xuICAvKiogU2luZ2xlIENoYXJhY3RlciBJbnRyb2R1Y2VyICovXG4gIGV4cG9ydCBjb25zdCBTQ0kgPSAnXFx4OWEnO1xuICAvKiogQ29udHJvbCBTZXF1ZW5jZSBJbnRyb2R1Y2VyICovXG4gIGV4cG9ydCBjb25zdCBDU0kgPSAnXFx4OWInO1xuICAvKiogU3RyaW5nIFRlcm1pbmF0b3IgKi9cbiAgZXhwb3J0IGNvbnN0IFNUID0gJ1xceDljJztcbiAgLyoqIE9wZXJhdGluZyBTeXN0ZW0gQ29tbWFuZCAqL1xuICBleHBvcnQgY29uc3QgT1NDID0gJ1xceDlkJztcbiAgLyoqIFByaXZhY3kgTWVzc2FnZSAqL1xuICBleHBvcnQgY29uc3QgUE0gPSAnXFx4OWUnO1xuICAvKiogQXBwbGljYXRpb24gUHJvZ3JhbSBDb21tYW5kICovXG4gIGV4cG9ydCBjb25zdCBBUEMgPSAnXFx4OWYnO1xufVxuIl0sIm1hcHBpbmdzIjoiOztBQVNBO0FBQUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBTUE7QUFBQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/common/data/EscapeSequences.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/core/buffer/BufferLine.js":
/*!**********************************************************!*\
  !*** ./node_modules/xterm/lib/core/buffer/BufferLine.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TextDecoder_1 = __webpack_require__(/*! ../input/TextDecoder */ \"./node_modules/xterm/lib/core/input/TextDecoder.js\");\nvar Types_1 = __webpack_require__(/*! ../../common/Types */ \"./node_modules/xterm/lib/common/Types.js\");\nexports.DEFAULT_ATTR = (0 << 18) | (Types_1.DEFAULT_COLOR << 9) | (256 << 0);\nexports.CHAR_DATA_ATTR_INDEX = 0;\nexports.CHAR_DATA_CHAR_INDEX = 1;\nexports.CHAR_DATA_WIDTH_INDEX = 2;\nexports.CHAR_DATA_CODE_INDEX = 3;\nexports.NULL_CELL_CHAR = '';\nexports.NULL_CELL_WIDTH = 1;\nexports.NULL_CELL_CODE = 0;\nexports.WHITESPACE_CELL_CHAR = ' ';\nexports.WHITESPACE_CELL_WIDTH = 1;\nexports.WHITESPACE_CELL_CODE = 32;\nvar CELL_SIZE = 3;\nvar AttributeData = (function () {\n    function AttributeData() {\n        this.fg = 0;\n        this.bg = 0;\n    }\n    AttributeData.toColorRGB = function (value) {\n        return [\n            value >>> 16 & 255,\n            value >>> 8 & 255,\n            value & 255\n        ];\n    };\n    AttributeData.fromColorRGB = function (value) {\n        return (value[0] & 255) << 16 | (value[1] & 255) << 8 | value[2] & 255;\n    };\n    AttributeData.prototype.clone = function () {\n        var newObj = new AttributeData();\n        newObj.fg = this.fg;\n        newObj.bg = this.bg;\n        return newObj;\n    };\n    AttributeData.prototype.isInverse = function () { return this.fg & 67108864; };\n    AttributeData.prototype.isBold = function () { return this.fg & 134217728; };\n    AttributeData.prototype.isUnderline = function () { return this.fg & 268435456; };\n    AttributeData.prototype.isBlink = function () { return this.fg & 536870912; };\n    AttributeData.prototype.isInvisible = function () { return this.fg & 1073741824; };\n    AttributeData.prototype.isItalic = function () { return this.bg & 67108864; };\n    AttributeData.prototype.isDim = function () { return this.bg & 134217728; };\n    AttributeData.prototype.getFgColorMode = function () { return this.fg & 50331648; };\n    AttributeData.prototype.getBgColorMode = function () { return this.bg & 50331648; };\n    AttributeData.prototype.isFgRGB = function () { return (this.fg & 50331648) === 50331648; };\n    AttributeData.prototype.isBgRGB = function () { return (this.bg & 50331648) === 50331648; };\n    AttributeData.prototype.isFgPalette = function () { return (this.fg & 50331648) === 16777216 || (this.fg & 50331648) === 33554432; };\n    AttributeData.prototype.isBgPalette = function () { return (this.bg & 50331648) === 16777216 || (this.bg & 50331648) === 33554432; };\n    AttributeData.prototype.isFgDefault = function () { return (this.fg & 50331648) === 0; };\n    AttributeData.prototype.isBgDefault = function () { return (this.bg & 50331648) === 0; };\n    AttributeData.prototype.getFgColor = function () {\n        switch (this.fg & 50331648) {\n            case 16777216:\n            case 33554432: return this.fg & 255;\n            case 50331648: return this.fg & 16777215;\n            default: return -1;\n        }\n    };\n    AttributeData.prototype.getBgColor = function () {\n        switch (this.bg & 50331648) {\n            case 16777216:\n            case 33554432: return this.bg & 255;\n            case 50331648: return this.bg & 16777215;\n            default: return -1;\n        }\n    };\n    return AttributeData;\n}());\nexports.AttributeData = AttributeData;\nexports.DEFAULT_ATTR_DATA = Object.freeze(new AttributeData());\nvar CellData = (function (_super) {\n    __extends(CellData, _super);\n    function CellData() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.content = 0;\n        _this.fg = 0;\n        _this.bg = 0;\n        _this.combinedData = '';\n        return _this;\n    }\n    CellData.fromCharData = function (value) {\n        var obj = new CellData();\n        obj.setFromCharData(value);\n        return obj;\n    };\n    CellData.prototype.isCombined = function () {\n        return this.content & 2097152;\n    };\n    CellData.prototype.getWidth = function () {\n        return this.content >> 22;\n    };\n    CellData.prototype.getChars = function () {\n        if (this.content & 2097152) {\n            return this.combinedData;\n        }\n        if (this.content & 2097151) {\n            return TextDecoder_1.stringFromCodePoint(this.content & 2097151);\n        }\n        return '';\n    };\n    CellData.prototype.getCode = function () {\n        return (this.isCombined())\n            ? this.combinedData.charCodeAt(this.combinedData.length - 1)\n            : this.content & 2097151;\n    };\n    CellData.prototype.setFromCharData = function (value) {\n        this.fg = value[exports.CHAR_DATA_ATTR_INDEX];\n        this.bg = 0;\n        var combined = false;\n        if (value[exports.CHAR_DATA_CHAR_INDEX].length > 2) {\n            combined = true;\n        }\n        else if (value[exports.CHAR_DATA_CHAR_INDEX].length === 2) {\n            var code = value[exports.CHAR_DATA_CHAR_INDEX].charCodeAt(0);\n            if (0xD800 <= code && code <= 0xDBFF) {\n                var second = value[exports.CHAR_DATA_CHAR_INDEX].charCodeAt(1);\n                if (0xDC00 <= second && second <= 0xDFFF) {\n                    this.content = ((code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000) | (value[exports.CHAR_DATA_WIDTH_INDEX] << 22);\n                }\n                else {\n                    combined = true;\n                }\n            }\n            else {\n                combined = true;\n            }\n        }\n        else {\n            this.content = value[exports.CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[exports.CHAR_DATA_WIDTH_INDEX] << 22);\n        }\n        if (combined) {\n            this.combinedData = value[exports.CHAR_DATA_CHAR_INDEX];\n            this.content = 2097152 | (value[exports.CHAR_DATA_WIDTH_INDEX] << 22);\n        }\n    };\n    CellData.prototype.getAsCharData = function () {\n        return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n    };\n    return CellData;\n}(AttributeData));\nexports.CellData = CellData;\nvar BufferLine = (function () {\n    function BufferLine(cols, fillCellData, isWrapped) {\n        if (isWrapped === void 0) { isWrapped = false; }\n        this.isWrapped = isWrapped;\n        this._combined = {};\n        this._data = new Uint32Array(cols * CELL_SIZE);\n        var cell = fillCellData || CellData.fromCharData([0, exports.NULL_CELL_CHAR, exports.NULL_CELL_WIDTH, exports.NULL_CELL_CODE]);\n        for (var i = 0; i < cols; ++i) {\n            this.setCell(i, cell);\n        }\n        this.length = cols;\n    }\n    BufferLine.prototype.get = function (index) {\n        var content = this._data[index * CELL_SIZE + 0];\n        var cp = content & 2097151;\n        return [\n            this._data[index * CELL_SIZE + 1],\n            (content & 2097152)\n                ? this._combined[index]\n                : (cp) ? TextDecoder_1.stringFromCodePoint(cp) : '',\n            content >> 22,\n            (content & 2097152)\n                ? this._combined[index].charCodeAt(this._combined[index].length - 1)\n                : cp\n        ];\n    };\n    BufferLine.prototype.set = function (index, value) {\n        this._data[index * CELL_SIZE + 1] = value[exports.CHAR_DATA_ATTR_INDEX];\n        if (value[exports.CHAR_DATA_CHAR_INDEX].length > 1) {\n            this._combined[index] = value[1];\n            this._data[index * CELL_SIZE + 0] = index | 2097152 | (value[exports.CHAR_DATA_WIDTH_INDEX] << 22);\n        }\n        else {\n            this._data[index * CELL_SIZE + 0] = value[exports.CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[exports.CHAR_DATA_WIDTH_INDEX] << 22);\n        }\n    };\n    BufferLine.prototype.getWidth = function (index) {\n        return this._data[index * CELL_SIZE + 0] >> 22;\n    };\n    BufferLine.prototype.hasWidth = function (index) {\n        return this._data[index * CELL_SIZE + 0] & 12582912;\n    };\n    BufferLine.prototype.getFg = function (index) {\n        return this._data[index * CELL_SIZE + 1];\n    };\n    BufferLine.prototype.getBg = function (index) {\n        return this._data[index * CELL_SIZE + 2];\n    };\n    BufferLine.prototype.hasContent = function (index) {\n        return this._data[index * CELL_SIZE + 0] & 4194303;\n    };\n    BufferLine.prototype.getCodePoint = function (index) {\n        var content = this._data[index * CELL_SIZE + 0];\n        if (content & 2097152) {\n            return this._combined[index].charCodeAt(this._combined[index].length - 1);\n        }\n        return content & 2097151;\n    };\n    BufferLine.prototype.isCombined = function (index) {\n        return this._data[index * CELL_SIZE + 0] & 2097152;\n    };\n    BufferLine.prototype.getString = function (index) {\n        var content = this._data[index * CELL_SIZE + 0];\n        if (content & 2097152) {\n            return this._combined[index];\n        }\n        if (content & 2097151) {\n            return TextDecoder_1.stringFromCodePoint(content & 2097151);\n        }\n        return '';\n    };\n    BufferLine.prototype.loadCell = function (index, cell) {\n        var startIndex = index * CELL_SIZE;\n        cell.content = this._data[startIndex + 0];\n        cell.fg = this._data[startIndex + 1];\n        cell.bg = this._data[startIndex + 2];\n        if (cell.content & 2097152) {\n            cell.combinedData = this._combined[index];\n        }\n        return cell;\n    };\n    BufferLine.prototype.setCell = function (index, cell) {\n        if (cell.content & 2097152) {\n            this._combined[index] = cell.combinedData;\n        }\n        this._data[index * CELL_SIZE + 0] = cell.content;\n        this._data[index * CELL_SIZE + 1] = cell.fg;\n        this._data[index * CELL_SIZE + 2] = cell.bg;\n    };\n    BufferLine.prototype.setCellFromCodePoint = function (index, codePoint, width, fg, bg) {\n        this._data[index * CELL_SIZE + 0] = codePoint | (width << 22);\n        this._data[index * CELL_SIZE + 1] = fg;\n        this._data[index * CELL_SIZE + 2] = bg;\n    };\n    BufferLine.prototype.addCodepointToCell = function (index, codePoint) {\n        var content = this._data[index * CELL_SIZE + 0];\n        if (content & 2097152) {\n            this._combined[index] += TextDecoder_1.stringFromCodePoint(codePoint);\n        }\n        else {\n            if (content & 2097151) {\n                this._combined[index] = TextDecoder_1.stringFromCodePoint(content & 2097151) + TextDecoder_1.stringFromCodePoint(codePoint);\n                content &= ~2097151;\n                content |= 2097152;\n            }\n            else {\n                content = codePoint | (1 << 22);\n            }\n            this._data[index * CELL_SIZE + 0] = content;\n        }\n    };\n    BufferLine.prototype.insertCells = function (pos, n, fillCellData) {\n        pos %= this.length;\n        if (n < this.length - pos) {\n            var cell = new CellData();\n            for (var i = this.length - pos - n - 1; i >= 0; --i) {\n                this.setCell(pos + n + i, this.loadCell(pos + i, cell));\n            }\n            for (var i = 0; i < n; ++i) {\n                this.setCell(pos + i, fillCellData);\n            }\n        }\n        else {\n            for (var i = pos; i < this.length; ++i) {\n                this.setCell(i, fillCellData);\n            }\n        }\n    };\n    BufferLine.prototype.deleteCells = function (pos, n, fillCellData) {\n        pos %= this.length;\n        if (n < this.length - pos) {\n            var cell = new CellData();\n            for (var i = 0; i < this.length - pos - n; ++i) {\n                this.setCell(pos + i, this.loadCell(pos + n + i, cell));\n            }\n            for (var i = this.length - n; i < this.length; ++i) {\n                this.setCell(i, fillCellData);\n            }\n        }\n        else {\n            for (var i = pos; i < this.length; ++i) {\n                this.setCell(i, fillCellData);\n            }\n        }\n    };\n    BufferLine.prototype.replaceCells = function (start, end, fillCellData) {\n        while (start < end && start < this.length) {\n            this.setCell(start++, fillCellData);\n        }\n    };\n    BufferLine.prototype.resize = function (cols, fillCellData) {\n        if (cols === this.length) {\n            return;\n        }\n        if (cols > this.length) {\n            var data = new Uint32Array(cols * CELL_SIZE);\n            if (this.length) {\n                if (cols * CELL_SIZE < this._data.length) {\n                    data.set(this._data.subarray(0, cols * CELL_SIZE));\n                }\n                else {\n                    data.set(this._data);\n                }\n            }\n            this._data = data;\n            for (var i = this.length; i < cols; ++i) {\n                this.setCell(i, fillCellData);\n            }\n        }\n        else {\n            if (cols) {\n                var data = new Uint32Array(cols * CELL_SIZE);\n                data.set(this._data.subarray(0, cols * CELL_SIZE));\n                this._data = data;\n                var keys = Object.keys(this._combined);\n                for (var i = 0; i < keys.length; i++) {\n                    var key = parseInt(keys[i], 10);\n                    if (key >= cols) {\n                        delete this._combined[key];\n                    }\n                }\n            }\n            else {\n                this._data = new Uint32Array(0);\n                this._combined = {};\n            }\n        }\n        this.length = cols;\n    };\n    BufferLine.prototype.fill = function (fillCellData) {\n        this._combined = {};\n        for (var i = 0; i < this.length; ++i) {\n            this.setCell(i, fillCellData);\n        }\n    };\n    BufferLine.prototype.copyFrom = function (line) {\n        if (this.length !== line.length) {\n            this._data = new Uint32Array(line._data);\n        }\n        else {\n            this._data.set(line._data);\n        }\n        this.length = line.length;\n        this._combined = {};\n        for (var el in line._combined) {\n            this._combined[el] = line._combined[el];\n        }\n        this.isWrapped = line.isWrapped;\n    };\n    BufferLine.prototype.clone = function () {\n        var newLine = new BufferLine(0);\n        newLine._data = new Uint32Array(this._data);\n        newLine.length = this.length;\n        for (var el in this._combined) {\n            newLine._combined[el] = this._combined[el];\n        }\n        newLine.isWrapped = this.isWrapped;\n        return newLine;\n    };\n    BufferLine.prototype.getTrimmedLength = function () {\n        for (var i = this.length - 1; i >= 0; --i) {\n            if ((this._data[i * CELL_SIZE + 0] & 4194303)) {\n                return i + (this._data[i * CELL_SIZE + 0] >> 22);\n            }\n        }\n        return 0;\n    };\n    BufferLine.prototype.copyCellsFrom = function (src, srcCol, destCol, length, applyInReverse) {\n        var srcData = src._data;\n        if (applyInReverse) {\n            for (var cell = length - 1; cell >= 0; cell--) {\n                for (var i = 0; i < CELL_SIZE; i++) {\n                    this._data[(destCol + cell) * CELL_SIZE + i] = srcData[(srcCol + cell) * CELL_SIZE + i];\n                }\n            }\n        }\n        else {\n            for (var cell = 0; cell < length; cell++) {\n                for (var i = 0; i < CELL_SIZE; i++) {\n                    this._data[(destCol + cell) * CELL_SIZE + i] = srcData[(srcCol + cell) * CELL_SIZE + i];\n                }\n            }\n        }\n        var srcCombinedKeys = Object.keys(src._combined);\n        for (var i = 0; i < srcCombinedKeys.length; i++) {\n            var key = parseInt(srcCombinedKeys[i], 10);\n            if (key >= srcCol) {\n                this._combined[key - srcCol + destCol] = src._combined[key];\n            }\n        }\n    };\n    BufferLine.prototype.translateToString = function (trimRight, startCol, endCol) {\n        if (trimRight === void 0) { trimRight = false; }\n        if (startCol === void 0) { startCol = 0; }\n        if (endCol === void 0) { endCol = this.length; }\n        if (trimRight) {\n            endCol = Math.min(endCol, this.getTrimmedLength());\n        }\n        var result = '';\n        while (startCol < endCol) {\n            var content = this._data[startCol * CELL_SIZE + 0];\n            var cp = content & 2097151;\n            result += (content & 2097152) ? this._combined[startCol] : (cp) ? TextDecoder_1.stringFromCodePoint(cp) : exports.WHITESPACE_CELL_CHAR;\n            startCol += (content >> 22) || 1;\n        }\n        return result;\n    };\n    return BufferLine;\n}());\nexports.BufferLine = BufferLine;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/core/buffer/BufferLine.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/core/buffer/BufferReflow.js":
/*!************************************************************!*\
  !*** ./node_modules/xterm/lib/core/buffer/BufferReflow.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction reflowLargerGetLinesToRemove(lines, oldCols, newCols, bufferAbsoluteY, nullCell) {\n    var toRemove = [];\n    for (var y = 0; y < lines.length - 1; y++) {\n        var i = y;\n        var nextLine = lines.get(++i);\n        if (!nextLine.isWrapped) {\n            continue;\n        }\n        var wrappedLines = [lines.get(y)];\n        while (i < lines.length && nextLine.isWrapped) {\n            wrappedLines.push(nextLine);\n            nextLine = lines.get(++i);\n        }\n        if (bufferAbsoluteY >= y && bufferAbsoluteY < i) {\n            y += wrappedLines.length - 1;\n            continue;\n        }\n        var destLineIndex = 0;\n        var destCol = getWrappedLineTrimmedLength(wrappedLines, destLineIndex, oldCols);\n        var srcLineIndex = 1;\n        var srcCol = 0;\n        while (srcLineIndex < wrappedLines.length) {\n            var srcTrimmedTineLength = getWrappedLineTrimmedLength(wrappedLines, srcLineIndex, oldCols);\n            var srcRemainingCells = srcTrimmedTineLength - srcCol;\n            var destRemainingCells = newCols - destCol;\n            var cellsToCopy = Math.min(srcRemainingCells, destRemainingCells);\n            wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[srcLineIndex], srcCol, destCol, cellsToCopy, false);\n            destCol += cellsToCopy;\n            if (destCol === newCols) {\n                destLineIndex++;\n                destCol = 0;\n            }\n            srcCol += cellsToCopy;\n            if (srcCol === srcTrimmedTineLength) {\n                srcLineIndex++;\n                srcCol = 0;\n            }\n            if (destCol === 0 && destLineIndex !== 0) {\n                if (wrappedLines[destLineIndex - 1].getWidth(newCols - 1) === 2) {\n                    wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[destLineIndex - 1], newCols - 1, destCol++, 1, false);\n                    wrappedLines[destLineIndex - 1].setCell(newCols - 1, nullCell);\n                }\n            }\n        }\n        wrappedLines[destLineIndex].replaceCells(destCol, newCols, nullCell);\n        var countToRemove = 0;\n        for (var i_1 = wrappedLines.length - 1; i_1 > 0; i_1--) {\n            if (i_1 > destLineIndex || wrappedLines[i_1].getTrimmedLength() === 0) {\n                countToRemove++;\n            }\n            else {\n                break;\n            }\n        }\n        if (countToRemove > 0) {\n            toRemove.push(y + wrappedLines.length - countToRemove);\n            toRemove.push(countToRemove);\n        }\n        y += wrappedLines.length - 1;\n    }\n    return toRemove;\n}\nexports.reflowLargerGetLinesToRemove = reflowLargerGetLinesToRemove;\nfunction reflowLargerCreateNewLayout(lines, toRemove) {\n    var layout = [];\n    var nextToRemoveIndex = 0;\n    var nextToRemoveStart = toRemove[nextToRemoveIndex];\n    var countRemovedSoFar = 0;\n    for (var i = 0; i < lines.length; i++) {\n        if (nextToRemoveStart === i) {\n            var countToRemove = toRemove[++nextToRemoveIndex];\n            lines.onDeleteEmitter.fire({\n                index: i - countRemovedSoFar,\n                amount: countToRemove\n            });\n            i += countToRemove - 1;\n            countRemovedSoFar += countToRemove;\n            nextToRemoveStart = toRemove[++nextToRemoveIndex];\n        }\n        else {\n            layout.push(i);\n        }\n    }\n    return {\n        layout: layout,\n        countRemoved: countRemovedSoFar\n    };\n}\nexports.reflowLargerCreateNewLayout = reflowLargerCreateNewLayout;\nfunction reflowLargerApplyNewLayout(lines, newLayout) {\n    var newLayoutLines = [];\n    for (var i = 0; i < newLayout.length; i++) {\n        newLayoutLines.push(lines.get(newLayout[i]));\n    }\n    for (var i = 0; i < newLayoutLines.length; i++) {\n        lines.set(i, newLayoutLines[i]);\n    }\n    lines.length = newLayout.length;\n}\nexports.reflowLargerApplyNewLayout = reflowLargerApplyNewLayout;\nfunction reflowSmallerGetNewLineLengths(wrappedLines, oldCols, newCols) {\n    var newLineLengths = [];\n    var cellsNeeded = wrappedLines.map(function (l, i) { return getWrappedLineTrimmedLength(wrappedLines, i, oldCols); }).reduce(function (p, c) { return p + c; });\n    var srcCol = 0;\n    var srcLine = 0;\n    var cellsAvailable = 0;\n    while (cellsAvailable < cellsNeeded) {\n        if (cellsNeeded - cellsAvailable < newCols) {\n            newLineLengths.push(cellsNeeded - cellsAvailable);\n            break;\n        }\n        srcCol += newCols;\n        var oldTrimmedLength = getWrappedLineTrimmedLength(wrappedLines, srcLine, oldCols);\n        if (srcCol > oldTrimmedLength) {\n            srcCol -= oldTrimmedLength;\n            srcLine++;\n        }\n        var endsWithWide = wrappedLines[srcLine].getWidth(srcCol - 1) === 2;\n        if (endsWithWide) {\n            srcCol--;\n        }\n        var lineLength = endsWithWide ? newCols - 1 : newCols;\n        newLineLengths.push(lineLength);\n        cellsAvailable += lineLength;\n    }\n    return newLineLengths;\n}\nexports.reflowSmallerGetNewLineLengths = reflowSmallerGetNewLineLengths;\nfunction getWrappedLineTrimmedLength(lines, i, cols) {\n    if (i === lines.length - 1) {\n        return lines[i].getTrimmedLength();\n    }\n    var endsInNull = !(lines[i].hasContent(cols - 1)) && lines[i].getWidth(cols - 1) === 1;\n    var followingLineStartsWithWide = lines[i + 1].getWidth(0) === 2;\n    if (endsInNull && followingLineStartsWithWide) {\n        return cols - 1;\n    }\n    return cols;\n}\nexports.getWrappedLineTrimmedLength = getWrappedLineTrimmedLength;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/core/buffer/BufferReflow.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/core/buffer/Marker.js":
/*!******************************************************!*\
  !*** ./node_modules/xterm/lib/core/buffer/Marker.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EventEmitter2_1 = __webpack_require__(/*! ../../common/EventEmitter2 */ \"./node_modules/xterm/lib/common/EventEmitter2.js\");\nvar Lifecycle_1 = __webpack_require__(/*! ../../common/Lifecycle */ \"./node_modules/xterm/lib/common/Lifecycle.js\");\nvar Marker = (function (_super) {\n    __extends(Marker, _super);\n    function Marker(line) {\n        var _this = _super.call(this) || this;\n        _this.line = line;\n        _this._id = Marker._nextId++;\n        _this.isDisposed = false;\n        _this._onDispose = new EventEmitter2_1.EventEmitter2();\n        return _this;\n    }\n    Object.defineProperty(Marker.prototype, \"id\", {\n        get: function () { return this._id; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Marker.prototype, \"onDispose\", {\n        get: function () { return this._onDispose.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Marker.prototype.dispose = function () {\n        if (this.isDisposed) {\n            return;\n        }\n        this.isDisposed = true;\n        this._onDispose.fire();\n    };\n    Marker._nextId = 1;\n    return Marker;\n}(Lifecycle_1.Disposable));\nexports.Marker = Marker;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL2NvcmUvYnVmZmVyL01hcmtlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9zcmMvY29yZS9idWZmZXIvTWFya2VyLnRzP2RkNzQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIyLCBJRXZlbnQgfSBmcm9tICcuLi8uLi9jb21tb24vRXZlbnRFbWl0dGVyMic7XG5pbXBvcnQgeyBEaXNwb3NhYmxlIH0gZnJvbSAnLi4vLi4vY29tbW9uL0xpZmVjeWNsZSc7XG5pbXBvcnQgeyBJTWFya2VyIH0gZnJvbSAnLi4vVHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgTWFya2VyIGV4dGVuZHMgRGlzcG9zYWJsZSBpbXBsZW1lbnRzIElNYXJrZXIge1xuICBwcml2YXRlIHN0YXRpYyBfbmV4dElkID0gMTtcblxuICBwcml2YXRlIF9pZDogbnVtYmVyID0gTWFya2VyLl9uZXh0SWQrKztcbiAgcHVibGljIGlzRGlzcG9zZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwdWJsaWMgZ2V0IGlkKCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9pZDsgfVxuXG4gIHByaXZhdGUgX29uRGlzcG9zZSA9IG5ldyBFdmVudEVtaXR0ZXIyPHZvaWQ+KCk7XG4gIHB1YmxpYyBnZXQgb25EaXNwb3NlKCk6IElFdmVudDx2b2lkPiB7IHJldHVybiB0aGlzLl9vbkRpc3Bvc2UuZXZlbnQ7IH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgbGluZTogbnVtYmVyXG4gICkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc0Rpc3Bvc2VkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuaXNEaXNwb3NlZCA9IHRydWU7XG4gICAgLy8gRW1pdCBiZWZvcmUgc3VwZXIuZGlzcG9zZSBzdWNoIHRoYXQgZGlzcG9zZSBsaXN0ZW5lcnMgZ2V0IGEgY2hhbmdlIHRvIHJlYWN0XG4gICAgdGhpcy5fb25EaXNwb3NlLmZpcmUoKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFLQTtBQUNBO0FBR0E7QUFBQTtBQVdBO0FBQUE7QUFDQTtBQVRBO0FBQ0E7QUFJQTs7QUFPQTtBQVRBO0FBQUE7OztBQUFBO0FBR0E7QUFBQTs7O0FBQUE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQXZCQTtBQXdCQTtBQUFBO0FBekJBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/core/buffer/Marker.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/core/data/Charsets.js":
/*!******************************************************!*\
  !*** ./node_modules/xterm/lib/core/data/Charsets.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CHARSETS = {};\nexports.DEFAULT_CHARSET = exports.CHARSETS['B'];\nexports.CHARSETS['0'] = {\n    '`': '\\u25c6',\n    'a': '\\u2592',\n    'b': '\\u0009',\n    'c': '\\u000c',\n    'd': '\\u000d',\n    'e': '\\u000a',\n    'f': '\\u00b0',\n    'g': '\\u00b1',\n    'h': '\\u2424',\n    'i': '\\u000b',\n    'j': '\\u2518',\n    'k': '\\u2510',\n    'l': '\\u250c',\n    'm': '\\u2514',\n    'n': '\\u253c',\n    'o': '\\u23ba',\n    'p': '\\u23bb',\n    'q': '\\u2500',\n    'r': '\\u23bc',\n    's': '\\u23bd',\n    't': '\\u251c',\n    'u': '\\u2524',\n    'v': '\\u2534',\n    'w': '\\u252c',\n    'x': '\\u2502',\n    'y': '\\u2264',\n    'z': '\\u2265',\n    '{': '\\u03c0',\n    '|': '\\u2260',\n    '}': '\\u00a3',\n    '~': '\\u00b7'\n};\nexports.CHARSETS['A'] = {\n    '#': '£'\n};\nexports.CHARSETS['B'] = null;\nexports.CHARSETS['4'] = {\n    '#': '£',\n    '@': '¾',\n    '[': 'ij',\n    '\\\\': '½',\n    ']': '|',\n    '{': '¨',\n    '|': 'f',\n    '}': '¼',\n    '~': '´'\n};\nexports.CHARSETS['C'] =\n    exports.CHARSETS['5'] = {\n        '[': 'Ä',\n        '\\\\': 'Ö',\n        ']': 'Å',\n        '^': 'Ü',\n        '`': 'é',\n        '{': 'ä',\n        '|': 'ö',\n        '}': 'å',\n        '~': 'ü'\n    };\nexports.CHARSETS['R'] = {\n    '#': '£',\n    '@': 'à',\n    '[': '°',\n    '\\\\': 'ç',\n    ']': '§',\n    '{': 'é',\n    '|': 'ù',\n    '}': 'è',\n    '~': '¨'\n};\nexports.CHARSETS['Q'] = {\n    '@': 'à',\n    '[': 'â',\n    '\\\\': 'ç',\n    ']': 'ê',\n    '^': 'î',\n    '`': 'ô',\n    '{': 'é',\n    '|': 'ù',\n    '}': 'è',\n    '~': 'û'\n};\nexports.CHARSETS['K'] = {\n    '@': '§',\n    '[': 'Ä',\n    '\\\\': 'Ö',\n    ']': 'Ü',\n    '{': 'ä',\n    '|': 'ö',\n    '}': 'ü',\n    '~': 'ß'\n};\nexports.CHARSETS['Y'] = {\n    '#': '£',\n    '@': '§',\n    '[': '°',\n    '\\\\': 'ç',\n    ']': 'é',\n    '`': 'ù',\n    '{': 'à',\n    '|': 'ò',\n    '}': 'è',\n    '~': 'ì'\n};\nexports.CHARSETS['E'] =\n    exports.CHARSETS['6'] = {\n        '@': 'Ä',\n        '[': 'Æ',\n        '\\\\': 'Ø',\n        ']': 'Å',\n        '^': 'Ü',\n        '`': 'ä',\n        '{': 'æ',\n        '|': 'ø',\n        '}': 'å',\n        '~': 'ü'\n    };\nexports.CHARSETS['Z'] = {\n    '#': '£',\n    '@': '§',\n    '[': '¡',\n    '\\\\': 'Ñ',\n    ']': '¿',\n    '{': '°',\n    '|': 'ñ',\n    '}': 'ç'\n};\nexports.CHARSETS['H'] =\n    exports.CHARSETS['7'] = {\n        '@': 'É',\n        '[': 'Ä',\n        '\\\\': 'Ö',\n        ']': 'Å',\n        '^': 'Ü',\n        '`': 'é',\n        '{': 'ä',\n        '|': 'ö',\n        '}': 'å',\n        '~': 'ü'\n    };\nexports.CHARSETS['='] = {\n    '#': 'ù',\n    '@': 'à',\n    '[': 'é',\n    '\\\\': 'ç',\n    ']': 'ê',\n    '^': 'î',\n    '_': 'è',\n    '`': 'ô',\n    '{': 'ä',\n    '|': 'ö',\n    '}': 'ü',\n    '~': 'û'\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL2NvcmUvZGF0YS9DaGFyc2V0cy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9zcmMvY29yZS9kYXRhL0NoYXJzZXRzLnRzPzRlMTgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJQ2hhcnNldCB9IGZyb20gJy4uL1R5cGVzJztcblxuLyoqXG4gKiBUaGUgY2hhcmFjdGVyIHNldHMgc3VwcG9ydGVkIGJ5IHRoZSB0ZXJtaW5hbC4gVGhlc2UgZW5hYmxlIHNldmVyYWwgbGFuZ3VhZ2VzXG4gKiB0byBiZSByZXByZXNlbnRlZCB3aXRoaW4gdGhlIHRlcm1pbmFsIHdpdGggb25seSA4LWJpdCBlbmNvZGluZy4gU2VlIElTTyAyMDIyXG4gKiBmb3IgYSBkaXNjdXNzaW9uIG9uIGNoYXJhY3RlciBzZXRzLiBPbmx5IFZUMTAwIGNoYXJhY3RlciBzZXRzIGFyZSBzdXBwb3J0ZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBDSEFSU0VUUzogeyBba2V5OiBzdHJpbmddOiBJQ2hhcnNldCB8IG51bGwgfSA9IHt9O1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IGNoYXJhY3RlciBzZXQsIFVTLlxuICovXG5leHBvcnQgY29uc3QgREVGQVVMVF9DSEFSU0VUOiBJQ2hhcnNldCB8IG51bGwgPSBDSEFSU0VUU1snQiddO1xuXG4vKipcbiAqIERFQyBTcGVjaWFsIENoYXJhY3RlciBhbmQgTGluZSBEcmF3aW5nIFNldC5cbiAqIFJlZmVyZW5jZTogaHR0cDovL3Z0MTAwLm5ldC9kb2NzL3Z0MTAyLXVnL3RhYmxlNS0xMy5odG1sXG4gKiBBIGxvdCBvZiBjdXJzZXMgYXBwcyB1c2UgdGhpcyBpZiB0aGV5IHNlZSBURVJNPXh0ZXJtLlxuICogdGVzdGluZzogZWNobyAtZSAnXFxlKDBhXFxlKEInXG4gKiBUaGUgeHRlcm0gb3V0cHV0IHNvbWV0aW1lcyBzZWVtcyB0byBjb25mbGljdCB3aXRoIHRoZVxuICogcmVmZXJlbmNlIGFib3ZlLiB4dGVybSBzZWVtcyBpbiBsaW5lIHdpdGggdGhlIHJlZmVyZW5jZVxuICogd2hlbiBydW5uaW5nIHZ0dGVzdCBob3dldmVyLlxuICogVGhlIHRhYmxlIGJlbG93IG5vdyB1c2VzIHh0ZXJtJ3Mgb3V0cHV0IGZyb20gdnR0ZXN0LlxuICovXG5DSEFSU0VUU1snMCddID0ge1xuICAnYCc6ICdcXHUyNWM2JywgLy8gJ+KXhidcbiAgJ2EnOiAnXFx1MjU5MicsIC8vICfilpInXG4gICdiJzogJ1xcdTAwMDknLCAvLyAnXFx0J1xuICAnYyc6ICdcXHUwMDBjJywgLy8gJ1xcZidcbiAgJ2QnOiAnXFx1MDAwZCcsIC8vICdcXHInXG4gICdlJzogJ1xcdTAwMGEnLCAvLyAnXFxuJ1xuICAnZic6ICdcXHUwMGIwJywgLy8gJ8KwJ1xuICAnZyc6ICdcXHUwMGIxJywgLy8gJ8KxJ1xuICAnaCc6ICdcXHUyNDI0JywgLy8gJ1xcdTI0MjQnIChOTClcbiAgJ2knOiAnXFx1MDAwYicsIC8vICdcXHYnXG4gICdqJzogJ1xcdTI1MTgnLCAvLyAn4pSYJ1xuICAnayc6ICdcXHUyNTEwJywgLy8gJ+KUkCdcbiAgJ2wnOiAnXFx1MjUwYycsIC8vICfilIwnXG4gICdtJzogJ1xcdTI1MTQnLCAvLyAn4pSUJ1xuICAnbic6ICdcXHUyNTNjJywgLy8gJ+KUvCdcbiAgJ28nOiAnXFx1MjNiYScsIC8vICfijronXG4gICdwJzogJ1xcdTIzYmInLCAvLyAn4o67J1xuICAncSc6ICdcXHUyNTAwJywgLy8gJ+KUgCdcbiAgJ3InOiAnXFx1MjNiYycsIC8vICfijrwnXG4gICdzJzogJ1xcdTIzYmQnLCAvLyAn4o69J1xuICAndCc6ICdcXHUyNTFjJywgLy8gJ+KUnCdcbiAgJ3UnOiAnXFx1MjUyNCcsIC8vICfilKQnXG4gICd2JzogJ1xcdTI1MzQnLCAvLyAn4pS0J1xuICAndyc6ICdcXHUyNTJjJywgLy8gJ+KUrCdcbiAgJ3gnOiAnXFx1MjUwMicsIC8vICfilIInXG4gICd5JzogJ1xcdTIyNjQnLCAvLyAn4omkJ1xuICAneic6ICdcXHUyMjY1JywgLy8gJ+KJpSdcbiAgJ3snOiAnXFx1MDNjMCcsIC8vICfPgCdcbiAgJ3wnOiAnXFx1MjI2MCcsIC8vICfiiaAnXG4gICd9JzogJ1xcdTAwYTMnLCAvLyAnwqMnXG4gICd+JzogJ1xcdTAwYjcnICAvLyAnwrcnXG59O1xuXG4vKipcbiAqIEJyaXRpc2ggY2hhcmFjdGVyIHNldFxuICogRVNDIChBXG4gKiBSZWZlcmVuY2U6IGh0dHA6Ly92dDEwMC5uZXQvZG9jcy92dDIyMC1ybS90YWJsZTItNS5odG1sXG4gKi9cbkNIQVJTRVRTWydBJ10gPSB7XG4gICcjJzogJ8KjJ1xufTtcblxuLyoqXG4gKiBVbml0ZWQgU3RhdGVzIGNoYXJhY3RlciBzZXRcbiAqIEVTQyAoQlxuICovXG5DSEFSU0VUU1snQiddID0gbnVsbDtcblxuLyoqXG4gKiBEdXRjaCBjaGFyYWN0ZXIgc2V0XG4gKiBFU0MgKDRcbiAqIFJlZmVyZW5jZTogaHR0cDovL3Z0MTAwLm5ldC9kb2NzL3Z0MjIwLXJtL3RhYmxlMi02Lmh0bWxcbiAqL1xuQ0hBUlNFVFNbJzQnXSA9IHtcbiAgJyMnOiAnwqMnLFxuICAnQCc6ICfCvicsXG4gICdbJzogJ2lqJyxcbiAgJ1xcXFwnOiAnwr0nLFxuICAnXSc6ICd8JyxcbiAgJ3snOiAnwqgnLFxuICAnfCc6ICdmJyxcbiAgJ30nOiAnwrwnLFxuICAnfic6ICfCtCdcbn07XG5cbi8qKlxuICogRmlubmlzaCBjaGFyYWN0ZXIgc2V0XG4gKiBFU0MgKEMgb3IgRVNDICg1XG4gKiBSZWZlcmVuY2U6IGh0dHA6Ly92dDEwMC5uZXQvZG9jcy92dDIyMC1ybS90YWJsZTItNy5odG1sXG4gKi9cbkNIQVJTRVRTWydDJ10gPVxuQ0hBUlNFVFNbJzUnXSA9IHtcbiAgJ1snOiAnw4QnLFxuICAnXFxcXCc6ICfDlicsXG4gICddJzogJ8OFJyxcbiAgJ14nOiAnw5wnLFxuICAnYCc6ICfDqScsXG4gICd7JzogJ8OkJyxcbiAgJ3wnOiAnw7YnLFxuICAnfSc6ICfDpScsXG4gICd+JzogJ8O8J1xufTtcblxuLyoqXG4gKiBGcmVuY2ggY2hhcmFjdGVyIHNldFxuICogRVNDIChSXG4gKiBSZWZlcmVuY2U6IGh0dHA6Ly92dDEwMC5uZXQvZG9jcy92dDIyMC1ybS90YWJsZTItOC5odG1sXG4gKi9cbkNIQVJTRVRTWydSJ10gPSB7XG4gICcjJzogJ8KjJyxcbiAgJ0AnOiAnw6AnLFxuICAnWyc6ICfCsCcsXG4gICdcXFxcJzogJ8OnJyxcbiAgJ10nOiAnwqcnLFxuICAneyc6ICfDqScsXG4gICd8JzogJ8O5JyxcbiAgJ30nOiAnw6gnLFxuICAnfic6ICfCqCdcbn07XG5cbi8qKlxuICogRnJlbmNoIENhbmFkaWFuIGNoYXJhY3RlciBzZXRcbiAqIEVTQyAoUVxuICogUmVmZXJlbmNlOiBodHRwOi8vdnQxMDAubmV0L2RvY3MvdnQyMjAtcm0vdGFibGUyLTkuaHRtbFxuICovXG5DSEFSU0VUU1snUSddID0ge1xuICAnQCc6ICfDoCcsXG4gICdbJzogJ8OiJyxcbiAgJ1xcXFwnOiAnw6cnLFxuICAnXSc6ICfDqicsXG4gICdeJzogJ8OuJyxcbiAgJ2AnOiAnw7QnLFxuICAneyc6ICfDqScsXG4gICd8JzogJ8O5JyxcbiAgJ30nOiAnw6gnLFxuICAnfic6ICfDuydcbn07XG5cbi8qKlxuICogR2VybWFuIGNoYXJhY3RlciBzZXRcbiAqIEVTQyAoS1xuICogUmVmZXJlbmNlOiBodHRwOi8vdnQxMDAubmV0L2RvY3MvdnQyMjAtcm0vdGFibGUyLTEwLmh0bWxcbiAqL1xuQ0hBUlNFVFNbJ0snXSA9IHtcbiAgJ0AnOiAnwqcnLFxuICAnWyc6ICfDhCcsXG4gICdcXFxcJzogJ8OWJyxcbiAgJ10nOiAnw5wnLFxuICAneyc6ICfDpCcsXG4gICd8JzogJ8O2JyxcbiAgJ30nOiAnw7wnLFxuICAnfic6ICfDnydcbn07XG5cbi8qKlxuICogSXRhbGlhbiBjaGFyYWN0ZXIgc2V0XG4gKiBFU0MgKFlcbiAqIFJlZmVyZW5jZTogaHR0cDovL3Z0MTAwLm5ldC9kb2NzL3Z0MjIwLXJtL3RhYmxlMi0xMS5odG1sXG4gKi9cbkNIQVJTRVRTWydZJ10gPSB7XG4gICcjJzogJ8KjJyxcbiAgJ0AnOiAnwqcnLFxuICAnWyc6ICfCsCcsXG4gICdcXFxcJzogJ8OnJyxcbiAgJ10nOiAnw6knLFxuICAnYCc6ICfDuScsXG4gICd7JzogJ8OgJyxcbiAgJ3wnOiAnw7InLFxuICAnfSc6ICfDqCcsXG4gICd+JzogJ8OsJ1xufTtcblxuLyoqXG4gKiBOb3J3ZWdpYW4vRGFuaXNoIGNoYXJhY3RlciBzZXRcbiAqIEVTQyAoRSBvciBFU0MgKDZcbiAqIFJlZmVyZW5jZTogaHR0cDovL3Z0MTAwLm5ldC9kb2NzL3Z0MjIwLXJtL3RhYmxlMi0xMi5odG1sXG4gKi9cbkNIQVJTRVRTWydFJ10gPVxuQ0hBUlNFVFNbJzYnXSA9IHtcbiAgJ0AnOiAnw4QnLFxuICAnWyc6ICfDhicsXG4gICdcXFxcJzogJ8OYJyxcbiAgJ10nOiAnw4UnLFxuICAnXic6ICfDnCcsXG4gICdgJzogJ8OkJyxcbiAgJ3snOiAnw6YnLFxuICAnfCc6ICfDuCcsXG4gICd9JzogJ8OlJyxcbiAgJ34nOiAnw7wnXG59O1xuXG4vKipcbiAqIFNwYW5pc2ggY2hhcmFjdGVyIHNldFxuICogRVNDIChaXG4gKiBSZWZlcmVuY2U6IGh0dHA6Ly92dDEwMC5uZXQvZG9jcy92dDIyMC1ybS90YWJsZTItMTMuaHRtbFxuICovXG5DSEFSU0VUU1snWiddID0ge1xuICAnIyc6ICfCoycsXG4gICdAJzogJ8KnJyxcbiAgJ1snOiAnwqEnLFxuICAnXFxcXCc6ICfDkScsXG4gICddJzogJ8K/JyxcbiAgJ3snOiAnwrAnLFxuICAnfCc6ICfDsScsXG4gICd9JzogJ8OnJ1xufTtcblxuLyoqXG4gKiBTd2VkaXNoIGNoYXJhY3RlciBzZXRcbiAqIEVTQyAoSCBvciBFU0MgKDdcbiAqIFJlZmVyZW5jZTogaHR0cDovL3Z0MTAwLm5ldC9kb2NzL3Z0MjIwLXJtL3RhYmxlMi0xNC5odG1sXG4gKi9cbkNIQVJTRVRTWydIJ10gPVxuQ0hBUlNFVFNbJzcnXSA9IHtcbiAgJ0AnOiAnw4knLFxuICAnWyc6ICfDhCcsXG4gICdcXFxcJzogJ8OWJyxcbiAgJ10nOiAnw4UnLFxuICAnXic6ICfDnCcsXG4gICdgJzogJ8OpJyxcbiAgJ3snOiAnw6QnLFxuICAnfCc6ICfDticsXG4gICd9JzogJ8OlJyxcbiAgJ34nOiAnw7wnXG59O1xuXG4vKipcbiAqIFN3aXNzIGNoYXJhY3RlciBzZXRcbiAqIEVTQyAoPVxuICogUmVmZXJlbmNlOiBodHRwOi8vdnQxMDAubmV0L2RvY3MvdnQyMjAtcm0vdGFibGUyLTE1Lmh0bWxcbiAqL1xuQ0hBUlNFVFNbJz0nXSA9IHtcbiAgJyMnOiAnw7knLFxuICAnQCc6ICfDoCcsXG4gICdbJzogJ8OpJyxcbiAgJ1xcXFwnOiAnw6cnLFxuICAnXSc6ICfDqicsXG4gICdeJzogJ8OuJyxcbiAgJ18nOiAnw6gnLFxuICAnYCc6ICfDtCcsXG4gICd7JzogJ8OkJyxcbiAgJ3wnOiAnw7YnLFxuICAnfSc6ICfDvCcsXG4gICd+JzogJ8O7J1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFZQTtBQUtBO0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBTUE7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/core/data/Charsets.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/core/input/Keyboard.js":
/*!*******************************************************!*\
  !*** ./node_modules/xterm/lib/core/input/Keyboard.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EscapeSequences_1 = __webpack_require__(/*! ../../common/data/EscapeSequences */ \"./node_modules/xterm/lib/common/data/EscapeSequences.js\");\nvar KEYCODE_KEY_MAPPINGS = {\n    48: ['0', ')'],\n    49: ['1', '!'],\n    50: ['2', '@'],\n    51: ['3', '#'],\n    52: ['4', '$'],\n    53: ['5', '%'],\n    54: ['6', '^'],\n    55: ['7', '&'],\n    56: ['8', '*'],\n    57: ['9', '('],\n    186: [';', ':'],\n    187: ['=', '+'],\n    188: [',', '<'],\n    189: ['-', '_'],\n    190: ['.', '>'],\n    191: ['/', '?'],\n    192: ['`', '~'],\n    219: ['[', '{'],\n    220: ['\\\\', '|'],\n    221: [']', '}'],\n    222: ['\\'', '\"']\n};\nfunction evaluateKeyboardEvent(ev, applicationCursorMode, isMac, macOptionIsMeta) {\n    var result = {\n        type: 0,\n        cancel: false,\n        key: undefined\n    };\n    var modifiers = (ev.shiftKey ? 1 : 0) | (ev.altKey ? 2 : 0) | (ev.ctrlKey ? 4 : 0) | (ev.metaKey ? 8 : 0);\n    switch (ev.keyCode) {\n        case 0:\n            if (ev.key === 'UIKeyInputUpArrow') {\n                if (applicationCursorMode) {\n                    result.key = EscapeSequences_1.C0.ESC + 'OA';\n                }\n                else {\n                    result.key = EscapeSequences_1.C0.ESC + '[A';\n                }\n            }\n            else if (ev.key === 'UIKeyInputLeftArrow') {\n                if (applicationCursorMode) {\n                    result.key = EscapeSequences_1.C0.ESC + 'OD';\n                }\n                else {\n                    result.key = EscapeSequences_1.C0.ESC + '[D';\n                }\n            }\n            else if (ev.key === 'UIKeyInputRightArrow') {\n                if (applicationCursorMode) {\n                    result.key = EscapeSequences_1.C0.ESC + 'OC';\n                }\n                else {\n                    result.key = EscapeSequences_1.C0.ESC + '[C';\n                }\n            }\n            else if (ev.key === 'UIKeyInputDownArrow') {\n                if (applicationCursorMode) {\n                    result.key = EscapeSequences_1.C0.ESC + 'OB';\n                }\n                else {\n                    result.key = EscapeSequences_1.C0.ESC + '[B';\n                }\n            }\n            break;\n        case 8:\n            if (ev.shiftKey) {\n                result.key = EscapeSequences_1.C0.BS;\n                break;\n            }\n            else if (ev.altKey) {\n                result.key = EscapeSequences_1.C0.ESC + EscapeSequences_1.C0.DEL;\n                break;\n            }\n            result.key = EscapeSequences_1.C0.DEL;\n            break;\n        case 9:\n            if (ev.shiftKey) {\n                result.key = EscapeSequences_1.C0.ESC + '[Z';\n                break;\n            }\n            result.key = EscapeSequences_1.C0.HT;\n            result.cancel = true;\n            break;\n        case 13:\n            result.key = EscapeSequences_1.C0.CR;\n            result.cancel = true;\n            break;\n        case 27:\n            result.key = EscapeSequences_1.C0.ESC;\n            result.cancel = true;\n            break;\n        case 37:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'D';\n                if (result.key === EscapeSequences_1.C0.ESC + '[1;3D') {\n                    result.key = isMac ? EscapeSequences_1.C0.ESC + 'b' : EscapeSequences_1.C0.ESC + '[1;5D';\n                }\n            }\n            else if (applicationCursorMode) {\n                result.key = EscapeSequences_1.C0.ESC + 'OD';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[D';\n            }\n            break;\n        case 39:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'C';\n                if (result.key === EscapeSequences_1.C0.ESC + '[1;3C') {\n                    result.key = isMac ? EscapeSequences_1.C0.ESC + 'f' : EscapeSequences_1.C0.ESC + '[1;5C';\n                }\n            }\n            else if (applicationCursorMode) {\n                result.key = EscapeSequences_1.C0.ESC + 'OC';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[C';\n            }\n            break;\n        case 38:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'A';\n                if (result.key === EscapeSequences_1.C0.ESC + '[1;3A') {\n                    result.key = EscapeSequences_1.C0.ESC + '[1;5A';\n                }\n            }\n            else if (applicationCursorMode) {\n                result.key = EscapeSequences_1.C0.ESC + 'OA';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[A';\n            }\n            break;\n        case 40:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'B';\n                if (result.key === EscapeSequences_1.C0.ESC + '[1;3B') {\n                    result.key = EscapeSequences_1.C0.ESC + '[1;5B';\n                }\n            }\n            else if (applicationCursorMode) {\n                result.key = EscapeSequences_1.C0.ESC + 'OB';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[B';\n            }\n            break;\n        case 45:\n            if (!ev.shiftKey && !ev.ctrlKey) {\n                result.key = EscapeSequences_1.C0.ESC + '[2~';\n            }\n            break;\n        case 46:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[3;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[3~';\n            }\n            break;\n        case 36:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'H';\n            }\n            else if (applicationCursorMode) {\n                result.key = EscapeSequences_1.C0.ESC + 'OH';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[H';\n            }\n            break;\n        case 35:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'F';\n            }\n            else if (applicationCursorMode) {\n                result.key = EscapeSequences_1.C0.ESC + 'OF';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[F';\n            }\n            break;\n        case 33:\n            if (ev.shiftKey) {\n                result.type = 2;\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[5~';\n            }\n            break;\n        case 34:\n            if (ev.shiftKey) {\n                result.type = 3;\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[6~';\n            }\n            break;\n        case 112:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'P';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + 'OP';\n            }\n            break;\n        case 113:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'Q';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + 'OQ';\n            }\n            break;\n        case 114:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'R';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + 'OR';\n            }\n            break;\n        case 115:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'S';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + 'OS';\n            }\n            break;\n        case 116:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[15;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[15~';\n            }\n            break;\n        case 117:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[17;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[17~';\n            }\n            break;\n        case 118:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[18;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[18~';\n            }\n            break;\n        case 119:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[19;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[19~';\n            }\n            break;\n        case 120:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[20;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[20~';\n            }\n            break;\n        case 121:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[21;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[21~';\n            }\n            break;\n        case 122:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[23;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[23~';\n            }\n            break;\n        case 123:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[24;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[24~';\n            }\n            break;\n        default:\n            if (ev.ctrlKey && !ev.shiftKey && !ev.altKey && !ev.metaKey) {\n                if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n                    result.key = String.fromCharCode(ev.keyCode - 64);\n                }\n                else if (ev.keyCode === 32) {\n                    result.key = String.fromCharCode(0);\n                }\n                else if (ev.keyCode >= 51 && ev.keyCode <= 55) {\n                    result.key = String.fromCharCode(ev.keyCode - 51 + 27);\n                }\n                else if (ev.keyCode === 56) {\n                    result.key = String.fromCharCode(127);\n                }\n                else if (ev.keyCode === 219) {\n                    result.key = String.fromCharCode(27);\n                }\n                else if (ev.keyCode === 220) {\n                    result.key = String.fromCharCode(28);\n                }\n                else if (ev.keyCode === 221) {\n                    result.key = String.fromCharCode(29);\n                }\n            }\n            else if ((!isMac || macOptionIsMeta) && ev.altKey && !ev.metaKey) {\n                var keyMapping = KEYCODE_KEY_MAPPINGS[ev.keyCode];\n                var key = keyMapping && keyMapping[!ev.shiftKey ? 0 : 1];\n                if (key) {\n                    result.key = EscapeSequences_1.C0.ESC + key;\n                }\n                else if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n                    var keyCode = ev.ctrlKey ? ev.keyCode - 64 : ev.keyCode + 32;\n                    result.key = EscapeSequences_1.C0.ESC + String.fromCharCode(keyCode);\n                }\n            }\n            else if (isMac && !ev.altKey && !ev.ctrlKey && ev.metaKey) {\n                if (ev.keyCode === 65) {\n                    result.type = 1;\n                }\n            }\n            else if (ev.key && !ev.ctrlKey && !ev.altKey && !ev.metaKey && ev.keyCode >= 48 && ev.key.length === 1) {\n                result.key = ev.key;\n            }\n            else if (ev.key && ev.ctrlKey) {\n                if (ev.key === '_') {\n                    result.key = EscapeSequences_1.C0.US;\n                }\n            }\n            break;\n    }\n    return result;\n}\nexports.evaluateKeyboardEvent = evaluateKeyboardEvent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/core/input/Keyboard.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/core/input/TextDecoder.js":
/*!**********************************************************!*\
  !*** ./node_modules/xterm/lib/core/input/TextDecoder.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction stringFromCodePoint(codePoint) {\n    if (codePoint > 0xFFFF) {\n        codePoint -= 0x10000;\n        return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\n    }\n    return String.fromCharCode(codePoint);\n}\nexports.stringFromCodePoint = stringFromCodePoint;\nfunction utf32ToString(data, start, end) {\n    if (start === void 0) { start = 0; }\n    if (end === void 0) { end = data.length; }\n    var result = '';\n    for (var i = start; i < end; ++i) {\n        var codepoint = data[i];\n        if (codepoint > 0xFFFF) {\n            codepoint -= 0x10000;\n            result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\n        }\n        else {\n            result += String.fromCharCode(codepoint);\n        }\n    }\n    return result;\n}\nexports.utf32ToString = utf32ToString;\nvar StringToUtf32 = (function () {\n    function StringToUtf32() {\n        this._interim = 0;\n    }\n    StringToUtf32.prototype.clear = function () {\n        this._interim = 0;\n    };\n    StringToUtf32.prototype.decode = function (input, target) {\n        var length = input.length;\n        if (!length) {\n            return 0;\n        }\n        var size = 0;\n        var startPos = 0;\n        if (this._interim) {\n            var second = input.charCodeAt(startPos++);\n            if (0xDC00 <= second && second <= 0xDFFF) {\n                target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n            }\n            else {\n                target[size++] = this._interim;\n                target[size++] = second;\n            }\n            this._interim = 0;\n        }\n        for (var i = startPos; i < length; ++i) {\n            var code = input.charCodeAt(i);\n            if (0xD800 <= code && code <= 0xDBFF) {\n                if (++i >= length) {\n                    this._interim = code;\n                    return size;\n                }\n                var second = input.charCodeAt(i);\n                if (0xDC00 <= second && second <= 0xDFFF) {\n                    target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n                }\n                else {\n                    target[size++] = code;\n                    target[size++] = second;\n                }\n                continue;\n            }\n            target[size++] = code;\n        }\n        return size;\n    };\n    return StringToUtf32;\n}());\nexports.StringToUtf32 = StringToUtf32;\nvar Utf8ToUtf32 = (function () {\n    function Utf8ToUtf32() {\n        this.interim = new Uint8Array(3);\n    }\n    Utf8ToUtf32.prototype.clear = function () {\n        this.interim.fill(0);\n    };\n    Utf8ToUtf32.prototype.decode = function (input, target) {\n        var length = input.length;\n        if (!length) {\n            return 0;\n        }\n        var size = 0;\n        var byte1;\n        var byte2;\n        var byte3;\n        var byte4;\n        var codepoint = 0;\n        var startPos = 0;\n        if (this.interim[0]) {\n            var discardInterim = false;\n            var cp = this.interim[0];\n            cp &= ((((cp & 0xE0) === 0xC0)) ? 0x1F : (((cp & 0xF0) === 0xE0)) ? 0x0F : 0x07);\n            var pos = 0;\n            var tmp = void 0;\n            while ((tmp = this.interim[++pos] & 0x3F) && pos < 4) {\n                cp <<= 6;\n                cp |= tmp;\n            }\n            var type = (((this.interim[0] & 0xE0) === 0xC0)) ? 2 : (((this.interim[0] & 0xF0) === 0xE0)) ? 3 : 4;\n            var missing = type - pos;\n            while (startPos < missing) {\n                if (startPos >= length) {\n                    return 0;\n                }\n                tmp = input[startPos++];\n                if ((tmp & 0xC0) !== 0x80) {\n                    startPos--;\n                    discardInterim = true;\n                    break;\n                }\n                else {\n                    this.interim[pos++] = tmp;\n                    cp <<= 6;\n                    cp |= tmp & 0x3F;\n                }\n            }\n            if (!discardInterim) {\n                if (type === 2) {\n                    if (cp < 0x80) {\n                        startPos--;\n                    }\n                    else {\n                        target[size++] = cp;\n                    }\n                }\n                else if (type === 3) {\n                    if (cp < 0x0800 || (cp >= 0xD800 && cp <= 0xDFFF)) {\n                    }\n                    else {\n                        target[size++] = cp;\n                    }\n                }\n                else {\n                    if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\n                    }\n                    else {\n                        target[size++] = cp;\n                    }\n                }\n            }\n            this.interim.fill(0);\n        }\n        var fourStop = length - 4;\n        var i = startPos;\n        while (i < length) {\n            while (i < fourStop\n                && !((byte1 = input[i]) & 0x80)\n                && !((byte2 = input[i + 1]) & 0x80)\n                && !((byte3 = input[i + 2]) & 0x80)\n                && !((byte4 = input[i + 3]) & 0x80)) {\n                target[size++] = byte1;\n                target[size++] = byte2;\n                target[size++] = byte3;\n                target[size++] = byte4;\n                i += 4;\n            }\n            byte1 = input[i++];\n            if (byte1 < 0x80) {\n                target[size++] = byte1;\n            }\n            else if ((byte1 & 0xE0) === 0xC0) {\n                if (i >= length) {\n                    this.interim[0] = byte1;\n                    return size;\n                }\n                byte2 = input[i++];\n                if ((byte2 & 0xC0) !== 0x80) {\n                    i--;\n                    continue;\n                }\n                codepoint = (byte1 & 0x1F) << 6 | (byte2 & 0x3F);\n                if (codepoint < 0x80) {\n                    i--;\n                    continue;\n                }\n                target[size++] = codepoint;\n            }\n            else if ((byte1 & 0xF0) === 0xE0) {\n                if (i >= length) {\n                    this.interim[0] = byte1;\n                    return size;\n                }\n                byte2 = input[i++];\n                if ((byte2 & 0xC0) !== 0x80) {\n                    i--;\n                    continue;\n                }\n                if (i >= length) {\n                    this.interim[0] = byte1;\n                    this.interim[1] = byte2;\n                    return size;\n                }\n                byte3 = input[i++];\n                if ((byte3 & 0xC0) !== 0x80) {\n                    i--;\n                    continue;\n                }\n                codepoint = (byte1 & 0x0F) << 12 | (byte2 & 0x3F) << 6 | (byte3 & 0x3F);\n                if (codepoint < 0x0800 || (codepoint >= 0xD800 && codepoint <= 0xDFFF)) {\n                    continue;\n                }\n                target[size++] = codepoint;\n            }\n            else if ((byte1 & 0xF8) === 0xF0) {\n                if (i >= length) {\n                    this.interim[0] = byte1;\n                    return size;\n                }\n                byte2 = input[i++];\n                if ((byte2 & 0xC0) !== 0x80) {\n                    i--;\n                    continue;\n                }\n                if (i >= length) {\n                    this.interim[0] = byte1;\n                    this.interim[1] = byte2;\n                    return size;\n                }\n                byte3 = input[i++];\n                if ((byte3 & 0xC0) !== 0x80) {\n                    i--;\n                    continue;\n                }\n                if (i >= length) {\n                    this.interim[0] = byte1;\n                    this.interim[1] = byte2;\n                    this.interim[2] = byte3;\n                    return size;\n                }\n                byte4 = input[i++];\n                if ((byte4 & 0xC0) !== 0x80) {\n                    i--;\n                    continue;\n                }\n                codepoint = (byte1 & 0x07) << 18 | (byte2 & 0x3F) << 12 | (byte3 & 0x3F) << 6 | (byte4 & 0x3F);\n                if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\n                    continue;\n                }\n                target[size++] = codepoint;\n            }\n            else {\n            }\n        }\n        return size;\n    };\n    return Utf8ToUtf32;\n}());\nexports.Utf8ToUtf32 = Utf8ToUtf32;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL2NvcmUvaW5wdXQvVGV4dERlY29kZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL2NvcmUvaW5wdXQvVGV4dERlY29kZXIudHM/OWNmMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbi8qKlxuICogUG9seWZpbGwgLSBDb252ZXJ0IFVURjMyIGNvZGVwb2ludCBpbnRvIEpTIHN0cmluZy5cbiAqIE5vdGU6IFRoZSBidWlsdC1pbiBTdHJpbmcuZnJvbUNvZGVQb2ludCBoYXBwZW5zIHRvIGJlIG11Y2ggc2xvd2VyXG4gKiAgICAgICBkdWUgdG8gYWRkaXRpb25hbCBzYW5pdHkgY2hlY2tzLiBXZSBjYW4gYXZvaWQgdGhlbSBzaW5jZVxuICogICAgICAgd2UgYWx3YXlzIG9wZXJhdGUgb24gbGVnYWwgVVRGMzIgKGdyYW50ZWQgYnkgdGhlIGlucHV0IGRlY29kZXJzKVxuICogICAgICAgYW5kIHVzZSB0aGlzIGZhc3RlciB2ZXJzaW9uIGluc3RlYWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdGcm9tQ29kZVBvaW50KGNvZGVQb2ludDogbnVtYmVyKTogc3RyaW5nIHtcbiAgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgIGNvZGVQb2ludCAtPSAweDEwMDAwO1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKChjb2RlUG9pbnQgPj4gMTApICsgMHhEODAwKSArIFN0cmluZy5mcm9tQ2hhckNvZGUoKGNvZGVQb2ludCAlIDB4NDAwKSArIDB4REMwMCk7XG4gIH1cbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IFVURjMyIGNoYXIgY29kZXMgaW50byBKUyBzdHJpbmcuXG4gKiBCYXNpY2FsbHkgdGhlIHNhbWUgYXMgYHN0cmluZ0Zyb21Db2RlUG9pbnRgIGJ1dCBmb3IgbXVsdGlwbGUgY29kZXBvaW50c1xuICogaW4gYSBsb29wICh3aGljaCBpcyBhIGxvdCBmYXN0ZXIpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXRmMzJUb1N0cmluZyhkYXRhOiBVaW50MzJBcnJheSwgc3RhcnQ6IG51bWJlciA9IDAsIGVuZDogbnVtYmVyID0gZGF0YS5sZW5ndGgpOiBzdHJpbmcge1xuICBsZXQgcmVzdWx0ID0gJyc7XG4gIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgbGV0IGNvZGVwb2ludCA9IGRhdGFbaV07XG4gICAgaWYgKGNvZGVwb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gSlMgc3RyaW5ncyBhcmUgZW5jb2RlZCBhcyBVVEYxNiwgdGh1cyBhIG5vbiBCTVAgY29kZXBvaW50IGdldHMgY29udmVydGVkIGludG8gYSBzdXJyb2dhdGUgcGFpclxuICAgICAgLy8gY29udmVyc2lvbiBydWxlczpcbiAgICAgIC8vICAtIHN1YnRyYWN0IDB4MTAwMDAgZnJvbSBjb2RlIHBvaW50LCBsZWF2aW5nIGEgMjAgYml0IG51bWJlclxuICAgICAgLy8gIC0gYWRkIGhpZ2ggMTAgYml0cyB0byAweEQ4MDAgIC0tPiBmaXJzdCBzdXJyb2dhdGVcbiAgICAgIC8vICAtIGFkZCBsb3cgMTAgYml0cyB0byAweERDMDAgICAtLT4gc2Vjb25kIHN1cnJvZ2F0ZVxuICAgICAgY29kZXBvaW50IC09IDB4MTAwMDA7XG4gICAgICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoY29kZXBvaW50ID4+IDEwKSArIDB4RDgwMCkgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKChjb2RlcG9pbnQgJSAweDQwMCkgKyAweERDMDApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlcG9pbnQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFN0cmluZ1RvVXRmMzIgLSBkZWNvZGVzIFVURjE2IHNlcXVlbmNlcyBpbnRvIFVURjMyIGNvZGVwb2ludHMuXG4gKiBUbyBrZWVwIHRoZSBkZWNvZGVyIGluIGxpbmUgd2l0aCBKUyBzdHJpbmdzIGl0IGhhbmRsZXMgc2luZ2xlIHN1cnJvZ2F0ZXMgYXMgVUNTMi5cbiAqL1xuZXhwb3J0IGNsYXNzIFN0cmluZ1RvVXRmMzIge1xuICBwcml2YXRlIF9pbnRlcmltOiBudW1iZXIgPSAwO1xuXG4gIC8qKlxuICAgKiBDbGVhcnMgaW50ZXJpbSBhbmQgcmVzZXRzIGRlY29kZXIgdG8gY2xlYW4gc3RhdGUuXG4gICAqL1xuICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5faW50ZXJpbSA9IDA7XG4gIH1cblxuICAvKipcbiAgICogRGVjb2RlIEpTIHN0cmluZyB0byBVVEYzMiBjb2RlcG9pbnRzLlxuICAgKiBUaGUgbWV0aG9kcyBhc3N1bWVzIHN0cmVhbSBpbnB1dCBhbmQgd2lsbCBzdG9yZSBwYXJ0bHkgdHJhbnNtaXR0ZWRcbiAgICogc3Vycm9nYXRlIHBhaXJzIGFuZCBkZWNvZGUgdGhlbSB3aXRoIHRoZSBuZXh0IGRhdGEgY2h1bmsuXG4gICAqIE5vdGU6IFRoZSBtZXRob2QgZG9lcyBubyBib3VuZCBjaGVja3MgZm9yIHRhcmdldCwgdGhlcmVmb3JlIG1ha2Ugc3VyZVxuICAgKiB0aGUgcHJvdmlkZWQgaW5wdXQgZGF0YSBkb2VzIG5vdCBleGNlZWQgdGhlIHNpemUgb2YgYHRhcmdldGAuXG4gICAqIFJldHVybnMgdGhlIG51bWJlciBvZiB3cml0dGVuIGNvZGVwb2ludHMgaW4gYHRhcmdldGAuXG4gICAqL1xuICBkZWNvZGUoaW5wdXQ6IHN0cmluZywgdGFyZ2V0OiBVaW50MzJBcnJheSk6IG51bWJlciB7XG4gICAgY29uc3QgbGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuXG4gICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGxldCBzaXplID0gMDtcbiAgICBsZXQgc3RhcnRQb3MgPSAwO1xuXG4gICAgLy8gaGFuZGxlIGxlZnRvdmVyIHN1cnJvZ2F0ZSBoaWdoXG4gICAgaWYgKHRoaXMuX2ludGVyaW0pIHtcbiAgICAgIGNvbnN0IHNlY29uZCA9IGlucHV0LmNoYXJDb2RlQXQoc3RhcnRQb3MrKyk7XG4gICAgICBpZiAoMHhEQzAwIDw9IHNlY29uZCAmJiBzZWNvbmQgPD0gMHhERkZGKSB7XG4gICAgICAgIHRhcmdldFtzaXplKytdID0gKHRoaXMuX2ludGVyaW0gLSAweEQ4MDApICogMHg0MDAgKyBzZWNvbmQgLSAweERDMDAgKyAweDEwMDAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaWxsZWdhbCBjb2RlcG9pbnQgKFVTQzIgaGFuZGxpbmcpXG4gICAgICAgIHRhcmdldFtzaXplKytdID0gdGhpcy5faW50ZXJpbTtcbiAgICAgICAgdGFyZ2V0W3NpemUrK10gPSBzZWNvbmQ7XG4gICAgICB9XG4gICAgICB0aGlzLl9pbnRlcmltID0gMDtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gc3RhcnRQb3M7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgY29uc3QgY29kZSA9IGlucHV0LmNoYXJDb2RlQXQoaSk7XG4gICAgICAvLyBzdXJyb2dhdGUgcGFpciBmaXJzdFxuICAgICAgaWYgKDB4RDgwMCA8PSBjb2RlICYmIGNvZGUgPD0gMHhEQkZGKSB7XG4gICAgICAgIGlmICgrK2kgPj0gbGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5faW50ZXJpbSA9IGNvZGU7XG4gICAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2Vjb25kID0gaW5wdXQuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKDB4REMwMCA8PSBzZWNvbmQgJiYgc2Vjb25kIDw9IDB4REZGRikge1xuICAgICAgICAgIHRhcmdldFtzaXplKytdID0gKGNvZGUgLSAweEQ4MDApICogMHg0MDAgKyBzZWNvbmQgLSAweERDMDAgKyAweDEwMDAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGlsbGVnYWwgY29kZXBvaW50IChVU0MyIGhhbmRsaW5nKVxuICAgICAgICAgIHRhcmdldFtzaXplKytdID0gY29kZTtcbiAgICAgICAgICB0YXJnZXRbc2l6ZSsrXSA9IHNlY29uZDtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHRhcmdldFtzaXplKytdID0gY29kZTtcbiAgICB9XG4gICAgcmV0dXJuIHNpemU7XG4gIH1cbn1cblxuLyoqXG4gKiBVdGY4RGVjb2RlciAtIGRlY29kZXMgVVRGOCBieXRlIHNlcXVlbmNlcyBpbnRvIFVURjMyIGNvZGVwb2ludHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBVdGY4VG9VdGYzMiB7XG4gIHB1YmxpYyBpbnRlcmltOiBVaW50OEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoMyk7XG5cbiAgLyoqXG4gICAqIENsZWFycyBpbnRlcmltIGJ5dGVzIGFuZCByZXNldHMgZGVjb2RlciB0byBjbGVhbiBzdGF0ZS5cbiAgICovXG4gIHB1YmxpYyBjbGVhcigpOiB2b2lkIHtcbiAgICB0aGlzLmludGVyaW0uZmlsbCgwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNvZGVzIFVURjggYnl0ZSBzZXF1ZW5jZXMgaW4gYGlucHV0YCB0byBVVEYzMiBjb2RlcG9pbnRzIGluIGB0YXJnZXRgLlxuICAgKiBUaGUgbWV0aG9kcyBhc3N1bWVzIHN0cmVhbSBpbnB1dCBhbmQgd2lsbCBzdG9yZSBwYXJ0bHkgdHJhbnNtaXR0ZWQgYnl0ZXNcbiAgICogYW5kIGRlY29kZSB0aGVtIHdpdGggdGhlIG5leHQgZGF0YSBjaHVuay5cbiAgICogTm90ZTogVGhlIG1ldGhvZCBkb2VzIG5vIGJvdW5kIGNoZWNrcyBmb3IgdGFyZ2V0LCB0aGVyZWZvcmUgbWFrZSBzdXJlXG4gICAqIHRoZSBwcm92aWRlZCBkYXRhIGNodW5rIGRvZXMgbm90IGV4Y2VlZCB0aGUgc2l6ZSBvZiBgdGFyZ2V0YC5cbiAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHdyaXR0ZW4gY29kZXBvaW50cyBpbiBgdGFyZ2V0YC5cbiAgICovXG4gIGRlY29kZShpbnB1dDogVWludDhBcnJheSwgdGFyZ2V0OiBVaW50MzJBcnJheSk6IG51bWJlciB7XG4gICAgY29uc3QgbGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuXG4gICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGxldCBzaXplID0gMDtcbiAgICBsZXQgYnl0ZTE6IG51bWJlcjtcbiAgICBsZXQgYnl0ZTI6IG51bWJlcjtcbiAgICBsZXQgYnl0ZTM6IG51bWJlcjtcbiAgICBsZXQgYnl0ZTQ6IG51bWJlcjtcbiAgICBsZXQgY29kZXBvaW50ID0gMDtcbiAgICBsZXQgc3RhcnRQb3MgPSAwO1xuXG4gICAgLy8gaGFuZGxlIGxlZnRvdmVyIGJ5dGVzXG4gICAgaWYgKHRoaXMuaW50ZXJpbVswXSkge1xuICAgICAgbGV0IGRpc2NhcmRJbnRlcmltID0gZmFsc2U7XG4gICAgICBsZXQgY3AgPSB0aGlzLmludGVyaW1bMF07XG4gICAgICBjcCAmPSAoKCgoY3AgJiAweEUwKSA9PT0gMHhDMCkpID8gMHgxRiA6ICgoKGNwICYgMHhGMCkgPT09IDB4RTApKSA/IDB4MEYgOiAweDA3KTtcbiAgICAgIGxldCBwb3MgPSAwO1xuICAgICAgbGV0IHRtcDogbnVtYmVyO1xuICAgICAgd2hpbGUgKCh0bXAgPSB0aGlzLmludGVyaW1bKytwb3NdICYgMHgzRikgJiYgcG9zIDwgNCkge1xuICAgICAgICBjcCA8PD0gNjtcbiAgICAgICAgY3AgfD0gdG1wO1xuICAgICAgfVxuICAgICAgLy8gbWlzc2luZyBieXRlcyAtIHJlYWQgYWhlYWQgZnJvbSBpbnB1dFxuICAgICAgY29uc3QgdHlwZSA9ICgoKHRoaXMuaW50ZXJpbVswXSAmIDB4RTApID09PSAweEMwKSkgPyAyIDogKCgodGhpcy5pbnRlcmltWzBdICYgMHhGMCkgPT09IDB4RTApKSA/IDMgOiA0O1xuICAgICAgY29uc3QgbWlzc2luZyA9IHR5cGUgLSBwb3M7XG4gICAgICB3aGlsZSAoc3RhcnRQb3MgPCBtaXNzaW5nKSB7XG4gICAgICAgIGlmIChzdGFydFBvcyA+PSBsZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICB0bXAgPSBpbnB1dFtzdGFydFBvcysrXTtcbiAgICAgICAgaWYgKCh0bXAgJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgICAgIC8vIHdyb25nIGNvbnRpbnVhdGlvbiwgZGlzY2FyZCBpbnRlcmltIGJ5dGVzIGNvbXBsZXRlbHlcbiAgICAgICAgICBzdGFydFBvcy0tO1xuICAgICAgICAgIGRpc2NhcmRJbnRlcmltID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBuZWVkIHRvIHNhdmUgc28gd2UgY2FuIGNvbnRpbnVlIHNob3J0IGlucHV0cyBpbiBuZXh0IGNhbGxcbiAgICAgICAgICB0aGlzLmludGVyaW1bcG9zKytdID0gdG1wO1xuICAgICAgICAgIGNwIDw8PSA2O1xuICAgICAgICAgIGNwIHw9IHRtcCAmIDB4M0Y7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghZGlzY2FyZEludGVyaW0pIHtcbiAgICAgICAgLy8gZmluYWwgdGVzdCBpcyB0eXBlIGRlcGVuZGVudFxuICAgICAgICBpZiAodHlwZSA9PT0gMikge1xuICAgICAgICAgIGlmIChjcCA8IDB4ODApIHtcbiAgICAgICAgICAgIC8vIHdyb25nIHN0YXJ0ZXIgYnl0ZVxuICAgICAgICAgICAgc3RhcnRQb3MtLTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0W3NpemUrK10gPSBjcDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gMykge1xuICAgICAgICAgIGlmIChjcCA8IDB4MDgwMCB8fCAoY3AgPj0gMHhEODAwICYmIGNwIDw9IDB4REZGRikpIHtcbiAgICAgICAgICAgIC8vIGlsbGVnYWwgY29kZXBvaW50XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldFtzaXplKytdID0gY3A7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChjb2RlcG9pbnQgPCAweDAxMDAwMCB8fCBjb2RlcG9pbnQgPiAweDEwRkZGRikge1xuICAgICAgICAgICAgLy8gaWxsZWdhbCBjb2RlcG9pbnRcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0W3NpemUrK10gPSBjcDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuaW50ZXJpbS5maWxsKDApO1xuICAgIH1cblxuICAgIC8vIGxvb3AgdGhyb3VnaCBpbnB1dFxuICAgIGNvbnN0IGZvdXJTdG9wID0gbGVuZ3RoIC0gNDtcbiAgICBsZXQgaSA9IHN0YXJ0UG9zO1xuICAgIHdoaWxlIChpIDwgbGVuZ3RoKSB7XG4gICAgICAvKipcbiAgICAgICAqIEFTQ0lJIHNob3J0Y3V0IHdpdGggbG9vcCB1bnJvbGxlZCB0byA0IGNvbnNlY3V0aXZlIEFTQ0lJIGNoYXJzLlxuICAgICAgICogVGhpcyBpcyBhIGNvbXByb21pc2UgYmV0d2VlbiBzcGVlZCBnYWluIGZvciBBU0NJSVxuICAgICAgICogYW5kIHBlbmFsdHkgZm9yIG5vbiBBU0NJSTpcbiAgICAgICAqIEZvciBiZXN0IEFTQ0lJIHBlcmZvcm1hbmNlIHRoZSBjaGFyIHNob3VsZCBiZSBzdG9yZWQgZGlyZWN0bHkgaW50byB0YXJnZXQsXG4gICAgICAgKiBidXQgZXZlbiBhIHNpbmdsZSBhdHRlbXB0IHRvIHdyaXRlIHRvIHRhcmdldCBhbmQgY29tcGFyZSBhZnRlcndhcmRzXG4gICAgICAgKiBwZW5hbGl6ZXMgbm9uIEFTQ0lJIHJlYWxseSBiYWQgKC01MCUpLCB0aHVzIHdlIGxvYWQgdGhlIGNoYXIgaW50byBieXRlWCBmaXJzdCxcbiAgICAgICAqIHdoaWNoIHJlZHVjZXMgQVNDSUkgcGVyZm9ybWFuY2UgYnkgfjE1JS5cbiAgICAgICAqIFRoaXMgdHJpYWwgZm9yIEFTQ0lJIHJlZHVjZXMgbm9uIEFTQ0lJIHBlcmZvcm1hbmNlIGJ5IH4xMCUgd2hpY2ggc2VlbXMgYWNjZXB0aWJsZVxuICAgICAgICogY29tcGFyZWQgdG8gdGhlIGdhaW5zLlxuICAgICAgICogTm90ZSB0aGF0IHRoaXMgb3B0aW1pemF0aW9uIG9ubHkgdGFrZXMgcGxhY2UgZm9yIDQgY29uc2VjdXRpdmUgQVNDSUkgY2hhcnMsXG4gICAgICAgKiBmb3IgYW55IHNob3J0ZXIgaXQgYmFpbHMgb3V0LiBXb3JzdCBjYXNlIC0gYWxsIDQgYnl0ZXMgYmVpbmcgcmVhZCBidXRcbiAgICAgICAqIHRocm93biBhd2F5IGR1ZSB0byB0aGUgbGFzdCBiZWluZyBhIG5vbiBBU0NJSSBjaGFyICgtMTAlIHBlcmZvcm1hbmNlKS5cbiAgICAgICAqL1xuICAgICAgd2hpbGUgKGkgPCBmb3VyU3RvcFxuICAgICAgICAmJiAhKChieXRlMSA9IGlucHV0W2ldKSAmIDB4ODApXG4gICAgICAgICYmICEoKGJ5dGUyID0gaW5wdXRbaSArIDFdKSAmIDB4ODApXG4gICAgICAgICYmICEoKGJ5dGUzID0gaW5wdXRbaSArIDJdKSAmIDB4ODApXG4gICAgICAgICYmICEoKGJ5dGU0ID0gaW5wdXRbaSArIDNdKSAmIDB4ODApKVxuICAgICAge1xuICAgICAgICB0YXJnZXRbc2l6ZSsrXSA9IGJ5dGUxO1xuICAgICAgICB0YXJnZXRbc2l6ZSsrXSA9IGJ5dGUyO1xuICAgICAgICB0YXJnZXRbc2l6ZSsrXSA9IGJ5dGUzO1xuICAgICAgICB0YXJnZXRbc2l6ZSsrXSA9IGJ5dGU0O1xuICAgICAgICBpICs9IDQ7XG4gICAgICB9XG5cbiAgICAgIC8vIHJlcmVhZCBieXRlMVxuICAgICAgYnl0ZTEgPSBpbnB1dFtpKytdO1xuXG4gICAgICAvLyAxIGJ5dGVcbiAgICAgIGlmIChieXRlMSA8IDB4ODApIHtcbiAgICAgICAgdGFyZ2V0W3NpemUrK10gPSBieXRlMTtcblxuICAgICAgICAvLyAyIGJ5dGVzXG4gICAgICB9IGVsc2UgaWYgKChieXRlMSAmIDB4RTApID09PSAweEMwKSB7XG4gICAgICAgIGlmIChpID49IGxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuaW50ZXJpbVswXSA9IGJ5dGUxO1xuICAgICAgICAgIHJldHVybiBzaXplO1xuICAgICAgICB9XG4gICAgICAgIGJ5dGUyID0gaW5wdXRbaSsrXTtcbiAgICAgICAgaWYgKChieXRlMiAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICAgICAgLy8gd3JvbmcgY29udGludWF0aW9uXG4gICAgICAgICAgaS0tO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvZGVwb2ludCA9IChieXRlMSAmIDB4MUYpIDw8IDYgfCAoYnl0ZTIgJiAweDNGKTtcbiAgICAgICAgaWYgKGNvZGVwb2ludCA8IDB4ODApIHtcbiAgICAgICAgICAvLyB3cm9uZyBzdGFydGVyIGJ5dGVcbiAgICAgICAgICBpLS07XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0W3NpemUrK10gPSBjb2RlcG9pbnQ7XG5cbiAgICAgICAgLy8gMyBieXRlc1xuICAgICAgfSBlbHNlIGlmICgoYnl0ZTEgJiAweEYwKSA9PT0gMHhFMCkge1xuICAgICAgICBpZiAoaSA+PSBsZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLmludGVyaW1bMF0gPSBieXRlMTtcbiAgICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICAgICAgfVxuICAgICAgICBieXRlMiA9IGlucHV0W2krK107XG4gICAgICAgIGlmICgoYnl0ZTIgJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgICAgIC8vIHdyb25nIGNvbnRpbnVhdGlvblxuICAgICAgICAgIGktLTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA+PSBsZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLmludGVyaW1bMF0gPSBieXRlMTtcbiAgICAgICAgICB0aGlzLmludGVyaW1bMV0gPSBieXRlMjtcbiAgICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICAgICAgfVxuICAgICAgICBieXRlMyA9IGlucHV0W2krK107XG4gICAgICAgIGlmICgoYnl0ZTMgJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgICAgIC8vIHdyb25nIGNvbnRpbnVhdGlvblxuICAgICAgICAgIGktLTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb2RlcG9pbnQgPSAoYnl0ZTEgJiAweDBGKSA8PCAxMiB8IChieXRlMiAmIDB4M0YpIDw8IDYgfCAoYnl0ZTMgJiAweDNGKTtcbiAgICAgICAgaWYgKGNvZGVwb2ludCA8IDB4MDgwMCB8fCAoY29kZXBvaW50ID49IDB4RDgwMCAmJiBjb2RlcG9pbnQgPD0gMHhERkZGKSkge1xuICAgICAgICAgIC8vIGlsbGVnYWwgY29kZXBvaW50LCBubyBpLS0gaGVyZVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldFtzaXplKytdID0gY29kZXBvaW50O1xuXG4gICAgICAgIC8vIDQgYnl0ZXNcbiAgICAgIH0gZWxzZSBpZiAoKGJ5dGUxICYgMHhGOCkgPT09IDB4RjApIHtcbiAgICAgICAgaWYgKGkgPj0gbGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5pbnRlcmltWzBdID0gYnl0ZTE7XG4gICAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgICAgIH1cbiAgICAgICAgYnl0ZTIgPSBpbnB1dFtpKytdO1xuICAgICAgICBpZiAoKGJ5dGUyICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgICAgICAvLyB3cm9uZyBjb250aW51YXRpb25cbiAgICAgICAgICBpLS07XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPj0gbGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5pbnRlcmltWzBdID0gYnl0ZTE7XG4gICAgICAgICAgdGhpcy5pbnRlcmltWzFdID0gYnl0ZTI7XG4gICAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgICAgIH1cbiAgICAgICAgYnl0ZTMgPSBpbnB1dFtpKytdO1xuICAgICAgICBpZiAoKGJ5dGUzICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgICAgICAvLyB3cm9uZyBjb250aW51YXRpb25cbiAgICAgICAgICBpLS07XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPj0gbGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5pbnRlcmltWzBdID0gYnl0ZTE7XG4gICAgICAgICAgdGhpcy5pbnRlcmltWzFdID0gYnl0ZTI7XG4gICAgICAgICAgdGhpcy5pbnRlcmltWzJdID0gYnl0ZTM7XG4gICAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgICAgIH1cbiAgICAgICAgYnl0ZTQgPSBpbnB1dFtpKytdO1xuICAgICAgICBpZiAoKGJ5dGU0ICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgICAgICAvLyB3cm9uZyBjb250aW51YXRpb25cbiAgICAgICAgICBpLS07XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29kZXBvaW50ID0gKGJ5dGUxICYgMHgwNykgPDwgMTggfCAoYnl0ZTIgJiAweDNGKSA8PCAxMiB8IChieXRlMyAmIDB4M0YpIDw8IDYgfCAoYnl0ZTQgJiAweDNGKTtcbiAgICAgICAgaWYgKGNvZGVwb2ludCA8IDB4MDEwMDAwIHx8IGNvZGVwb2ludCA+IDB4MTBGRkZGKSB7XG4gICAgICAgICAgLy8gaWxsZWdhbCBjb2RlcG9pbnQsIG5vIGktLSBoZXJlXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0W3NpemUrK10gPSBjb2RlcG9pbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpbGxlZ2FsIGJ5dGUsIGp1c3Qgc2tpcFxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2l6ZTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOztBQVlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFhQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWpCQTtBQXVCQTtBQUFBO0FBQ0E7QUE4REE7QUF6REE7QUFDQTtBQUNBO0FBVUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQS9EQTtBQW9FQTtBQUFBO0FBQ0E7QUFnT0E7QUEzTkE7QUFDQTtBQUNBO0FBVUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBZUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBR0E7QUFDQTtBQUdBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBak9BOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/core/input/TextDecoder.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/handlers/AltClickHandler.js":
/*!************************************************************!*\
  !*** ./node_modules/xterm/lib/handlers/AltClickHandler.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EscapeSequences_1 = __webpack_require__(/*! ../common/data/EscapeSequences */ \"./node_modules/xterm/lib/common/data/EscapeSequences.js\");\nvar AltClickHandler = (function () {\n    function AltClickHandler(_mouseEvent, _terminal) {\n        var _a;\n        this._mouseEvent = _mouseEvent;\n        this._terminal = _terminal;\n        this._lines = this._terminal.buffer.lines;\n        this._startCol = this._terminal.buffer.x;\n        this._startRow = this._terminal.buffer.y;\n        var coordinates = this._terminal.mouseHelper.getCoords(this._mouseEvent, this._terminal.element, this._terminal.charMeasure, this._terminal.cols, this._terminal.rows, false);\n        if (coordinates) {\n            _a = coordinates.map(function (coordinate) {\n                return coordinate - 1;\n            }), this._endCol = _a[0], this._endRow = _a[1];\n        }\n    }\n    AltClickHandler.prototype.move = function () {\n        if (this._mouseEvent.altKey && this._endCol !== undefined && this._endRow !== undefined) {\n            this._terminal.handler(this._arrowSequences());\n        }\n    };\n    AltClickHandler.prototype._arrowSequences = function () {\n        if (!this._terminal.buffer.hasScrollback) {\n            return this._resetStartingRow() + this._moveToRequestedRow() + this._moveToRequestedCol();\n        }\n        return this._moveHorizontallyOnly();\n    };\n    AltClickHandler.prototype._resetStartingRow = function () {\n        if (this._moveToRequestedRow().length === 0) {\n            return '';\n        }\n        return repeat(this._bufferLine(this._startCol, this._startRow, this._startCol, this._startRow - this._wrappedRowsForRow(this._startRow), false).length, this._sequence(\"D\"));\n    };\n    AltClickHandler.prototype._moveToRequestedRow = function () {\n        var startRow = this._startRow - this._wrappedRowsForRow(this._startRow);\n        var endRow = this._endRow - this._wrappedRowsForRow(this._endRow);\n        var rowsToMove = Math.abs(startRow - endRow) - this._wrappedRowsCount();\n        return repeat(rowsToMove, this._sequence(this._verticalDirection()));\n    };\n    AltClickHandler.prototype._moveToRequestedCol = function () {\n        var startRow;\n        if (this._moveToRequestedRow().length > 0) {\n            startRow = this._endRow - this._wrappedRowsForRow(this._endRow);\n        }\n        else {\n            startRow = this._startRow;\n        }\n        var endRow = this._endRow;\n        var direction = this._horizontalDirection();\n        return repeat(this._bufferLine(this._startCol, startRow, this._endCol, endRow, direction === \"C\").length, this._sequence(direction));\n    };\n    AltClickHandler.prototype._moveHorizontallyOnly = function () {\n        var direction = this._horizontalDirection();\n        return repeat(Math.abs(this._startCol - this._endCol), this._sequence(direction));\n    };\n    AltClickHandler.prototype._wrappedRowsCount = function () {\n        var wrappedRows = 0;\n        var startRow = this._startRow - this._wrappedRowsForRow(this._startRow);\n        var endRow = this._endRow - this._wrappedRowsForRow(this._endRow);\n        for (var i = 0; i < Math.abs(startRow - endRow); i++) {\n            var direction = this._verticalDirection() === \"A\" ? -1 : 1;\n            if (this._lines.get(startRow + (direction * i)).isWrapped) {\n                wrappedRows++;\n            }\n        }\n        return wrappedRows;\n    };\n    AltClickHandler.prototype._wrappedRowsForRow = function (currentRow) {\n        var rowCount = 0;\n        var lineWraps = this._lines.get(currentRow).isWrapped;\n        while (lineWraps && currentRow >= 0 && currentRow < this._terminal.rows) {\n            rowCount++;\n            currentRow--;\n            lineWraps = this._lines.get(currentRow).isWrapped;\n        }\n        return rowCount;\n    };\n    AltClickHandler.prototype._horizontalDirection = function () {\n        var startRow;\n        if (this._moveToRequestedRow().length > 0) {\n            startRow = this._endRow - this._wrappedRowsForRow(this._endRow);\n        }\n        else {\n            startRow = this._startRow;\n        }\n        if ((this._startCol < this._endCol &&\n            startRow <= this._endRow) ||\n            (this._startCol >= this._endCol &&\n                startRow < this._endRow)) {\n            return \"C\";\n        }\n        return \"D\";\n    };\n    AltClickHandler.prototype._verticalDirection = function () {\n        if (this._startRow > this._endRow) {\n            return \"A\";\n        }\n        return \"B\";\n    };\n    AltClickHandler.prototype._bufferLine = function (startCol, startRow, endCol, endRow, forward) {\n        var currentCol = startCol;\n        var currentRow = startRow;\n        var bufferStr = '';\n        while (currentCol !== endCol || currentRow !== endRow) {\n            currentCol += forward ? 1 : -1;\n            if (forward && currentCol > this._terminal.cols - 1) {\n                bufferStr += this._terminal.buffer.translateBufferLineToString(currentRow, false, startCol, currentCol);\n                currentCol = 0;\n                startCol = 0;\n                currentRow++;\n            }\n            else if (!forward && currentCol < 0) {\n                bufferStr += this._terminal.buffer.translateBufferLineToString(currentRow, false, 0, startCol + 1);\n                currentCol = this._terminal.cols - 1;\n                startCol = currentCol;\n                currentRow--;\n            }\n        }\n        return bufferStr + this._terminal.buffer.translateBufferLineToString(currentRow, false, startCol, currentCol);\n    };\n    AltClickHandler.prototype._sequence = function (direction) {\n        var mod = this._terminal.applicationCursor ? 'O' : '[';\n        return EscapeSequences_1.C0.ESC + mod + direction;\n    };\n    return AltClickHandler;\n}());\nexports.AltClickHandler = AltClickHandler;\nfunction repeat(count, str) {\n    count = Math.floor(count);\n    var rpt = '';\n    for (var i = 0; i < count; i++) {\n        rpt += str;\n    }\n    return rpt;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL2hhbmRsZXJzL0FsdENsaWNrSGFuZGxlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9zcmMvaGFuZGxlcnMvQWx0Q2xpY2tIYW5kbGVyLnRzPzlkYzgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJVGVybWluYWwgfSBmcm9tICcuLi9UeXBlcyc7XG5pbXBvcnQgeyBJQnVmZmVyTGluZSB9IGZyb20gJy4uL2NvcmUvVHlwZXMnO1xuaW1wb3J0IHsgSUNpcmN1bGFyTGlzdCB9IGZyb20gJy4uL2NvbW1vbi9UeXBlcyc7XG5pbXBvcnQgeyBDMCB9IGZyb20gJy4uL2NvbW1vbi9kYXRhL0VzY2FwZVNlcXVlbmNlcyc7XG5cbmNvbnN0IGVudW0gRGlyZWN0aW9uIHtcbiAgVVAgPSAnQScsXG4gIERPV04gPSAnQicsXG4gIFJJR0hUID0gJ0MnLFxuICBMRUZUID0gJ0QnXG59XG5cbmV4cG9ydCBjbGFzcyBBbHRDbGlja0hhbmRsZXIge1xuICBwcml2YXRlIF9zdGFydFJvdzogbnVtYmVyO1xuICBwcml2YXRlIF9zdGFydENvbDogbnVtYmVyO1xuICBwcml2YXRlIF9lbmRSb3c6IG51bWJlcjtcbiAgcHJpdmF0ZSBfZW5kQ29sOiBudW1iZXI7XG4gIHByaXZhdGUgX2xpbmVzOiBJQ2lyY3VsYXJMaXN0PElCdWZmZXJMaW5lPjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF9tb3VzZUV2ZW50OiBNb3VzZUV2ZW50LFxuICAgIHByaXZhdGUgX3Rlcm1pbmFsOiBJVGVybWluYWxcbiAgKSB7XG4gICAgdGhpcy5fbGluZXMgPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIubGluZXM7XG4gICAgdGhpcy5fc3RhcnRDb2wgPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIueDtcbiAgICB0aGlzLl9zdGFydFJvdyA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55O1xuXG4gICAgY29uc3QgY29vcmRpbmF0ZXMgPSB0aGlzLl90ZXJtaW5hbC5tb3VzZUhlbHBlci5nZXRDb29yZHMoXG4gICAgICB0aGlzLl9tb3VzZUV2ZW50LFxuICAgICAgdGhpcy5fdGVybWluYWwuZWxlbWVudCxcbiAgICAgIHRoaXMuX3Rlcm1pbmFsLmNoYXJNZWFzdXJlLFxuICAgICAgdGhpcy5fdGVybWluYWwuY29scyxcbiAgICAgIHRoaXMuX3Rlcm1pbmFsLnJvd3MsXG4gICAgICBmYWxzZVxuICAgICk7XG5cbiAgICBpZiAoY29vcmRpbmF0ZXMpIHtcbiAgICAgIFt0aGlzLl9lbmRDb2wsIHRoaXMuX2VuZFJvd10gPSBjb29yZGluYXRlcy5tYXAoKGNvb3JkaW5hdGU6IG51bWJlcikgPT4ge1xuICAgICAgICByZXR1cm4gY29vcmRpbmF0ZSAtIDE7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogV3JpdGVzIHRoZSBlc2NhcGUgc2VxdWVuY2VzIG9mIGFycm93cyB0byB0aGUgdGVybWluYWxcbiAgICovXG4gIHB1YmxpYyBtb3ZlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9tb3VzZUV2ZW50LmFsdEtleSAmJiB0aGlzLl9lbmRDb2wgIT09IHVuZGVmaW5lZCAmJiB0aGlzLl9lbmRSb3cgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fdGVybWluYWwuaGFuZGxlcih0aGlzLl9hcnJvd1NlcXVlbmNlcygpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29uY2F0ZW5hdGVzIGFsbCB0aGUgYXJyb3cgc2VxdWVuY2VzIHRvZ2V0aGVyLlxuICAgKiBSZXNldHMgdGhlIHN0YXJ0aW5nIHJvdyB0byBhbiB1bndyYXBwZWQgcm93LCBtb3ZlcyB0byB0aGUgcmVxdWVzdGVkIHJvdyxcbiAgICogdGhlbiBtb3ZlcyB0byByZXF1ZXN0ZWQgY29sLlxuICAgKi9cbiAgcHJpdmF0ZSBfYXJyb3dTZXF1ZW5jZXMoKTogc3RyaW5nIHtcbiAgICAvLyBUaGUgYWx0IGJ1ZmZlciBzaG91bGQgdHJ5IHRvIG5hdmlnYXRlIGJldHdlZW4gcm93c1xuICAgIGlmICghdGhpcy5fdGVybWluYWwuYnVmZmVyLmhhc1Njcm9sbGJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXNldFN0YXJ0aW5nUm93KCkgKyB0aGlzLl9tb3ZlVG9SZXF1ZXN0ZWRSb3coKSArIHRoaXMuX21vdmVUb1JlcXVlc3RlZENvbCgpO1xuICAgIH1cblxuICAgIC8vIE9ubHkgbW92ZSBob3Jpem9udGFsbHkgZm9yIHRoZSBub3JtYWwgYnVmZmVyXG4gICAgcmV0dXJuIHRoaXMuX21vdmVIb3Jpem9udGFsbHlPbmx5KCk7XG4gIH1cblxuICAvKipcbiAgICogSWYgdGhlIGluaXRpYWwgcG9zaXRpb24gb2YgdGhlIGN1cnNvciBpcyBvbiBhIHJvdyB0aGF0IGlzIHdyYXBwZWQsIG1vdmUgdGhlXG4gICAqIGN1cnNvciB1cCB0byB0aGUgZmlyc3Qgcm93IHRoYXQgaXMgbm90IHdyYXBwZWQgdG8gaGF2ZSBhY2N1cmF0ZSB2ZXJ0aWNhbFxuICAgKiBwb3NpdGlvbmluZy5cbiAgICovXG4gIHByaXZhdGUgX3Jlc2V0U3RhcnRpbmdSb3coKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5fbW92ZVRvUmVxdWVzdGVkUm93KCkubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiByZXBlYXQodGhpcy5fYnVmZmVyTGluZShcbiAgICAgIHRoaXMuX3N0YXJ0Q29sLCB0aGlzLl9zdGFydFJvdywgdGhpcy5fc3RhcnRDb2wsXG4gICAgICB0aGlzLl9zdGFydFJvdyAtIHRoaXMuX3dyYXBwZWRSb3dzRm9yUm93KHRoaXMuX3N0YXJ0Um93KSwgZmFsc2VcbiAgICApLmxlbmd0aCwgdGhpcy5fc2VxdWVuY2UoRGlyZWN0aW9uLkxFRlQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2luZyB0aGUgcmVzZXQgc3RhcnRpbmcgYW5kIGVuZGluZyByb3csIG1vdmUgdG8gdGhlIHJlcXVlc3RlZCByb3csXG4gICAqIGlnbm9yaW5nIHdyYXBwZWQgcm93c1xuICAgKi9cbiAgcHJpdmF0ZSBfbW92ZVRvUmVxdWVzdGVkUm93KCk6IHN0cmluZyB7XG4gICAgY29uc3Qgc3RhcnRSb3cgPSB0aGlzLl9zdGFydFJvdyAtIHRoaXMuX3dyYXBwZWRSb3dzRm9yUm93KHRoaXMuX3N0YXJ0Um93KTtcbiAgICBjb25zdCBlbmRSb3cgPSB0aGlzLl9lbmRSb3cgLSB0aGlzLl93cmFwcGVkUm93c0ZvclJvdyh0aGlzLl9lbmRSb3cpO1xuXG4gICAgY29uc3Qgcm93c1RvTW92ZSA9IE1hdGguYWJzKHN0YXJ0Um93IC0gZW5kUm93KSAtIHRoaXMuX3dyYXBwZWRSb3dzQ291bnQoKTtcblxuICAgIHJldHVybiByZXBlYXQocm93c1RvTW92ZSwgdGhpcy5fc2VxdWVuY2UodGhpcy5fdmVydGljYWxEaXJlY3Rpb24oKSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vdmUgdG8gdGhlIHJlcXVlc3RlZCBjb2wgb24gdGhlIGVuZGluZyByb3dcbiAgICovXG4gIHByaXZhdGUgX21vdmVUb1JlcXVlc3RlZENvbCgpOiBzdHJpbmcge1xuICAgIGxldCBzdGFydFJvdztcbiAgICBpZiAodGhpcy5fbW92ZVRvUmVxdWVzdGVkUm93KCkubGVuZ3RoID4gMCkge1xuICAgICAgc3RhcnRSb3cgPSB0aGlzLl9lbmRSb3cgLSB0aGlzLl93cmFwcGVkUm93c0ZvclJvdyh0aGlzLl9lbmRSb3cpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGFydFJvdyA9IHRoaXMuX3N0YXJ0Um93O1xuICAgIH1cblxuICAgIGNvbnN0IGVuZFJvdyA9IHRoaXMuX2VuZFJvdztcbiAgICBjb25zdCBkaXJlY3Rpb24gPSB0aGlzLl9ob3Jpem9udGFsRGlyZWN0aW9uKCk7XG5cbiAgICByZXR1cm4gcmVwZWF0KHRoaXMuX2J1ZmZlckxpbmUoXG4gICAgICB0aGlzLl9zdGFydENvbCwgc3RhcnRSb3csIHRoaXMuX2VuZENvbCwgZW5kUm93LFxuICAgICAgZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uUklHSFRcbiAgICApLmxlbmd0aCwgdGhpcy5fc2VxdWVuY2UoZGlyZWN0aW9uKSk7XG4gIH1cblxuICBwcml2YXRlIF9tb3ZlSG9yaXpvbnRhbGx5T25seSgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGRpcmVjdGlvbiA9IHRoaXMuX2hvcml6b250YWxEaXJlY3Rpb24oKTtcbiAgICByZXR1cm4gcmVwZWF0KE1hdGguYWJzKHRoaXMuX3N0YXJ0Q29sIC0gdGhpcy5fZW5kQ29sKSwgdGhpcy5fc2VxdWVuY2UoZGlyZWN0aW9uKSk7XG4gIH1cblxuICAvKipcbiAgICogVXRpbGl0eSBmdW5jdGlvbnNcbiAgICovXG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIG51bWJlciBvZiB3cmFwcGVkIHJvd3MgYmV0d2VlbiB0aGUgdW53cmFwcGVkIHN0YXJ0aW5nIGFuZFxuICAgKiBlbmRpbmcgcm93cy4gVGhlc2Ugcm93cyBuZWVkIHRvIGlnbm9yZWQgc2luY2UgdGhlIGN1cnNvciBza2lwcyBvdmVyIHRoZW0uXG4gICAqL1xuICBwcml2YXRlIF93cmFwcGVkUm93c0NvdW50KCk6IG51bWJlciB7XG4gICAgbGV0IHdyYXBwZWRSb3dzID0gMDtcbiAgICBjb25zdCBzdGFydFJvdyA9IHRoaXMuX3N0YXJ0Um93IC0gdGhpcy5fd3JhcHBlZFJvd3NGb3JSb3codGhpcy5fc3RhcnRSb3cpO1xuICAgIGNvbnN0IGVuZFJvdyA9IHRoaXMuX2VuZFJvdyAtIHRoaXMuX3dyYXBwZWRSb3dzRm9yUm93KHRoaXMuX2VuZFJvdyk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGguYWJzKHN0YXJ0Um93IC0gZW5kUm93KTsgaSsrKSB7XG4gICAgICBjb25zdCBkaXJlY3Rpb24gPSB0aGlzLl92ZXJ0aWNhbERpcmVjdGlvbigpID09PSBEaXJlY3Rpb24uVVAgPyAtMSA6IDE7XG5cbiAgICAgIGlmICh0aGlzLl9saW5lcy5nZXQoc3RhcnRSb3cgKyAoZGlyZWN0aW9uICogaSkpLmlzV3JhcHBlZCkge1xuICAgICAgICB3cmFwcGVkUm93cysrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3cmFwcGVkUm93cztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBudW1iZXIgb2Ygd3JhcHBlZCByb3dzIHRoYXQgbWFrZSB1cCBhIGdpdmVuIHJvdy5cbiAgICogQHBhcmFtIGN1cnJlbnRSb3cgVGhlIHJvdyB0byBkZXRlcm1pbmUgaG93IG1hbnkgd3JhcHBlZCByb3dzIG1ha2UgaXQgdXBcbiAgICovXG4gIHByaXZhdGUgX3dyYXBwZWRSb3dzRm9yUm93KGN1cnJlbnRSb3c6IG51bWJlcik6IG51bWJlciB7XG4gICAgbGV0IHJvd0NvdW50ID0gMDtcbiAgICBsZXQgbGluZVdyYXBzID0gdGhpcy5fbGluZXMuZ2V0KGN1cnJlbnRSb3cpLmlzV3JhcHBlZDtcblxuICAgIHdoaWxlIChsaW5lV3JhcHMgJiYgY3VycmVudFJvdyA+PSAwICYmIGN1cnJlbnRSb3cgPCB0aGlzLl90ZXJtaW5hbC5yb3dzKSB7XG4gICAgICByb3dDb3VudCsrO1xuICAgICAgY3VycmVudFJvdy0tO1xuICAgICAgbGluZVdyYXBzID0gdGhpcy5fbGluZXMuZ2V0KGN1cnJlbnRSb3cpLmlzV3JhcHBlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gcm93Q291bnQ7XG4gIH1cblxuICAvKipcbiAgICogRGlyZWN0aW9uIGRldGVybWluZXJzXG4gICAqL1xuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoZSByaWdodCBvciBsZWZ0IGFycm93IGlzIG5lZWRlZFxuICAgKi9cbiAgcHJpdmF0ZSBfaG9yaXpvbnRhbERpcmVjdGlvbigpOiBEaXJlY3Rpb24ge1xuICAgIGxldCBzdGFydFJvdztcbiAgICBpZiAodGhpcy5fbW92ZVRvUmVxdWVzdGVkUm93KCkubGVuZ3RoID4gMCkge1xuICAgICAgc3RhcnRSb3cgPSB0aGlzLl9lbmRSb3cgLSB0aGlzLl93cmFwcGVkUm93c0ZvclJvdyh0aGlzLl9lbmRSb3cpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGFydFJvdyA9IHRoaXMuX3N0YXJ0Um93O1xuICAgIH1cblxuICAgIGlmICgodGhpcy5fc3RhcnRDb2wgPCB0aGlzLl9lbmRDb2wgJiZcbiAgICAgIHN0YXJ0Um93IDw9IHRoaXMuX2VuZFJvdykgfHwgLy8gZG93bi9yaWdodCBvciBzYW1lIHkvcmlnaHRcbiAgICAgICh0aGlzLl9zdGFydENvbCA+PSB0aGlzLl9lbmRDb2wgJiZcbiAgICAgIHN0YXJ0Um93IDwgdGhpcy5fZW5kUm93KSkgeyAgLy8gZG93bi9sZWZ0IG9yIHNhbWUgeS9sZWZ0XG4gICAgICByZXR1cm4gRGlyZWN0aW9uLlJJR0hUO1xuICAgIH1cbiAgICByZXR1cm4gRGlyZWN0aW9uLkxFRlQ7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGUgdXAgb3IgZG93biBhcnJvdyBpcyBuZWVkZWRcbiAgICovXG4gIHByaXZhdGUgX3ZlcnRpY2FsRGlyZWN0aW9uKCk6IERpcmVjdGlvbiB7XG4gICAgaWYgKHRoaXMuX3N0YXJ0Um93ID4gdGhpcy5fZW5kUm93KSB7XG4gICAgICByZXR1cm4gRGlyZWN0aW9uLlVQO1xuICAgIH1cbiAgICByZXR1cm4gRGlyZWN0aW9uLkRPV047XG4gIH1cblxuICAvKipcbiAgICogQ29uc3RydWN0cyB0aGUgc3RyaW5nIG9mIGNoYXJzIGluIHRoZSBidWZmZXIgZnJvbSBhIHN0YXJ0aW5nIHJvdyBhbmQgY29sXG4gICAqIHRvIGFuIGVuZGluZyByb3cgYW5kIGNvbFxuICAgKiBAcGFyYW0gc3RhcnRDb2wgVGhlIHN0YXJ0aW5nIGNvbHVtbiBwb3NpdGlvblxuICAgKiBAcGFyYW0gc3RhcnRSb3cgVGhlIHN0YXJ0aW5nIHJvdyBwb3NpdGlvblxuICAgKiBAcGFyYW0gZW5kQ29sIFRoZSBlbmRpbmcgY29sdW1uIHBvc2l0aW9uXG4gICAqIEBwYXJhbSBlbmRSb3cgVGhlIGVuZGluZyByb3cgcG9zaXRpb25cbiAgICogQHBhcmFtIGZvcndhcmQgRGlyZWN0aW9uIHRvIG1vdmVcbiAgICovXG4gIHByaXZhdGUgX2J1ZmZlckxpbmUoXG4gICAgc3RhcnRDb2w6IG51bWJlcixcbiAgICBzdGFydFJvdzogbnVtYmVyLFxuICAgIGVuZENvbDogbnVtYmVyLFxuICAgIGVuZFJvdzogbnVtYmVyLFxuICAgIGZvcndhcmQ6IGJvb2xlYW5cbiAgKTogc3RyaW5nIHtcbiAgICBsZXQgY3VycmVudENvbCA9IHN0YXJ0Q29sO1xuICAgIGxldCBjdXJyZW50Um93ID0gc3RhcnRSb3c7XG4gICAgbGV0IGJ1ZmZlclN0ciA9ICcnO1xuXG4gICAgd2hpbGUgKGN1cnJlbnRDb2wgIT09IGVuZENvbCB8fCBjdXJyZW50Um93ICE9PSBlbmRSb3cpIHtcbiAgICAgIGN1cnJlbnRDb2wgKz0gZm9yd2FyZCA/IDEgOiAtMTtcblxuICAgICAgaWYgKGZvcndhcmQgJiYgY3VycmVudENvbCA+IHRoaXMuX3Rlcm1pbmFsLmNvbHMgLSAxKSB7XG4gICAgICAgIGJ1ZmZlclN0ciArPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIudHJhbnNsYXRlQnVmZmVyTGluZVRvU3RyaW5nKFxuICAgICAgICAgIGN1cnJlbnRSb3csIGZhbHNlLCBzdGFydENvbCwgY3VycmVudENvbFxuICAgICAgICApO1xuICAgICAgICBjdXJyZW50Q29sID0gMDtcbiAgICAgICAgc3RhcnRDb2wgPSAwO1xuICAgICAgICBjdXJyZW50Um93Kys7XG4gICAgICB9IGVsc2UgaWYgKCFmb3J3YXJkICYmIGN1cnJlbnRDb2wgPCAwKSB7XG4gICAgICAgIGJ1ZmZlclN0ciArPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIudHJhbnNsYXRlQnVmZmVyTGluZVRvU3RyaW5nKFxuICAgICAgICAgIGN1cnJlbnRSb3csIGZhbHNlLCAwLCBzdGFydENvbCArIDFcbiAgICAgICAgKTtcbiAgICAgICAgY3VycmVudENvbCA9IHRoaXMuX3Rlcm1pbmFsLmNvbHMgLSAxO1xuICAgICAgICBzdGFydENvbCA9IGN1cnJlbnRDb2w7XG4gICAgICAgIGN1cnJlbnRSb3ctLTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYnVmZmVyU3RyICsgdGhpcy5fdGVybWluYWwuYnVmZmVyLnRyYW5zbGF0ZUJ1ZmZlckxpbmVUb1N0cmluZyhcbiAgICAgIGN1cnJlbnRSb3csIGZhbHNlLCBzdGFydENvbCwgY3VycmVudENvbFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQ29uc3RydWN0cyB0aGUgZXNjYXBlIHNlcXVlbmNlIGZvciBjbGlja2luZyBhbiBhcnJvd1xuICAgKiBAcGFyYW0gZGlyZWN0aW9uIFRoZSBkaXJlY3Rpb24gdG8gbW92ZVxuICAgKi9cbiAgcHJpdmF0ZSBfc2VxdWVuY2UoZGlyZWN0aW9uOiBEaXJlY3Rpb24pOiBzdHJpbmcge1xuICAgIGNvbnN0IG1vZCA9IHRoaXMuX3Rlcm1pbmFsLmFwcGxpY2F0aW9uQ3Vyc29yID8gJ08nIDogJ1snO1xuICAgIHJldHVybiBDMC5FU0MgKyBtb2QgKyBkaXJlY3Rpb247XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcGVhdGVkIGEgZ2l2ZW4gbnVtYmVyIG9mIHRpbWVzXG4gKiBQb2x5ZmlsbCBmcm9tIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9yZXBlYXRcbiAqIEBwYXJhbSBjb3VudCBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nXG4gKiBAcGFyYW0gc3RyaW5nIFRoZSBzdHJpbmcgdGhhdCBpcyB0byBiZSByZXBlYXRlZFxuICovXG5mdW5jdGlvbiByZXBlYXQoY291bnQ6IG51bWJlciwgc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb3VudCA9IE1hdGguZmxvb3IoY291bnQpO1xuICBsZXQgcnB0ID0gJyc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgIHJwdCArPSBzdHI7XG4gIH1cbiAgcmV0dXJuIHJwdDtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7QUFRQTtBQVNBO0FBT0E7O0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBU0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBTUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUlBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBV0E7QUFPQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUdBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBNU9BO0FBb1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/handlers/AltClickHandler.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/public/AddonManager.js":
/*!*******************************************************!*\
  !*** ./node_modules/xterm/lib/public/AddonManager.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AddonManager = (function () {\n    function AddonManager() {\n        this._addons = [];\n    }\n    AddonManager.prototype.dispose = function () {\n        for (var i = this._addons.length - 1; i >= 0; i--) {\n            this._addons[i].instance.dispose();\n        }\n    };\n    AddonManager.prototype.loadAddon = function (terminal, instance) {\n        var _this = this;\n        var loadedAddon = {\n            instance: instance,\n            dispose: instance.dispose,\n            isDisposed: false\n        };\n        this._addons.push(loadedAddon);\n        instance.dispose = function () { return _this._wrappedAddonDispose(loadedAddon); };\n        instance.activate(terminal);\n    };\n    AddonManager.prototype._wrappedAddonDispose = function (loadedAddon) {\n        if (loadedAddon.isDisposed) {\n            return;\n        }\n        var index = -1;\n        for (var i = 0; i < this._addons.length; i++) {\n            if (this._addons[i] === loadedAddon) {\n                index = i;\n                break;\n            }\n        }\n        if (index === -1) {\n            throw new Error('Could not dispose an addon that has not been loaded');\n        }\n        loadedAddon.isDisposed = true;\n        loadedAddon.dispose.apply(loadedAddon.instance);\n        this._addons.splice(index, 1);\n    };\n    return AddonManager;\n}());\nexports.AddonManager = AddonManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3B1YmxpYy9BZGRvbk1hbmFnZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3B1YmxpYy9BZGRvbk1hbmFnZXIudHM/NjA2OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElUZXJtaW5hbEFkZG9uLCBJRGlzcG9zYWJsZSwgVGVybWluYWwgfSBmcm9tICd4dGVybSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUxvYWRlZEFkZG9uIHtcbiAgaW5zdGFuY2U6IElUZXJtaW5hbEFkZG9uO1xuICBkaXNwb3NlOiAoKSA9PiB2b2lkO1xuICBpc0Rpc3Bvc2VkOiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgQWRkb25NYW5hZ2VyIGltcGxlbWVudHMgSURpc3Bvc2FibGUge1xuICBwcm90ZWN0ZWQgX2FkZG9uczogSUxvYWRlZEFkZG9uW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSB0aGlzLl9hZGRvbnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHRoaXMuX2FkZG9uc1tpXS5pbnN0YW5jZS5kaXNwb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGxvYWRBZGRvbih0ZXJtaW5hbDogVGVybWluYWwsIGluc3RhbmNlOiBJVGVybWluYWxBZGRvbik6IHZvaWQge1xuICAgIGNvbnN0IGxvYWRlZEFkZG9uOiBJTG9hZGVkQWRkb24gPSB7XG4gICAgICBpbnN0YW5jZSxcbiAgICAgIGRpc3Bvc2U6IGluc3RhbmNlLmRpc3Bvc2UsXG4gICAgICBpc0Rpc3Bvc2VkOiBmYWxzZVxuICAgIH07XG4gICAgdGhpcy5fYWRkb25zLnB1c2gobG9hZGVkQWRkb24pO1xuICAgIGluc3RhbmNlLmRpc3Bvc2UgPSAoKSA9PiB0aGlzLl93cmFwcGVkQWRkb25EaXNwb3NlKGxvYWRlZEFkZG9uKTtcbiAgICBpbnN0YW5jZS5hY3RpdmF0ZSg8YW55PnRlcm1pbmFsKTtcbiAgfVxuXG4gIHByaXZhdGUgX3dyYXBwZWRBZGRvbkRpc3Bvc2UobG9hZGVkQWRkb246IElMb2FkZWRBZGRvbik6IHZvaWQge1xuICAgIGlmIChsb2FkZWRBZGRvbi5pc0Rpc3Bvc2VkKSB7XG4gICAgICAvLyBEbyBub3RoaW5nIGlmIGFscmVhZHkgZGlzcG9zZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGluZGV4ID0gLTE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9hZGRvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLl9hZGRvbnNbaV0gPT09IGxvYWRlZEFkZG9uKSB7XG4gICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGRpc3Bvc2UgYW4gYWRkb24gdGhhdCBoYXMgbm90IGJlZW4gbG9hZGVkJyk7XG4gICAgfVxuICAgIGxvYWRlZEFkZG9uLmlzRGlzcG9zZWQgPSB0cnVlO1xuICAgIGxvYWRlZEFkZG9uLmRpc3Bvc2UuYXBwbHkobG9hZGVkQWRkb24uaW5zdGFuY2UpO1xuICAgIHRoaXMuX2FkZG9ucy5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7O0FBYUE7QUFHQTtBQUZBO0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUExQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/public/AddonManager.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/public/Terminal.js":
/*!***************************************************!*\
  !*** ./node_modules/xterm/lib/public/Terminal.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Terminal_1 = __webpack_require__(/*! ../Terminal */ \"./node_modules/xterm/lib/Terminal.js\");\nvar Strings = __webpack_require__(/*! ../Strings */ \"./node_modules/xterm/lib/Strings.js\");\nvar AddonManager_1 = __webpack_require__(/*! ./AddonManager */ \"./node_modules/xterm/lib/public/AddonManager.js\");\nvar Terminal = (function () {\n    function Terminal(options) {\n        this._core = new Terminal_1.Terminal(options);\n        this._addonManager = new AddonManager_1.AddonManager();\n    }\n    Object.defineProperty(Terminal.prototype, \"onCursorMove\", {\n        get: function () { return this._core.onCursorMove; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"onLineFeed\", {\n        get: function () { return this._core.onLineFeed; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"onSelectionChange\", {\n        get: function () { return this._core.onSelectionChange; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"onData\", {\n        get: function () { return this._core.onData; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"onTitleChange\", {\n        get: function () { return this._core.onTitleChange; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"onScroll\", {\n        get: function () { return this._core.onScroll; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"onKey\", {\n        get: function () { return this._core.onKey; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"onRender\", {\n        get: function () { return this._core.onRender; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"onResize\", {\n        get: function () { return this._core.onResize; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"element\", {\n        get: function () { return this._core.element; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"textarea\", {\n        get: function () { return this._core.textarea; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"rows\", {\n        get: function () { return this._core.rows; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"cols\", {\n        get: function () { return this._core.cols; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"buffer\", {\n        get: function () { return new BufferApiView(this._core.buffer); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"markers\", {\n        get: function () { return this._core.markers; },\n        enumerable: true,\n        configurable: true\n    });\n    Terminal.prototype.blur = function () {\n        this._core.blur();\n    };\n    Terminal.prototype.focus = function () {\n        this._core.focus();\n    };\n    Terminal.prototype.on = function (type, listener) {\n        this._core.on(type, listener);\n    };\n    Terminal.prototype.off = function (type, listener) {\n        this._core.off(type, listener);\n    };\n    Terminal.prototype.emit = function (type, data) {\n        this._core.emit(type, data);\n    };\n    Terminal.prototype.addDisposableListener = function (type, handler) {\n        return this._core.addDisposableListener(type, handler);\n    };\n    Terminal.prototype.resize = function (columns, rows) {\n        this._core.resize(columns, rows);\n    };\n    Terminal.prototype.writeln = function (data) {\n        this._core.writeln(data);\n    };\n    Terminal.prototype.open = function (parent) {\n        this._core.open(parent);\n    };\n    Terminal.prototype.attachCustomKeyEventHandler = function (customKeyEventHandler) {\n        this._core.attachCustomKeyEventHandler(customKeyEventHandler);\n    };\n    Terminal.prototype.addCsiHandler = function (flag, callback) {\n        return this._core.addCsiHandler(flag, callback);\n    };\n    Terminal.prototype.addOscHandler = function (ident, callback) {\n        return this._core.addOscHandler(ident, callback);\n    };\n    Terminal.prototype.registerLinkMatcher = function (regex, handler, options) {\n        return this._core.registerLinkMatcher(regex, handler, options);\n    };\n    Terminal.prototype.deregisterLinkMatcher = function (matcherId) {\n        this._core.deregisterLinkMatcher(matcherId);\n    };\n    Terminal.prototype.registerCharacterJoiner = function (handler) {\n        return this._core.registerCharacterJoiner(handler);\n    };\n    Terminal.prototype.deregisterCharacterJoiner = function (joinerId) {\n        this._core.deregisterCharacterJoiner(joinerId);\n    };\n    Terminal.prototype.addMarker = function (cursorYOffset) {\n        return this._core.addMarker(cursorYOffset);\n    };\n    Terminal.prototype.hasSelection = function () {\n        return this._core.hasSelection();\n    };\n    Terminal.prototype.select = function (column, row, length) {\n        this._core.select(column, row, length);\n    };\n    Terminal.prototype.getSelection = function () {\n        return this._core.getSelection();\n    };\n    Terminal.prototype.getSelectionPosition = function () {\n        return this._core.getSelectionPosition();\n    };\n    Terminal.prototype.clearSelection = function () {\n        this._core.clearSelection();\n    };\n    Terminal.prototype.selectAll = function () {\n        this._core.selectAll();\n    };\n    Terminal.prototype.selectLines = function (start, end) {\n        this._core.selectLines(start, end);\n    };\n    Terminal.prototype.dispose = function () {\n        this._addonManager.dispose();\n        this._core.dispose();\n    };\n    Terminal.prototype.destroy = function () {\n        this._core.destroy();\n    };\n    Terminal.prototype.scrollLines = function (amount) {\n        this._core.scrollLines(amount);\n    };\n    Terminal.prototype.scrollPages = function (pageCount) {\n        this._core.scrollPages(pageCount);\n    };\n    Terminal.prototype.scrollToTop = function () {\n        this._core.scrollToTop();\n    };\n    Terminal.prototype.scrollToBottom = function () {\n        this._core.scrollToBottom();\n    };\n    Terminal.prototype.scrollToLine = function (line) {\n        this._core.scrollToLine(line);\n    };\n    Terminal.prototype.clear = function () {\n        this._core.clear();\n    };\n    Terminal.prototype.write = function (data) {\n        this._core.write(data);\n    };\n    Terminal.prototype.writeUtf8 = function (data) {\n        this._core.writeUtf8(data);\n    };\n    Terminal.prototype.getOption = function (key) {\n        return this._core.getOption(key);\n    };\n    Terminal.prototype.setOption = function (key, value) {\n        this._core.setOption(key, value);\n    };\n    Terminal.prototype.refresh = function (start, end) {\n        this._core.refresh(start, end);\n    };\n    Terminal.prototype.reset = function () {\n        this._core.reset();\n    };\n    Terminal.applyAddon = function (addon) {\n        addon.apply(Terminal);\n    };\n    Terminal.prototype.loadAddon = function (addon) {\n        return this._addonManager.loadAddon(this, addon);\n    };\n    Object.defineProperty(Terminal, \"strings\", {\n        get: function () {\n            return Strings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Terminal;\n}());\nexports.Terminal = Terminal;\nvar BufferApiView = (function () {\n    function BufferApiView(_buffer) {\n        this._buffer = _buffer;\n    }\n    Object.defineProperty(BufferApiView.prototype, \"cursorY\", {\n        get: function () { return this._buffer.y; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BufferApiView.prototype, \"cursorX\", {\n        get: function () { return this._buffer.x; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BufferApiView.prototype, \"viewportY\", {\n        get: function () { return this._buffer.ydisp; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BufferApiView.prototype, \"baseY\", {\n        get: function () { return this._buffer.ybase; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BufferApiView.prototype, \"length\", {\n        get: function () { return this._buffer.lines.length; },\n        enumerable: true,\n        configurable: true\n    });\n    BufferApiView.prototype.getLine = function (y) {\n        var line = this._buffer.lines.get(y);\n        if (!line) {\n            return undefined;\n        }\n        return new BufferLineApiView(line);\n    };\n    return BufferApiView;\n}());\nvar BufferLineApiView = (function () {\n    function BufferLineApiView(_line) {\n        this._line = _line;\n    }\n    Object.defineProperty(BufferLineApiView.prototype, \"isWrapped\", {\n        get: function () { return this._line.isWrapped; },\n        enumerable: true,\n        configurable: true\n    });\n    BufferLineApiView.prototype.getCell = function (x) {\n        if (x < 0 || x >= this._line.length) {\n            return undefined;\n        }\n        return new BufferCellApiView(this._line, x);\n    };\n    BufferLineApiView.prototype.translateToString = function (trimRight, startColumn, endColumn) {\n        return this._line.translateToString(trimRight, startColumn, endColumn);\n    };\n    return BufferLineApiView;\n}());\nvar BufferCellApiView = (function () {\n    function BufferCellApiView(_line, _x) {\n        this._line = _line;\n        this._x = _x;\n    }\n    Object.defineProperty(BufferCellApiView.prototype, \"char\", {\n        get: function () { return this._line.getString(this._x); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BufferCellApiView.prototype, \"width\", {\n        get: function () { return this._line.getWidth(this._x); },\n        enumerable: true,\n        configurable: true\n    });\n    return BufferCellApiView;\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/public/Terminal.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/renderer/BaseRenderLayer.js":
/*!************************************************************!*\
  !*** ./node_modules/xterm/lib/renderer/BaseRenderLayer.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Types_1 = __webpack_require__(/*! ../common/Types */ \"./node_modules/xterm/lib/common/Types.js\");\nvar Types_2 = __webpack_require__(/*! ./atlas/Types */ \"./node_modules/xterm/lib/renderer/atlas/Types.js\");\nvar CharAtlasCache_1 = __webpack_require__(/*! ./atlas/CharAtlasCache */ \"./node_modules/xterm/lib/renderer/atlas/CharAtlasCache.js\");\nvar BufferLine_1 = __webpack_require__(/*! ../core/buffer/BufferLine */ \"./node_modules/xterm/lib/core/buffer/BufferLine.js\");\nvar BaseRenderLayer = (function () {\n    function BaseRenderLayer(_container, id, zIndex, _alpha, _colors) {\n        this._container = _container;\n        this._alpha = _alpha;\n        this._colors = _colors;\n        this._scaledCharWidth = 0;\n        this._scaledCharHeight = 0;\n        this._scaledCellWidth = 0;\n        this._scaledCellHeight = 0;\n        this._scaledCharLeft = 0;\n        this._scaledCharTop = 0;\n        this._currentGlyphIdentifier = {\n            chars: '',\n            code: 0,\n            bg: 0,\n            fg: 0,\n            bold: false,\n            dim: false,\n            italic: false\n        };\n        this._canvas = document.createElement('canvas');\n        this._canvas.classList.add(\"xterm-\" + id + \"-layer\");\n        this._canvas.style.zIndex = zIndex.toString();\n        this._initCanvas();\n        this._container.appendChild(this._canvas);\n    }\n    BaseRenderLayer.prototype.dispose = function () {\n        this._container.removeChild(this._canvas);\n        if (this._charAtlas) {\n            this._charAtlas.dispose();\n        }\n    };\n    BaseRenderLayer.prototype._initCanvas = function () {\n        this._ctx = this._canvas.getContext('2d', { alpha: this._alpha });\n        if (!this._alpha) {\n            this.clearAll();\n        }\n    };\n    BaseRenderLayer.prototype.onOptionsChanged = function (terminal) { };\n    BaseRenderLayer.prototype.onBlur = function (terminal) { };\n    BaseRenderLayer.prototype.onFocus = function (terminal) { };\n    BaseRenderLayer.prototype.onCursorMove = function (terminal) { };\n    BaseRenderLayer.prototype.onGridChanged = function (terminal, startRow, endRow) { };\n    BaseRenderLayer.prototype.onSelectionChanged = function (terminal, start, end, columnSelectMode) {\n        if (columnSelectMode === void 0) { columnSelectMode = false; }\n    };\n    BaseRenderLayer.prototype.setColors = function (terminal, colorSet) {\n        this._refreshCharAtlas(terminal, colorSet);\n    };\n    BaseRenderLayer.prototype.setTransparency = function (terminal, alpha) {\n        if (alpha === this._alpha) {\n            return;\n        }\n        var oldCanvas = this._canvas;\n        this._alpha = alpha;\n        this._canvas = this._canvas.cloneNode();\n        this._initCanvas();\n        this._container.replaceChild(this._canvas, oldCanvas);\n        this._refreshCharAtlas(terminal, this._colors);\n        this.onGridChanged(terminal, 0, terminal.rows - 1);\n    };\n    BaseRenderLayer.prototype._refreshCharAtlas = function (terminal, colorSet) {\n        if (this._scaledCharWidth <= 0 && this._scaledCharHeight <= 0) {\n            return;\n        }\n        this._charAtlas = CharAtlasCache_1.acquireCharAtlas(terminal, colorSet, this._scaledCharWidth, this._scaledCharHeight);\n        this._charAtlas.warmUp();\n    };\n    BaseRenderLayer.prototype.resize = function (terminal, dim) {\n        this._scaledCellWidth = dim.scaledCellWidth;\n        this._scaledCellHeight = dim.scaledCellHeight;\n        this._scaledCharWidth = dim.scaledCharWidth;\n        this._scaledCharHeight = dim.scaledCharHeight;\n        this._scaledCharLeft = dim.scaledCharLeft;\n        this._scaledCharTop = dim.scaledCharTop;\n        this._canvas.width = dim.scaledCanvasWidth;\n        this._canvas.height = dim.scaledCanvasHeight;\n        this._canvas.style.width = dim.canvasWidth + \"px\";\n        this._canvas.style.height = dim.canvasHeight + \"px\";\n        if (!this._alpha) {\n            this.clearAll();\n        }\n        this._refreshCharAtlas(terminal, this._colors);\n    };\n    BaseRenderLayer.prototype.fillCells = function (x, y, width, height) {\n        this._ctx.fillRect(x * this._scaledCellWidth, y * this._scaledCellHeight, width * this._scaledCellWidth, height * this._scaledCellHeight);\n    };\n    BaseRenderLayer.prototype.fillBottomLineAtCells = function (x, y, width) {\n        if (width === void 0) { width = 1; }\n        this._ctx.fillRect(x * this._scaledCellWidth, (y + 1) * this._scaledCellHeight - window.devicePixelRatio - 1, width * this._scaledCellWidth, window.devicePixelRatio);\n    };\n    BaseRenderLayer.prototype.fillLeftLineAtCell = function (x, y) {\n        this._ctx.fillRect(x * this._scaledCellWidth, y * this._scaledCellHeight, window.devicePixelRatio, this._scaledCellHeight);\n    };\n    BaseRenderLayer.prototype.strokeRectAtCell = function (x, y, width, height) {\n        this._ctx.lineWidth = window.devicePixelRatio;\n        this._ctx.strokeRect(x * this._scaledCellWidth + window.devicePixelRatio / 2, y * this._scaledCellHeight + (window.devicePixelRatio / 2), width * this._scaledCellWidth - window.devicePixelRatio, (height * this._scaledCellHeight) - window.devicePixelRatio);\n    };\n    BaseRenderLayer.prototype.clearAll = function () {\n        if (this._alpha) {\n            this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n        }\n        else {\n            this._ctx.fillStyle = this._colors.background.css;\n            this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\n        }\n    };\n    BaseRenderLayer.prototype.clearCells = function (x, y, width, height) {\n        if (this._alpha) {\n            this._ctx.clearRect(x * this._scaledCellWidth, y * this._scaledCellHeight, width * this._scaledCellWidth, height * this._scaledCellHeight);\n        }\n        else {\n            this._ctx.fillStyle = this._colors.background.css;\n            this._ctx.fillRect(x * this._scaledCellWidth, y * this._scaledCellHeight, width * this._scaledCellWidth, height * this._scaledCellHeight);\n        }\n    };\n    BaseRenderLayer.prototype.fillCharTrueColor = function (terminal, cell, x, y) {\n        this._ctx.font = this._getFont(terminal, false, false);\n        this._ctx.textBaseline = 'middle';\n        this._clipRow(terminal, y);\n        this._ctx.fillText(cell.getChars(), x * this._scaledCellWidth + this._scaledCharLeft, y * this._scaledCellHeight + this._scaledCharTop + this._scaledCharHeight / 2);\n    };\n    BaseRenderLayer.prototype.drawChars = function (terminal, cell, x, y) {\n        if (cell.isFgRGB() || cell.isBgRGB()) {\n            this._drawUncachedChars(terminal, cell, x, y);\n            return;\n        }\n        var fg;\n        var bg;\n        if (cell.isInverse()) {\n            fg = (cell.isBgDefault()) ? Types_2.INVERTED_DEFAULT_COLOR : cell.getBgColor();\n            bg = (cell.isFgDefault()) ? Types_2.INVERTED_DEFAULT_COLOR : cell.getFgColor();\n        }\n        else {\n            bg = (cell.isBgDefault()) ? Types_1.DEFAULT_COLOR : cell.getBgColor();\n            fg = (cell.isFgDefault()) ? Types_1.DEFAULT_COLOR : cell.getFgColor();\n        }\n        var drawInBrightColor = terminal.options.drawBoldTextInBrightColors && cell.isBold() && fg < 8 && fg !== Types_2.INVERTED_DEFAULT_COLOR;\n        fg += drawInBrightColor ? 8 : 0;\n        this._currentGlyphIdentifier.chars = cell.getChars() || BufferLine_1.WHITESPACE_CELL_CHAR;\n        this._currentGlyphIdentifier.code = cell.getCode() || BufferLine_1.WHITESPACE_CELL_CODE;\n        this._currentGlyphIdentifier.bg = bg;\n        this._currentGlyphIdentifier.fg = fg;\n        this._currentGlyphIdentifier.bold = cell.isBold() && terminal.options.enableBold;\n        this._currentGlyphIdentifier.dim = !!cell.isDim();\n        this._currentGlyphIdentifier.italic = !!cell.isItalic();\n        var atlasDidDraw = this._charAtlas && this._charAtlas.draw(this._ctx, this._currentGlyphIdentifier, x * this._scaledCellWidth + this._scaledCharLeft, y * this._scaledCellHeight + this._scaledCharTop);\n        if (!atlasDidDraw) {\n            this._drawUncachedChars(terminal, cell, x, y);\n        }\n    };\n    BaseRenderLayer.prototype._drawUncachedChars = function (terminal, cell, x, y) {\n        this._ctx.save();\n        this._ctx.font = this._getFont(terminal, cell.isBold() && terminal.options.enableBold, !!cell.isItalic());\n        this._ctx.textBaseline = 'middle';\n        if (cell.isInverse()) {\n            if (cell.isBgDefault()) {\n                this._ctx.fillStyle = this._colors.background.css;\n            }\n            else if (cell.isBgRGB()) {\n                this._ctx.fillStyle = \"rgb(\" + BufferLine_1.AttributeData.toColorRGB(cell.getBgColor()).join(',') + \")\";\n            }\n            else {\n                this._ctx.fillStyle = this._colors.ansi[cell.getBgColor()].css;\n            }\n        }\n        else {\n            if (cell.isFgDefault()) {\n                this._ctx.fillStyle = this._colors.foreground.css;\n            }\n            else if (cell.isFgRGB()) {\n                this._ctx.fillStyle = \"rgb(\" + BufferLine_1.AttributeData.toColorRGB(cell.getFgColor()).join(',') + \")\";\n            }\n            else {\n                var fg = cell.getFgColor();\n                if (terminal.options.drawBoldTextInBrightColors && cell.isBold() && fg < 8) {\n                    fg += 8;\n                }\n                this._ctx.fillStyle = this._colors.ansi[fg].css;\n            }\n        }\n        this._clipRow(terminal, y);\n        if (cell.isDim()) {\n            this._ctx.globalAlpha = Types_2.DIM_OPACITY;\n        }\n        this._ctx.fillText(cell.getChars(), x * this._scaledCellWidth + this._scaledCharLeft, y * this._scaledCellHeight + this._scaledCharTop + this._scaledCharHeight / 2);\n        this._ctx.restore();\n    };\n    BaseRenderLayer.prototype._clipRow = function (terminal, y) {\n        this._ctx.beginPath();\n        this._ctx.rect(0, y * this._scaledCellHeight, terminal.cols * this._scaledCellWidth, this._scaledCellHeight);\n        this._ctx.clip();\n    };\n    BaseRenderLayer.prototype._getFont = function (terminal, isBold, isItalic) {\n        var fontWeight = isBold ? terminal.options.fontWeightBold : terminal.options.fontWeight;\n        var fontStyle = isItalic ? 'italic' : '';\n        return fontStyle + \" \" + fontWeight + \" \" + terminal.options.fontSize * window.devicePixelRatio + \"px \" + terminal.options.fontFamily;\n    };\n    return BaseRenderLayer;\n}());\nexports.BaseRenderLayer = BaseRenderLayer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/renderer/BaseRenderLayer.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/renderer/CharacterJoinerRegistry.js":
/*!********************************************************************!*\
  !*** ./node_modules/xterm/lib/renderer/CharacterJoinerRegistry.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BufferLine_1 = __webpack_require__(/*! ../core/buffer/BufferLine */ \"./node_modules/xterm/lib/core/buffer/BufferLine.js\");\nvar JoinedCellData = (function (_super) {\n    __extends(JoinedCellData, _super);\n    function JoinedCellData(firstCell, chars, width) {\n        var _this = _super.call(this) || this;\n        _this.content = 0;\n        _this.combinedData = '';\n        _this.fg = firstCell.fg;\n        _this.bg = firstCell.bg;\n        _this.combinedData = chars;\n        _this._width = width;\n        return _this;\n    }\n    JoinedCellData.prototype.isCombined = function () {\n        return 2097152;\n    };\n    JoinedCellData.prototype.getWidth = function () {\n        return this._width;\n    };\n    JoinedCellData.prototype.getChars = function () {\n        return this.combinedData;\n    };\n    JoinedCellData.prototype.getCode = function () {\n        return 0x1FFFFF;\n    };\n    JoinedCellData.prototype.setFromCharData = function (value) {\n        throw new Error('not implemented');\n    };\n    JoinedCellData.prototype.getAsCharData = function () {\n        return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n    };\n    return JoinedCellData;\n}(BufferLine_1.AttributeData));\nexports.JoinedCellData = JoinedCellData;\nvar CharacterJoinerRegistry = (function () {\n    function CharacterJoinerRegistry(_terminal) {\n        this._terminal = _terminal;\n        this._characterJoiners = [];\n        this._nextCharacterJoinerId = 0;\n        this._workCell = new BufferLine_1.CellData();\n    }\n    CharacterJoinerRegistry.prototype.registerCharacterJoiner = function (handler) {\n        var joiner = {\n            id: this._nextCharacterJoinerId++,\n            handler: handler\n        };\n        this._characterJoiners.push(joiner);\n        return joiner.id;\n    };\n    CharacterJoinerRegistry.prototype.deregisterCharacterJoiner = function (joinerId) {\n        for (var i = 0; i < this._characterJoiners.length; i++) {\n            if (this._characterJoiners[i].id === joinerId) {\n                this._characterJoiners.splice(i, 1);\n                return true;\n            }\n        }\n        return false;\n    };\n    CharacterJoinerRegistry.prototype.getJoinedCharacters = function (row) {\n        if (this._characterJoiners.length === 0) {\n            return [];\n        }\n        var line = this._terminal.buffer.lines.get(row);\n        if (line.length === 0) {\n            return [];\n        }\n        var ranges = [];\n        var lineStr = line.translateToString(true);\n        var rangeStartColumn = 0;\n        var currentStringIndex = 0;\n        var rangeStartStringIndex = 0;\n        var rangeAttrFG = line.getFg(0);\n        var rangeAttrBG = line.getBg(0);\n        for (var x = 0; x < line.getTrimmedLength(); x++) {\n            line.loadCell(x, this._workCell);\n            if (this._workCell.getWidth() === 0) {\n                continue;\n            }\n            if (this._workCell.fg !== rangeAttrFG || this._workCell.bg !== rangeAttrBG) {\n                if (x - rangeStartColumn > 1) {\n                    var joinedRanges = this._getJoinedRanges(lineStr, rangeStartStringIndex, currentStringIndex, line, rangeStartColumn);\n                    for (var i = 0; i < joinedRanges.length; i++) {\n                        ranges.push(joinedRanges[i]);\n                    }\n                }\n                rangeStartColumn = x;\n                rangeStartStringIndex = currentStringIndex;\n                rangeAttrFG = this._workCell.fg;\n                rangeAttrBG = this._workCell.bg;\n            }\n            currentStringIndex += this._workCell.getChars().length || BufferLine_1.WHITESPACE_CELL_CHAR.length;\n        }\n        if (this._terminal.cols - rangeStartColumn > 1) {\n            var joinedRanges = this._getJoinedRanges(lineStr, rangeStartStringIndex, currentStringIndex, line, rangeStartColumn);\n            for (var i = 0; i < joinedRanges.length; i++) {\n                ranges.push(joinedRanges[i]);\n            }\n        }\n        return ranges;\n    };\n    CharacterJoinerRegistry.prototype._getJoinedRanges = function (line, startIndex, endIndex, lineData, startCol) {\n        var text = line.substring(startIndex, endIndex);\n        var joinedRanges = this._characterJoiners[0].handler(text);\n        for (var i = 1; i < this._characterJoiners.length; i++) {\n            var joinerRanges = this._characterJoiners[i].handler(text);\n            for (var j = 0; j < joinerRanges.length; j++) {\n                CharacterJoinerRegistry._mergeRanges(joinedRanges, joinerRanges[j]);\n            }\n        }\n        this._stringRangesToCellRanges(joinedRanges, lineData, startCol);\n        return joinedRanges;\n    };\n    CharacterJoinerRegistry.prototype._stringRangesToCellRanges = function (ranges, line, startCol) {\n        var currentRangeIndex = 0;\n        var currentRangeStarted = false;\n        var currentStringIndex = 0;\n        var currentRange = ranges[currentRangeIndex];\n        if (!currentRange) {\n            return;\n        }\n        for (var x = startCol; x < this._terminal.cols; x++) {\n            var width = line.getWidth(x);\n            var length_1 = line.getString(x).length || BufferLine_1.WHITESPACE_CELL_CHAR.length;\n            if (width === 0) {\n                continue;\n            }\n            if (!currentRangeStarted && currentRange[0] <= currentStringIndex) {\n                currentRange[0] = x;\n                currentRangeStarted = true;\n            }\n            if (currentRange[1] <= currentStringIndex) {\n                currentRange[1] = x;\n                currentRange = ranges[++currentRangeIndex];\n                if (!currentRange) {\n                    break;\n                }\n                if (currentRange[0] <= currentStringIndex) {\n                    currentRange[0] = x;\n                    currentRangeStarted = true;\n                }\n                else {\n                    currentRangeStarted = false;\n                }\n            }\n            currentStringIndex += length_1;\n        }\n        if (currentRange) {\n            currentRange[1] = this._terminal.cols;\n        }\n    };\n    CharacterJoinerRegistry._mergeRanges = function (ranges, newRange) {\n        var inRange = false;\n        for (var i = 0; i < ranges.length; i++) {\n            var range = ranges[i];\n            if (!inRange) {\n                if (newRange[1] <= range[0]) {\n                    ranges.splice(i, 0, newRange);\n                    return ranges;\n                }\n                if (newRange[1] <= range[1]) {\n                    range[0] = Math.min(newRange[0], range[0]);\n                    return ranges;\n                }\n                if (newRange[0] < range[1]) {\n                    range[0] = Math.min(newRange[0], range[0]);\n                    inRange = true;\n                }\n                continue;\n            }\n            else {\n                if (newRange[1] <= range[0]) {\n                    ranges[i - 1][1] = newRange[1];\n                    return ranges;\n                }\n                if (newRange[1] <= range[1]) {\n                    ranges[i - 1][1] = Math.max(newRange[1], range[1]);\n                    ranges.splice(i, 1);\n                    inRange = false;\n                    return ranges;\n                }\n                ranges.splice(i, 1);\n                i--;\n            }\n        }\n        if (inRange) {\n            ranges[ranges.length - 1][1] = newRange[1];\n        }\n        else {\n            ranges.push(newRange);\n        }\n        return ranges;\n    };\n    return CharacterJoinerRegistry;\n}());\nexports.CharacterJoinerRegistry = CharacterJoinerRegistry;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/renderer/CharacterJoinerRegistry.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/renderer/CursorRenderLayer.js":
/*!**************************************************************!*\
  !*** ./node_modules/xterm/lib/renderer/CursorRenderLayer.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BaseRenderLayer_1 = __webpack_require__(/*! ./BaseRenderLayer */ \"./node_modules/xterm/lib/renderer/BaseRenderLayer.js\");\nvar BufferLine_1 = __webpack_require__(/*! ../core/buffer/BufferLine */ \"./node_modules/xterm/lib/core/buffer/BufferLine.js\");\nvar BLINK_INTERVAL = 600;\nvar CursorRenderLayer = (function (_super) {\n    __extends(CursorRenderLayer, _super);\n    function CursorRenderLayer(container, zIndex, colors) {\n        var _this = _super.call(this, container, 'cursor', zIndex, true, colors) || this;\n        _this._cell = new BufferLine_1.CellData();\n        _this._state = {\n            x: null,\n            y: null,\n            isFocused: null,\n            style: null,\n            width: null\n        };\n        _this._cursorRenderers = {\n            'bar': _this._renderBarCursor.bind(_this),\n            'block': _this._renderBlockCursor.bind(_this),\n            'underline': _this._renderUnderlineCursor.bind(_this)\n        };\n        return _this;\n    }\n    CursorRenderLayer.prototype.resize = function (terminal, dim) {\n        _super.prototype.resize.call(this, terminal, dim);\n        this._state = {\n            x: null,\n            y: null,\n            isFocused: null,\n            style: null,\n            width: null\n        };\n    };\n    CursorRenderLayer.prototype.reset = function (terminal) {\n        this._clearCursor();\n        if (this._cursorBlinkStateManager) {\n            this._cursorBlinkStateManager.dispose();\n            this._cursorBlinkStateManager = null;\n            this.onOptionsChanged(terminal);\n        }\n    };\n    CursorRenderLayer.prototype.onBlur = function (terminal) {\n        if (this._cursorBlinkStateManager) {\n            this._cursorBlinkStateManager.pause();\n        }\n        terminal.refresh(terminal.buffer.y, terminal.buffer.y);\n    };\n    CursorRenderLayer.prototype.onFocus = function (terminal) {\n        if (this._cursorBlinkStateManager) {\n            this._cursorBlinkStateManager.resume(terminal);\n        }\n        else {\n            terminal.refresh(terminal.buffer.y, terminal.buffer.y);\n        }\n    };\n    CursorRenderLayer.prototype.onOptionsChanged = function (terminal) {\n        var _this = this;\n        if (terminal.options.cursorBlink) {\n            if (!this._cursorBlinkStateManager) {\n                this._cursorBlinkStateManager = new CursorBlinkStateManager(terminal, function () {\n                    _this._render(terminal, true);\n                });\n            }\n        }\n        else {\n            if (this._cursorBlinkStateManager) {\n                this._cursorBlinkStateManager.dispose();\n                this._cursorBlinkStateManager = null;\n            }\n            terminal.refresh(terminal.buffer.y, terminal.buffer.y);\n        }\n    };\n    CursorRenderLayer.prototype.onCursorMove = function (terminal) {\n        if (this._cursorBlinkStateManager) {\n            this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\n        }\n    };\n    CursorRenderLayer.prototype.onGridChanged = function (terminal, startRow, endRow) {\n        if (!this._cursorBlinkStateManager || this._cursorBlinkStateManager.isPaused) {\n            this._render(terminal, false);\n        }\n        else {\n            this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\n        }\n    };\n    CursorRenderLayer.prototype._render = function (terminal, triggeredByAnimationFrame) {\n        if (!terminal.cursorState || terminal.cursorHidden) {\n            this._clearCursor();\n            return;\n        }\n        var cursorY = terminal.buffer.ybase + terminal.buffer.y;\n        var viewportRelativeCursorY = cursorY - terminal.buffer.ydisp;\n        if (viewportRelativeCursorY < 0 || viewportRelativeCursorY >= terminal.rows) {\n            this._clearCursor();\n            return;\n        }\n        terminal.buffer.lines.get(cursorY).loadCell(terminal.buffer.x, this._cell);\n        if (this._cell.content === undefined) {\n            return;\n        }\n        if (!terminal.isFocused) {\n            this._clearCursor();\n            this._ctx.save();\n            this._ctx.fillStyle = this._colors.cursor.css;\n            this._renderBlurCursor(terminal, terminal.buffer.x, viewportRelativeCursorY, this._cell);\n            this._ctx.restore();\n            this._state.x = terminal.buffer.x;\n            this._state.y = viewportRelativeCursorY;\n            this._state.isFocused = false;\n            this._state.style = terminal.options.cursorStyle;\n            this._state.width = this._cell.getWidth();\n            return;\n        }\n        if (this._cursorBlinkStateManager && !this._cursorBlinkStateManager.isCursorVisible) {\n            this._clearCursor();\n            return;\n        }\n        if (this._state) {\n            if (this._state.x === terminal.buffer.x &&\n                this._state.y === viewportRelativeCursorY &&\n                this._state.isFocused === terminal.isFocused &&\n                this._state.style === terminal.options.cursorStyle &&\n                this._state.width === this._cell.getWidth()) {\n                return;\n            }\n            this._clearCursor();\n        }\n        this._ctx.save();\n        this._cursorRenderers[terminal.options.cursorStyle || 'block'](terminal, terminal.buffer.x, viewportRelativeCursorY, this._cell);\n        this._ctx.restore();\n        this._state.x = terminal.buffer.x;\n        this._state.y = viewportRelativeCursorY;\n        this._state.isFocused = false;\n        this._state.style = terminal.options.cursorStyle;\n        this._state.width = this._cell.getWidth();\n    };\n    CursorRenderLayer.prototype._clearCursor = function () {\n        if (this._state) {\n            this.clearCells(this._state.x, this._state.y, this._state.width, 1);\n            this._state = {\n                x: null,\n                y: null,\n                isFocused: null,\n                style: null,\n                width: null\n            };\n        }\n    };\n    CursorRenderLayer.prototype._renderBarCursor = function (terminal, x, y, cell) {\n        this._ctx.save();\n        this._ctx.fillStyle = this._colors.cursor.css;\n        this.fillLeftLineAtCell(x, y);\n        this._ctx.restore();\n    };\n    CursorRenderLayer.prototype._renderBlockCursor = function (terminal, x, y, cell) {\n        this._ctx.save();\n        this._ctx.fillStyle = this._colors.cursor.css;\n        this.fillCells(x, y, cell.getWidth(), 1);\n        this._ctx.fillStyle = this._colors.cursorAccent.css;\n        this.fillCharTrueColor(terminal, cell, x, y);\n        this._ctx.restore();\n    };\n    CursorRenderLayer.prototype._renderUnderlineCursor = function (terminal, x, y, cell) {\n        this._ctx.save();\n        this._ctx.fillStyle = this._colors.cursor.css;\n        this.fillBottomLineAtCells(x, y);\n        this._ctx.restore();\n    };\n    CursorRenderLayer.prototype._renderBlurCursor = function (terminal, x, y, cell) {\n        this._ctx.save();\n        this._ctx.strokeStyle = this._colors.cursor.css;\n        this.strokeRectAtCell(x, y, cell.getWidth(), 1);\n        this._ctx.restore();\n    };\n    return CursorRenderLayer;\n}(BaseRenderLayer_1.BaseRenderLayer));\nexports.CursorRenderLayer = CursorRenderLayer;\nvar CursorBlinkStateManager = (function () {\n    function CursorBlinkStateManager(terminal, _renderCallback) {\n        this._renderCallback = _renderCallback;\n        this.isCursorVisible = true;\n        if (terminal.isFocused) {\n            this._restartInterval();\n        }\n    }\n    Object.defineProperty(CursorBlinkStateManager.prototype, \"isPaused\", {\n        get: function () { return !(this._blinkStartTimeout || this._blinkInterval); },\n        enumerable: true,\n        configurable: true\n    });\n    CursorBlinkStateManager.prototype.dispose = function () {\n        if (this._blinkInterval) {\n            window.clearInterval(this._blinkInterval);\n            this._blinkInterval = null;\n        }\n        if (this._blinkStartTimeout) {\n            window.clearTimeout(this._blinkStartTimeout);\n            this._blinkStartTimeout = null;\n        }\n        if (this._animationFrame) {\n            window.cancelAnimationFrame(this._animationFrame);\n            this._animationFrame = null;\n        }\n    };\n    CursorBlinkStateManager.prototype.restartBlinkAnimation = function (terminal) {\n        var _this = this;\n        if (this.isPaused) {\n            return;\n        }\n        this._animationTimeRestarted = Date.now();\n        this.isCursorVisible = true;\n        if (!this._animationFrame) {\n            this._animationFrame = window.requestAnimationFrame(function () {\n                _this._renderCallback();\n                _this._animationFrame = null;\n            });\n        }\n    };\n    CursorBlinkStateManager.prototype._restartInterval = function (timeToStart) {\n        var _this = this;\n        if (timeToStart === void 0) { timeToStart = BLINK_INTERVAL; }\n        if (this._blinkInterval) {\n            window.clearInterval(this._blinkInterval);\n        }\n        this._blinkStartTimeout = setTimeout(function () {\n            if (_this._animationTimeRestarted) {\n                var time = BLINK_INTERVAL - (Date.now() - _this._animationTimeRestarted);\n                _this._animationTimeRestarted = null;\n                if (time > 0) {\n                    _this._restartInterval(time);\n                    return;\n                }\n            }\n            _this.isCursorVisible = false;\n            _this._animationFrame = window.requestAnimationFrame(function () {\n                _this._renderCallback();\n                _this._animationFrame = null;\n            });\n            _this._blinkInterval = setInterval(function () {\n                if (_this._animationTimeRestarted) {\n                    var time = BLINK_INTERVAL - (Date.now() - _this._animationTimeRestarted);\n                    _this._animationTimeRestarted = null;\n                    _this._restartInterval(time);\n                    return;\n                }\n                _this.isCursorVisible = !_this.isCursorVisible;\n                _this._animationFrame = window.requestAnimationFrame(function () {\n                    _this._renderCallback();\n                    _this._animationFrame = null;\n                });\n            }, BLINK_INTERVAL);\n        }, timeToStart);\n    };\n    CursorBlinkStateManager.prototype.pause = function () {\n        this.isCursorVisible = true;\n        if (this._blinkInterval) {\n            window.clearInterval(this._blinkInterval);\n            this._blinkInterval = null;\n        }\n        if (this._blinkStartTimeout) {\n            window.clearTimeout(this._blinkStartTimeout);\n            this._blinkStartTimeout = null;\n        }\n        if (this._animationFrame) {\n            window.cancelAnimationFrame(this._animationFrame);\n            this._animationFrame = null;\n        }\n    };\n    CursorBlinkStateManager.prototype.resume = function (terminal) {\n        this._animationTimeRestarted = null;\n        this._restartInterval();\n        this.restartBlinkAnimation(terminal);\n    };\n    return CursorBlinkStateManager;\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/renderer/CursorRenderLayer.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/renderer/GridCache.js":
/*!******************************************************!*\
  !*** ./node_modules/xterm/lib/renderer/GridCache.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar GridCache = (function () {\n    function GridCache() {\n        this.cache = [];\n    }\n    GridCache.prototype.resize = function (width, height) {\n        for (var x = 0; x < width; x++) {\n            if (this.cache.length <= x) {\n                this.cache.push([]);\n            }\n            for (var y = this.cache[x].length; y < height; y++) {\n                this.cache[x].push(null);\n            }\n            this.cache[x].length = height;\n        }\n        this.cache.length = width;\n    };\n    GridCache.prototype.clear = function () {\n        for (var x = 0; x < this.cache.length; x++) {\n            for (var y = 0; y < this.cache[x].length; y++) {\n                this.cache[x][y] = null;\n            }\n        }\n    };\n    return GridCache;\n}());\nexports.GridCache = GridCache;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL0dyaWRDYWNoZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9zcmMvcmVuZGVyZXIvR3JpZENhY2hlLnRzP2YyMmEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5leHBvcnQgY2xhc3MgR3JpZENhY2hlPFQ+IHtcbiAgcHVibGljIGNhY2hlOiBUW11bXTtcblxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jYWNoZSA9IFtdO1xuICB9XG5cbiAgcHVibGljIHJlc2l6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IHZvaWQge1xuICAgIGZvciAobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoIDw9IHgpIHtcbiAgICAgICAgdGhpcy5jYWNoZS5wdXNoKFtdKTtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IHkgPSB0aGlzLmNhY2hlW3hdLmxlbmd0aDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgICAgIHRoaXMuY2FjaGVbeF0ucHVzaChudWxsKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2FjaGVbeF0ubGVuZ3RoID0gaGVpZ2h0O1xuICAgIH1cbiAgICB0aGlzLmNhY2hlLmxlbmd0aCA9IHdpZHRoO1xuICB9XG5cbiAgcHVibGljIGNsZWFyKCk6IHZvaWQge1xuICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy5jYWNoZS5sZW5ndGg7IHgrKykge1xuICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLmNhY2hlW3hdLmxlbmd0aDsgeSsrKSB7XG4gICAgICAgIHRoaXMuY2FjaGVbeF1beV0gPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOztBQUtBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBM0JBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/renderer/GridCache.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/renderer/LinkRenderLayer.js":
/*!************************************************************!*\
  !*** ./node_modules/xterm/lib/renderer/LinkRenderLayer.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BaseRenderLayer_1 = __webpack_require__(/*! ./BaseRenderLayer */ \"./node_modules/xterm/lib/renderer/BaseRenderLayer.js\");\nvar Types_1 = __webpack_require__(/*! ./atlas/Types */ \"./node_modules/xterm/lib/renderer/atlas/Types.js\");\nvar CharAtlasUtils_1 = __webpack_require__(/*! ./atlas/CharAtlasUtils */ \"./node_modules/xterm/lib/renderer/atlas/CharAtlasUtils.js\");\nvar LinkRenderLayer = (function (_super) {\n    __extends(LinkRenderLayer, _super);\n    function LinkRenderLayer(container, zIndex, colors, terminal) {\n        var _this = _super.call(this, container, 'link', zIndex, true, colors) || this;\n        _this._state = null;\n        terminal.linkifier.onLinkHover(function (e) { return _this._onLinkHover(e); });\n        terminal.linkifier.onLinkLeave(function (e) { return _this._onLinkLeave(e); });\n        return _this;\n    }\n    LinkRenderLayer.prototype.resize = function (terminal, dim) {\n        _super.prototype.resize.call(this, terminal, dim);\n        this._state = null;\n    };\n    LinkRenderLayer.prototype.reset = function (terminal) {\n        this._clearCurrentLink();\n    };\n    LinkRenderLayer.prototype._clearCurrentLink = function () {\n        if (this._state) {\n            this.clearCells(this._state.x1, this._state.y1, this._state.cols - this._state.x1, 1);\n            var middleRowCount = this._state.y2 - this._state.y1 - 1;\n            if (middleRowCount > 0) {\n                this.clearCells(0, this._state.y1 + 1, this._state.cols, middleRowCount);\n            }\n            this.clearCells(0, this._state.y2, this._state.x2, 1);\n            this._state = null;\n        }\n    };\n    LinkRenderLayer.prototype._onLinkHover = function (e) {\n        if (e.fg === Types_1.INVERTED_DEFAULT_COLOR) {\n            this._ctx.fillStyle = this._colors.background.css;\n        }\n        else if (CharAtlasUtils_1.is256Color(e.fg)) {\n            this._ctx.fillStyle = this._colors.ansi[e.fg].css;\n        }\n        else {\n            this._ctx.fillStyle = this._colors.foreground.css;\n        }\n        if (e.y1 === e.y2) {\n            this.fillBottomLineAtCells(e.x1, e.y1, e.x2 - e.x1);\n        }\n        else {\n            this.fillBottomLineAtCells(e.x1, e.y1, e.cols - e.x1);\n            for (var y = e.y1 + 1; y < e.y2; y++) {\n                this.fillBottomLineAtCells(0, y, e.cols);\n            }\n            this.fillBottomLineAtCells(0, e.y2, e.x2);\n        }\n        this._state = e;\n    };\n    LinkRenderLayer.prototype._onLinkLeave = function (e) {\n        this._clearCurrentLink();\n    };\n    return LinkRenderLayer;\n}(BaseRenderLayer_1.BaseRenderLayer));\nexports.LinkRenderLayer = LinkRenderLayer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL0xpbmtSZW5kZXJMYXllci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9zcmMvcmVuZGVyZXIvTGlua1JlbmRlckxheWVyLnRzP2M5MzYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJTGlua2lmaWVyRXZlbnQsIElUZXJtaW5hbCwgSUxpbmtpZmllckFjY2Vzc29yIH0gZnJvbSAnLi4vVHlwZXMnO1xuaW1wb3J0IHsgSVJlbmRlckRpbWVuc2lvbnMgfSBmcm9tICcuL1R5cGVzJztcbmltcG9ydCB7IEJhc2VSZW5kZXJMYXllciB9IGZyb20gJy4vQmFzZVJlbmRlckxheWVyJztcbmltcG9ydCB7IElOVkVSVEVEX0RFRkFVTFRfQ09MT1IgfSBmcm9tICcuL2F0bGFzL1R5cGVzJztcbmltcG9ydCB7IGlzMjU2Q29sb3IgfSBmcm9tICcuL2F0bGFzL0NoYXJBdGxhc1V0aWxzJztcbmltcG9ydCB7IElDb2xvclNldCB9IGZyb20gJy4uL3VpL1R5cGVzJztcblxuZXhwb3J0IGNsYXNzIExpbmtSZW5kZXJMYXllciBleHRlbmRzIEJhc2VSZW5kZXJMYXllciB7XG4gIHByaXZhdGUgX3N0YXRlOiBJTGlua2lmaWVyRXZlbnQgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHpJbmRleDogbnVtYmVyLCBjb2xvcnM6IElDb2xvclNldCwgdGVybWluYWw6IElMaW5raWZpZXJBY2Nlc3Nvcikge1xuICAgIHN1cGVyKGNvbnRhaW5lciwgJ2xpbmsnLCB6SW5kZXgsIHRydWUsIGNvbG9ycyk7XG4gICAgdGVybWluYWwubGlua2lmaWVyLm9uTGlua0hvdmVyKGUgPT4gdGhpcy5fb25MaW5rSG92ZXIoZSkpO1xuICAgIHRlcm1pbmFsLmxpbmtpZmllci5vbkxpbmtMZWF2ZShlID0+IHRoaXMuX29uTGlua0xlYXZlKGUpKTtcbiAgfVxuXG4gIHB1YmxpYyByZXNpemUodGVybWluYWw6IElUZXJtaW5hbCwgZGltOiBJUmVuZGVyRGltZW5zaW9ucyk6IHZvaWQge1xuICAgIHN1cGVyLnJlc2l6ZSh0ZXJtaW5hbCwgZGltKTtcbiAgICAvLyBSZXNpemluZyB0aGUgY2FudmFzIGRpc2NhcmRzIHRoZSBjb250ZW50cyBvZiB0aGUgY2FudmFzIHNvIGNsZWFyIHN0YXRlXG4gICAgdGhpcy5fc3RhdGUgPSBudWxsO1xuICB9XG5cbiAgcHVibGljIHJlc2V0KHRlcm1pbmFsOiBJVGVybWluYWwpOiB2b2lkIHtcbiAgICB0aGlzLl9jbGVhckN1cnJlbnRMaW5rKCk7XG4gIH1cblxuICBwcml2YXRlIF9jbGVhckN1cnJlbnRMaW5rKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9zdGF0ZSkge1xuICAgICAgdGhpcy5jbGVhckNlbGxzKHRoaXMuX3N0YXRlLngxLCB0aGlzLl9zdGF0ZS55MSwgdGhpcy5fc3RhdGUuY29scyAtIHRoaXMuX3N0YXRlLngxLCAxKTtcbiAgICAgIGNvbnN0IG1pZGRsZVJvd0NvdW50ID0gdGhpcy5fc3RhdGUueTIgLSB0aGlzLl9zdGF0ZS55MSAtIDE7XG4gICAgICBpZiAobWlkZGxlUm93Q291bnQgPiAwKSB7XG4gICAgICAgIHRoaXMuY2xlYXJDZWxscygwLCB0aGlzLl9zdGF0ZS55MSArIDEsIHRoaXMuX3N0YXRlLmNvbHMsIG1pZGRsZVJvd0NvdW50KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2xlYXJDZWxscygwLCB0aGlzLl9zdGF0ZS55MiwgdGhpcy5fc3RhdGUueDIsIDEpO1xuICAgICAgdGhpcy5fc3RhdGUgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX29uTGlua0hvdmVyKGU6IElMaW5raWZpZXJFdmVudCk6IHZvaWQge1xuICAgIGlmIChlLmZnID09PSBJTlZFUlRFRF9ERUZBVUxUX0NPTE9SKSB7XG4gICAgICB0aGlzLl9jdHguZmlsbFN0eWxlID0gdGhpcy5fY29sb3JzLmJhY2tncm91bmQuY3NzO1xuICAgIH0gZWxzZSBpZiAoaXMyNTZDb2xvcihlLmZnKSkge1xuICAgICAgLy8gMjU2IGNvbG9yIHN1cHBvcnRcbiAgICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSB0aGlzLl9jb2xvcnMuYW5zaVtlLmZnXS5jc3M7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSB0aGlzLl9jb2xvcnMuZm9yZWdyb3VuZC5jc3M7XG4gICAgfVxuXG4gICAgaWYgKGUueTEgPT09IGUueTIpIHtcbiAgICAgIC8vIFNpbmdsZSBsaW5lIGxpbmtcbiAgICAgIHRoaXMuZmlsbEJvdHRvbUxpbmVBdENlbGxzKGUueDEsIGUueTEsIGUueDIgLSBlLngxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTXVsdGktbGluZSBsaW5rXG4gICAgICB0aGlzLmZpbGxCb3R0b21MaW5lQXRDZWxscyhlLngxLCBlLnkxLCBlLmNvbHMgLSBlLngxKTtcbiAgICAgIGZvciAobGV0IHkgPSBlLnkxICsgMTsgeSA8IGUueTI7IHkrKykge1xuICAgICAgICB0aGlzLmZpbGxCb3R0b21MaW5lQXRDZWxscygwLCB5LCBlLmNvbHMpO1xuICAgICAgfVxuICAgICAgdGhpcy5maWxsQm90dG9tTGluZUF0Q2VsbHMoMCwgZS55MiwgZS54Mik7XG4gICAgfVxuICAgIHRoaXMuX3N0YXRlID0gZTtcbiAgfVxuXG4gIHByaXZhdGUgX29uTGlua0xlYXZlKGU6IElMaW5raWZpZXJFdmVudCk6IHZvaWQge1xuICAgIHRoaXMuX2NsZWFyQ3VycmVudExpbmsoKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFHQTtBQUFBO0FBR0E7QUFBQTtBQUZBO0FBSUE7QUFDQTs7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQTFEQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/renderer/LinkRenderLayer.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/renderer/RenderCoordinator.js":
/*!**************************************************************!*\
  !*** ./node_modules/xterm/lib/renderer/RenderCoordinator.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar RenderDebouncer_1 = __webpack_require__(/*! ../ui/RenderDebouncer */ \"./node_modules/xterm/lib/ui/RenderDebouncer.js\");\nvar EventEmitter2_1 = __webpack_require__(/*! ../common/EventEmitter2 */ \"./node_modules/xterm/lib/common/EventEmitter2.js\");\nvar Lifecycle_1 = __webpack_require__(/*! ../common/Lifecycle */ \"./node_modules/xterm/lib/common/Lifecycle.js\");\nvar ScreenDprMonitor_1 = __webpack_require__(/*! ../ui/ScreenDprMonitor */ \"./node_modules/xterm/lib/ui/ScreenDprMonitor.js\");\nvar Lifecycle_2 = __webpack_require__(/*! ../ui/Lifecycle */ \"./node_modules/xterm/lib/ui/Lifecycle.js\");\nvar RenderCoordinator = (function (_super) {\n    __extends(RenderCoordinator, _super);\n    function RenderCoordinator(_renderer, _rowCount, screenElement) {\n        var _this = _super.call(this) || this;\n        _this._renderer = _renderer;\n        _this._rowCount = _rowCount;\n        _this._isPaused = false;\n        _this._needsFullRefresh = false;\n        _this._canvasWidth = 0;\n        _this._canvasHeight = 0;\n        _this._onDimensionsChange = new EventEmitter2_1.EventEmitter2();\n        _this._onRender = new EventEmitter2_1.EventEmitter2();\n        _this._onRefreshRequest = new EventEmitter2_1.EventEmitter2();\n        _this._renderDebouncer = new RenderDebouncer_1.RenderDebouncer(function (start, end) { return _this._renderRows(start, end); });\n        _this.register(_this._renderDebouncer);\n        _this._screenDprMonitor = new ScreenDprMonitor_1.ScreenDprMonitor();\n        _this._screenDprMonitor.setListener(function () { return _this._renderer.onDevicePixelRatioChange(); });\n        _this.register(_this._screenDprMonitor);\n        _this.register(Lifecycle_2.addDisposableDomListener(window, 'resize', function () { return _this._renderer.onDevicePixelRatioChange(); }));\n        if ('IntersectionObserver' in window) {\n            var observer_1 = new IntersectionObserver(function (e) { return _this._onIntersectionChange(e[e.length - 1]); }, { threshold: 0 });\n            observer_1.observe(screenElement);\n            _this.register({ dispose: function () { return observer_1.disconnect(); } });\n        }\n        return _this;\n    }\n    Object.defineProperty(RenderCoordinator.prototype, \"onDimensionsChange\", {\n        get: function () { return this._onDimensionsChange.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RenderCoordinator.prototype, \"onRender\", {\n        get: function () { return this._onRender.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RenderCoordinator.prototype, \"onRefreshRequest\", {\n        get: function () { return this._onRefreshRequest.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RenderCoordinator.prototype, \"dimensions\", {\n        get: function () { return this._renderer.dimensions; },\n        enumerable: true,\n        configurable: true\n    });\n    RenderCoordinator.prototype._onIntersectionChange = function (entry) {\n        this._isPaused = entry.intersectionRatio === 0;\n        if (!this._isPaused && this._needsFullRefresh) {\n            this.refreshRows(0, this._rowCount - 1);\n            this._needsFullRefresh = false;\n        }\n    };\n    RenderCoordinator.prototype.refreshRows = function (start, end) {\n        if (this._isPaused) {\n            this._needsFullRefresh = true;\n            return;\n        }\n        this._renderDebouncer.refresh(start, end, this._rowCount);\n    };\n    RenderCoordinator.prototype._renderRows = function (start, end) {\n        this._renderer.renderRows(start, end);\n        this._onRender.fire({ start: start, end: end });\n    };\n    RenderCoordinator.prototype.resize = function (cols, rows) {\n        this._rowCount = rows;\n        this._fireOnCanvasResize();\n    };\n    RenderCoordinator.prototype.changeOptions = function () {\n        this._renderer.onOptionsChanged();\n        this._fireOnCanvasResize();\n    };\n    RenderCoordinator.prototype._fireOnCanvasResize = function () {\n        if (this._renderer.dimensions.canvasWidth === this._canvasWidth && this._renderer.dimensions.canvasHeight === this._canvasHeight) {\n            return;\n        }\n        this._onDimensionsChange.fire(this._renderer.dimensions);\n    };\n    RenderCoordinator.prototype.setRenderer = function (renderer) {\n        this._renderer.dispose();\n        this._renderer = renderer;\n    };\n    RenderCoordinator.prototype._fullRefresh = function () {\n        if (this._isPaused) {\n            this._needsFullRefresh = true;\n        }\n        else {\n            this.refreshRows(0, this._rowCount);\n        }\n    };\n    RenderCoordinator.prototype.setColors = function (colors) {\n        this._renderer.setColors(colors);\n        this._fullRefresh();\n    };\n    RenderCoordinator.prototype.onDevicePixelRatioChange = function () {\n        this._renderer.onDevicePixelRatioChange();\n    };\n    RenderCoordinator.prototype.onResize = function (cols, rows) {\n        this._renderer.onResize(cols, rows);\n        this._fullRefresh();\n    };\n    RenderCoordinator.prototype.onCharSizeChanged = function () {\n        this._renderer.onCharSizeChanged();\n    };\n    RenderCoordinator.prototype.onBlur = function () {\n        this._renderer.onBlur();\n    };\n    RenderCoordinator.prototype.onFocus = function () {\n        this._renderer.onFocus();\n    };\n    RenderCoordinator.prototype.onSelectionChanged = function (start, end, columnSelectMode) {\n        this._renderer.onSelectionChanged(start, end, columnSelectMode);\n    };\n    RenderCoordinator.prototype.onCursorMove = function () {\n        this._renderer.onCursorMove();\n    };\n    RenderCoordinator.prototype.onOptionsChanged = function () {\n        this._renderer.onOptionsChanged();\n    };\n    RenderCoordinator.prototype.clear = function () {\n        this._renderer.clear();\n    };\n    RenderCoordinator.prototype.registerCharacterJoiner = function (handler) {\n        return this._renderer.registerCharacterJoiner(handler);\n    };\n    RenderCoordinator.prototype.deregisterCharacterJoiner = function (joinerId) {\n        return this._renderer.deregisterCharacterJoiner(joinerId);\n    };\n    return RenderCoordinator;\n}(Lifecycle_1.Disposable));\nexports.RenderCoordinator = RenderCoordinator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/renderer/RenderCoordinator.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/renderer/Renderer.js":
/*!*****************************************************!*\
  !*** ./node_modules/xterm/lib/renderer/Renderer.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TextRenderLayer_1 = __webpack_require__(/*! ./TextRenderLayer */ \"./node_modules/xterm/lib/renderer/TextRenderLayer.js\");\nvar SelectionRenderLayer_1 = __webpack_require__(/*! ./SelectionRenderLayer */ \"./node_modules/xterm/lib/renderer/SelectionRenderLayer.js\");\nvar CursorRenderLayer_1 = __webpack_require__(/*! ./CursorRenderLayer */ \"./node_modules/xterm/lib/renderer/CursorRenderLayer.js\");\nvar LinkRenderLayer_1 = __webpack_require__(/*! ./LinkRenderLayer */ \"./node_modules/xterm/lib/renderer/LinkRenderLayer.js\");\nvar CharacterJoinerRegistry_1 = __webpack_require__(/*! ../renderer/CharacterJoinerRegistry */ \"./node_modules/xterm/lib/renderer/CharacterJoinerRegistry.js\");\nvar Lifecycle_1 = __webpack_require__(/*! ../common/Lifecycle */ \"./node_modules/xterm/lib/common/Lifecycle.js\");\nvar Renderer = (function (_super) {\n    __extends(Renderer, _super);\n    function Renderer(_terminal, _colors) {\n        var _this = _super.call(this) || this;\n        _this._terminal = _terminal;\n        _this._colors = _colors;\n        var allowTransparency = _this._terminal.options.allowTransparency;\n        _this._characterJoinerRegistry = new CharacterJoinerRegistry_1.CharacterJoinerRegistry(_terminal);\n        _this._renderLayers = [\n            new TextRenderLayer_1.TextRenderLayer(_this._terminal.screenElement, 0, _this._colors, _this._characterJoinerRegistry, allowTransparency),\n            new SelectionRenderLayer_1.SelectionRenderLayer(_this._terminal.screenElement, 1, _this._colors),\n            new LinkRenderLayer_1.LinkRenderLayer(_this._terminal.screenElement, 2, _this._colors, _this._terminal),\n            new CursorRenderLayer_1.CursorRenderLayer(_this._terminal.screenElement, 3, _this._colors)\n        ];\n        _this.dimensions = {\n            scaledCharWidth: null,\n            scaledCharHeight: null,\n            scaledCellWidth: null,\n            scaledCellHeight: null,\n            scaledCharLeft: null,\n            scaledCharTop: null,\n            scaledCanvasWidth: null,\n            scaledCanvasHeight: null,\n            canvasWidth: null,\n            canvasHeight: null,\n            actualCellWidth: null,\n            actualCellHeight: null\n        };\n        _this._devicePixelRatio = window.devicePixelRatio;\n        _this._updateDimensions();\n        _this.onOptionsChanged();\n        return _this;\n    }\n    Renderer.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._renderLayers.forEach(function (l) { return l.dispose(); });\n    };\n    Renderer.prototype.onDevicePixelRatioChange = function () {\n        if (this._devicePixelRatio !== window.devicePixelRatio) {\n            this._devicePixelRatio = window.devicePixelRatio;\n            this.onResize(this._terminal.cols, this._terminal.rows);\n        }\n    };\n    Renderer.prototype.setColors = function (colors) {\n        var _this = this;\n        this._colors = colors;\n        this._renderLayers.forEach(function (l) {\n            l.setColors(_this._terminal, _this._colors);\n            l.reset(_this._terminal);\n        });\n    };\n    Renderer.prototype.onResize = function (cols, rows) {\n        var _this = this;\n        this._updateDimensions();\n        this._renderLayers.forEach(function (l) { return l.resize(_this._terminal, _this.dimensions); });\n        this._terminal.screenElement.style.width = this.dimensions.canvasWidth + \"px\";\n        this._terminal.screenElement.style.height = this.dimensions.canvasHeight + \"px\";\n    };\n    Renderer.prototype.onCharSizeChanged = function () {\n        this.onResize(this._terminal.cols, this._terminal.rows);\n    };\n    Renderer.prototype.onBlur = function () {\n        var _this = this;\n        this._runOperation(function (l) { return l.onBlur(_this._terminal); });\n    };\n    Renderer.prototype.onFocus = function () {\n        var _this = this;\n        this._runOperation(function (l) { return l.onFocus(_this._terminal); });\n    };\n    Renderer.prototype.onSelectionChanged = function (start, end, columnSelectMode) {\n        var _this = this;\n        if (columnSelectMode === void 0) { columnSelectMode = false; }\n        this._runOperation(function (l) { return l.onSelectionChanged(_this._terminal, start, end, columnSelectMode); });\n    };\n    Renderer.prototype.onCursorMove = function () {\n        var _this = this;\n        this._runOperation(function (l) { return l.onCursorMove(_this._terminal); });\n    };\n    Renderer.prototype.onOptionsChanged = function () {\n        var _this = this;\n        this._runOperation(function (l) { return l.onOptionsChanged(_this._terminal); });\n    };\n    Renderer.prototype.clear = function () {\n        var _this = this;\n        this._runOperation(function (l) { return l.reset(_this._terminal); });\n    };\n    Renderer.prototype._runOperation = function (operation) {\n        this._renderLayers.forEach(function (l) { return operation(l); });\n    };\n    Renderer.prototype.renderRows = function (start, end) {\n        var _this = this;\n        this._renderLayers.forEach(function (l) { return l.onGridChanged(_this._terminal, start, end); });\n    };\n    Renderer.prototype._updateDimensions = function () {\n        if (!this._terminal.charMeasure.width || !this._terminal.charMeasure.height) {\n            return;\n        }\n        this.dimensions.scaledCharWidth = Math.floor(this._terminal.charMeasure.width * window.devicePixelRatio);\n        this.dimensions.scaledCharHeight = Math.ceil(this._terminal.charMeasure.height * window.devicePixelRatio);\n        this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._terminal.options.lineHeight);\n        this.dimensions.scaledCharTop = this._terminal.options.lineHeight === 1 ? 0 : Math.round((this.dimensions.scaledCellHeight - this.dimensions.scaledCharHeight) / 2);\n        this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._terminal.options.letterSpacing);\n        this.dimensions.scaledCharLeft = Math.floor(this._terminal.options.letterSpacing / 2);\n        this.dimensions.scaledCanvasHeight = this._terminal.rows * this.dimensions.scaledCellHeight;\n        this.dimensions.scaledCanvasWidth = this._terminal.cols * this.dimensions.scaledCellWidth;\n        this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / window.devicePixelRatio);\n        this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / window.devicePixelRatio);\n        this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._terminal.rows;\n        this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._terminal.cols;\n    };\n    Renderer.prototype.registerCharacterJoiner = function (handler) {\n        return this._characterJoinerRegistry.registerCharacterJoiner(handler);\n    };\n    Renderer.prototype.deregisterCharacterJoiner = function (joinerId) {\n        return this._characterJoinerRegistry.deregisterCharacterJoiner(joinerId);\n    };\n    return Renderer;\n}(Lifecycle_1.Disposable));\nexports.Renderer = Renderer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/renderer/Renderer.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/renderer/SelectionRenderLayer.js":
/*!*****************************************************************!*\
  !*** ./node_modules/xterm/lib/renderer/SelectionRenderLayer.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BaseRenderLayer_1 = __webpack_require__(/*! ./BaseRenderLayer */ \"./node_modules/xterm/lib/renderer/BaseRenderLayer.js\");\nvar SelectionRenderLayer = (function (_super) {\n    __extends(SelectionRenderLayer, _super);\n    function SelectionRenderLayer(container, zIndex, colors) {\n        var _this = _super.call(this, container, 'selection', zIndex, true, colors) || this;\n        _this._clearState();\n        return _this;\n    }\n    SelectionRenderLayer.prototype._clearState = function () {\n        this._state = {\n            start: null,\n            end: null,\n            columnSelectMode: null,\n            ydisp: null\n        };\n    };\n    SelectionRenderLayer.prototype.resize = function (terminal, dim) {\n        _super.prototype.resize.call(this, terminal, dim);\n        this._clearState();\n    };\n    SelectionRenderLayer.prototype.reset = function (terminal) {\n        if (this._state.start && this._state.end) {\n            this._clearState();\n            this.clearAll();\n        }\n    };\n    SelectionRenderLayer.prototype.onSelectionChanged = function (terminal, start, end, columnSelectMode) {\n        if (!this._didStateChange(start, end, columnSelectMode, terminal.buffer.ydisp)) {\n            return;\n        }\n        this.clearAll();\n        if (!start || !end) {\n            this._clearState();\n            return;\n        }\n        var viewportStartRow = start[1] - terminal.buffer.ydisp;\n        var viewportEndRow = end[1] - terminal.buffer.ydisp;\n        var viewportCappedStartRow = Math.max(viewportStartRow, 0);\n        var viewportCappedEndRow = Math.min(viewportEndRow, terminal.rows - 1);\n        if (viewportCappedStartRow >= terminal.rows || viewportCappedEndRow < 0) {\n            return;\n        }\n        this._ctx.fillStyle = this._colors.selection.css;\n        if (columnSelectMode) {\n            var startCol = start[0];\n            var width = end[0] - startCol;\n            var height = viewportCappedEndRow - viewportCappedStartRow + 1;\n            this.fillCells(startCol, viewportCappedStartRow, width, height);\n        }\n        else {\n            var startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\n            var startRowEndCol = viewportCappedStartRow === viewportCappedEndRow ? end[0] : terminal.cols;\n            this.fillCells(startCol, viewportCappedStartRow, startRowEndCol - startCol, 1);\n            var middleRowsCount = Math.max(viewportCappedEndRow - viewportCappedStartRow - 1, 0);\n            this.fillCells(0, viewportCappedStartRow + 1, terminal.cols, middleRowsCount);\n            if (viewportCappedStartRow !== viewportCappedEndRow) {\n                var endCol = viewportEndRow === viewportCappedEndRow ? end[0] : terminal.cols;\n                this.fillCells(0, viewportCappedEndRow, endCol, 1);\n            }\n        }\n        this._state.start = [start[0], start[1]];\n        this._state.end = [end[0], end[1]];\n        this._state.columnSelectMode = columnSelectMode;\n        this._state.ydisp = terminal.buffer.ydisp;\n    };\n    SelectionRenderLayer.prototype._didStateChange = function (start, end, columnSelectMode, ydisp) {\n        return !this._areCoordinatesEqual(start, this._state.start) ||\n            !this._areCoordinatesEqual(end, this._state.end) ||\n            columnSelectMode !== this._state.columnSelectMode ||\n            ydisp !== this._state.ydisp;\n    };\n    SelectionRenderLayer.prototype._areCoordinatesEqual = function (coord1, coord2) {\n        if (!coord1 || !coord2) {\n            return false;\n        }\n        return coord1[0] === coord2[0] && coord1[1] === coord2[1];\n    };\n    return SelectionRenderLayer;\n}(BaseRenderLayer_1.BaseRenderLayer));\nexports.SelectionRenderLayer = SelectionRenderLayer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL1NlbGVjdGlvblJlbmRlckxheWVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL3NyYy9yZW5kZXJlci9TZWxlY3Rpb25SZW5kZXJMYXllci50cz80NTNkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSVRlcm1pbmFsIH0gZnJvbSAnLi4vVHlwZXMnO1xuaW1wb3J0IHsgSVJlbmRlckRpbWVuc2lvbnMgfSBmcm9tICcuL1R5cGVzJztcbmltcG9ydCB7IEJhc2VSZW5kZXJMYXllciB9IGZyb20gJy4vQmFzZVJlbmRlckxheWVyJztcbmltcG9ydCB7IElDb2xvclNldCB9IGZyb20gJy4uL3VpL1R5cGVzJztcblxuaW50ZXJmYWNlIElTZWxlY3Rpb25TdGF0ZSB7XG4gIHN0YXJ0OiBbbnVtYmVyLCBudW1iZXJdO1xuICBlbmQ6IFtudW1iZXIsIG51bWJlcl07XG4gIGNvbHVtblNlbGVjdE1vZGU6IGJvb2xlYW47XG4gIHlkaXNwOiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBTZWxlY3Rpb25SZW5kZXJMYXllciBleHRlbmRzIEJhc2VSZW5kZXJMYXllciB7XG4gIHByaXZhdGUgX3N0YXRlOiBJU2VsZWN0aW9uU3RhdGU7XG5cbiAgY29uc3RydWN0b3IoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgekluZGV4OiBudW1iZXIsIGNvbG9yczogSUNvbG9yU2V0KSB7XG4gICAgc3VwZXIoY29udGFpbmVyLCAnc2VsZWN0aW9uJywgekluZGV4LCB0cnVlLCBjb2xvcnMpO1xuICAgIHRoaXMuX2NsZWFyU3RhdGUoKTtcbiAgfVxuXG4gIHByaXZhdGUgX2NsZWFyU3RhdGUoKTogdm9pZCB7XG4gICAgdGhpcy5fc3RhdGUgPSB7XG4gICAgICBzdGFydDogbnVsbCxcbiAgICAgIGVuZDogbnVsbCxcbiAgICAgIGNvbHVtblNlbGVjdE1vZGU6IG51bGwsXG4gICAgICB5ZGlzcDogbnVsbFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgcmVzaXplKHRlcm1pbmFsOiBJVGVybWluYWwsIGRpbTogSVJlbmRlckRpbWVuc2lvbnMpOiB2b2lkIHtcbiAgICBzdXBlci5yZXNpemUodGVybWluYWwsIGRpbSk7XG4gICAgLy8gUmVzaXppbmcgdGhlIGNhbnZhcyBkaXNjYXJkcyB0aGUgY29udGVudHMgb2YgdGhlIGNhbnZhcyBzbyBjbGVhciBzdGF0ZVxuICAgIHRoaXMuX2NsZWFyU3RhdGUoKTtcbiAgfVxuXG4gIHB1YmxpYyByZXNldCh0ZXJtaW5hbDogSVRlcm1pbmFsKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX3N0YXRlLnN0YXJ0ICYmIHRoaXMuX3N0YXRlLmVuZCkge1xuICAgICAgdGhpcy5fY2xlYXJTdGF0ZSgpO1xuICAgICAgdGhpcy5jbGVhckFsbCgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBvblNlbGVjdGlvbkNoYW5nZWQodGVybWluYWw6IElUZXJtaW5hbCwgc3RhcnQ6IFtudW1iZXIsIG51bWJlcl0sIGVuZDogW251bWJlciwgbnVtYmVyXSwgY29sdW1uU2VsZWN0TW9kZTogYm9vbGVhbik6IHZvaWQge1xuICAgIC8vIFNlbGVjdGlvbiBoYXMgbm90IGNoYW5nZWRcbiAgICBpZiAoIXRoaXMuX2RpZFN0YXRlQ2hhbmdlKHN0YXJ0LCBlbmQsIGNvbHVtblNlbGVjdE1vZGUsIHRlcm1pbmFsLmJ1ZmZlci55ZGlzcCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgYWxsIHNlbGVjdGlvbnNcbiAgICB0aGlzLmNsZWFyQWxsKCk7XG5cbiAgICAvLyBTZWxlY3Rpb24gZG9lcyBub3QgZXhpc3RcbiAgICBpZiAoIXN0YXJ0IHx8ICFlbmQpIHtcbiAgICAgIHRoaXMuX2NsZWFyU3RhdGUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBUcmFuc2xhdGUgZnJvbSBidWZmZXIgcG9zaXRpb24gdG8gdmlld3BvcnQgcG9zaXRpb25cbiAgICBjb25zdCB2aWV3cG9ydFN0YXJ0Um93ID0gc3RhcnRbMV0gLSB0ZXJtaW5hbC5idWZmZXIueWRpc3A7XG4gICAgY29uc3Qgdmlld3BvcnRFbmRSb3cgPSBlbmRbMV0gLSB0ZXJtaW5hbC5idWZmZXIueWRpc3A7XG4gICAgY29uc3Qgdmlld3BvcnRDYXBwZWRTdGFydFJvdyA9IE1hdGgubWF4KHZpZXdwb3J0U3RhcnRSb3csIDApO1xuICAgIGNvbnN0IHZpZXdwb3J0Q2FwcGVkRW5kUm93ID0gTWF0aC5taW4odmlld3BvcnRFbmRSb3csIHRlcm1pbmFsLnJvd3MgLSAxKTtcblxuICAgIC8vIE5vIG5lZWQgdG8gZHJhdyB0aGUgc2VsZWN0aW9uXG4gICAgaWYgKHZpZXdwb3J0Q2FwcGVkU3RhcnRSb3cgPj0gdGVybWluYWwucm93cyB8fCB2aWV3cG9ydENhcHBlZEVuZFJvdyA8IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9jdHguZmlsbFN0eWxlID0gdGhpcy5fY29sb3JzLnNlbGVjdGlvbi5jc3M7XG5cbiAgICBpZiAoY29sdW1uU2VsZWN0TW9kZSkge1xuICAgICAgY29uc3Qgc3RhcnRDb2wgPSBzdGFydFswXTtcbiAgICAgIGNvbnN0IHdpZHRoID0gZW5kWzBdIC0gc3RhcnRDb2w7XG4gICAgICBjb25zdCBoZWlnaHQgPSB2aWV3cG9ydENhcHBlZEVuZFJvdyAtIHZpZXdwb3J0Q2FwcGVkU3RhcnRSb3cgKyAxO1xuICAgICAgdGhpcy5maWxsQ2VsbHMoc3RhcnRDb2wsIHZpZXdwb3J0Q2FwcGVkU3RhcnRSb3csIHdpZHRoLCBoZWlnaHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBEcmF3IGZpcnN0IHJvd1xuICAgICAgY29uc3Qgc3RhcnRDb2wgPSB2aWV3cG9ydFN0YXJ0Um93ID09PSB2aWV3cG9ydENhcHBlZFN0YXJ0Um93ID8gc3RhcnRbMF0gOiAwO1xuICAgICAgY29uc3Qgc3RhcnRSb3dFbmRDb2wgPSB2aWV3cG9ydENhcHBlZFN0YXJ0Um93ID09PSB2aWV3cG9ydENhcHBlZEVuZFJvdyA/IGVuZFswXSA6IHRlcm1pbmFsLmNvbHM7XG4gICAgICB0aGlzLmZpbGxDZWxscyhzdGFydENvbCwgdmlld3BvcnRDYXBwZWRTdGFydFJvdywgc3RhcnRSb3dFbmRDb2wgLSBzdGFydENvbCwgMSk7XG5cbiAgICAgIC8vIERyYXcgbWlkZGxlIHJvd3NcbiAgICAgIGNvbnN0IG1pZGRsZVJvd3NDb3VudCA9IE1hdGgubWF4KHZpZXdwb3J0Q2FwcGVkRW5kUm93IC0gdmlld3BvcnRDYXBwZWRTdGFydFJvdyAtIDEsIDApO1xuICAgICAgdGhpcy5maWxsQ2VsbHMoMCwgdmlld3BvcnRDYXBwZWRTdGFydFJvdyArIDEsIHRlcm1pbmFsLmNvbHMsIG1pZGRsZVJvd3NDb3VudCk7XG5cbiAgICAgIC8vIERyYXcgZmluYWwgcm93XG4gICAgICBpZiAodmlld3BvcnRDYXBwZWRTdGFydFJvdyAhPT0gdmlld3BvcnRDYXBwZWRFbmRSb3cpIHtcbiAgICAgICAgLy8gT25seSBkcmF3IHZpZXdwb3J0RW5kUm93IGlmIGl0J3Mgbm90IHRoZSBzYW1lIGFzIHZpZXdwb3J0U3RhcnRSb3dcbiAgICAgICAgY29uc3QgZW5kQ29sID0gdmlld3BvcnRFbmRSb3cgPT09IHZpZXdwb3J0Q2FwcGVkRW5kUm93ID8gZW5kWzBdIDogdGVybWluYWwuY29scztcbiAgICAgICAgdGhpcy5maWxsQ2VsbHMoMCwgdmlld3BvcnRDYXBwZWRFbmRSb3csIGVuZENvbCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2F2ZSBzdGF0ZSBmb3IgbmV4dCByZW5kZXJcbiAgICB0aGlzLl9zdGF0ZS5zdGFydCA9IFtzdGFydFswXSwgc3RhcnRbMV1dO1xuICAgIHRoaXMuX3N0YXRlLmVuZCA9IFtlbmRbMF0sIGVuZFsxXV07XG4gICAgdGhpcy5fc3RhdGUuY29sdW1uU2VsZWN0TW9kZSA9IGNvbHVtblNlbGVjdE1vZGU7XG4gICAgdGhpcy5fc3RhdGUueWRpc3AgPSB0ZXJtaW5hbC5idWZmZXIueWRpc3A7XG4gIH1cblxuICBwcml2YXRlIF9kaWRTdGF0ZUNoYW5nZShzdGFydDogW251bWJlciwgbnVtYmVyXSwgZW5kOiBbbnVtYmVyLCBudW1iZXJdLCBjb2x1bW5TZWxlY3RNb2RlOiBib29sZWFuLCB5ZGlzcDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLl9hcmVDb29yZGluYXRlc0VxdWFsKHN0YXJ0LCB0aGlzLl9zdGF0ZS5zdGFydCkgfHxcbiAgICAgICF0aGlzLl9hcmVDb29yZGluYXRlc0VxdWFsKGVuZCwgdGhpcy5fc3RhdGUuZW5kKSB8fFxuICAgICAgY29sdW1uU2VsZWN0TW9kZSAhPT0gdGhpcy5fc3RhdGUuY29sdW1uU2VsZWN0TW9kZSB8fFxuICAgICAgeWRpc3AgIT09IHRoaXMuX3N0YXRlLnlkaXNwO1xuICB9XG5cbiAgcHJpdmF0ZSBfYXJlQ29vcmRpbmF0ZXNFcXVhbChjb29yZDE6IFtudW1iZXIsIG51bWJlcl0sIGNvb3JkMjogW251bWJlciwgbnVtYmVyXSk6IGJvb2xlYW4ge1xuICAgIGlmICghY29vcmQxIHx8ICFjb29yZDIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29vcmQxWzBdID09PSBjb29yZDJbMF0gJiYgY29vcmQxWzFdID09PSBjb29yZDJbMV07XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBT0E7QUFVQTtBQUFBO0FBR0E7QUFBQTtBQUVBOztBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQXRHQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/renderer/SelectionRenderLayer.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/renderer/TextRenderLayer.js":
/*!************************************************************!*\
  !*** ./node_modules/xterm/lib/renderer/TextRenderLayer.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar GridCache_1 = __webpack_require__(/*! ./GridCache */ \"./node_modules/xterm/lib/renderer/GridCache.js\");\nvar BaseRenderLayer_1 = __webpack_require__(/*! ./BaseRenderLayer */ \"./node_modules/xterm/lib/renderer/BaseRenderLayer.js\");\nvar BufferLine_1 = __webpack_require__(/*! ../core/buffer/BufferLine */ \"./node_modules/xterm/lib/core/buffer/BufferLine.js\");\nvar CharacterJoinerRegistry_1 = __webpack_require__(/*! ./CharacterJoinerRegistry */ \"./node_modules/xterm/lib/renderer/CharacterJoinerRegistry.js\");\nvar TextRenderLayer = (function (_super) {\n    __extends(TextRenderLayer, _super);\n    function TextRenderLayer(container, zIndex, colors, characterJoinerRegistry, alpha) {\n        var _this = _super.call(this, container, 'text', zIndex, alpha, colors) || this;\n        _this._characterOverlapCache = {};\n        _this._workCell = new BufferLine_1.CellData();\n        _this._state = new GridCache_1.GridCache();\n        _this._characterJoinerRegistry = characterJoinerRegistry;\n        return _this;\n    }\n    TextRenderLayer.prototype.resize = function (terminal, dim) {\n        _super.prototype.resize.call(this, terminal, dim);\n        var terminalFont = this._getFont(terminal, false, false);\n        if (this._characterWidth !== dim.scaledCharWidth || this._characterFont !== terminalFont) {\n            this._characterWidth = dim.scaledCharWidth;\n            this._characterFont = terminalFont;\n            this._characterOverlapCache = {};\n        }\n        this._state.clear();\n        this._state.resize(terminal.cols, terminal.rows);\n    };\n    TextRenderLayer.prototype.reset = function (terminal) {\n        this._state.clear();\n        this.clearAll();\n    };\n    TextRenderLayer.prototype._forEachCell = function (terminal, firstRow, lastRow, joinerRegistry, callback) {\n        for (var y = firstRow; y <= lastRow; y++) {\n            var row = y + terminal.buffer.ydisp;\n            var line = terminal.buffer.lines.get(row);\n            var joinedRanges = joinerRegistry ? joinerRegistry.getJoinedCharacters(row) : [];\n            for (var x = 0; x < terminal.cols; x++) {\n                line.loadCell(x, this._workCell);\n                var cell = this._workCell;\n                var isJoined = false;\n                var lastCharX = x;\n                if (cell.getWidth() === 0) {\n                    continue;\n                }\n                if (joinedRanges.length > 0 && x === joinedRanges[0][0]) {\n                    isJoined = true;\n                    var range = joinedRanges.shift();\n                    cell = new CharacterJoinerRegistry_1.JoinedCellData(this._workCell, line.translateToString(true, range[0], range[1]), range[1] - range[0]);\n                    lastCharX = range[1] - 1;\n                }\n                if (!isJoined && this._isOverlapping(cell)) {\n                    if (lastCharX < line.length - 1 && line.getCodePoint(lastCharX + 1) === BufferLine_1.NULL_CELL_CODE) {\n                        cell.content &= ~12582912;\n                        cell.content |= 2 << 22;\n                    }\n                }\n                callback(cell, x, y);\n                x = lastCharX;\n            }\n        }\n    };\n    TextRenderLayer.prototype._drawBackground = function (terminal, firstRow, lastRow) {\n        var _this = this;\n        var ctx = this._ctx;\n        var cols = terminal.cols;\n        var startX = 0;\n        var startY = 0;\n        var prevFillStyle = null;\n        ctx.save();\n        this._forEachCell(terminal, firstRow, lastRow, null, function (cell, x, y) {\n            var nextFillStyle = null;\n            if (cell.isInverse()) {\n                if (cell.isFgDefault()) {\n                    nextFillStyle = _this._colors.foreground.css;\n                }\n                else if (cell.isFgRGB()) {\n                    nextFillStyle = \"rgb(\" + BufferLine_1.AttributeData.toColorRGB(cell.getFgColor()).join(',') + \")\";\n                }\n                else {\n                    nextFillStyle = _this._colors.ansi[cell.getFgColor()].css;\n                }\n            }\n            else if (cell.isBgRGB()) {\n                nextFillStyle = \"rgb(\" + BufferLine_1.AttributeData.toColorRGB(cell.getBgColor()).join(',') + \")\";\n            }\n            else if (cell.isBgPalette()) {\n                nextFillStyle = _this._colors.ansi[cell.getBgColor()].css;\n            }\n            if (prevFillStyle === null) {\n                startX = x;\n                startY = y;\n            }\n            if (y !== startY) {\n                ctx.fillStyle = prevFillStyle;\n                _this.fillCells(startX, startY, cols - startX, 1);\n                startX = x;\n                startY = y;\n            }\n            else if (prevFillStyle !== nextFillStyle) {\n                ctx.fillStyle = prevFillStyle;\n                _this.fillCells(startX, startY, x - startX, 1);\n                startX = x;\n                startY = y;\n            }\n            prevFillStyle = nextFillStyle;\n        });\n        if (prevFillStyle !== null) {\n            ctx.fillStyle = prevFillStyle;\n            this.fillCells(startX, startY, cols - startX, 1);\n        }\n        ctx.restore();\n    };\n    TextRenderLayer.prototype._drawForeground = function (terminal, firstRow, lastRow) {\n        var _this = this;\n        this._forEachCell(terminal, firstRow, lastRow, this._characterJoinerRegistry, function (cell, x, y) {\n            if (cell.isInvisible()) {\n                return;\n            }\n            _this.drawChars(terminal, cell, x, y);\n            if (cell.isUnderline()) {\n                _this._ctx.save();\n                if (cell.isInverse()) {\n                    if (cell.isBgDefault()) {\n                        _this._ctx.fillStyle = _this._colors.background.css;\n                    }\n                    else if (cell.isBgRGB()) {\n                        _this._ctx.fillStyle = \"rgb(\" + BufferLine_1.AttributeData.toColorRGB(cell.getBgColor()).join(',') + \")\";\n                    }\n                    else {\n                        _this._ctx.fillStyle = _this._colors.ansi[cell.getBgColor()].css;\n                    }\n                }\n                else {\n                    if (cell.isFgDefault()) {\n                        _this._ctx.fillStyle = _this._colors.foreground.css;\n                    }\n                    else if (cell.isFgRGB()) {\n                        _this._ctx.fillStyle = \"rgb(\" + BufferLine_1.AttributeData.toColorRGB(cell.getFgColor()).join(',') + \")\";\n                    }\n                    else {\n                        var fg = cell.getFgColor();\n                        if (terminal.options.drawBoldTextInBrightColors && cell.isBold() && fg < 8) {\n                            fg += 8;\n                        }\n                        _this._ctx.fillStyle = _this._colors.ansi[fg].css;\n                    }\n                }\n                _this.fillBottomLineAtCells(x, y, cell.getWidth());\n                _this._ctx.restore();\n            }\n        });\n    };\n    TextRenderLayer.prototype.onGridChanged = function (terminal, firstRow, lastRow) {\n        if (this._state.cache.length === 0) {\n            return;\n        }\n        if (this._charAtlas) {\n            this._charAtlas.beginFrame();\n        }\n        this.clearCells(0, firstRow, terminal.cols, lastRow - firstRow + 1);\n        this._drawBackground(terminal, firstRow, lastRow);\n        this._drawForeground(terminal, firstRow, lastRow);\n    };\n    TextRenderLayer.prototype.onOptionsChanged = function (terminal) {\n        this.setTransparency(terminal, terminal.options.allowTransparency);\n    };\n    TextRenderLayer.prototype._isOverlapping = function (cell) {\n        if (cell.getWidth() !== 1) {\n            return false;\n        }\n        if (cell.getCode() < 256) {\n            return false;\n        }\n        var chars = cell.getChars();\n        if (this._characterOverlapCache.hasOwnProperty(chars)) {\n            return this._characterOverlapCache[chars];\n        }\n        this._ctx.save();\n        this._ctx.font = this._characterFont;\n        var overlaps = Math.floor(this._ctx.measureText(chars).width) > this._characterWidth;\n        this._ctx.restore();\n        this._characterOverlapCache[chars] = overlaps;\n        return overlaps;\n    };\n    return TextRenderLayer;\n}(BaseRenderLayer_1.BaseRenderLayer));\nexports.TextRenderLayer = TextRenderLayer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/renderer/TextRenderLayer.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/renderer/atlas/BaseCharAtlas.js":
/*!****************************************************************!*\
  !*** ./node_modules/xterm/lib/renderer/atlas/BaseCharAtlas.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BaseCharAtlas = (function () {\n    function BaseCharAtlas() {\n        this._didWarmUp = false;\n    }\n    BaseCharAtlas.prototype.dispose = function () { };\n    BaseCharAtlas.prototype.warmUp = function () {\n        if (!this._didWarmUp) {\n            this._doWarmUp();\n            this._didWarmUp = true;\n        }\n    };\n    BaseCharAtlas.prototype._doWarmUp = function () { };\n    BaseCharAtlas.prototype.beginFrame = function () { };\n    return BaseCharAtlas;\n}());\nexports.default = BaseCharAtlas;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL2F0bGFzL0Jhc2VDaGFyQXRsYXMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3JlbmRlcmVyL2F0bGFzL0Jhc2VDaGFyQXRsYXMudHM/NGQxZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElHbHlwaElkZW50aWZpZXIgfSBmcm9tICcuL1R5cGVzJztcbmltcG9ydCB7IElEaXNwb3NhYmxlIH0gZnJvbSAneHRlcm0nO1xuXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBCYXNlQ2hhckF0bGFzIGltcGxlbWVudHMgSURpc3Bvc2FibGUge1xuICBwcml2YXRlIF9kaWRXYXJtVXA6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHsgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIGFueSB3b3JrIG5lZWRlZCB0byB3YXJtIHRoZSBjYWNoZSBiZWZvcmUgaXQgY2FuIGJlIHVzZWQuIE1heSBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXMuXG4gICAqIEltcGxlbWVudCBfZG9XYXJtVXAgaW5zdGVhZCBpZiB5b3Ugb25seSB3YW50IHRvIGdldCBjYWxsZWQgb25jZS5cbiAgICovXG4gIHB1YmxpYyB3YXJtVXAoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl9kaWRXYXJtVXApIHtcbiAgICAgIHRoaXMuX2RvV2FybVVwKCk7XG4gICAgICB0aGlzLl9kaWRXYXJtVXAgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIGFueSB3b3JrIG5lZWRlZCB0byB3YXJtIHRoZSBjYWNoZSBiZWZvcmUgaXQgY2FuIGJlIHVzZWQuIFVzZWQgYnkgdGhlIGRlZmF1bHRcbiAgICogaW1wbGVtZW50YXRpb24gb2Ygd2FybVVwKCksIGFuZCB3aWxsIG9ubHkgYmUgY2FsbGVkIG9uY2UuXG4gICAqL1xuICBwcm90ZWN0ZWQgX2RvV2FybVVwKCk6IHZvaWQgeyB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHdlIHN0YXJ0IGRyYXdpbmcgYSBuZXcgZnJhbWUuXG4gICAqXG4gICAqIFRPRE86IFdlIHJlbHkgb24gdGhpcyBnZXR0aW5nIGNhbGxlZCBieSBUZXh0UmVuZGVyTGF5ZXIuIFRoaXMgc2hvdWxkIHJlYWxseSBiZSBjYWxsZWQgYnlcbiAgICogUmVuZGVyZXIgaW5zdGVhZCwgYnV0IHdlIG5lZWQgdG8gbWFrZSBSZW5kZXJlciB0aGUgc291cmNlLW9mLXRydXRoIGZvciB0aGUgY2hhciBhdGxhcywgaW5zdGVhZFxuICAgKiBvZiBCYXNlUmVuZGVyTGF5ZXIuXG4gICAqL1xuICBwdWJsaWMgYmVnaW5GcmFtZSgpOiB2b2lkIHsgfVxuXG4gIC8qKlxuICAgKiBNYXkgYmUgY2FsbGVkIGJlZm9yZSB3YXJtVXAgZmluaXNoZXMsIGhvd2V2ZXIgaXQgaXMgb2theSBmb3IgdGhlIGltcGxlbWVudGF0aW9uIHRvXG4gICAqIGRvIG5vdGhpbmcgYW5kIHJldHVybiBmYWxzZSBpbiB0aGF0IGNhc2UuXG4gICAqXG4gICAqIEBwYXJhbSBjdHggV2hlcmUgdG8gZHJhdyB0aGUgY2hhcmFjdGVyIG9udG8uXG4gICAqIEBwYXJhbSBnbHlwaCBJbmZvcm1hdGlvbiBhYm91dCB3aGF0IHRvIGRyYXdcbiAgICogQHBhcmFtIHggVGhlIHBvc2l0aW9uIG9uIHRoZSBjb250ZXh0IHRvIHN0YXJ0IGRyYXdpbmcgYXRcbiAgICogQHBhcmFtIHkgVGhlIHBvc2l0aW9uIG9uIHRoZSBjb250ZXh0IHRvIHN0YXJ0IGRyYXdpbmcgYXRcbiAgICogQHJldHVybnMgVGhlIHN1Y2Nlc3Mgc3RhdGUuIFRydWUgaWYgd2UgZHJldyB0aGUgY2hhcmFjdGVyLlxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGRyYXcoXG4gICAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gICAgZ2x5cGg6IElHbHlwaElkZW50aWZpZXIsXG4gICAgeDogbnVtYmVyLFxuICAgIHk6IG51bWJlclxuICApOiBib29sZWFuO1xufVxuIl0sIm1hcHBpbmdzIjoiOztBQVFBO0FBQUE7QUFDQTtBQThDQTtBQTVDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU1BO0FBU0E7QUFrQkE7QUFBQTs7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/renderer/atlas/BaseCharAtlas.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/renderer/atlas/CharAtlasCache.js":
/*!*****************************************************************!*\
  !*** ./node_modules/xterm/lib/renderer/atlas/CharAtlasCache.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CharAtlasUtils_1 = __webpack_require__(/*! ./CharAtlasUtils */ \"./node_modules/xterm/lib/renderer/atlas/CharAtlasUtils.js\");\nvar DynamicCharAtlas_1 = __webpack_require__(/*! ./DynamicCharAtlas */ \"./node_modules/xterm/lib/renderer/atlas/DynamicCharAtlas.js\");\nvar NoneCharAtlas_1 = __webpack_require__(/*! ./NoneCharAtlas */ \"./node_modules/xterm/lib/renderer/atlas/NoneCharAtlas.js\");\nvar StaticCharAtlas_1 = __webpack_require__(/*! ./StaticCharAtlas */ \"./node_modules/xterm/lib/renderer/atlas/StaticCharAtlas.js\");\nvar charAtlasImplementations = {\n    'none': NoneCharAtlas_1.default,\n    'static': StaticCharAtlas_1.default,\n    'dynamic': DynamicCharAtlas_1.default\n};\nvar charAtlasCache = [];\nfunction acquireCharAtlas(terminal, colors, scaledCharWidth, scaledCharHeight) {\n    var newConfig = CharAtlasUtils_1.generateConfig(scaledCharWidth, scaledCharHeight, terminal, colors);\n    for (var i = 0; i < charAtlasCache.length; i++) {\n        var entry = charAtlasCache[i];\n        var ownedByIndex = entry.ownedBy.indexOf(terminal);\n        if (ownedByIndex >= 0) {\n            if (CharAtlasUtils_1.configEquals(entry.config, newConfig)) {\n                return entry.atlas;\n            }\n            if (entry.ownedBy.length === 1) {\n                entry.atlas.dispose();\n                charAtlasCache.splice(i, 1);\n            }\n            else {\n                entry.ownedBy.splice(ownedByIndex, 1);\n            }\n            break;\n        }\n    }\n    for (var i = 0; i < charAtlasCache.length; i++) {\n        var entry = charAtlasCache[i];\n        if (CharAtlasUtils_1.configEquals(entry.config, newConfig)) {\n            entry.ownedBy.push(terminal);\n            return entry.atlas;\n        }\n    }\n    var newEntry = {\n        atlas: new charAtlasImplementations[terminal.options.experimentalCharAtlas](document, newConfig),\n        config: newConfig,\n        ownedBy: [terminal]\n    };\n    charAtlasCache.push(newEntry);\n    return newEntry.atlas;\n}\nexports.acquireCharAtlas = acquireCharAtlas;\nfunction removeTerminalFromCache(terminal) {\n    for (var i = 0; i < charAtlasCache.length; i++) {\n        var index = charAtlasCache[i].ownedBy.indexOf(terminal);\n        if (index !== -1) {\n            if (charAtlasCache[i].ownedBy.length === 1) {\n                charAtlasCache[i].atlas.dispose();\n                charAtlasCache.splice(i, 1);\n            }\n            else {\n                charAtlasCache[i].ownedBy.splice(index, 1);\n            }\n            break;\n        }\n    }\n}\nexports.removeTerminalFromCache = removeTerminalFromCache;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL2F0bGFzL0NoYXJBdGxhc0NhY2hlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL3NyYy9yZW5kZXJlci9hdGxhcy9DaGFyQXRsYXNDYWNoZS50cz9lYzZiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSVRlcm1pbmFsIH0gZnJvbSAnLi4vLi4vVHlwZXMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVDb25maWcsIGNvbmZpZ0VxdWFscyB9IGZyb20gJy4vQ2hhckF0bGFzVXRpbHMnO1xuaW1wb3J0IEJhc2VDaGFyQXRsYXMgZnJvbSAnLi9CYXNlQ2hhckF0bGFzJztcbmltcG9ydCBEeW5hbWljQ2hhckF0bGFzIGZyb20gJy4vRHluYW1pY0NoYXJBdGxhcyc7XG5pbXBvcnQgTm9uZUNoYXJBdGxhcyBmcm9tICcuL05vbmVDaGFyQXRsYXMnO1xuaW1wb3J0IFN0YXRpY0NoYXJBdGxhcyBmcm9tICcuL1N0YXRpY0NoYXJBdGxhcyc7XG5pbXBvcnQgeyBJQ2hhckF0bGFzQ29uZmlnIH0gZnJvbSAnLi9UeXBlcyc7XG5pbXBvcnQgeyBJQ29sb3JTZXQgfSBmcm9tICcuLi8uLi91aS9UeXBlcyc7XG5cbmNvbnN0IGNoYXJBdGxhc0ltcGxlbWVudGF0aW9ucyA9IHtcbiAgJ25vbmUnOiBOb25lQ2hhckF0bGFzLFxuICAnc3RhdGljJzogU3RhdGljQ2hhckF0bGFzLFxuICAnZHluYW1pYyc6IER5bmFtaWNDaGFyQXRsYXNcbn07XG5cbmludGVyZmFjZSBJQ2hhckF0bGFzQ2FjaGVFbnRyeSB7XG4gIGF0bGFzOiBCYXNlQ2hhckF0bGFzO1xuICBjb25maWc6IElDaGFyQXRsYXNDb25maWc7XG4gIC8vIE4uQi4gVGhpcyBpbXBsZW1lbnRhdGlvbiBwb3RlbnRpYWxseSBob2xkcyBvbnRvIGNvcGllcyBvZiB0aGUgdGVybWluYWwgZm9yZXZlciwgc29cbiAgLy8gdGhpcyBtYXkgY2F1c2UgbWVtb3J5IGxlYWtzLlxuICBvd25lZEJ5OiBJVGVybWluYWxbXTtcbn1cblxuY29uc3QgY2hhckF0bGFzQ2FjaGU6IElDaGFyQXRsYXNDYWNoZUVudHJ5W10gPSBbXTtcblxuLyoqXG4gKiBBY3F1aXJlcyBhIGNoYXIgYXRsYXMsIGVpdGhlciBnZW5lcmF0aW5nIGEgbmV3IG9uZSBvciByZXR1cm5pbmcgYW4gZXhpc3RpbmdcbiAqIG9uZSB0aGF0IGlzIGluIHVzZSBieSBhbm90aGVyIHRlcm1pbmFsLlxuICogQHBhcmFtIHRlcm1pbmFsIFRoZSB0ZXJtaW5hbC5cbiAqIEBwYXJhbSBjb2xvcnMgVGhlIGNvbG9ycyB0byB1c2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhY3F1aXJlQ2hhckF0bGFzKFxuICB0ZXJtaW5hbDogSVRlcm1pbmFsLFxuICBjb2xvcnM6IElDb2xvclNldCxcbiAgc2NhbGVkQ2hhcldpZHRoOiBudW1iZXIsXG4gIHNjYWxlZENoYXJIZWlnaHQ6IG51bWJlclxuKTogQmFzZUNoYXJBdGxhcyB7XG4gIGNvbnN0IG5ld0NvbmZpZyA9IGdlbmVyYXRlQ29uZmlnKHNjYWxlZENoYXJXaWR0aCwgc2NhbGVkQ2hhckhlaWdodCwgdGVybWluYWwsIGNvbG9ycyk7XG5cbiAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSB0ZXJtaW5hbCBhbHJlYWR5IG93bnMgdGhpcyBjb25maWdcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFyQXRsYXNDYWNoZS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGVudHJ5ID0gY2hhckF0bGFzQ2FjaGVbaV07XG4gICAgY29uc3Qgb3duZWRCeUluZGV4ID0gZW50cnkub3duZWRCeS5pbmRleE9mKHRlcm1pbmFsKTtcbiAgICBpZiAob3duZWRCeUluZGV4ID49IDApIHtcbiAgICAgIGlmIChjb25maWdFcXVhbHMoZW50cnkuY29uZmlnLCBuZXdDb25maWcpKSB7XG4gICAgICAgIHJldHVybiBlbnRyeS5hdGxhcztcbiAgICAgIH1cbiAgICAgIC8vIFRoZSBjb25maWdzIGRpZmZlciwgcmVsZWFzZSB0aGUgdGVybWluYWwgZnJvbSB0aGUgZW50cnlcbiAgICAgIGlmIChlbnRyeS5vd25lZEJ5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlbnRyeS5hdGxhcy5kaXNwb3NlKCk7XG4gICAgICAgIGNoYXJBdGxhc0NhY2hlLnNwbGljZShpLCAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVudHJ5Lm93bmVkQnkuc3BsaWNlKG93bmVkQnlJbmRleCwgMSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICAvLyBUcnkgbWF0Y2ggYSBjaGFyIGF0bGFzIGZyb20gdGhlIGNhY2hlXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhckF0bGFzQ2FjaGUubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBlbnRyeSA9IGNoYXJBdGxhc0NhY2hlW2ldO1xuICAgIGlmIChjb25maWdFcXVhbHMoZW50cnkuY29uZmlnLCBuZXdDb25maWcpKSB7XG4gICAgICAvLyBBZGQgdGhlIHRlcm1pbmFsIHRvIHRoZSBjYWNoZSBlbnRyeSBhbmQgcmV0dXJuXG4gICAgICBlbnRyeS5vd25lZEJ5LnB1c2godGVybWluYWwpO1xuICAgICAgcmV0dXJuIGVudHJ5LmF0bGFzO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG5ld0VudHJ5OiBJQ2hhckF0bGFzQ2FjaGVFbnRyeSA9IHtcbiAgICBhdGxhczogbmV3IGNoYXJBdGxhc0ltcGxlbWVudGF0aW9uc1t0ZXJtaW5hbC5vcHRpb25zLmV4cGVyaW1lbnRhbENoYXJBdGxhc10oXG4gICAgICBkb2N1bWVudCxcbiAgICAgIG5ld0NvbmZpZ1xuICAgICksXG4gICAgY29uZmlnOiBuZXdDb25maWcsXG4gICAgb3duZWRCeTogW3Rlcm1pbmFsXVxuICB9O1xuICBjaGFyQXRsYXNDYWNoZS5wdXNoKG5ld0VudHJ5KTtcbiAgcmV0dXJuIG5ld0VudHJ5LmF0bGFzO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYSB0ZXJtaW5hbCByZWZlcmVuY2UgZnJvbSB0aGUgY2FjaGUsIGFsbG93aW5nIGl0cyBtZW1vcnkgdG8gYmUgZnJlZWQuXG4gKiBAcGFyYW0gdGVybWluYWwgVGhlIHRlcm1pbmFsIHRvIHJlbW92ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVRlcm1pbmFsRnJvbUNhY2hlKHRlcm1pbmFsOiBJVGVybWluYWwpOiB2b2lkIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFyQXRsYXNDYWNoZS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGluZGV4ID0gY2hhckF0bGFzQ2FjaGVbaV0ub3duZWRCeS5pbmRleE9mKHRlcm1pbmFsKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBpZiAoY2hhckF0bGFzQ2FjaGVbaV0ub3duZWRCeS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBjYWNoZSBlbnRyeSBpZiBpdCdzIHRoZSBvbmx5IHRlcm1pbmFsXG4gICAgICAgIGNoYXJBdGxhc0NhY2hlW2ldLmF0bGFzLmRpc3Bvc2UoKTtcbiAgICAgICAgY2hhckF0bGFzQ2FjaGUuc3BsaWNlKGksIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSByZWZlcmVuY2UgZnJvbSB0aGUgY2FjaGUgZW50cnlcbiAgICAgICAgY2hhckF0bGFzQ2FjaGVbaV0ub3duZWRCeS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7O0FBTUE7QUFFQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVUE7QUFRQTtBQU1BO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQS9DQTtBQXFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFmQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/renderer/atlas/CharAtlasCache.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/renderer/atlas/CharAtlasGenerator.js":
/*!*********************************************************************!*\
  !*** ./node_modules/xterm/lib/renderer/atlas/CharAtlasGenerator.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Platform_1 = __webpack_require__(/*! ../../common/Platform */ \"./node_modules/xterm/lib/common/Platform.js\");\nvar Types_1 = __webpack_require__(/*! ./Types */ \"./node_modules/xterm/lib/renderer/atlas/Types.js\");\nfunction generateStaticCharAtlasTexture(context, canvasFactory, config) {\n    var cellWidth = config.scaledCharWidth + Types_1.CHAR_ATLAS_CELL_SPACING;\n    var cellHeight = config.scaledCharHeight + Types_1.CHAR_ATLAS_CELL_SPACING;\n    var canvas = canvasFactory(255 * cellWidth, (2 + 16 + 16) * cellHeight);\n    var ctx = canvas.getContext('2d', { alpha: config.allowTransparency });\n    ctx.fillStyle = config.colors.background.css;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.save();\n    ctx.fillStyle = config.colors.foreground.css;\n    ctx.font = getFont(config.fontWeight, config);\n    ctx.textBaseline = 'middle';\n    for (var i = 0; i < 256; i++) {\n        ctx.save();\n        ctx.beginPath();\n        ctx.rect(i * cellWidth, 0, cellWidth, cellHeight);\n        ctx.clip();\n        ctx.fillText(String.fromCharCode(i), i * cellWidth, cellHeight / 2);\n        ctx.restore();\n    }\n    ctx.save();\n    ctx.font = getFont(config.fontWeightBold, config);\n    for (var i = 0; i < 256; i++) {\n        ctx.save();\n        ctx.beginPath();\n        ctx.rect(i * cellWidth, cellHeight, cellWidth, cellHeight);\n        ctx.clip();\n        ctx.fillText(String.fromCharCode(i), i * cellWidth, cellHeight * 1.5);\n        ctx.restore();\n    }\n    ctx.restore();\n    ctx.font = getFont(config.fontWeight, config);\n    for (var colorIndex = 0; colorIndex < 16; colorIndex++) {\n        var y = (colorIndex + 2) * cellHeight;\n        for (var i = 0; i < 256; i++) {\n            ctx.save();\n            ctx.beginPath();\n            ctx.rect(i * cellWidth, y, cellWidth, cellHeight);\n            ctx.clip();\n            ctx.fillStyle = config.colors.ansi[colorIndex].css;\n            ctx.fillText(String.fromCharCode(i), i * cellWidth, y + cellHeight / 2);\n            ctx.restore();\n        }\n    }\n    ctx.font = getFont(config.fontWeightBold, config);\n    for (var colorIndex = 0; colorIndex < 16; colorIndex++) {\n        var y = (colorIndex + 2 + 16) * cellHeight;\n        for (var i = 0; i < 256; i++) {\n            ctx.save();\n            ctx.beginPath();\n            ctx.rect(i * cellWidth, y, cellWidth, cellHeight);\n            ctx.clip();\n            ctx.fillStyle = config.colors.ansi[colorIndex].css;\n            ctx.fillText(String.fromCharCode(i), i * cellWidth, y + cellHeight / 2);\n            ctx.restore();\n        }\n    }\n    ctx.restore();\n    if (!('createImageBitmap' in context) || Platform_1.isFirefox || Platform_1.isSafari) {\n        return canvas;\n    }\n    var charAtlasImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    clearColor(charAtlasImageData, config.colors.background);\n    return context.createImageBitmap(charAtlasImageData);\n}\nexports.generateStaticCharAtlasTexture = generateStaticCharAtlasTexture;\nfunction clearColor(imageData, color) {\n    var isEmpty = true;\n    var r = color.rgba >>> 24;\n    var g = color.rgba >>> 16 & 0xFF;\n    var b = color.rgba >>> 8 & 0xFF;\n    for (var offset = 0; offset < imageData.data.length; offset += 4) {\n        if (imageData.data[offset] === r &&\n            imageData.data[offset + 1] === g &&\n            imageData.data[offset + 2] === b) {\n            imageData.data[offset + 3] = 0;\n        }\n        else {\n            isEmpty = false;\n        }\n    }\n    return isEmpty;\n}\nexports.clearColor = clearColor;\nfunction getFont(fontWeight, config) {\n    return fontWeight + \" \" + config.fontSize * config.devicePixelRatio + \"px \" + config.fontFamily;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL2F0bGFzL0NoYXJBdGxhc0dlbmVyYXRvci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9zcmMvcmVuZGVyZXIvYXRsYXMvQ2hhckF0bGFzR2VuZXJhdG9yLnRzPzUwOGYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBGb250V2VpZ2h0IH0gZnJvbSAneHRlcm0nO1xuaW1wb3J0IHsgaXNGaXJlZm94LCBpc1NhZmFyaSB9IGZyb20gJy4uLy4uL2NvbW1vbi9QbGF0Zm9ybSc7XG5pbXBvcnQgeyBJQ2hhckF0bGFzQ29uZmlnLCBDSEFSX0FUTEFTX0NFTExfU1BBQ0lORyB9IGZyb20gJy4vVHlwZXMnO1xuaW1wb3J0IHsgSUNvbG9yIH0gZnJvbSAnLi4vLi4vdWkvVHlwZXMnO1xuXG4vKipcbiAqIEdlbmVyYXRlcyBhIGNoYXIgYXRsYXMuXG4gKiBAcGFyYW0gY29udGV4dCBUaGUgd2luZG93IG9yIHdvcmtlciBjb250ZXh0LlxuICogQHBhcmFtIGNhbnZhc0ZhY3RvcnkgQSBmdW5jdGlvbiB0byBnZW5lcmF0ZSBhIGNhbnZhcyB3aXRoIGEgd2lkdGggb3IgaGVpZ2h0LlxuICogQHBhcmFtIGNvbmZpZyBUaGUgY29uZmlnIGZvciB0aGUgbmV3IGNoYXIgYXRsYXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVN0YXRpY0NoYXJBdGxhc1RleHR1cmUoY29udGV4dDogV2luZG93LCBjYW52YXNGYWN0b3J5OiAod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpID0+IEhUTUxDYW52YXNFbGVtZW50LCBjb25maWc6IElDaGFyQXRsYXNDb25maWcpOiBIVE1MQ2FudmFzRWxlbWVudCB8IFByb21pc2U8SW1hZ2VCaXRtYXA+IHtcbiAgY29uc3QgY2VsbFdpZHRoID0gY29uZmlnLnNjYWxlZENoYXJXaWR0aCArIENIQVJfQVRMQVNfQ0VMTF9TUEFDSU5HO1xuICBjb25zdCBjZWxsSGVpZ2h0ID0gY29uZmlnLnNjYWxlZENoYXJIZWlnaHQgKyBDSEFSX0FUTEFTX0NFTExfU1BBQ0lORztcbiAgY29uc3QgY2FudmFzID0gY2FudmFzRmFjdG9yeShcbiAgICAvKjI1NSBhc2NpaSBjaGFycyovMjU1ICogY2VsbFdpZHRoLFxuICAgICgvKmRlZmF1bHQrZGVmYXVsdCBib2xkKi8yICsgLyowLTE1Ki8xNiArIC8qMC0xNSBib2xkKi8xNikgKiBjZWxsSGVpZ2h0XG4gICk7XG4gIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcsIHthbHBoYTogY29uZmlnLmFsbG93VHJhbnNwYXJlbmN5fSk7XG5cbiAgY3R4LmZpbGxTdHlsZSA9IGNvbmZpZy5jb2xvcnMuYmFja2dyb3VuZC5jc3M7XG4gIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuXG4gIGN0eC5zYXZlKCk7XG4gIGN0eC5maWxsU3R5bGUgPSBjb25maWcuY29sb3JzLmZvcmVncm91bmQuY3NzO1xuICBjdHguZm9udCA9IGdldEZvbnQoY29uZmlnLmZvbnRXZWlnaHQsIGNvbmZpZyk7XG4gIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcblxuICAvLyBEZWZhdWx0IGNvbG9yXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHgucmVjdChpICogY2VsbFdpZHRoLCAwLCBjZWxsV2lkdGgsIGNlbGxIZWlnaHQpO1xuICAgIGN0eC5jbGlwKCk7XG4gICAgY3R4LmZpbGxUZXh0KFN0cmluZy5mcm9tQ2hhckNvZGUoaSksIGkgKiBjZWxsV2lkdGgsIGNlbGxIZWlnaHQgLyAyKTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG4gIC8vIERlZmF1bHQgY29sb3IgYm9sZFxuICBjdHguc2F2ZSgpO1xuICBjdHguZm9udCA9IGdldEZvbnQoY29uZmlnLmZvbnRXZWlnaHRCb2xkLCBjb25maWcpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LnJlY3QoaSAqIGNlbGxXaWR0aCwgY2VsbEhlaWdodCwgY2VsbFdpZHRoLCBjZWxsSGVpZ2h0KTtcbiAgICBjdHguY2xpcCgpO1xuICAgIGN0eC5maWxsVGV4dChTdHJpbmcuZnJvbUNoYXJDb2RlKGkpLCBpICogY2VsbFdpZHRoLCBjZWxsSGVpZ2h0ICogMS41KTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG4gIGN0eC5yZXN0b3JlKCk7XG5cbiAgLy8gQ29sb3JzIDAtMTVcbiAgY3R4LmZvbnQgPSBnZXRGb250KGNvbmZpZy5mb250V2VpZ2h0LCBjb25maWcpO1xuICBmb3IgKGxldCBjb2xvckluZGV4ID0gMDsgY29sb3JJbmRleCA8IDE2OyBjb2xvckluZGV4KyspIHtcbiAgICBjb25zdCB5ID0gKGNvbG9ySW5kZXggKyAyKSAqIGNlbGxIZWlnaHQ7XG4gICAgLy8gRHJhdyBhc2NpaSBjaGFyYWN0ZXJzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5yZWN0KGkgKiBjZWxsV2lkdGgsIHksIGNlbGxXaWR0aCwgY2VsbEhlaWdodCk7XG4gICAgICBjdHguY2xpcCgpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IGNvbmZpZy5jb2xvcnMuYW5zaVtjb2xvckluZGV4XS5jc3M7XG4gICAgICBjdHguZmlsbFRleHQoU3RyaW5nLmZyb21DaGFyQ29kZShpKSwgaSAqIGNlbGxXaWR0aCwgeSArIGNlbGxIZWlnaHQgLyAyKTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gQ29sb3JzIDAtMTUgYm9sZFxuICBjdHguZm9udCA9IGdldEZvbnQoY29uZmlnLmZvbnRXZWlnaHRCb2xkLCBjb25maWcpO1xuICBmb3IgKGxldCBjb2xvckluZGV4ID0gMDsgY29sb3JJbmRleCA8IDE2OyBjb2xvckluZGV4KyspIHtcbiAgICBjb25zdCB5ID0gKGNvbG9ySW5kZXggKyAyICsgMTYpICogY2VsbEhlaWdodDtcbiAgICAvLyBEcmF3IGFzY2lpIGNoYXJhY3RlcnNcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4LnJlY3QoaSAqIGNlbGxXaWR0aCwgeSwgY2VsbFdpZHRoLCBjZWxsSGVpZ2h0KTtcbiAgICAgIGN0eC5jbGlwKCk7XG4gICAgICBjdHguZmlsbFN0eWxlID0gY29uZmlnLmNvbG9ycy5hbnNpW2NvbG9ySW5kZXhdLmNzcztcbiAgICAgIGN0eC5maWxsVGV4dChTdHJpbmcuZnJvbUNoYXJDb2RlKGkpLCBpICogY2VsbFdpZHRoLCB5ICsgY2VsbEhlaWdodCAvIDIpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gIH1cbiAgY3R4LnJlc3RvcmUoKTtcblxuICAvLyBTdXBwb3J0IGlzIHBhdGNoeSBmb3IgY3JlYXRlSW1hZ2VCaXRtYXAgYXQgdGhlIG1vbWVudCwgcGFzcyBhIGNhbnZhcyBiYWNrXG4gIC8vIGlmIHN1cHBvcnQgaXMgbGFja2luZyBhcyBkcmF3SW1hZ2Ugd29ya3MgdGhlcmUgdG9vLiBGaXJlZm94IGlzIGFsc29cbiAgLy8gaW5jbHVkZWQgaGVyZSBhcyBJbWFnZUJpdG1hcCBhcHBlYXJzIGJvdGggYnVnZ3kgYW5kIGhhcyBob3JyaWJsZVxuICAvLyBwZXJmb3JtYW5jZSAodGVzdGVkIG9uIHY1NSkuXG4gIGlmICghKCdjcmVhdGVJbWFnZUJpdG1hcCcgaW4gY29udGV4dCkgfHwgaXNGaXJlZm94IHx8IGlzU2FmYXJpKSB7XG4gICAgLy8gRG9uJ3QgYXR0ZW1wdCB0byBjbGVhciBiYWNrZ3JvdW5kIGNvbG9ycyBpZiBjcmVhdGVJbWFnZUJpdG1hcCBpcyBub3Qgc3VwcG9ydGVkXG4gICAgcmV0dXJuIGNhbnZhcztcbiAgfVxuXG4gIGNvbnN0IGNoYXJBdGxhc0ltYWdlRGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcblxuICAvLyBSZW1vdmUgdGhlIGJhY2tncm91bmQgY29sb3IgZnJvbSB0aGUgaW1hZ2Ugc28gY2hhcmFjdGVycyBtYXkgb3ZlcmxhcFxuICBjbGVhckNvbG9yKGNoYXJBdGxhc0ltYWdlRGF0YSwgY29uZmlnLmNvbG9ycy5iYWNrZ3JvdW5kKTtcblxuICByZXR1cm4gY29udGV4dC5jcmVhdGVJbWFnZUJpdG1hcChjaGFyQXRsYXNJbWFnZURhdGEpO1xufVxuXG4vKipcbiAqIE1ha2VzIGEgcGFydGlpY3VsYXIgcmdiIGNvbG9yIGluIGFuIEltYWdlRGF0YSBjb21wbGV0ZWx5IHRyYW5zcGFyZW50LlxuICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgcmVzdWx0IGlzIFwiZW1wdHlcIiwgbWVhbmluZyBhbGwgcGl4ZWxzIGFyZSBmdWxseSB0cmFuc3BhcmVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyQ29sb3IoaW1hZ2VEYXRhOiBJbWFnZURhdGEsIGNvbG9yOiBJQ29sb3IpOiBib29sZWFuIHtcbiAgbGV0IGlzRW1wdHkgPSB0cnVlO1xuICBjb25zdCByID0gY29sb3IucmdiYSA+Pj4gMjQ7XG4gIGNvbnN0IGcgPSBjb2xvci5yZ2JhID4+PiAxNiAmIDB4RkY7XG4gIGNvbnN0IGIgPSBjb2xvci5yZ2JhID4+PiA4ICYgMHhGRjtcbiAgZm9yIChsZXQgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgaW1hZ2VEYXRhLmRhdGEubGVuZ3RoOyBvZmZzZXQgKz0gNCkge1xuICAgIGlmIChpbWFnZURhdGEuZGF0YVtvZmZzZXRdID09PSByICYmXG4gICAgICAgIGltYWdlRGF0YS5kYXRhW29mZnNldCArIDFdID09PSBnICYmXG4gICAgICAgIGltYWdlRGF0YS5kYXRhW29mZnNldCArIDJdID09PSBiKSB7XG4gICAgICBpbWFnZURhdGEuZGF0YVtvZmZzZXQgKyAzXSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlzRW1wdHkgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGlzRW1wdHk7XG59XG5cbmZ1bmN0aW9uIGdldEZvbnQoZm9udFdlaWdodDogRm9udFdlaWdodCwgY29uZmlnOiBJQ2hhckF0bGFzQ29uZmlnKTogc3RyaW5nIHtcbiAgcmV0dXJuIGAke2ZvbnRXZWlnaHR9ICR7Y29uZmlnLmZvbnRTaXplICogY29uZmlnLmRldmljZVBpeGVsUmF0aW99cHggJHtjb25maWcuZm9udEZhbWlseX1gO1xufVxuIl0sIm1hcHBpbmdzIjoiOztBQU1BO0FBQ0E7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNQTtBQUVBO0FBQ0E7QUFFQTtBQUdBO0FBRUE7QUFDQTtBQXZGQTtBQTZGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZkE7QUFpQkE7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/renderer/atlas/CharAtlasGenerator.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/renderer/atlas/CharAtlasUtils.js":
/*!*****************************************************************!*\
  !*** ./node_modules/xterm/lib/renderer/atlas/CharAtlasUtils.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Types_1 = __webpack_require__(/*! ../../common/Types */ \"./node_modules/xterm/lib/common/Types.js\");\nfunction generateConfig(scaledCharWidth, scaledCharHeight, terminal, colors) {\n    var clonedColors = {\n        foreground: colors.foreground,\n        background: colors.background,\n        cursor: null,\n        cursorAccent: null,\n        selection: null,\n        ansi: colors.ansi.slice(0, 16)\n    };\n    return {\n        type: terminal.options.experimentalCharAtlas,\n        devicePixelRatio: window.devicePixelRatio,\n        scaledCharWidth: scaledCharWidth,\n        scaledCharHeight: scaledCharHeight,\n        fontFamily: terminal.options.fontFamily,\n        fontSize: terminal.options.fontSize,\n        fontWeight: terminal.options.fontWeight,\n        fontWeightBold: terminal.options.fontWeightBold,\n        allowTransparency: terminal.options.allowTransparency,\n        colors: clonedColors\n    };\n}\nexports.generateConfig = generateConfig;\nfunction configEquals(a, b) {\n    for (var i = 0; i < a.colors.ansi.length; i++) {\n        if (a.colors.ansi[i].rgba !== b.colors.ansi[i].rgba) {\n            return false;\n        }\n    }\n    return a.type === b.type &&\n        a.devicePixelRatio === b.devicePixelRatio &&\n        a.fontFamily === b.fontFamily &&\n        a.fontSize === b.fontSize &&\n        a.fontWeight === b.fontWeight &&\n        a.fontWeightBold === b.fontWeightBold &&\n        a.allowTransparency === b.allowTransparency &&\n        a.scaledCharWidth === b.scaledCharWidth &&\n        a.scaledCharHeight === b.scaledCharHeight &&\n        a.colors.foreground === b.colors.foreground &&\n        a.colors.background === b.colors.background;\n}\nexports.configEquals = configEquals;\nfunction is256Color(colorCode) {\n    return colorCode < Types_1.DEFAULT_COLOR;\n}\nexports.is256Color = is256Color;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL2F0bGFzL0NoYXJBdGxhc1V0aWxzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL3NyYy9yZW5kZXJlci9hdGxhcy9DaGFyQXRsYXNVdGlscy50cz9kMDYzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSVRlcm1pbmFsIH0gZnJvbSAnLi4vLi4vVHlwZXMnO1xuaW1wb3J0IHsgSUNoYXJBdGxhc0NvbmZpZyB9IGZyb20gJy4vVHlwZXMnO1xuaW1wb3J0IHsgREVGQVVMVF9DT0xPUiB9IGZyb20gJy4uLy4uL2NvbW1vbi9UeXBlcyc7XG5pbXBvcnQgeyBJQ29sb3JTZXQgfSBmcm9tICcuLi8uLi91aS9UeXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUNvbmZpZyhzY2FsZWRDaGFyV2lkdGg6IG51bWJlciwgc2NhbGVkQ2hhckhlaWdodDogbnVtYmVyLCB0ZXJtaW5hbDogSVRlcm1pbmFsLCBjb2xvcnM6IElDb2xvclNldCk6IElDaGFyQXRsYXNDb25maWcge1xuICAvLyBudWxsIG91dCBzb21lIGZpZWxkcyB0aGF0IGRvbid0IG1hdHRlclxuICBjb25zdCBjbG9uZWRDb2xvcnMgPSA8SUNvbG9yU2V0PntcbiAgICBmb3JlZ3JvdW5kOiBjb2xvcnMuZm9yZWdyb3VuZCxcbiAgICBiYWNrZ3JvdW5kOiBjb2xvcnMuYmFja2dyb3VuZCxcbiAgICBjdXJzb3I6IG51bGwsXG4gICAgY3Vyc29yQWNjZW50OiBudWxsLFxuICAgIHNlbGVjdGlvbjogbnVsbCxcbiAgICAvLyBGb3IgdGhlIHN0YXRpYyBjaGFyIGF0bGFzLCB3ZSBvbmx5IHVzZSB0aGUgZmlyc3QgMTYgY29sb3JzLCBidXQgd2UgbmVlZCBhbGwgMjU2IGZvciB0aGVcbiAgICAvLyBkeW5hbWljIGNoYXJhY3RlciBhdGxhcy5cbiAgICBhbnNpOiBjb2xvcnMuYW5zaS5zbGljZSgwLCAxNilcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0ZXJtaW5hbC5vcHRpb25zLmV4cGVyaW1lbnRhbENoYXJBdGxhcyxcbiAgICBkZXZpY2VQaXhlbFJhdGlvOiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyxcbiAgICBzY2FsZWRDaGFyV2lkdGgsXG4gICAgc2NhbGVkQ2hhckhlaWdodCxcbiAgICBmb250RmFtaWx5OiB0ZXJtaW5hbC5vcHRpb25zLmZvbnRGYW1pbHksXG4gICAgZm9udFNpemU6IHRlcm1pbmFsLm9wdGlvbnMuZm9udFNpemUsXG4gICAgZm9udFdlaWdodDogdGVybWluYWwub3B0aW9ucy5mb250V2VpZ2h0LFxuICAgIGZvbnRXZWlnaHRCb2xkOiB0ZXJtaW5hbC5vcHRpb25zLmZvbnRXZWlnaHRCb2xkLFxuICAgIGFsbG93VHJhbnNwYXJlbmN5OiB0ZXJtaW5hbC5vcHRpb25zLmFsbG93VHJhbnNwYXJlbmN5LFxuICAgIGNvbG9yczogY2xvbmVkQ29sb3JzXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25maWdFcXVhbHMoYTogSUNoYXJBdGxhc0NvbmZpZywgYjogSUNoYXJBdGxhc0NvbmZpZyk6IGJvb2xlYW4ge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGEuY29sb3JzLmFuc2kubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYS5jb2xvcnMuYW5zaVtpXS5yZ2JhICE9PSBiLmNvbG9ycy5hbnNpW2ldLnJnYmEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGEudHlwZSA9PT0gYi50eXBlICYmXG4gICAgICBhLmRldmljZVBpeGVsUmF0aW8gPT09IGIuZGV2aWNlUGl4ZWxSYXRpbyAmJlxuICAgICAgYS5mb250RmFtaWx5ID09PSBiLmZvbnRGYW1pbHkgJiZcbiAgICAgIGEuZm9udFNpemUgPT09IGIuZm9udFNpemUgJiZcbiAgICAgIGEuZm9udFdlaWdodCA9PT0gYi5mb250V2VpZ2h0ICYmXG4gICAgICBhLmZvbnRXZWlnaHRCb2xkID09PSBiLmZvbnRXZWlnaHRCb2xkICYmXG4gICAgICBhLmFsbG93VHJhbnNwYXJlbmN5ID09PSBiLmFsbG93VHJhbnNwYXJlbmN5ICYmXG4gICAgICBhLnNjYWxlZENoYXJXaWR0aCA9PT0gYi5zY2FsZWRDaGFyV2lkdGggJiZcbiAgICAgIGEuc2NhbGVkQ2hhckhlaWdodCA9PT0gYi5zY2FsZWRDaGFySGVpZ2h0ICYmXG4gICAgICBhLmNvbG9ycy5mb3JlZ3JvdW5kID09PSBiLmNvbG9ycy5mb3JlZ3JvdW5kICYmXG4gICAgICBhLmNvbG9ycy5iYWNrZ3JvdW5kID09PSBiLmNvbG9ycy5iYWNrZ3JvdW5kO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXMyNTZDb2xvcihjb2xvckNvZGU6IG51bWJlcik6IGJvb2xlYW4ge1xuICByZXR1cm4gY29sb3JDb2RlIDwgREVGQVVMVF9DT0xPUjtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7QUFPQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBeEJBO0FBMEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWpCQTtBQW1CQTtBQUNBO0FBQ0E7QUFGQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/renderer/atlas/CharAtlasUtils.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/renderer/atlas/DynamicCharAtlas.js":
/*!*******************************************************************!*\
  !*** ./node_modules/xterm/lib/renderer/atlas/DynamicCharAtlas.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Types_1 = __webpack_require__(/*! ./Types */ \"./node_modules/xterm/lib/renderer/atlas/Types.js\");\nvar BaseCharAtlas_1 = __webpack_require__(/*! ./BaseCharAtlas */ \"./node_modules/xterm/lib/renderer/atlas/BaseCharAtlas.js\");\nvar ColorManager_1 = __webpack_require__(/*! ../../ui/ColorManager */ \"./node_modules/xterm/lib/ui/ColorManager.js\");\nvar CharAtlasGenerator_1 = __webpack_require__(/*! ./CharAtlasGenerator */ \"./node_modules/xterm/lib/renderer/atlas/CharAtlasGenerator.js\");\nvar LRUMap_1 = __webpack_require__(/*! ./LRUMap */ \"./node_modules/xterm/lib/renderer/atlas/LRUMap.js\");\nvar Platform_1 = __webpack_require__(/*! ../../common/Platform */ \"./node_modules/xterm/lib/common/Platform.js\");\nvar TEXTURE_WIDTH = 1024;\nvar TEXTURE_HEIGHT = 1024;\nvar TRANSPARENT_COLOR = {\n    css: 'rgba(0, 0, 0, 0)',\n    rgba: 0\n};\nvar FRAME_CACHE_DRAW_LIMIT = 100;\nvar GLYPH_BITMAP_COMMIT_DELAY = 100;\nfunction getGlyphCacheKey(glyph) {\n    return glyph.code << 21 | glyph.bg << 12 | glyph.fg << 3 | (glyph.bold ? 0 : 4) + (glyph.dim ? 0 : 2) + (glyph.italic ? 0 : 1);\n}\nexports.getGlyphCacheKey = getGlyphCacheKey;\nvar DynamicCharAtlas = (function (_super) {\n    __extends(DynamicCharAtlas, _super);\n    function DynamicCharAtlas(document, _config) {\n        var _this = _super.call(this) || this;\n        _this._config = _config;\n        _this._drawToCacheCount = 0;\n        _this._glyphsWaitingOnBitmap = [];\n        _this._bitmapCommitTimeout = null;\n        _this._bitmap = null;\n        _this._cacheCanvas = document.createElement('canvas');\n        _this._cacheCanvas.width = TEXTURE_WIDTH;\n        _this._cacheCanvas.height = TEXTURE_HEIGHT;\n        _this._cacheCtx = _this._cacheCanvas.getContext('2d', { alpha: true });\n        var tmpCanvas = document.createElement('canvas');\n        tmpCanvas.width = _this._config.scaledCharWidth;\n        tmpCanvas.height = _this._config.scaledCharHeight;\n        _this._tmpCtx = tmpCanvas.getContext('2d', { alpha: _this._config.allowTransparency });\n        _this._width = Math.floor(TEXTURE_WIDTH / _this._config.scaledCharWidth);\n        _this._height = Math.floor(TEXTURE_HEIGHT / _this._config.scaledCharHeight);\n        var capacity = _this._width * _this._height;\n        _this._cacheMap = new LRUMap_1.default(capacity);\n        _this._cacheMap.prealloc(capacity);\n        return _this;\n    }\n    DynamicCharAtlas.prototype.dispose = function () {\n        if (this._bitmapCommitTimeout !== null) {\n            window.clearTimeout(this._bitmapCommitTimeout);\n            this._bitmapCommitTimeout = null;\n        }\n    };\n    DynamicCharAtlas.prototype.beginFrame = function () {\n        this._drawToCacheCount = 0;\n    };\n    DynamicCharAtlas.prototype.draw = function (ctx, glyph, x, y) {\n        if (glyph.code === 32) {\n            return true;\n        }\n        if (!this._canCache(glyph)) {\n            return false;\n        }\n        var glyphKey = getGlyphCacheKey(glyph);\n        var cacheValue = this._cacheMap.get(glyphKey);\n        if (cacheValue !== null && cacheValue !== undefined) {\n            this._drawFromCache(ctx, cacheValue, x, y);\n            return true;\n        }\n        else if (this._drawToCacheCount < FRAME_CACHE_DRAW_LIMIT) {\n            var index = void 0;\n            if (this._cacheMap.size < this._cacheMap.capacity) {\n                index = this._cacheMap.size;\n            }\n            else {\n                index = this._cacheMap.peek().index;\n            }\n            var cacheValue_1 = this._drawToCache(glyph, index);\n            this._cacheMap.set(glyphKey, cacheValue_1);\n            this._drawFromCache(ctx, cacheValue_1, x, y);\n            return true;\n        }\n        return false;\n    };\n    DynamicCharAtlas.prototype._canCache = function (glyph) {\n        return glyph.code < 256;\n    };\n    DynamicCharAtlas.prototype._toCoordinateX = function (index) {\n        return (index % this._width) * this._config.scaledCharWidth;\n    };\n    DynamicCharAtlas.prototype._toCoordinateY = function (index) {\n        return Math.floor(index / this._width) * this._config.scaledCharHeight;\n    };\n    DynamicCharAtlas.prototype._drawFromCache = function (ctx, cacheValue, x, y) {\n        if (cacheValue.isEmpty) {\n            return;\n        }\n        var cacheX = this._toCoordinateX(cacheValue.index);\n        var cacheY = this._toCoordinateY(cacheValue.index);\n        ctx.drawImage(cacheValue.inBitmap ? this._bitmap : this._cacheCanvas, cacheX, cacheY, this._config.scaledCharWidth, this._config.scaledCharHeight, x, y, this._config.scaledCharWidth, this._config.scaledCharHeight);\n    };\n    DynamicCharAtlas.prototype._getColorFromAnsiIndex = function (idx) {\n        if (idx < this._config.colors.ansi.length) {\n            return this._config.colors.ansi[idx];\n        }\n        return ColorManager_1.DEFAULT_ANSI_COLORS[idx];\n    };\n    DynamicCharAtlas.prototype._getBackgroundColor = function (glyph) {\n        if (this._config.allowTransparency) {\n            return TRANSPARENT_COLOR;\n        }\n        else if (glyph.bg === Types_1.INVERTED_DEFAULT_COLOR) {\n            return this._config.colors.foreground;\n        }\n        else if (glyph.bg < 256) {\n            return this._getColorFromAnsiIndex(glyph.bg);\n        }\n        return this._config.colors.background;\n    };\n    DynamicCharAtlas.prototype._getForegroundColor = function (glyph) {\n        if (glyph.fg === Types_1.INVERTED_DEFAULT_COLOR) {\n            return this._config.colors.background;\n        }\n        else if (glyph.fg < 256) {\n            return this._getColorFromAnsiIndex(glyph.fg);\n        }\n        return this._config.colors.foreground;\n    };\n    DynamicCharAtlas.prototype._drawToCache = function (glyph, index) {\n        this._drawToCacheCount++;\n        this._tmpCtx.save();\n        var backgroundColor = this._getBackgroundColor(glyph);\n        this._tmpCtx.globalCompositeOperation = 'copy';\n        this._tmpCtx.fillStyle = backgroundColor.css;\n        this._tmpCtx.fillRect(0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight);\n        this._tmpCtx.globalCompositeOperation = 'source-over';\n        var fontWeight = glyph.bold ? this._config.fontWeightBold : this._config.fontWeight;\n        var fontStyle = glyph.italic ? 'italic' : '';\n        this._tmpCtx.font =\n            fontStyle + \" \" + fontWeight + \" \" + this._config.fontSize * this._config.devicePixelRatio + \"px \" + this._config.fontFamily;\n        this._tmpCtx.textBaseline = 'middle';\n        this._tmpCtx.fillStyle = this._getForegroundColor(glyph).css;\n        if (glyph.dim) {\n            this._tmpCtx.globalAlpha = Types_1.DIM_OPACITY;\n        }\n        this._tmpCtx.fillText(glyph.chars, 0, this._config.scaledCharHeight / 2);\n        this._tmpCtx.restore();\n        var imageData = this._tmpCtx.getImageData(0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight);\n        var isEmpty = false;\n        if (!this._config.allowTransparency) {\n            isEmpty = CharAtlasGenerator_1.clearColor(imageData, backgroundColor);\n        }\n        var x = this._toCoordinateX(index);\n        var y = this._toCoordinateY(index);\n        this._cacheCtx.putImageData(imageData, x, y);\n        var cacheValue = {\n            index: index,\n            isEmpty: isEmpty,\n            inBitmap: false\n        };\n        this._addGlyphToBitmap(cacheValue);\n        return cacheValue;\n    };\n    DynamicCharAtlas.prototype._addGlyphToBitmap = function (cacheValue) {\n        var _this = this;\n        if (!('createImageBitmap' in window) || Platform_1.isFirefox || Platform_1.isSafari) {\n            return;\n        }\n        this._glyphsWaitingOnBitmap.push(cacheValue);\n        if (this._bitmapCommitTimeout !== null) {\n            return;\n        }\n        this._bitmapCommitTimeout = window.setTimeout(function () { return _this._generateBitmap(); }, GLYPH_BITMAP_COMMIT_DELAY);\n    };\n    DynamicCharAtlas.prototype._generateBitmap = function () {\n        var _this = this;\n        var glyphsMovingToBitmap = this._glyphsWaitingOnBitmap;\n        this._glyphsWaitingOnBitmap = [];\n        window.createImageBitmap(this._cacheCanvas).then(function (bitmap) {\n            _this._bitmap = bitmap;\n            for (var i = 0; i < glyphsMovingToBitmap.length; i++) {\n                var value = glyphsMovingToBitmap[i];\n                value.inBitmap = true;\n            }\n        });\n        this._bitmapCommitTimeout = null;\n    };\n    return DynamicCharAtlas;\n}(BaseCharAtlas_1.default));\nexports.default = DynamicCharAtlas;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/renderer/atlas/DynamicCharAtlas.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/renderer/atlas/LRUMap.js":
/*!*********************************************************!*\
  !*** ./node_modules/xterm/lib/renderer/atlas/LRUMap.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LRUMap = (function () {\n    function LRUMap(capacity) {\n        this.capacity = capacity;\n        this._map = {};\n        this._head = null;\n        this._tail = null;\n        this._nodePool = [];\n        this.size = 0;\n    }\n    LRUMap.prototype._unlinkNode = function (node) {\n        var prev = node.prev;\n        var next = node.next;\n        if (node === this._head) {\n            this._head = next;\n        }\n        if (node === this._tail) {\n            this._tail = prev;\n        }\n        if (prev !== null) {\n            prev.next = next;\n        }\n        if (next !== null) {\n            next.prev = prev;\n        }\n    };\n    LRUMap.prototype._appendNode = function (node) {\n        var tail = this._tail;\n        if (tail !== null) {\n            tail.next = node;\n        }\n        node.prev = tail;\n        node.next = null;\n        this._tail = node;\n        if (this._head === null) {\n            this._head = node;\n        }\n    };\n    LRUMap.prototype.prealloc = function (count) {\n        var nodePool = this._nodePool;\n        for (var i = 0; i < count; i++) {\n            nodePool.push({\n                prev: null,\n                next: null,\n                key: null,\n                value: null\n            });\n        }\n    };\n    LRUMap.prototype.get = function (key) {\n        var node = this._map[key];\n        if (node !== undefined) {\n            this._unlinkNode(node);\n            this._appendNode(node);\n            return node.value;\n        }\n        return null;\n    };\n    LRUMap.prototype.peekValue = function (key) {\n        var node = this._map[key];\n        if (node !== undefined) {\n            return node.value;\n        }\n        return null;\n    };\n    LRUMap.prototype.peek = function () {\n        var head = this._head;\n        return head === null ? null : head.value;\n    };\n    LRUMap.prototype.set = function (key, value) {\n        var node = this._map[key];\n        if (node !== undefined) {\n            node = this._map[key];\n            this._unlinkNode(node);\n            node.value = value;\n        }\n        else if (this.size >= this.capacity) {\n            node = this._head;\n            this._unlinkNode(node);\n            delete this._map[node.key];\n            node.key = key;\n            node.value = value;\n            this._map[key] = node;\n        }\n        else {\n            var nodePool = this._nodePool;\n            if (nodePool.length > 0) {\n                node = nodePool.pop();\n                node.key = key;\n                node.value = value;\n            }\n            else {\n                node = {\n                    prev: null,\n                    next: null,\n                    key: key,\n                    value: value\n                };\n            }\n            this._map[key] = node;\n            this.size++;\n        }\n        this._appendNode(node);\n    };\n    return LRUMap;\n}());\nexports.default = LRUMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL2F0bGFzL0xSVU1hcC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9zcmMvcmVuZGVyZXIvYXRsYXMvTFJVTWFwLnRzPzkzMGQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbnRlcmZhY2UgSUxpbmtlZExpc3ROb2RlPFQ+IHtcbiAgcHJldjogSUxpbmtlZExpc3ROb2RlPFQ+O1xuICBuZXh0OiBJTGlua2VkTGlzdE5vZGU8VD47XG4gIGtleTogbnVtYmVyO1xuICB2YWx1ZTogVDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTFJVTWFwPFQ+IHtcbiAgcHJpdmF0ZSBfbWFwOiB7IFtrZXk6IG51bWJlcl06IElMaW5rZWRMaXN0Tm9kZTxUPiB9ID0ge307XG4gIHByaXZhdGUgX2hlYWQ6IElMaW5rZWRMaXN0Tm9kZTxUPiA9IG51bGw7XG4gIHByaXZhdGUgX3RhaWw6IElMaW5rZWRMaXN0Tm9kZTxUPiA9IG51bGw7XG4gIHByaXZhdGUgX25vZGVQb29sOiBJTGlua2VkTGlzdE5vZGU8VD5bXSA9IFtdO1xuICBwdWJsaWMgc2l6ZTogbnVtYmVyID0gMDtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgY2FwYWNpdHk6IG51bWJlcikgeyB9XG5cbiAgcHJpdmF0ZSBfdW5saW5rTm9kZShub2RlOiBJTGlua2VkTGlzdE5vZGU8VD4pOiB2b2lkIHtcbiAgICBjb25zdCBwcmV2ID0gbm9kZS5wcmV2O1xuICAgIGNvbnN0IG5leHQgPSBub2RlLm5leHQ7XG4gICAgaWYgKG5vZGUgPT09IHRoaXMuX2hlYWQpIHtcbiAgICAgIHRoaXMuX2hlYWQgPSBuZXh0O1xuICAgIH1cbiAgICBpZiAobm9kZSA9PT0gdGhpcy5fdGFpbCkge1xuICAgICAgdGhpcy5fdGFpbCA9IHByZXY7XG4gICAgfVxuICAgIGlmIChwcmV2ICE9PSBudWxsKSB7XG4gICAgICBwcmV2Lm5leHQgPSBuZXh0O1xuICAgIH1cbiAgICBpZiAobmV4dCAhPT0gbnVsbCkge1xuICAgICAgbmV4dC5wcmV2ID0gcHJldjtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9hcHBlbmROb2RlKG5vZGU6IElMaW5rZWRMaXN0Tm9kZTxUPik6IHZvaWQge1xuICAgIGNvbnN0IHRhaWwgPSB0aGlzLl90YWlsO1xuICAgIGlmICh0YWlsICE9PSBudWxsKSB7XG4gICAgICB0YWlsLm5leHQgPSBub2RlO1xuICAgIH1cbiAgICBub2RlLnByZXYgPSB0YWlsO1xuICAgIG5vZGUubmV4dCA9IG51bGw7XG4gICAgdGhpcy5fdGFpbCA9IG5vZGU7XG4gICAgaWYgKHRoaXMuX2hlYWQgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuX2hlYWQgPSBub2RlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQcmVhbGxvY2F0ZSBhIGJ1bmNoIG9mIGxpbmtlZC1saXN0IG5vZGVzLiBBbGxvY2F0aW5nIHRoZXNlIG5vZGVzIGFoZWFkIG9mIHRpbWUgbWVhbnMgdGhhdFxuICAgKiB0aGV5J3JlIG1vcmUgbGlrZWx5IHRvIGxpdmUgbmV4dCB0byBlYWNoIG90aGVyIGluIG1lbW9yeSwgd2hpY2ggc2VlbXMgdG8gaW1wcm92ZSBwZXJmb3JtYW5jZS5cbiAgICpcbiAgICogRWFjaCBlbXB0eSBvYmplY3Qgb25seSBjb25zdW1lcyBhYm91dCA2MCBieXRlcyBvZiBtZW1vcnksIHNvIHRoaXMgaXMgcHJldHR5IGNoZWFwLCBldmVuIGZvclxuICAgKiBsYXJnZSBtYXBzLlxuICAgKi9cbiAgcHVibGljIHByZWFsbG9jKGNvdW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBub2RlUG9vbCA9IHRoaXMuX25vZGVQb29sO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgbm9kZVBvb2wucHVzaCh7XG4gICAgICAgIHByZXY6IG51bGwsXG4gICAgICAgIG5leHQ6IG51bGwsXG4gICAgICAgIGtleTogbnVsbCxcbiAgICAgICAgdmFsdWU6IG51bGxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXQoa2V5OiBudW1iZXIpOiBUIHwgbnVsbCB7XG4gICAgLy8gVGhpcyBpcyB1bnNhZmU6IFdlJ3JlIGFzc3VtaW5nIG91ciBrZXlzcGFjZSBkb2Vzbid0IG92ZXJsYXAgd2l0aCBPYmplY3QucHJvdG90eXBlLiBIb3dldmVyLFxuICAgIC8vIGl0J3MgZmFzdGVyIHRoYW4gY2FsbGluZyBoYXNPd25Qcm9wZXJ0eSwgYW5kIGluIG91ciBjYXNlLCBpdCB3b3VsZCBuZXZlciBvdmVybGFwLlxuICAgIGNvbnN0IG5vZGUgPSB0aGlzLl9tYXBba2V5XTtcbiAgICBpZiAobm9kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl91bmxpbmtOb2RlKG5vZGUpO1xuICAgICAgdGhpcy5fYXBwZW5kTm9kZShub2RlKTtcbiAgICAgIHJldHVybiBub2RlLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGEgdmFsdWUgZnJvbSBhIGtleSB3aXRob3V0IG1hcmtpbmcgaXQgYXMgdGhlIG1vc3QgcmVjZW50bHkgdXNlZCBpdGVtLlxuICAgKi9cbiAgcHVibGljIHBlZWtWYWx1ZShrZXk6IG51bWJlcik6IFQgfCBudWxsIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5fbWFwW2tleV07XG4gICAgaWYgKG5vZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG5vZGUudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcHVibGljIHBlZWsoKTogVCB8IG51bGwge1xuICAgIGNvbnN0IGhlYWQgPSB0aGlzLl9oZWFkO1xuICAgIHJldHVybiBoZWFkID09PSBudWxsID8gbnVsbCA6IGhlYWQudmFsdWU7XG4gIH1cblxuICBwdWJsaWMgc2V0KGtleTogbnVtYmVyLCB2YWx1ZTogVCk6IHZvaWQge1xuICAgIC8vIFRoaXMgaXMgdW5zYWZlOiBTZWUgbm90ZSBhYm92ZS5cbiAgICBsZXQgbm9kZSA9IHRoaXMuX21hcFtrZXldO1xuICAgIGlmIChub2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGFscmVhZHkgZXhpc3RzLCB3ZSBqdXN0IG5lZWQgdG8gbXV0YXRlIGl0IGFuZCBtb3ZlIGl0IHRvIHRoZSBlbmQgb2YgdGhlIGxpc3RcbiAgICAgIG5vZGUgPSB0aGlzLl9tYXBba2V5XTtcbiAgICAgIHRoaXMuX3VubGlua05vZGUobm9kZSk7XG4gICAgICBub2RlLnZhbHVlID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNpemUgPj0gdGhpcy5jYXBhY2l0eSkge1xuICAgICAgLy8gd2UncmUgb3V0IG9mIHNwYWNlOiByZWN5Y2xlIHRoZSBoZWFkIG5vZGUsIG1vdmUgaXQgdG8gdGhlIHRhaWxcbiAgICAgIG5vZGUgPSB0aGlzLl9oZWFkO1xuICAgICAgdGhpcy5fdW5saW5rTm9kZShub2RlKTtcbiAgICAgIGRlbGV0ZSB0aGlzLl9tYXBbbm9kZS5rZXldO1xuICAgICAgbm9kZS5rZXkgPSBrZXk7XG4gICAgICBub2RlLnZhbHVlID0gdmFsdWU7XG4gICAgICB0aGlzLl9tYXBba2V5XSA9IG5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG1ha2UgYSBuZXcgZWxlbWVudFxuICAgICAgY29uc3Qgbm9kZVBvb2wgPSB0aGlzLl9ub2RlUG9vbDtcbiAgICAgIGlmIChub2RlUG9vbC5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIHVzZSBhIHByZWFsbG9jYXRlZCBub2RlIGlmIHdlIGNhblxuICAgICAgICBub2RlID0gbm9kZVBvb2wucG9wKCk7XG4gICAgICAgIG5vZGUua2V5ID0ga2V5O1xuICAgICAgICBub2RlLnZhbHVlID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlID0ge1xuICAgICAgICAgIHByZXY6IG51bGwsXG4gICAgICAgICAgbmV4dDogbnVsbCxcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX21hcFtrZXldID0gbm9kZTtcbiAgICAgIHRoaXMuc2l6ZSsrO1xuICAgIH1cbiAgICB0aGlzLl9hcHBlbmROb2RlKG5vZGUpO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7O0FBWUE7QUFPQTtBQUFBO0FBTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOzsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/renderer/atlas/LRUMap.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/renderer/atlas/NoneCharAtlas.js":
/*!****************************************************************!*\
  !*** ./node_modules/xterm/lib/renderer/atlas/NoneCharAtlas.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BaseCharAtlas_1 = __webpack_require__(/*! ./BaseCharAtlas */ \"./node_modules/xterm/lib/renderer/atlas/BaseCharAtlas.js\");\nvar NoneCharAtlas = (function (_super) {\n    __extends(NoneCharAtlas, _super);\n    function NoneCharAtlas(document, config) {\n        return _super.call(this) || this;\n    }\n    NoneCharAtlas.prototype.draw = function (ctx, glyph, x, y) {\n        return false;\n    };\n    return NoneCharAtlas;\n}(BaseCharAtlas_1.default));\nexports.default = NoneCharAtlas;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL2F0bGFzL05vbmVDaGFyQXRsYXMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3JlbmRlcmVyL2F0bGFzL05vbmVDaGFyQXRsYXMudHM/ZTI0YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICpcbiAqIEEgZHVtbXkgQ2hhckF0bGFzIGltcGxlbWVudGF0aW9uIHRoYXQgYWx3YXlzIGZhaWxzIHRvIGRyYXcgY2hhcmFjdGVycy5cbiAqL1xuXG5pbXBvcnQgeyBJR2x5cGhJZGVudGlmaWVyLCBJQ2hhckF0bGFzQ29uZmlnIH0gZnJvbSAnLi9UeXBlcyc7XG5pbXBvcnQgQmFzZUNoYXJBdGxhcyBmcm9tICcuL0Jhc2VDaGFyQXRsYXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb25lQ2hhckF0bGFzIGV4dGVuZHMgQmFzZUNoYXJBdGxhcyB7XG4gIGNvbnN0cnVjdG9yKGRvY3VtZW50OiBEb2N1bWVudCwgY29uZmlnOiBJQ2hhckF0bGFzQ29uZmlnKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHB1YmxpYyBkcmF3KFxuICAgIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELFxuICAgIGdseXBoOiBJR2x5cGhJZGVudGlmaWVyLFxuICAgIHg6IG51bWJlcixcbiAgICB5OiBudW1iZXJcbiAgKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQVFBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBTUE7QUFDQTtBQUNBO0FBQUE7OyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/renderer/atlas/NoneCharAtlas.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/renderer/atlas/StaticCharAtlas.js":
/*!******************************************************************!*\
  !*** ./node_modules/xterm/lib/renderer/atlas/StaticCharAtlas.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Types_1 = __webpack_require__(/*! ./Types */ \"./node_modules/xterm/lib/renderer/atlas/Types.js\");\nvar CharAtlasGenerator_1 = __webpack_require__(/*! ./CharAtlasGenerator */ \"./node_modules/xterm/lib/renderer/atlas/CharAtlasGenerator.js\");\nvar BaseCharAtlas_1 = __webpack_require__(/*! ./BaseCharAtlas */ \"./node_modules/xterm/lib/renderer/atlas/BaseCharAtlas.js\");\nvar CharAtlasUtils_1 = __webpack_require__(/*! ./CharAtlasUtils */ \"./node_modules/xterm/lib/renderer/atlas/CharAtlasUtils.js\");\nvar Types_2 = __webpack_require__(/*! ../../common/Types */ \"./node_modules/xterm/lib/common/Types.js\");\nvar StaticCharAtlas = (function (_super) {\n    __extends(StaticCharAtlas, _super);\n    function StaticCharAtlas(_document, _config) {\n        var _this = _super.call(this) || this;\n        _this._document = _document;\n        _this._config = _config;\n        _this._canvasFactory = function (width, height) {\n            var canvas = _this._document.createElement('canvas');\n            canvas.width = width;\n            canvas.height = height;\n            return canvas;\n        };\n        return _this;\n    }\n    StaticCharAtlas.prototype._doWarmUp = function () {\n        var _this = this;\n        var result = CharAtlasGenerator_1.generateStaticCharAtlasTexture(window, this._canvasFactory, this._config);\n        if (result instanceof HTMLCanvasElement) {\n            this._texture = result;\n        }\n        else {\n            result.then(function (texture) {\n                _this._texture = texture;\n            });\n        }\n    };\n    StaticCharAtlas.prototype._isCached = function (glyph, colorIndex) {\n        var isAscii = glyph.code < 256;\n        var isBasicColor = glyph.fg < 16;\n        var isDefaultColor = glyph.fg === Types_2.DEFAULT_COLOR;\n        var isDefaultBackground = glyph.bg === Types_2.DEFAULT_COLOR;\n        return isAscii && (isBasicColor || isDefaultColor) && isDefaultBackground && !glyph.italic;\n    };\n    StaticCharAtlas.prototype.draw = function (ctx, glyph, x, y) {\n        if (this._texture === null || this._texture === undefined) {\n            return false;\n        }\n        var colorIndex = 0;\n        if (CharAtlasUtils_1.is256Color(glyph.fg)) {\n            colorIndex = 2 + glyph.fg + (glyph.bold ? 16 : 0);\n        }\n        else if (glyph.fg === Types_2.DEFAULT_COLOR) {\n            if (glyph.bold) {\n                colorIndex = 1;\n            }\n        }\n        if (!this._isCached(glyph, colorIndex)) {\n            return false;\n        }\n        ctx.save();\n        var charAtlasCellWidth = this._config.scaledCharWidth + Types_1.CHAR_ATLAS_CELL_SPACING;\n        var charAtlasCellHeight = this._config.scaledCharHeight + Types_1.CHAR_ATLAS_CELL_SPACING;\n        if (glyph.dim) {\n            ctx.globalAlpha = Types_1.DIM_OPACITY;\n        }\n        ctx.drawImage(this._texture, glyph.code * charAtlasCellWidth, colorIndex * charAtlasCellHeight, charAtlasCellWidth, this._config.scaledCharHeight, x, y, charAtlasCellWidth, this._config.scaledCharHeight);\n        ctx.restore();\n        return true;\n    };\n    return StaticCharAtlas;\n}(BaseCharAtlas_1.default));\nexports.default = StaticCharAtlas;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL2F0bGFzL1N0YXRpY0NoYXJBdGxhcy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9zcmMvcmVuZGVyZXIvYXRsYXMvU3RhdGljQ2hhckF0bGFzLnRzPzFhNTgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBESU1fT1BBQ0lUWSwgSUdseXBoSWRlbnRpZmllciwgSUNoYXJBdGxhc0NvbmZpZywgQ0hBUl9BVExBU19DRUxMX1NQQUNJTkcgfSBmcm9tICcuL1R5cGVzJztcbmltcG9ydCB7IGdlbmVyYXRlU3RhdGljQ2hhckF0bGFzVGV4dHVyZSB9IGZyb20gJy4vQ2hhckF0bGFzR2VuZXJhdG9yJztcbmltcG9ydCBCYXNlQ2hhckF0bGFzIGZyb20gJy4vQmFzZUNoYXJBdGxhcyc7XG5pbXBvcnQgeyBpczI1NkNvbG9yIH0gZnJvbSAnLi9DaGFyQXRsYXNVdGlscyc7XG5pbXBvcnQgeyBERUZBVUxUX0NPTE9SIH0gZnJvbSAnLi4vLi4vY29tbW9uL1R5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhdGljQ2hhckF0bGFzIGV4dGVuZHMgQmFzZUNoYXJBdGxhcyB7XG4gIHByaXZhdGUgX3RleHR1cmU6IEhUTUxDYW52YXNFbGVtZW50IHwgSW1hZ2VCaXRtYXA7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfZG9jdW1lbnQ6IERvY3VtZW50LCBwcml2YXRlIF9jb25maWc6IElDaGFyQXRsYXNDb25maWcpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHJpdmF0ZSBfY2FudmFzRmFjdG9yeSA9ICh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuX2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAvLyBUaGlzIGlzIHVzZWZ1bCBmb3IgZGVidWdnaW5nXG4gICAgLy8gZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYW52YXMpO1xuXG4gICAgcmV0dXJuIGNhbnZhcztcbiAgfVxuXG4gIHByb3RlY3RlZCBfZG9XYXJtVXAoKTogdm9pZCB7XG4gICAgY29uc3QgcmVzdWx0ID0gZ2VuZXJhdGVTdGF0aWNDaGFyQXRsYXNUZXh0dXJlKHdpbmRvdywgdGhpcy5fY2FudmFzRmFjdG9yeSwgdGhpcy5fY29uZmlnKTtcbiAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQpIHtcbiAgICAgIHRoaXMuX3RleHR1cmUgPSByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC50aGVuKHRleHR1cmUgPT4ge1xuICAgICAgICB0aGlzLl90ZXh0dXJlID0gdGV4dHVyZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2lzQ2FjaGVkKGdseXBoOiBJR2x5cGhJZGVudGlmaWVyLCBjb2xvckluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBjb25zdCBpc0FzY2lpID0gZ2x5cGguY29kZSA8IDI1NjtcbiAgICAvLyBBIGNvbG9yIGlzIGJhc2ljIGlmIGl0IGlzIG9uZSBvZiB0aGUgNCBiaXQgQU5TSSBjb2xvcnMuXG4gICAgY29uc3QgaXNCYXNpY0NvbG9yID0gZ2x5cGguZmcgPCAxNjtcbiAgICBjb25zdCBpc0RlZmF1bHRDb2xvciA9IGdseXBoLmZnID09PSBERUZBVUxUX0NPTE9SO1xuICAgIGNvbnN0IGlzRGVmYXVsdEJhY2tncm91bmQgPSBnbHlwaC5iZyA9PT0gREVGQVVMVF9DT0xPUjtcbiAgICByZXR1cm4gaXNBc2NpaSAmJiAoaXNCYXNpY0NvbG9yIHx8IGlzRGVmYXVsdENvbG9yKSAmJiBpc0RlZmF1bHRCYWNrZ3JvdW5kICYmICFnbHlwaC5pdGFsaWM7XG4gIH1cblxuICBwdWJsaWMgZHJhdyhcbiAgICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbiAgICBnbHlwaDogSUdseXBoSWRlbnRpZmllcixcbiAgICB4OiBudW1iZXIsXG4gICAgeTogbnVtYmVyXG4gICk6IGJvb2xlYW4ge1xuICAgIC8vIHdlJ3JlIG5vdCB3YXJtZWQgdXAgeWV0XG4gICAgaWYgKHRoaXMuX3RleHR1cmUgPT09IG51bGwgfHwgdGhpcy5fdGV4dHVyZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbGV0IGNvbG9ySW5kZXggPSAwO1xuICAgIGlmIChpczI1NkNvbG9yKGdseXBoLmZnKSkge1xuICAgICAgY29sb3JJbmRleCA9IDIgKyBnbHlwaC5mZyArIChnbHlwaC5ib2xkID8gMTYgOiAwKTtcbiAgICB9IGVsc2UgaWYgKGdseXBoLmZnID09PSBERUZBVUxUX0NPTE9SKSB7XG4gICAgICAvLyBJZiBkZWZhdWx0IGNvbG9yIGFuZCBib2xkXG4gICAgICBpZiAoZ2x5cGguYm9sZCkge1xuICAgICAgICBjb2xvckluZGV4ID0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCF0aGlzLl9pc0NhY2hlZChnbHlwaCwgY29sb3JJbmRleCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjdHguc2F2ZSgpO1xuXG4gICAgLy8gSW1hZ2VCaXRtYXAncyBkcmF3IGFib3V0IHR3aWNlIGFzIGZhc3QgYXMgZnJvbSBhIGNhbnZhc1xuICAgIGNvbnN0IGNoYXJBdGxhc0NlbGxXaWR0aCA9IHRoaXMuX2NvbmZpZy5zY2FsZWRDaGFyV2lkdGggKyBDSEFSX0FUTEFTX0NFTExfU1BBQ0lORztcbiAgICBjb25zdCBjaGFyQXRsYXNDZWxsSGVpZ2h0ID0gdGhpcy5fY29uZmlnLnNjYWxlZENoYXJIZWlnaHQgKyBDSEFSX0FUTEFTX0NFTExfU1BBQ0lORztcblxuICAgIC8vIEFwcGx5IGFscGhhIHRvIGRpbSB0aGUgY2hhcmFjdGVyXG4gICAgaWYgKGdseXBoLmRpbSkge1xuICAgICAgY3R4Lmdsb2JhbEFscGhhID0gRElNX09QQUNJVFk7XG4gICAgfVxuXG4gICAgY3R4LmRyYXdJbWFnZShcbiAgICAgIHRoaXMuX3RleHR1cmUsXG4gICAgICBnbHlwaC5jb2RlICogY2hhckF0bGFzQ2VsbFdpZHRoLFxuICAgICAgY29sb3JJbmRleCAqIGNoYXJBdGxhc0NlbGxIZWlnaHQsXG4gICAgICBjaGFyQXRsYXNDZWxsV2lkdGgsXG4gICAgICB0aGlzLl9jb25maWcuc2NhbGVkQ2hhckhlaWdodCxcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgY2hhckF0bGFzQ2VsbFdpZHRoLFxuICAgICAgdGhpcy5fY29uZmlnLnNjYWxlZENoYXJIZWlnaHRcbiAgICApO1xuXG4gICAgY3R4LnJlc3RvcmUoKTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7O0FBWEE7QUFhQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBT0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFZQTtBQUVBO0FBQ0E7QUFDQTtBQUFBOzsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/renderer/atlas/StaticCharAtlas.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/renderer/atlas/Types.js":
/*!********************************************************!*\
  !*** ./node_modules/xterm/lib/renderer/atlas/Types.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.INVERTED_DEFAULT_COLOR = 257;\nexports.DIM_OPACITY = 0.5;\nexports.CHAR_ATLAS_CELL_SPACING = 1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL2F0bGFzL1R5cGVzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL3NyYy9yZW5kZXJlci9hdGxhcy9UeXBlcy50cz9jZGVlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgRm9udFdlaWdodCB9IGZyb20gJ3h0ZXJtJztcbmltcG9ydCB7IElDb2xvclNldCB9IGZyb20gJy4uLy4uL3VpL1R5cGVzJztcblxuZXhwb3J0IGNvbnN0IElOVkVSVEVEX0RFRkFVTFRfQ09MT1IgPSAyNTc7XG5leHBvcnQgY29uc3QgRElNX09QQUNJVFkgPSAwLjU7XG5cbmV4cG9ydCBjb25zdCBDSEFSX0FUTEFTX0NFTExfU1BBQ0lORyA9IDE7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUdseXBoSWRlbnRpZmllciB7XG4gIGNoYXJzOiBzdHJpbmc7XG4gIGNvZGU6IG51bWJlcjtcbiAgYmc6IG51bWJlcjtcbiAgZmc6IG51bWJlcjtcbiAgYm9sZDogYm9vbGVhbjtcbiAgZGltOiBib29sZWFuO1xuICBpdGFsaWM6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNoYXJBdGxhc0NvbmZpZyB7XG4gIHR5cGU6ICdub25lJyB8ICdzdGF0aWMnIHwgJ2R5bmFtaWMnO1xuICBkZXZpY2VQaXhlbFJhdGlvOiBudW1iZXI7XG4gIGZvbnRTaXplOiBudW1iZXI7XG4gIGZvbnRGYW1pbHk6IHN0cmluZztcbiAgZm9udFdlaWdodDogRm9udFdlaWdodDtcbiAgZm9udFdlaWdodEJvbGQ6IEZvbnRXZWlnaHQ7XG4gIHNjYWxlZENoYXJXaWR0aDogbnVtYmVyO1xuICBzY2FsZWRDaGFySGVpZ2h0OiBudW1iZXI7XG4gIGFsbG93VHJhbnNwYXJlbmN5OiBib29sZWFuO1xuICBjb2xvcnM6IElDb2xvclNldDtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7QUFRQTtBQUNBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/renderer/atlas/Types.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/renderer/dom/DomRenderer.js":
/*!************************************************************!*\
  !*** ./node_modules/xterm/lib/renderer/dom/DomRenderer.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DomRendererRowFactory_1 = __webpack_require__(/*! ./DomRendererRowFactory */ \"./node_modules/xterm/lib/renderer/dom/DomRendererRowFactory.js\");\nvar Types_1 = __webpack_require__(/*! ../atlas/Types */ \"./node_modules/xterm/lib/renderer/atlas/Types.js\");\nvar Lifecycle_1 = __webpack_require__(/*! ../../common/Lifecycle */ \"./node_modules/xterm/lib/common/Lifecycle.js\");\nvar TERMINAL_CLASS_PREFIX = 'xterm-dom-renderer-owner-';\nvar ROW_CONTAINER_CLASS = 'xterm-rows';\nvar FG_CLASS_PREFIX = 'xterm-fg-';\nvar BG_CLASS_PREFIX = 'xterm-bg-';\nvar FOCUS_CLASS = 'xterm-focus';\nvar SELECTION_CLASS = 'xterm-selection';\nvar nextTerminalId = 1;\nvar DomRenderer = (function (_super) {\n    __extends(DomRenderer, _super);\n    function DomRenderer(_terminal, _colors) {\n        var _this = _super.call(this) || this;\n        _this._terminal = _terminal;\n        _this._colors = _colors;\n        _this._terminalClass = nextTerminalId++;\n        _this._rowElements = [];\n        _this._rowContainer = document.createElement('div');\n        _this._rowContainer.classList.add(ROW_CONTAINER_CLASS);\n        _this._rowContainer.style.lineHeight = 'normal';\n        _this._rowContainer.setAttribute('aria-hidden', 'true');\n        _this._refreshRowElements(_this._terminal.cols, _this._terminal.rows);\n        _this._selectionContainer = document.createElement('div');\n        _this._selectionContainer.classList.add(SELECTION_CLASS);\n        _this._selectionContainer.setAttribute('aria-hidden', 'true');\n        _this.dimensions = {\n            scaledCharWidth: null,\n            scaledCharHeight: null,\n            scaledCellWidth: null,\n            scaledCellHeight: null,\n            scaledCharLeft: null,\n            scaledCharTop: null,\n            scaledCanvasWidth: null,\n            scaledCanvasHeight: null,\n            canvasWidth: null,\n            canvasHeight: null,\n            actualCellWidth: null,\n            actualCellHeight: null\n        };\n        _this._updateDimensions();\n        _this._injectCss();\n        _this._rowFactory = new DomRendererRowFactory_1.DomRendererRowFactory(_terminal.options, document);\n        _this._terminal.element.classList.add(TERMINAL_CLASS_PREFIX + _this._terminalClass);\n        _this._terminal.screenElement.appendChild(_this._rowContainer);\n        _this._terminal.screenElement.appendChild(_this._selectionContainer);\n        _this._terminal.linkifier.onLinkHover(function (e) { return _this._onLinkHover(e); });\n        _this._terminal.linkifier.onLinkLeave(function (e) { return _this._onLinkLeave(e); });\n        return _this;\n    }\n    DomRenderer.prototype.dispose = function () {\n        this._terminal.element.classList.remove(TERMINAL_CLASS_PREFIX + this._terminalClass);\n        this._terminal.screenElement.removeChild(this._rowContainer);\n        this._terminal.screenElement.removeChild(this._selectionContainer);\n        this._terminal.screenElement.removeChild(this._themeStyleElement);\n        this._terminal.screenElement.removeChild(this._dimensionsStyleElement);\n        _super.prototype.dispose.call(this);\n    };\n    DomRenderer.prototype._updateDimensions = function () {\n        var _this = this;\n        this.dimensions.scaledCharWidth = this._terminal.charMeasure.width * window.devicePixelRatio;\n        this.dimensions.scaledCharHeight = Math.ceil(this._terminal.charMeasure.height * window.devicePixelRatio);\n        this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._terminal.options.letterSpacing);\n        this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._terminal.options.lineHeight);\n        this.dimensions.scaledCharLeft = 0;\n        this.dimensions.scaledCharTop = 0;\n        this.dimensions.scaledCanvasWidth = this.dimensions.scaledCellWidth * this._terminal.cols;\n        this.dimensions.scaledCanvasHeight = this.dimensions.scaledCellHeight * this._terminal.rows;\n        this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / window.devicePixelRatio);\n        this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / window.devicePixelRatio);\n        this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._terminal.cols;\n        this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._terminal.rows;\n        this._rowElements.forEach(function (element) {\n            element.style.width = _this.dimensions.canvasWidth + \"px\";\n            element.style.height = _this.dimensions.actualCellHeight + \"px\";\n            element.style.lineHeight = _this.dimensions.actualCellHeight + \"px\";\n            element.style.overflow = 'hidden';\n        });\n        if (!this._dimensionsStyleElement) {\n            this._dimensionsStyleElement = document.createElement('style');\n            this._terminal.screenElement.appendChild(this._dimensionsStyleElement);\n        }\n        var styles = this._terminalSelector + \" .\" + ROW_CONTAINER_CLASS + \" span {\" +\n            \" display: inline-block;\" +\n            \" height: 100%;\" +\n            \" vertical-align: top;\" +\n            (\" width: \" + this.dimensions.actualCellWidth + \"px\") +\n            \"}\";\n        this._dimensionsStyleElement.innerHTML = styles;\n        this._selectionContainer.style.height = this._terminal._viewportElement.style.height;\n        this._terminal.screenElement.style.width = this.dimensions.canvasWidth + \"px\";\n        this._terminal.screenElement.style.height = this.dimensions.canvasHeight + \"px\";\n    };\n    DomRenderer.prototype.setColors = function (colors) {\n        this._colors = colors;\n        this._injectCss();\n    };\n    DomRenderer.prototype._injectCss = function () {\n        var _this = this;\n        if (!this._themeStyleElement) {\n            this._themeStyleElement = document.createElement('style');\n            this._terminal.screenElement.appendChild(this._themeStyleElement);\n        }\n        var styles = this._terminalSelector + \" .\" + ROW_CONTAINER_CLASS + \" {\" +\n            (\" color: \" + this._colors.foreground.css + \";\") +\n            (\" background-color: \" + this._colors.background.css + \";\") +\n            (\" font-family: \" + this._terminal.options.fontFamily + \";\") +\n            (\" font-size: \" + this._terminal.options.fontSize + \"px;\") +\n            \"}\";\n        styles +=\n            this._terminalSelector + \" span:not(.\" + DomRendererRowFactory_1.BOLD_CLASS + \") {\" +\n                (\" font-weight: \" + this._terminal.options.fontWeight + \";\") +\n                \"}\" +\n                (this._terminalSelector + \" span.\" + DomRendererRowFactory_1.BOLD_CLASS + \" {\") +\n                (\" font-weight: \" + this._terminal.options.fontWeightBold + \";\") +\n                \"}\" +\n                (this._terminalSelector + \" span.\" + DomRendererRowFactory_1.ITALIC_CLASS + \" {\") +\n                \" font-style: italic;\" +\n                \"}\";\n        styles +=\n            \"@keyframes blink {\" +\n                \" 0% { opacity: 1.0; }\" +\n                \" 50% { opacity: 0.0; }\" +\n                \" 100% { opacity: 1.0; }\" +\n                \"}\";\n        styles +=\n            this._terminalSelector + \" .\" + ROW_CONTAINER_CLASS + \":not(.\" + FOCUS_CLASS + \") .\" + DomRendererRowFactory_1.CURSOR_CLASS + \" {\" +\n                (\" outline: 1px solid \" + this._colors.cursor.css + \";\") +\n                \" outline-offset: -1px;\" +\n                \"}\" +\n                (this._terminalSelector + \" .\" + ROW_CONTAINER_CLASS + \".\" + FOCUS_CLASS + \" .\" + DomRendererRowFactory_1.CURSOR_CLASS + \".\" + DomRendererRowFactory_1.CURSOR_BLINK_CLASS + \" {\") +\n                \" animation: blink 1s step-end infinite;\" +\n                \"}\" +\n                (this._terminalSelector + \" .\" + ROW_CONTAINER_CLASS + \".\" + FOCUS_CLASS + \" .\" + DomRendererRowFactory_1.CURSOR_CLASS + \".\" + DomRendererRowFactory_1.CURSOR_STYLE_BLOCK_CLASS + \" {\") +\n                (\" background-color: \" + this._colors.cursor.css + \";\") +\n                (\" color: \" + this._colors.cursorAccent.css + \";\") +\n                \"}\" +\n                (this._terminalSelector + \" .\" + ROW_CONTAINER_CLASS + \".\" + FOCUS_CLASS + \" .\" + DomRendererRowFactory_1.CURSOR_CLASS + \".\" + DomRendererRowFactory_1.CURSOR_STYLE_BAR_CLASS + \" {\") +\n                (\" box-shadow: 1px 0 0 \" + this._colors.cursor.css + \" inset;\") +\n                \"}\" +\n                (this._terminalSelector + \" .\" + ROW_CONTAINER_CLASS + \".\" + FOCUS_CLASS + \" .\" + DomRendererRowFactory_1.CURSOR_CLASS + \".\" + DomRendererRowFactory_1.CURSOR_STYLE_UNDERLINE_CLASS + \" {\") +\n                (\" box-shadow: 0 -1px 0 \" + this._colors.cursor.css + \" inset;\") +\n                \"}\";\n        styles +=\n            this._terminalSelector + \" .\" + SELECTION_CLASS + \" {\" +\n                \" position: absolute;\" +\n                \" top: 0;\" +\n                \" left: 0;\" +\n                \" z-index: 1;\" +\n                \" pointer-events: none;\" +\n                \"}\" +\n                (this._terminalSelector + \" .\" + SELECTION_CLASS + \" div {\") +\n                \" position: absolute;\" +\n                (\" background-color: \" + this._colors.selection.css + \";\") +\n                \"}\";\n        this._colors.ansi.forEach(function (c, i) {\n            styles +=\n                _this._terminalSelector + \" .\" + FG_CLASS_PREFIX + i + \" { color: \" + c.css + \"; }\" +\n                    (_this._terminalSelector + \" .\" + BG_CLASS_PREFIX + i + \" { background-color: \" + c.css + \"; }\");\n        });\n        styles +=\n            this._terminalSelector + \" .\" + FG_CLASS_PREFIX + Types_1.INVERTED_DEFAULT_COLOR + \" { color: \" + this._colors.background.css + \"; }\" +\n                (this._terminalSelector + \" .\" + BG_CLASS_PREFIX + Types_1.INVERTED_DEFAULT_COLOR + \" { background-color: \" + this._colors.foreground.css + \"; }\");\n        this._themeStyleElement.innerHTML = styles;\n    };\n    DomRenderer.prototype.onDevicePixelRatioChange = function () {\n        this._updateDimensions();\n    };\n    DomRenderer.prototype._refreshRowElements = function (cols, rows) {\n        for (var i = this._rowElements.length; i <= rows; i++) {\n            var row = document.createElement('div');\n            this._rowContainer.appendChild(row);\n            this._rowElements.push(row);\n        }\n        while (this._rowElements.length > rows) {\n            this._rowContainer.removeChild(this._rowElements.pop());\n        }\n    };\n    DomRenderer.prototype.onResize = function (cols, rows) {\n        this._refreshRowElements(cols, rows);\n        this._updateDimensions();\n    };\n    DomRenderer.prototype.onCharSizeChanged = function () {\n        this._updateDimensions();\n    };\n    DomRenderer.prototype.onBlur = function () {\n        this._rowContainer.classList.remove(FOCUS_CLASS);\n    };\n    DomRenderer.prototype.onFocus = function () {\n        this._rowContainer.classList.add(FOCUS_CLASS);\n    };\n    DomRenderer.prototype.onSelectionChanged = function (start, end, columnSelectMode) {\n        while (this._selectionContainer.children.length) {\n            this._selectionContainer.removeChild(this._selectionContainer.children[0]);\n        }\n        if (!start || !end) {\n            return;\n        }\n        var viewportStartRow = start[1] - this._terminal.buffer.ydisp;\n        var viewportEndRow = end[1] - this._terminal.buffer.ydisp;\n        var viewportCappedStartRow = Math.max(viewportStartRow, 0);\n        var viewportCappedEndRow = Math.min(viewportEndRow, this._terminal.rows - 1);\n        if (viewportCappedStartRow >= this._terminal.rows || viewportCappedEndRow < 0) {\n            return;\n        }\n        var documentFragment = document.createDocumentFragment();\n        if (columnSelectMode) {\n            documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow, start[0], end[0], viewportCappedEndRow - viewportCappedStartRow + 1));\n        }\n        else {\n            var startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\n            var endCol = viewportCappedStartRow === viewportCappedEndRow ? end[0] : this._terminal.cols;\n            documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow, startCol, endCol));\n            var middleRowsCount = viewportCappedEndRow - viewportCappedStartRow - 1;\n            documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow + 1, 0, this._terminal.cols, middleRowsCount));\n            if (viewportCappedStartRow !== viewportCappedEndRow) {\n                var endCol_1 = viewportEndRow === viewportCappedEndRow ? end[0] : this._terminal.cols;\n                documentFragment.appendChild(this._createSelectionElement(viewportCappedEndRow, 0, endCol_1));\n            }\n        }\n        this._selectionContainer.appendChild(documentFragment);\n    };\n    DomRenderer.prototype._createSelectionElement = function (row, colStart, colEnd, rowCount) {\n        if (rowCount === void 0) { rowCount = 1; }\n        var element = document.createElement('div');\n        element.style.height = rowCount * this.dimensions.actualCellHeight + \"px\";\n        element.style.top = row * this.dimensions.actualCellHeight + \"px\";\n        element.style.left = colStart * this.dimensions.actualCellWidth + \"px\";\n        element.style.width = this.dimensions.actualCellWidth * (colEnd - colStart) + \"px\";\n        return element;\n    };\n    DomRenderer.prototype.onCursorMove = function () {\n    };\n    DomRenderer.prototype.onOptionsChanged = function () {\n        this._updateDimensions();\n        this._injectCss();\n        this._terminal.refresh(0, this._terminal.rows - 1);\n    };\n    DomRenderer.prototype.clear = function () {\n        this._rowElements.forEach(function (e) { return e.innerHTML = ''; });\n    };\n    DomRenderer.prototype.renderRows = function (start, end) {\n        var terminal = this._terminal;\n        var cursorAbsoluteY = terminal.buffer.ybase + terminal.buffer.y;\n        var cursorX = this._terminal.buffer.x;\n        var cursorBlink = this._terminal.options.cursorBlink;\n        for (var y = start; y <= end; y++) {\n            var rowElement = this._rowElements[y];\n            rowElement.innerHTML = '';\n            var row = y + terminal.buffer.ydisp;\n            var lineData = terminal.buffer.lines.get(row);\n            var cursorStyle = terminal.options.cursorStyle;\n            rowElement.appendChild(this._rowFactory.createRow(lineData, row === cursorAbsoluteY, cursorStyle, cursorX, cursorBlink, this.dimensions.actualCellWidth, terminal.cols));\n        }\n    };\n    Object.defineProperty(DomRenderer.prototype, \"_terminalSelector\", {\n        get: function () {\n            return \".\" + TERMINAL_CLASS_PREFIX + this._terminalClass;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DomRenderer.prototype.registerCharacterJoiner = function (handler) { return -1; };\n    DomRenderer.prototype.deregisterCharacterJoiner = function (joinerId) { return false; };\n    DomRenderer.prototype._onLinkHover = function (e) {\n        this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, true);\n    };\n    DomRenderer.prototype._onLinkLeave = function (e) {\n        this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, false);\n    };\n    DomRenderer.prototype._setCellUnderline = function (x, x2, y, y2, cols, enabled) {\n        while (x !== x2 || y !== y2) {\n            var row = this._rowElements[y];\n            if (!row) {\n                return;\n            }\n            var span = row.children[x];\n            if (span) {\n                span.style.textDecoration = enabled ? 'underline' : 'none';\n            }\n            if (++x >= cols) {\n                x = 0;\n                y++;\n            }\n        }\n    };\n    return DomRenderer;\n}(Lifecycle_1.Disposable));\nexports.DomRenderer = DomRenderer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/renderer/dom/DomRenderer.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/renderer/dom/DomRendererRowFactory.js":
/*!**********************************************************************!*\
  !*** ./node_modules/xterm/lib/renderer/dom/DomRendererRowFactory.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Types_1 = __webpack_require__(/*! ../atlas/Types */ \"./node_modules/xterm/lib/renderer/atlas/Types.js\");\nvar BufferLine_1 = __webpack_require__(/*! ../../core/buffer/BufferLine */ \"./node_modules/xterm/lib/core/buffer/BufferLine.js\");\nexports.BOLD_CLASS = 'xterm-bold';\nexports.DIM_CLASS = 'xterm-dim';\nexports.ITALIC_CLASS = 'xterm-italic';\nexports.UNDERLINE_CLASS = 'xterm-underline';\nexports.CURSOR_CLASS = 'xterm-cursor';\nexports.CURSOR_BLINK_CLASS = 'xterm-cursor-blink';\nexports.CURSOR_STYLE_BLOCK_CLASS = 'xterm-cursor-block';\nexports.CURSOR_STYLE_BAR_CLASS = 'xterm-cursor-bar';\nexports.CURSOR_STYLE_UNDERLINE_CLASS = 'xterm-cursor-underline';\nvar DomRendererRowFactory = (function () {\n    function DomRendererRowFactory(_terminalOptions, _document) {\n        this._terminalOptions = _terminalOptions;\n        this._document = _document;\n        this._workCell = new BufferLine_1.CellData();\n    }\n    DomRendererRowFactory.prototype.createRow = function (lineData, isCursorRow, cursorStyle, cursorX, cursorBlink, cellWidth, cols) {\n        var fragment = this._document.createDocumentFragment();\n        var lineLength = 0;\n        for (var x = Math.min(lineData.length, cols) - 1; x >= 0; x--) {\n            if (lineData.loadCell(x, this._workCell).getCode() !== BufferLine_1.NULL_CELL_CODE || (isCursorRow && x === cursorX)) {\n                lineLength = x + 1;\n                break;\n            }\n        }\n        for (var x = 0; x < lineLength; x++) {\n            lineData.loadCell(x, this._workCell);\n            var width = this._workCell.getWidth();\n            if (width === 0) {\n                continue;\n            }\n            var charElement = this._document.createElement('span');\n            if (width > 1) {\n                charElement.style.width = cellWidth * width + \"px\";\n            }\n            if (isCursorRow && x === cursorX) {\n                charElement.classList.add(exports.CURSOR_CLASS);\n                if (cursorBlink) {\n                    charElement.classList.add(exports.CURSOR_BLINK_CLASS);\n                }\n                switch (cursorStyle) {\n                    case 'bar':\n                        charElement.classList.add(exports.CURSOR_STYLE_BAR_CLASS);\n                        break;\n                    case 'underline':\n                        charElement.classList.add(exports.CURSOR_STYLE_UNDERLINE_CLASS);\n                        break;\n                    default:\n                        charElement.classList.add(exports.CURSOR_STYLE_BLOCK_CLASS);\n                        break;\n                }\n            }\n            if (this._workCell.isBold() && this._terminalOptions.enableBold) {\n                charElement.classList.add(exports.BOLD_CLASS);\n            }\n            if (this._workCell.isItalic()) {\n                charElement.classList.add(exports.ITALIC_CLASS);\n            }\n            if (this._workCell.isDim()) {\n                charElement.classList.add(exports.DIM_CLASS);\n            }\n            if (this._workCell.isUnderline()) {\n                charElement.classList.add(exports.UNDERLINE_CLASS);\n            }\n            charElement.textContent = this._workCell.getChars() || BufferLine_1.WHITESPACE_CELL_CHAR;\n            var swapColor = this._workCell.isInverse();\n            if (this._workCell.isFgRGB()) {\n                var style = charElement.getAttribute('style') || '';\n                style += (swapColor ? 'background-' : '') + \"color:rgb(\" + (BufferLine_1.AttributeData.toColorRGB(this._workCell.getFgColor())).join(',') + \");\";\n                charElement.setAttribute('style', style);\n            }\n            else if (this._workCell.isFgPalette()) {\n                var fg = this._workCell.getFgColor();\n                if (this._workCell.isBold() && fg < 8 && !swapColor &&\n                    this._terminalOptions.enableBold && this._terminalOptions.drawBoldTextInBrightColors) {\n                    fg += 8;\n                }\n                charElement.classList.add(\"xterm-\" + (swapColor ? 'b' : 'f') + \"g-\" + fg);\n            }\n            else if (swapColor) {\n                charElement.classList.add(\"xterm-bg-\" + Types_1.INVERTED_DEFAULT_COLOR);\n            }\n            if (this._workCell.isBgRGB()) {\n                var style = charElement.getAttribute('style') || '';\n                style += (swapColor ? '' : 'background-') + \"color:rgb(\" + (BufferLine_1.AttributeData.toColorRGB(this._workCell.getBgColor())).join(',') + \");\";\n                charElement.setAttribute('style', style);\n            }\n            else if (this._workCell.isBgPalette()) {\n                charElement.classList.add(\"xterm-\" + (swapColor ? 'f' : 'b') + \"g-\" + this._workCell.getBgColor());\n            }\n            else if (swapColor) {\n                charElement.classList.add(\"xterm-fg-\" + Types_1.INVERTED_DEFAULT_COLOR);\n            }\n            fragment.appendChild(charElement);\n        }\n        return fragment;\n    };\n    return DomRendererRowFactory;\n}());\nexports.DomRendererRowFactory = DomRendererRowFactory;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL2RvbS9Eb21SZW5kZXJlclJvd0ZhY3RvcnkuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3JlbmRlcmVyL2RvbS9Eb21SZW5kZXJlclJvd0ZhY3RvcnkudHM/YzZhYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOCBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElUZXJtaW5hbE9wdGlvbnMgfSBmcm9tICcuLi8uLi9UeXBlcyc7XG5pbXBvcnQgeyBJQnVmZmVyTGluZSB9IGZyb20gJy4uLy4uL2NvcmUvVHlwZXMnO1xuaW1wb3J0IHsgSU5WRVJURURfREVGQVVMVF9DT0xPUiB9IGZyb20gJy4uL2F0bGFzL1R5cGVzJztcbmltcG9ydCB7IENlbGxEYXRhLCBBdHRyaWJ1dGVEYXRhLCBOVUxMX0NFTExfQ09ERSwgV0hJVEVTUEFDRV9DRUxMX0NIQVIgfSBmcm9tICcuLi8uLi9jb3JlL2J1ZmZlci9CdWZmZXJMaW5lJztcblxuZXhwb3J0IGNvbnN0IEJPTERfQ0xBU1MgPSAneHRlcm0tYm9sZCc7XG5leHBvcnQgY29uc3QgRElNX0NMQVNTID0gJ3h0ZXJtLWRpbSc7XG5leHBvcnQgY29uc3QgSVRBTElDX0NMQVNTID0gJ3h0ZXJtLWl0YWxpYyc7XG5leHBvcnQgY29uc3QgVU5ERVJMSU5FX0NMQVNTID0gJ3h0ZXJtLXVuZGVybGluZSc7XG5leHBvcnQgY29uc3QgQ1VSU09SX0NMQVNTID0gJ3h0ZXJtLWN1cnNvcic7XG5leHBvcnQgY29uc3QgQ1VSU09SX0JMSU5LX0NMQVNTID0gJ3h0ZXJtLWN1cnNvci1ibGluayc7XG5leHBvcnQgY29uc3QgQ1VSU09SX1NUWUxFX0JMT0NLX0NMQVNTID0gJ3h0ZXJtLWN1cnNvci1ibG9jayc7XG5leHBvcnQgY29uc3QgQ1VSU09SX1NUWUxFX0JBUl9DTEFTUyA9ICd4dGVybS1jdXJzb3ItYmFyJztcbmV4cG9ydCBjb25zdCBDVVJTT1JfU1RZTEVfVU5ERVJMSU5FX0NMQVNTID0gJ3h0ZXJtLWN1cnNvci11bmRlcmxpbmUnO1xuXG5leHBvcnQgY2xhc3MgRG9tUmVuZGVyZXJSb3dGYWN0b3J5IHtcbiAgcHJpdmF0ZSBfd29ya0NlbGw6IENlbGxEYXRhID0gbmV3IENlbGxEYXRhKCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfdGVybWluYWxPcHRpb25zOiBJVGVybWluYWxPcHRpb25zLFxuICAgIHByaXZhdGUgX2RvY3VtZW50OiBEb2N1bWVudFxuICApIHtcbiAgfVxuXG4gIHB1YmxpYyBjcmVhdGVSb3cobGluZURhdGE6IElCdWZmZXJMaW5lLCBpc0N1cnNvclJvdzogYm9vbGVhbiwgY3Vyc29yU3R5bGU6IHN0cmluZyB8IHVuZGVmaW5lZCwgY3Vyc29yWDogbnVtYmVyLCBjdXJzb3JCbGluazogYm9vbGVhbiwgY2VsbFdpZHRoOiBudW1iZXIsIGNvbHM6IG51bWJlcik6IERvY3VtZW50RnJhZ21lbnQge1xuICAgIGNvbnN0IGZyYWdtZW50ID0gdGhpcy5fZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXG4gICAgLy8gRmluZCB0aGUgbGluZSBsZW5ndGggZmlyc3QsIHRoaXMgcHJldmVudHMgdGhlIG5lZWQgdG8gb3V0cHV0IGEgYnVuY2ggb2ZcbiAgICAvLyBlbXB0eSBjZWxscyBhdCB0aGUgZW5kLiBUaGlzIGNhbm5vdCBlYXNpbHkgYmUgaW50ZWdyYXRlZCBpbnRvIHRoZSBtYWluXG4gICAgLy8gbG9vcCBiZWxvdyBiZWNhdXNlIG9mIHRoZSBjb2xDb3VudCBmZWF0dXJlICh3aGljaCBjYW4gYmUgcmVtb3ZlZCBhZnRlciB3ZVxuICAgIC8vIHByb3Blcmx5IHN1cHBvcnQgcmVmbG93IGFuZCBkaXNhbGxvdyBkYXRhIHRvIGdvIGJleW9uZCB0aGUgcmlnaHQtc2lkZSBvZlxuICAgIC8vIHRoZSB2aWV3cG9ydCkuXG4gICAgbGV0IGxpbmVMZW5ndGggPSAwO1xuICAgIGZvciAobGV0IHggPSBNYXRoLm1pbihsaW5lRGF0YS5sZW5ndGgsIGNvbHMpIC0gMTsgeCA+PSAwOyB4LS0pIHtcbiAgICAgIGlmIChsaW5lRGF0YS5sb2FkQ2VsbCh4LCB0aGlzLl93b3JrQ2VsbCkuZ2V0Q29kZSgpICE9PSBOVUxMX0NFTExfQ09ERSB8fCAoaXNDdXJzb3JSb3cgJiYgeCA9PT0gY3Vyc29yWCkpIHtcbiAgICAgICAgbGluZUxlbmd0aCA9IHggKyAxO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGxpbmVMZW5ndGg7IHgrKykge1xuICAgICAgbGluZURhdGEubG9hZENlbGwoeCwgdGhpcy5fd29ya0NlbGwpO1xuICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLl93b3JrQ2VsbC5nZXRXaWR0aCgpO1xuXG4gICAgICAvLyBUaGUgY2hhcmFjdGVyIHRvIHRoZSBsZWZ0IGlzIGEgd2lkZSBjaGFyYWN0ZXIsIGRyYXdpbmcgaXMgb3duZWQgYnkgdGhlIGNoYXIgYXQgeC0xXG4gICAgICBpZiAod2lkdGggPT09IDApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNoYXJFbGVtZW50ID0gdGhpcy5fZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgaWYgKHdpZHRoID4gMSkge1xuICAgICAgICBjaGFyRWxlbWVudC5zdHlsZS53aWR0aCA9IGAke2NlbGxXaWR0aCAqIHdpZHRofXB4YDtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzQ3Vyc29yUm93ICYmIHggPT09IGN1cnNvclgpIHtcbiAgICAgICAgY2hhckVsZW1lbnQuY2xhc3NMaXN0LmFkZChDVVJTT1JfQ0xBU1MpO1xuXG4gICAgICAgIGlmIChjdXJzb3JCbGluaykge1xuICAgICAgICAgIGNoYXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoQ1VSU09SX0JMSU5LX0NMQVNTKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoY3Vyc29yU3R5bGUpIHtcbiAgICAgICAgICBjYXNlICdiYXInOlxuICAgICAgICAgICAgY2hhckVsZW1lbnQuY2xhc3NMaXN0LmFkZChDVVJTT1JfU1RZTEVfQkFSX0NMQVNTKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3VuZGVybGluZSc6XG4gICAgICAgICAgICBjaGFyRWxlbWVudC5jbGFzc0xpc3QuYWRkKENVUlNPUl9TVFlMRV9VTkRFUkxJTkVfQ0xBU1MpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNoYXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoQ1VSU09SX1NUWUxFX0JMT0NLX0NMQVNTKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl93b3JrQ2VsbC5pc0JvbGQoKSAmJiB0aGlzLl90ZXJtaW5hbE9wdGlvbnMuZW5hYmxlQm9sZCkge1xuICAgICAgICBjaGFyRWxlbWVudC5jbGFzc0xpc3QuYWRkKEJPTERfQ0xBU1MpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fd29ya0NlbGwuaXNJdGFsaWMoKSkge1xuICAgICAgICBjaGFyRWxlbWVudC5jbGFzc0xpc3QuYWRkKElUQUxJQ19DTEFTUyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl93b3JrQ2VsbC5pc0RpbSgpKSB7XG4gICAgICAgIGNoYXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoRElNX0NMQVNTKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3dvcmtDZWxsLmlzVW5kZXJsaW5lKCkpIHtcbiAgICAgICAgY2hhckVsZW1lbnQuY2xhc3NMaXN0LmFkZChVTkRFUkxJTkVfQ0xBU1MpO1xuICAgICAgfVxuXG4gICAgICBjaGFyRWxlbWVudC50ZXh0Q29udGVudCA9IHRoaXMuX3dvcmtDZWxsLmdldENoYXJzKCkgfHwgV0hJVEVTUEFDRV9DRUxMX0NIQVI7XG5cbiAgICAgIGNvbnN0IHN3YXBDb2xvciA9IHRoaXMuX3dvcmtDZWxsLmlzSW52ZXJzZSgpO1xuXG4gICAgICAvLyBmZ1xuICAgICAgaWYgKHRoaXMuX3dvcmtDZWxsLmlzRmdSR0IoKSkge1xuICAgICAgICBsZXQgc3R5bGUgPSBjaGFyRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3N0eWxlJykgfHwgJyc7XG4gICAgICAgIHN0eWxlICs9IGAke3N3YXBDb2xvciA/ICdiYWNrZ3JvdW5kLScgOiAnJ31jb2xvcjpyZ2IoJHsoQXR0cmlidXRlRGF0YS50b0NvbG9yUkdCKHRoaXMuX3dvcmtDZWxsLmdldEZnQ29sb3IoKSkpLmpvaW4oJywnKX0pO2A7XG4gICAgICAgIGNoYXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBzdHlsZSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX3dvcmtDZWxsLmlzRmdQYWxldHRlKCkpIHtcbiAgICAgICAgbGV0IGZnID0gdGhpcy5fd29ya0NlbGwuZ2V0RmdDb2xvcigpO1xuICAgICAgICBpZiAodGhpcy5fd29ya0NlbGwuaXNCb2xkKCkgJiYgZmcgPCA4ICYmICFzd2FwQ29sb3IgJiZcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsT3B0aW9ucy5lbmFibGVCb2xkICYmIHRoaXMuX3Rlcm1pbmFsT3B0aW9ucy5kcmF3Qm9sZFRleHRJbkJyaWdodENvbG9ycykge1xuICAgICAgICAgIGZnICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgY2hhckVsZW1lbnQuY2xhc3NMaXN0LmFkZChgeHRlcm0tJHtzd2FwQ29sb3IgPyAnYicgOiAnZid9Zy0ke2ZnfWApO1xuICAgICAgfSBlbHNlIGlmIChzd2FwQ29sb3IpIHtcbiAgICAgICAgY2hhckVsZW1lbnQuY2xhc3NMaXN0LmFkZChgeHRlcm0tYmctJHtJTlZFUlRFRF9ERUZBVUxUX0NPTE9SfWApO1xuICAgICAgfVxuXG4gICAgICAvLyBiZ1xuICAgICAgaWYgKHRoaXMuX3dvcmtDZWxsLmlzQmdSR0IoKSkge1xuICAgICAgICBsZXQgc3R5bGUgPSBjaGFyRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3N0eWxlJykgfHwgJyc7XG4gICAgICAgIHN0eWxlICs9IGAke3N3YXBDb2xvciA/ICcnIDogJ2JhY2tncm91bmQtJ31jb2xvcjpyZ2IoJHsoQXR0cmlidXRlRGF0YS50b0NvbG9yUkdCKHRoaXMuX3dvcmtDZWxsLmdldEJnQ29sb3IoKSkpLmpvaW4oJywnKX0pO2A7XG4gICAgICAgIGNoYXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBzdHlsZSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX3dvcmtDZWxsLmlzQmdQYWxldHRlKCkpIHtcbiAgICAgICAgY2hhckVsZW1lbnQuY2xhc3NMaXN0LmFkZChgeHRlcm0tJHtzd2FwQ29sb3IgPyAnZicgOiAnYid9Zy0ke3RoaXMuX3dvcmtDZWxsLmdldEJnQ29sb3IoKX1gKTtcbiAgICAgIH0gZWxzZSBpZiAoc3dhcENvbG9yKSB7XG4gICAgICAgIGNoYXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoYHh0ZXJtLWZnLSR7SU5WRVJURURfREVGQVVMVF9DT0xPUn1gKTtcbiAgICAgIH1cblxuICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoY2hhckVsZW1lbnQpO1xuICAgIH1cbiAgICByZXR1cm4gZnJhZ21lbnQ7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7QUFPQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBRUE7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQTlHQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/renderer/dom/DomRendererRowFactory.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/ui/ColorManager.js":
/*!***************************************************!*\
  !*** ./node_modules/xterm/lib/ui/ColorManager.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DEFAULT_FOREGROUND = fromHex('#ffffff');\nvar DEFAULT_BACKGROUND = fromHex('#000000');\nvar DEFAULT_CURSOR = fromHex('#ffffff');\nvar DEFAULT_CURSOR_ACCENT = fromHex('#000000');\nvar DEFAULT_SELECTION = {\n    css: 'rgba(255, 255, 255, 0.3)',\n    rgba: 0xFFFFFF77\n};\nexports.DEFAULT_ANSI_COLORS = (function () {\n    var colors = [\n        fromHex('#2e3436'),\n        fromHex('#cc0000'),\n        fromHex('#4e9a06'),\n        fromHex('#c4a000'),\n        fromHex('#3465a4'),\n        fromHex('#75507b'),\n        fromHex('#06989a'),\n        fromHex('#d3d7cf'),\n        fromHex('#555753'),\n        fromHex('#ef2929'),\n        fromHex('#8ae234'),\n        fromHex('#fce94f'),\n        fromHex('#729fcf'),\n        fromHex('#ad7fa8'),\n        fromHex('#34e2e2'),\n        fromHex('#eeeeec')\n    ];\n    var v = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff];\n    for (var i = 0; i < 216; i++) {\n        var r = v[(i / 36) % 6 | 0];\n        var g = v[(i / 6) % 6 | 0];\n        var b = v[i % 6];\n        colors.push({\n            css: \"#\" + toPaddedHex(r) + toPaddedHex(g) + toPaddedHex(b),\n            rgba: ((r << 24) | (g << 16) | (b << 8) | 0xFF) >>> 0\n        });\n    }\n    for (var i = 0; i < 24; i++) {\n        var c = 8 + i * 10;\n        var ch = toPaddedHex(c);\n        colors.push({\n            css: \"#\" + ch + ch + ch,\n            rgba: ((c << 24) | (c << 16) | (c << 8) | 0xFF) >>> 0\n        });\n    }\n    return colors;\n})();\nfunction fromHex(css) {\n    return {\n        css: css,\n        rgba: parseInt(css.slice(1), 16) << 8 | 0xFF\n    };\n}\nfunction toPaddedHex(c) {\n    var s = c.toString(16);\n    return s.length < 2 ? '0' + s : s;\n}\nvar ColorManager = (function () {\n    function ColorManager(document, allowTransparency) {\n        this.allowTransparency = allowTransparency;\n        var canvas = document.createElement('canvas');\n        canvas.width = 1;\n        canvas.height = 1;\n        var ctx = canvas.getContext('2d');\n        if (!ctx) {\n            throw new Error('Could not get rendering context');\n        }\n        this._ctx = ctx;\n        this._ctx.globalCompositeOperation = 'copy';\n        this._litmusColor = this._ctx.createLinearGradient(0, 0, 1, 1);\n        this.colors = {\n            foreground: DEFAULT_FOREGROUND,\n            background: DEFAULT_BACKGROUND,\n            cursor: DEFAULT_CURSOR,\n            cursorAccent: DEFAULT_CURSOR_ACCENT,\n            selection: DEFAULT_SELECTION,\n            ansi: exports.DEFAULT_ANSI_COLORS.slice()\n        };\n    }\n    ColorManager.prototype.setTheme = function (theme) {\n        if (theme === void 0) { theme = {}; }\n        this.colors.foreground = this._parseColor(theme.foreground, DEFAULT_FOREGROUND);\n        this.colors.background = this._parseColor(theme.background, DEFAULT_BACKGROUND);\n        this.colors.cursor = this._parseColor(theme.cursor, DEFAULT_CURSOR, true);\n        this.colors.cursorAccent = this._parseColor(theme.cursorAccent, DEFAULT_CURSOR_ACCENT, true);\n        this.colors.selection = this._parseColor(theme.selection, DEFAULT_SELECTION, true);\n        this.colors.ansi[0] = this._parseColor(theme.black, exports.DEFAULT_ANSI_COLORS[0]);\n        this.colors.ansi[1] = this._parseColor(theme.red, exports.DEFAULT_ANSI_COLORS[1]);\n        this.colors.ansi[2] = this._parseColor(theme.green, exports.DEFAULT_ANSI_COLORS[2]);\n        this.colors.ansi[3] = this._parseColor(theme.yellow, exports.DEFAULT_ANSI_COLORS[3]);\n        this.colors.ansi[4] = this._parseColor(theme.blue, exports.DEFAULT_ANSI_COLORS[4]);\n        this.colors.ansi[5] = this._parseColor(theme.magenta, exports.DEFAULT_ANSI_COLORS[5]);\n        this.colors.ansi[6] = this._parseColor(theme.cyan, exports.DEFAULT_ANSI_COLORS[6]);\n        this.colors.ansi[7] = this._parseColor(theme.white, exports.DEFAULT_ANSI_COLORS[7]);\n        this.colors.ansi[8] = this._parseColor(theme.brightBlack, exports.DEFAULT_ANSI_COLORS[8]);\n        this.colors.ansi[9] = this._parseColor(theme.brightRed, exports.DEFAULT_ANSI_COLORS[9]);\n        this.colors.ansi[10] = this._parseColor(theme.brightGreen, exports.DEFAULT_ANSI_COLORS[10]);\n        this.colors.ansi[11] = this._parseColor(theme.brightYellow, exports.DEFAULT_ANSI_COLORS[11]);\n        this.colors.ansi[12] = this._parseColor(theme.brightBlue, exports.DEFAULT_ANSI_COLORS[12]);\n        this.colors.ansi[13] = this._parseColor(theme.brightMagenta, exports.DEFAULT_ANSI_COLORS[13]);\n        this.colors.ansi[14] = this._parseColor(theme.brightCyan, exports.DEFAULT_ANSI_COLORS[14]);\n        this.colors.ansi[15] = this._parseColor(theme.brightWhite, exports.DEFAULT_ANSI_COLORS[15]);\n    };\n    ColorManager.prototype._parseColor = function (css, fallback, allowTransparency) {\n        if (allowTransparency === void 0) { allowTransparency = this.allowTransparency; }\n        if (css === undefined) {\n            return fallback;\n        }\n        this._ctx.fillStyle = this._litmusColor;\n        this._ctx.fillStyle = css;\n        if (typeof this._ctx.fillStyle !== 'string') {\n            console.warn(\"Color: \" + css + \" is invalid using fallback \" + fallback.css);\n            return fallback;\n        }\n        this._ctx.fillRect(0, 0, 1, 1);\n        var data = this._ctx.getImageData(0, 0, 1, 1).data;\n        if (!allowTransparency && data[3] !== 0xFF) {\n            console.warn(\"Color: \" + css + \" is using transparency, but allowTransparency is false. \" +\n                (\"Using fallback \" + fallback.css + \".\"));\n            return fallback;\n        }\n        return {\n            css: css,\n            rgba: (data[0] << 24 | data[1] << 16 | data[2] << 8 | data[3]) >>> 0\n        };\n    };\n    return ColorManager;\n}());\nexports.ColorManager = ColorManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/ui/ColorManager.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/ui/Lifecycle.js":
/*!************************************************!*\
  !*** ./node_modules/xterm/lib/ui/Lifecycle.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction addDisposableDomListener(node, type, handler, useCapture) {\n    node.addEventListener(type, handler, useCapture);\n    return {\n        dispose: function () {\n            if (!handler) {\n                return;\n            }\n            node.removeEventListener(type, handler, useCapture);\n        }\n    };\n}\nexports.addDisposableDomListener = addDisposableDomListener;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3VpL0xpZmVjeWNsZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9zcmMvdWkvTGlmZWN5Y2xlLnRzPzM3ZTYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJRGlzcG9zYWJsZSB9IGZyb20gJy4uL2NvbW1vbi9UeXBlcyc7XG5cbi8qKlxuICogQWRkcyBhIGRpc3Bvc2FibGUgbGlzdGVuZXIgdG8gYSBub2RlIGluIHRoZSBET00sIHJldHVybmluZyB0aGUgZGlzcG9zYWJsZS5cbiAqIEBwYXJhbSB0eXBlIFRoZSBldmVudCB0eXBlLlxuICogQHBhcmFtIGhhbmRsZXIgVGhlIGhhbmRsZXIgZm9yIHRoZSBsaXN0ZW5lci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcihcbiAgbm9kZTogRWxlbWVudCB8IFdpbmRvdyB8IERvY3VtZW50LFxuICB0eXBlOiBzdHJpbmcsXG4gIGhhbmRsZXI6IChlOiBhbnkpID0+IHZvaWQsXG4gIHVzZUNhcHR1cmU/OiBib29sZWFuXG4pOiBJRGlzcG9zYWJsZSB7XG4gIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCB1c2VDYXB0dXJlKTtcbiAgcmV0dXJuIHtcbiAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICBpZiAoIWhhbmRsZXIpIHtcbiAgICAgICAgLy8gQWxyZWFkeSBkaXNwb3NlZFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgdXNlQ2FwdHVyZSk7XG4gICAgfVxuICB9O1xufVxuIl0sIm1hcHBpbmdzIjoiOztBQVlBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFoQkE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/ui/Lifecycle.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/ui/RenderDebouncer.js":
/*!******************************************************!*\
  !*** ./node_modules/xterm/lib/ui/RenderDebouncer.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar RenderDebouncer = (function () {\n    function RenderDebouncer(_renderCallback) {\n        this._renderCallback = _renderCallback;\n    }\n    RenderDebouncer.prototype.dispose = function () {\n        if (this._animationFrame) {\n            window.cancelAnimationFrame(this._animationFrame);\n            this._animationFrame = undefined;\n        }\n    };\n    RenderDebouncer.prototype.refresh = function (rowStart, rowEnd, rowCount) {\n        var _this = this;\n        this._rowCount = rowCount;\n        rowStart = rowStart !== undefined ? rowStart : 0;\n        rowEnd = rowEnd !== undefined ? rowEnd : this._rowCount - 1;\n        this._rowStart = this._rowStart !== undefined ? Math.min(this._rowStart, rowStart) : rowStart;\n        this._rowEnd = this._rowEnd !== undefined ? Math.max(this._rowEnd, rowEnd) : rowEnd;\n        if (this._animationFrame) {\n            return;\n        }\n        this._animationFrame = window.requestAnimationFrame(function () { return _this._innerRefresh(); });\n    };\n    RenderDebouncer.prototype._innerRefresh = function () {\n        if (this._rowStart === undefined || this._rowEnd === undefined || this._rowCount === undefined) {\n            return;\n        }\n        this._rowStart = Math.max(this._rowStart, 0);\n        this._rowEnd = Math.min(this._rowEnd, this._rowCount - 1);\n        this._renderCallback(this._rowStart, this._rowEnd);\n        this._rowStart = undefined;\n        this._rowEnd = undefined;\n        this._animationFrame = undefined;\n    };\n    return RenderDebouncer;\n}());\nexports.RenderDebouncer = RenderDebouncer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3VpL1JlbmRlckRlYm91bmNlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9zcmMvdWkvUmVuZGVyRGVib3VuY2VyLnRzPzFiMDAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJRGlzcG9zYWJsZSB9IGZyb20gJy4uL2NvbW1vbi9UeXBlcyc7XG5cbi8qKlxuICogRGVib3VuY2VzIGNhbGxzIHRvIHJlbmRlciB0ZXJtaW5hbCByb3dzIHVzaW5nIGFuaW1hdGlvbiBmcmFtZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBSZW5kZXJEZWJvdW5jZXIgaW1wbGVtZW50cyBJRGlzcG9zYWJsZSB7XG4gIHByaXZhdGUgX3Jvd1N0YXJ0OiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgX3Jvd0VuZDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIF9yb3dDb3VudDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIF9hbmltYXRpb25GcmFtZTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX3JlbmRlckNhbGxiYWNrOiAoc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpID0+IHZvaWRcbiAgKSB7XG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fYW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLl9hbmltYXRpb25GcmFtZSk7XG4gICAgICB0aGlzLl9hbmltYXRpb25GcmFtZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcmVmcmVzaChyb3dTdGFydDogbnVtYmVyLCByb3dFbmQ6IG51bWJlciwgcm93Q291bnQ6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3Jvd0NvdW50ID0gcm93Q291bnQ7XG4gICAgLy8gR2V0IHRoZSBtaW4vbWF4IHJvdyBzdGFydC9lbmQgZm9yIHRoZSBhcmcgdmFsdWVzXG4gICAgcm93U3RhcnQgPSByb3dTdGFydCAhPT0gdW5kZWZpbmVkID8gcm93U3RhcnQgOiAwO1xuICAgIHJvd0VuZCA9IHJvd0VuZCAhPT0gdW5kZWZpbmVkID8gcm93RW5kIDogdGhpcy5fcm93Q291bnQgLSAxO1xuICAgIC8vIFNldCB0aGUgcHJvcGVydGllcyB0byB0aGUgdXBkYXRlZCB2YWx1ZXNcbiAgICB0aGlzLl9yb3dTdGFydCA9IHRoaXMuX3Jvd1N0YXJ0ICE9PSB1bmRlZmluZWQgPyBNYXRoLm1pbih0aGlzLl9yb3dTdGFydCwgcm93U3RhcnQpIDogcm93U3RhcnQ7XG4gICAgdGhpcy5fcm93RW5kID0gdGhpcy5fcm93RW5kICE9PSB1bmRlZmluZWQgPyBNYXRoLm1heCh0aGlzLl9yb3dFbmQsIHJvd0VuZCkgOiByb3dFbmQ7XG5cbiAgICBpZiAodGhpcy5fYW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9hbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5faW5uZXJSZWZyZXNoKCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBfaW5uZXJSZWZyZXNoKCk6IHZvaWQge1xuICAgIC8vIE1ha2Ugc3VyZSB2YWx1ZXMgYXJlIHNldFxuICAgIGlmICh0aGlzLl9yb3dTdGFydCA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3Jvd0VuZCA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3Jvd0NvdW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDbGFtcCB2YWx1ZXNcbiAgICB0aGlzLl9yb3dTdGFydCA9IE1hdGgubWF4KHRoaXMuX3Jvd1N0YXJ0LCAwKTtcbiAgICB0aGlzLl9yb3dFbmQgPSBNYXRoLm1pbih0aGlzLl9yb3dFbmQsIHRoaXMuX3Jvd0NvdW50IC0gMSk7XG5cbiAgICAvLyBSdW4gcmVuZGVyIGNhbGxiYWNrXG4gICAgdGhpcy5fcmVuZGVyQ2FsbGJhY2sodGhpcy5fcm93U3RhcnQsIHRoaXMuX3Jvd0VuZCk7XG5cbiAgICAvLyBSZXNldCBkZWJvdW5jZXJcbiAgICB0aGlzLl9yb3dTdGFydCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9yb3dFbmQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fYW5pbWF0aW9uRnJhbWUgPSB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7QUFVQTtBQU1BO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUdBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBcERBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/ui/RenderDebouncer.js\n");

/***/ }),

/***/ "./node_modules/xterm/lib/ui/ScreenDprMonitor.js":
/*!*******************************************************!*\
  !*** ./node_modules/xterm/lib/ui/ScreenDprMonitor.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Lifecycle_1 = __webpack_require__(/*! ../common/Lifecycle */ \"./node_modules/xterm/lib/common/Lifecycle.js\");\nvar ScreenDprMonitor = (function (_super) {\n    __extends(ScreenDprMonitor, _super);\n    function ScreenDprMonitor() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._currentDevicePixelRatio = window.devicePixelRatio;\n        return _this;\n    }\n    ScreenDprMonitor.prototype.setListener = function (listener) {\n        var _this = this;\n        if (this._listener) {\n            this.clearListener();\n        }\n        this._listener = listener;\n        this._outerListener = function () {\n            if (!_this._listener) {\n                return;\n            }\n            _this._listener(window.devicePixelRatio, _this._currentDevicePixelRatio);\n            _this._updateDpr();\n        };\n        this._updateDpr();\n    };\n    ScreenDprMonitor.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.clearListener();\n    };\n    ScreenDprMonitor.prototype._updateDpr = function () {\n        if (!this._resolutionMediaMatchList || !this._outerListener) {\n            return;\n        }\n        this._resolutionMediaMatchList.removeListener(this._outerListener);\n        this._currentDevicePixelRatio = window.devicePixelRatio;\n        this._resolutionMediaMatchList = window.matchMedia(\"screen and (resolution: \" + window.devicePixelRatio + \"dppx)\");\n        this._resolutionMediaMatchList.addListener(this._outerListener);\n    };\n    ScreenDprMonitor.prototype.clearListener = function () {\n        if (!this._resolutionMediaMatchList || !this._listener || !this._outerListener) {\n            return;\n        }\n        this._resolutionMediaMatchList.removeListener(this._outerListener);\n        this._resolutionMediaMatchList = undefined;\n        this._listener = undefined;\n        this._outerListener = undefined;\n    };\n    return ScreenDprMonitor;\n}(Lifecycle_1.Disposable));\nexports.ScreenDprMonitor = ScreenDprMonitor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3VpL1NjcmVlbkRwck1vbml0b3IuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3VpL1NjcmVlbkRwck1vbml0b3IudHM/OWNjMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IERpc3Bvc2FibGUgfSBmcm9tICcuLi9jb21tb24vTGlmZWN5Y2xlJztcblxuZXhwb3J0IHR5cGUgU2NyZWVuRHByTGlzdGVuZXIgPSAobmV3RGV2aWNlUGl4ZWxSYXRpbz86IG51bWJlciwgb2xkRGV2aWNlUGl4ZWxSYXRpbz86IG51bWJlcikgPT4gdm9pZDtcblxuLyoqXG4gKiBUaGUgc2NyZWVuIGRldmljZSBwaXhlbCByYXRpbyBtb25pdG9yIGFsbG93cyBsaXN0ZW5pbmcgZm9yIHdoZW4gdGhlXG4gKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB2YWx1ZSBjaGFuZ2VzLiBUaGlzIGlzIGRvbmUgbm90IHdpdGggcG9sbGluZyBidXQgd2l0aFxuICogdGhlIHVzZSBvZiB3aW5kb3cubWF0Y2hNZWRpYSB0byB3YXRjaCBtZWRpYSBxdWVyaWVzLiBXaGVuIHRoZSBldmVudCBmaXJlcyxcbiAqIHRoZSBsaXN0ZW5lciB3aWxsIGJlIHJlYXR0YWNoZWQgdXNpbmcgYSBkaWZmZXJlbnQgbWVkaWEgcXVlcnkgdG8gZW5zdXJlIHRoYXRcbiAqIGFueSBmdXJ0aGVyIGNoYW5nZXMgd2lsbCByZWdpc3Rlci5cbiAqXG4gKiBUaGUgbGlzdGVuZXIgc2hvdWxkIGZpcmUgb24gYm90aCB3aW5kb3cgem9vbSBjaGFuZ2VzIGFuZCBzd2l0Y2hpbmcgdG8gYVxuICogbW9uaXRvciB3aXRoIGEgZGlmZmVyZW50IERQSS5cbiAqL1xuZXhwb3J0IGNsYXNzIFNjcmVlbkRwck1vbml0b3IgZXh0ZW5kcyBEaXNwb3NhYmxlIHtcbiAgcHJpdmF0ZSBfY3VycmVudERldmljZVBpeGVsUmF0aW86IG51bWJlciA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICBwcml2YXRlIF9vdXRlckxpc3RlbmVyOiAoKHRoaXM6IE1lZGlhUXVlcnlMaXN0LCBldjogTWVkaWFRdWVyeUxpc3RFdmVudCkgPT4gYW55KSB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBfbGlzdGVuZXI6IFNjcmVlbkRwckxpc3RlbmVyIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIF9yZXNvbHV0aW9uTWVkaWFNYXRjaExpc3Q6IE1lZGlhUXVlcnlMaXN0IHwgdW5kZWZpbmVkO1xuXG4gIHB1YmxpYyBzZXRMaXN0ZW5lcihsaXN0ZW5lcjogU2NyZWVuRHByTGlzdGVuZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fbGlzdGVuZXIpIHtcbiAgICAgIHRoaXMuY2xlYXJMaXN0ZW5lcigpO1xuICAgIH1cbiAgICB0aGlzLl9saXN0ZW5lciA9IGxpc3RlbmVyO1xuICAgIHRoaXMuX291dGVyTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuX2xpc3RlbmVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2xpc3RlbmVyKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvLCB0aGlzLl9jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgICB0aGlzLl91cGRhdGVEcHIoKTtcbiAgICB9O1xuICAgIHRoaXMuX3VwZGF0ZURwcigpO1xuICB9XG5cbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgc3VwZXIuZGlzcG9zZSgpO1xuICAgIHRoaXMuY2xlYXJMaXN0ZW5lcigpO1xuICB9XG5cbiAgcHJpdmF0ZSBfdXBkYXRlRHByKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5fcmVzb2x1dGlvbk1lZGlhTWF0Y2hMaXN0IHx8ICF0aGlzLl9vdXRlckxpc3RlbmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQ2xlYXIgbGlzdGVuZXJzIGZvciBvbGQgRFBSXG4gICAgdGhpcy5fcmVzb2x1dGlvbk1lZGlhTWF0Y2hMaXN0LnJlbW92ZUxpc3RlbmVyKHRoaXMuX291dGVyTGlzdGVuZXIpO1xuXG4gICAgLy8gQWRkIGxpc3RlbmVycyBmb3IgbmV3IERQUlxuICAgIHRoaXMuX2N1cnJlbnREZXZpY2VQaXhlbFJhdGlvID0gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gICAgdGhpcy5fcmVzb2x1dGlvbk1lZGlhTWF0Y2hMaXN0ID0gd2luZG93Lm1hdGNoTWVkaWEoYHNjcmVlbiBhbmQgKHJlc29sdXRpb246ICR7d2luZG93LmRldmljZVBpeGVsUmF0aW99ZHBweClgKTtcbiAgICB0aGlzLl9yZXNvbHV0aW9uTWVkaWFNYXRjaExpc3QuYWRkTGlzdGVuZXIodGhpcy5fb3V0ZXJMaXN0ZW5lcik7XG4gIH1cblxuICBwdWJsaWMgY2xlYXJMaXN0ZW5lcigpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX3Jlc29sdXRpb25NZWRpYU1hdGNoTGlzdCB8fCAhdGhpcy5fbGlzdGVuZXIgfHwgIXRoaXMuX291dGVyTGlzdGVuZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fcmVzb2x1dGlvbk1lZGlhTWF0Y2hMaXN0LnJlbW92ZUxpc3RlbmVyKHRoaXMuX291dGVyTGlzdGVuZXIpO1xuICAgIHRoaXMuX3Jlc29sdXRpb25NZWRpYU1hdGNoTGlzdCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9saXN0ZW5lciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9vdXRlckxpc3RlbmVyID0gdW5kZWZpbmVkO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUtBO0FBY0E7QUFBQTtBQUFBO0FBQUE7QUFDQTs7QUFnREE7QUEzQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBakRBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/xterm/lib/ui/ScreenDprMonitor.js\n");

/***/ }),

/***/ "./src/app.ts":
/*!********************!*\
  !*** ./src/app.ts ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typed_cli_1 = __webpack_require__(/*! typed-cli */ \"../cli/index.js\");\nconst term_setup_1 = __webpack_require__(/*! ./term-setup */ \"./src/term-setup.ts\");\nconst monaco_setup_1 = __webpack_require__(/*! ./monaco-setup */ \"./src/monaco-setup.ts\");\nconst decorator_1 = __webpack_require__(/*! typed-cli/src/decorator */ \"../cli/src/decorator.ts\");\nconst command_1 = __webpack_require__(/*! typed-cli/src/command */ \"../cli/src/command.ts\");\nconst chalk_1 = __importDefault(__webpack_require__(/*! chalk */ \"./node_modules/chalk/index.js\"));\nconst string_argv_1 = __webpack_require__(/*! string-argv */ \"./node_modules/string-argv/index.js\");\nconst completer_1 = __webpack_require__(/*! typed-cli/src/completer */ \"../cli/src/completer.ts\");\nconst utils_1 = __webpack_require__(/*! typed-cli/src/utils */ \"../cli/src/utils.ts\");\nconst cli_helper_1 = __webpack_require__(/*! typed-cli/src/cli-helper */ \"../cli/src/cli-helper.ts\");\nconst parser_1 = __webpack_require__(/*! typed-cli/src/parser */ \"../cli/src/parser.ts\");\nconst presets = __importStar(__webpack_require__(/*! typed-cli/presets */ \"../cli/presets/index.ts\"));\nconst samples = __importStar(__webpack_require__(/*! ./samples-generated */ \"./src/samples-generated.ts\"));\nconst sucrase_1 = __webpack_require__(/*! sucrase */ \"./node_modules/sucrase/dist/index.mjs\");\nwindow._loader.onItemLoad(10);\nchalk_1.default.level = 16;\nchalk_1.default.enabled = true;\nlet argv = [];\nlet exitCode = 0;\nconst commandHelper = typed_cli_1.createCommandHelper({\n    argvProvider: () => argv,\n    exiter: (hasErrors) => exitCode = (hasErrors ? 1 : 0),\n    helpGeneration: true,\n    printer: new typed_cli_1.Printer({ locale: typed_cli_1.locales.en_US, decorator: decorator_1.decorators.fancy, lineEnding: '\\n\\r' }),\n    writer: (text, logType) => term_setup_1.writeLn(text)\n});\nconst cliHelper = cli_helper_1.createCliHelper({\n    argvProvider: () => argv,\n    exiter: (hasErrors) => exitCode = (hasErrors ? 1 : 0),\n    helpGeneration: true,\n    printer: new typed_cli_1.Printer({ locale: typed_cli_1.locales.en_US, decorator: decorator_1.decorators.fancy, lineEnding: '\\n\\r' }),\n    writer: (text, logType) => term_setup_1.writeLn(text)\n});\nconst stringifyParams = (args) => {\n    return args.map((i) => {\n        switch (typeof i) {\n            case 'number':\n                return chalk_1.default.blue(i.toString());\n            case 'string':\n                return i;\n            case 'function':\n                return chalk_1.default.green(i.toString());\n            case 'boolean':\n            case 'undefined':\n                return chalk_1.default.magenta(i);\n            case 'object':\n                return JSON.stringify(i, null, 4);\n            default:\n                return String(i);\n        }\n    }).join(' ').replace(/\\n/g, '\\n\\r');\n};\nconst mockConsole = {\n    log: (...args) => {\n        term_setup_1.writeLn(stringifyParams(args));\n        console.log(...args);\n    },\n    error: (...args) => {\n        term_setup_1.writeLn(chalk_1.default.red(stringifyParams(args)));\n        console.error(...args);\n    },\n    warn: (...args) => {\n        term_setup_1.writeLn(chalk_1.default.yellow(stringifyParams(args)));\n        console.warn(...args);\n    }\n};\nfunction mockRequire(cli) {\n    return (str) => {\n        if (str === 'typed-cli') {\n            return { cli, command: typed_cli_1.command, option: typed_cli_1.option, defaultCommand: typed_cli_1.defaultCommand, presets };\n        }\n        if (str === 'chalk') {\n            return chalk_1.default;\n        }\n        throw new Error(`only 'typed-cli' can be required in this demo`);\n    };\n}\nfunction runHelper(newArgv, evalCode) {\n    argv = newArgv;\n    exitCode = 0;\n    const cli = function (...args) {\n        return cliHelper(...args);\n    };\n    cli.commands = commandHelper;\n    try {\n        const fn = new Function('require', 'console', evalCode);\n        fn(mockRequire(cli), mockConsole);\n        if (exitCode !== 0) {\n            term_setup_1.writeLn('');\n            term_setup_1.writeLn(chalk_1.default.italic(`[exit code = ${chalk_1.default.blue(exitCode.toString())}]`));\n        }\n    }\n    catch (e) {\n        if (exitCode !== 0) {\n            term_setup_1.writeLn('');\n            term_setup_1.writeLn(chalk_1.default.italic(`[exit code = ${chalk_1.default.blue(exitCode.toString())}]`));\n        }\n        if (e.message === 'exiter has failed') {\n            return;\n        }\n        console.error(e);\n        term_setup_1.writeLn(chalk_1.default.red(''));\n        term_setup_1.writeLn(chalk_1.default.red('Error occured (see browser console also)'));\n        term_setup_1.writeLn(e.stack.replace(/\\n/g, '\\n\\r'));\n    }\n}\nfunction runCompleter(evalCode, argv, buf) {\n    let cs;\n    let decl;\n    function cli(_) {\n        decl = _;\n        throw 0;\n    }\n    cli.commands = (cfg, arg) => {\n        cs = arg;\n    };\n    try {\n        const fn = new Function('require', 'console', evalCode);\n        fn(mockRequire(cli), mockConsole);\n    }\n    catch (e) {\n        // console.error(e);\n        // return;\n    }\n    let completions = [];\n    if (decl) {\n        decl = parser_1.prepareCliDeclaration(decl).decl;\n        completions = completer_1.completeForCliDecl(decl, argv.slice(0, -1), argv[argv.length - 1] || '');\n    }\n    else {\n        cs = command_1.prepareCommandSet(cs);\n        completions = completer_1.completeForCommandSet(cs, argv.slice(0, -1), argv[argv.length - 1] || '');\n    }\n    applyCompletions(completions, argv, buf);\n}\nconst programCompletions = Object.values(samples);\nfunction runProgramCompleter(buf) {\n    const completions = programCompletions\n        .filter(({ name }) => name.indexOf(buf) === 0)\n        .map(({ name, description }) => ({ description, completion: name }));\n    applyCompletions(completions, [buf], buf);\n}\nfunction applyCompletions(completions, argv, buf) {\n    if (completions.length === 0) {\n        return;\n    }\n    const last = argv[argv.length - 1] || '';\n    term_setup_1.writeLn('');\n    const completionMatrix = completions.map(c => [c.completion, c.description]);\n    const completionText = utils_1.alignTextMatrix(completionMatrix, ['right', 'left'])\n        .map(([c, d]) => `${c} ${chalk_1.default.dim('| ' + d)}`)\n        .join('\\n\\r');\n    term_setup_1.writeLn(completionText);\n    let commonPart = '';\n    let i = last.length;\n    const firstCompletion = completions[0].completion;\n    while (true) {\n        if (completions.every(c => c.completion[i] && c.completion[i] === firstCompletion[i])) {\n            i++;\n        }\n        else {\n            break;\n        }\n    }\n    term_setup_1.prompt();\n    buf += firstCompletion.slice(last.length, i);\n    term_setup_1.setBuf(buf);\n    term_setup_1.write(buf);\n}\nfunction resolveProgram(program) {\n    const sample = samples[program];\n    if (!sample) {\n        return null;\n    }\n    const code = localStorage.getItem(`sample-code[${program}]`) || sample.code;\n    const js = sucrase_1.transform(code, { transforms: [\"typescript\", \"imports\"] });\n    return js.code;\n}\nasync function main() {\n    const { getText, setText } = await monaco_setup_1.init();\n    const runShellStr = (str) => {\n        if (str === '') {\n            return;\n        }\n        const [program, ...argv] = string_argv_1.parseArgsStringToArgv(str);\n        const jsCode = resolveProgram(program);\n        if (!jsCode) {\n            term_setup_1.writeLn('');\n            term_setup_1.writeLn(`program ${chalk_1.default.redBright(program)} is not found`);\n            return;\n        }\n        term_setup_1.writeLn('');\n        runHelper(argv, jsCode);\n    };\n    term_setup_1.onRead(runShellStr);\n    term_setup_1.onTab(str => {\n        const [program, ...argv] = string_argv_1.parseArgsStringToArgv(str);\n        if (/\\s+$/.test(str)) {\n            argv.push('');\n        }\n        if (argv.length === 0) {\n            runProgramCompleter(program || '');\n            return;\n        }\n        const code = resolveProgram(program);\n        if (!code) {\n            return;\n        }\n        runCompleter(code, argv, str);\n    });\n    runShellStr('help');\n    term_setup_1.prompt();\n    window._loader.onItemLoad(10);\n    setTimeout(() => {\n        window._loader.onLoad();\n    }, 100);\n}\nmain();\n// write(cfg.generateHelp().replace(/\\n/g, '\\n\\r'));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/app.ts\n");

/***/ }),

/***/ "./src/historyMgr.ts":
/*!***************************!*\
  !*** ./src/historyMgr.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass HistoryMgr {\n    constructor() {\n        this.items = [''];\n        this.index = 0;\n        this.syncPull();\n    }\n    clear() {\n        this.items = [''];\n        this.index = 0;\n        this.syncPush();\n    }\n    push(str) {\n        this.items.pop();\n        this.items.push(str);\n        this.items.push('');\n        this.index = this.items.length - 1;\n        this.syncPush();\n    }\n    go(i, curText) {\n        if (i < 0 || i >= this.items.length) {\n            return this.items[this.index];\n        }\n        this.items[this.index] = curText;\n        this.index = i;\n        return this.items[this.index];\n    }\n    goUp(curText) {\n        return this.go(this.index - 1, curText);\n    }\n    goDown(curText) {\n        return this.go(this.index + 1, curText);\n    }\n    syncPush() {\n        const data = this.items;\n        localStorage.setItem('term-history', JSON.stringify(data));\n    }\n    syncPull() {\n        const json = localStorage.getItem('term-history');\n        const data = json && JSON.parse(json) || [];\n        this.items = data;\n        this.index = Math.max(this.items.length - 1, 0);\n    }\n}\nexports.HistoryMgr = HistoryMgr;\n// function keepInRange(min: number, max: number, i: number): number {\n//     if (i > max) {\n//         return max;\n//     }\n//     if (i < min) {\n//         return min;\n//     }\n// }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaGlzdG9yeU1nci50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvaGlzdG9yeU1nci50cz8wMzgwIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBIaXN0b3J5TWdyIHtcbiAgICBpdGVtczogc3RyaW5nW10gPSBbJyddO1xuICAgIGluZGV4OiBudW1iZXIgPSAwO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc3luY1B1bGwoKTtcbiAgICB9XG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5pdGVtcyA9IFsnJ107XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgICAgICB0aGlzLnN5bmNQdXNoKCk7XG4gICAgfVxuXG4gICAgcHVzaChzdHI6IHN0cmluZykge1xuICAgICAgICB0aGlzLml0ZW1zLnBvcCgpO1xuICAgICAgICB0aGlzLml0ZW1zLnB1c2goc3RyKTtcbiAgICAgICAgdGhpcy5pdGVtcy5wdXNoKCcnKTtcbiAgICAgICAgdGhpcy5pbmRleCA9IHRoaXMuaXRlbXMubGVuZ3RoIC0gMTtcbiAgICAgICAgdGhpcy5zeW5jUHVzaCgpO1xuICAgIH1cblxuICAgIGdvKGk6IG51bWJlciwgY3VyVGV4dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKGkgPCAwIHx8IGkgPj0gdGhpcy5pdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLml0ZW1zW3RoaXMuaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXRlbXNbdGhpcy5pbmRleF0gPSBjdXJUZXh0O1xuICAgICAgICB0aGlzLmluZGV4ID0gaTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXNbdGhpcy5pbmRleF07XG4gICAgfVxuXG4gICAgZ29VcChjdXJUZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5nbyh0aGlzLmluZGV4IC0gMSwgY3VyVGV4dCk7XG4gICAgfVxuXG4gICAgZ29Eb3duKGN1clRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmdvKHRoaXMuaW5kZXggKyAxLCBjdXJUZXh0KTtcbiAgICB9XG5cbiAgICBzeW5jUHVzaCgpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuaXRlbXM7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0ZXJtLWhpc3RvcnknLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAgfVxuXG4gICAgc3luY1B1bGwoKSB7XG4gICAgICAgIGNvbnN0IGpzb24gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndGVybS1oaXN0b3J5Jyk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBqc29uICYmIEpTT04ucGFyc2UoanNvbikgfHwgW107XG4gICAgICAgIHRoaXMuaXRlbXMgPSBkYXRhO1xuICAgICAgICB0aGlzLmluZGV4ID0gTWF0aC5tYXgodGhpcy5pdGVtcy5sZW5ndGggLSAxLCAwKTtcbiAgICB9XG59XG5cbi8vIGZ1bmN0aW9uIGtlZXBJblJhbmdlKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlciwgaTogbnVtYmVyKTogbnVtYmVyIHtcbi8vICAgICBpZiAoaSA+IG1heCkge1xuLy8gICAgICAgICByZXR1cm4gbWF4O1xuLy8gICAgIH1cbi8vICAgICBpZiAoaSA8IG1pbikge1xuLy8gICAgICAgICByZXR1cm4gbWluO1xuLy8gICAgIH1cbi8vIH1cbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUlBO0FBSEE7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWxEQTtBQW9EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/historyMgr.ts\n");

/***/ }),

/***/ "./src/lib-generated.ts":
/*!******************************!*\
  !*** ./src/lib-generated.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.files = [{ \"filename\": \"node_modules/@types/typed-cli/index.d.ts\", \"content\": \"export { Parser } from './src/parser';\\nexport { Printer } from './src/printer';\\nexport { option } from './src/option';\\nexport { createCliHelper, Writer, Exiter, ArgvProvider, CreateCliHelperParams, CliHelper } from './src/cli-helper';\\nexport { cli, defaultArgvProvider, defaultExiter, defaultPrinter, defaultWriter } from './src/default-cli';\\nexport { decorators, chalkInstance } from './src/decorator';\\nexport { locales } from './src/i18n';\\nexport { completeForCommandSet } from './src/completer';\\nexport { createCommandHelper, command, defaultCommand } from './src/command';\\nimport * as presets from './presets';\\nexport { presets };\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/pg/index.d.ts\", \"content\": \"#! /usr/bin/env node\\nexport {};\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/presets/index.d.ts\", \"content\": \"import oneOf from './one-of';\\nimport url from './url';\\nexport { oneOf, url };\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/presets/one-of.d.ts\", \"content\": \"import { Option } from '../src/option';\\ndeclare type OneOfDecl = readonly string[] | {\\n    [key: string]: any | {\\n        description?: string;\\n        value?: any;\\n    };\\n};\\ndeclare type ResolveOneOfDeclType<T extends OneOfDecl> = T extends readonly string[] ? T[number] : {\\n    [key in keyof T]: T[key] extends {\\n        value: infer V;\\n    } ? V : T[key];\\n}[keyof T];\\ndeclare const oneOf: <T extends OneOfDecl>(decl: T) => Option<\\\"string\\\", false, false, ResolveOneOfDeclType<T>>;\\nexport default oneOf;\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/presets/url.d.ts\", \"content\": \"/// <reference types=\\\"node\\\" />\\nimport url from 'url';\\ndeclare const urlOption: import(\\\"../src/option\\\").Option<\\\"string\\\", false, false, url.UrlWithStringQuery>;\\nexport default urlOption;\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/src/cli-helper.d.ts\", \"content\": \"import { Printer } from './printer';\\nimport { CliDeclaration, ResolveCliDeclaration } from './type-logic';\\nexport declare type Writer = (str: string, logType: 'log' | 'error') => void;\\nexport declare type Exiter = (hasErrors: boolean) => void;\\nexport declare type ArgvProvider = () => string[];\\nexport declare type CliHelper = <D extends CliDeclaration>(decl: D) => ResolveCliDeclaration<D>;\\nexport declare type CreateCliHelperParams = {\\n    writer: Writer;\\n    exiter: Exiter;\\n    argvProvider: ArgvProvider;\\n    printer: Printer;\\n    helpGeneration?: boolean;\\n};\\nexport declare function createCliHelper(params: CreateCliHelperParams): CliHelper;\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/src/command.d.ts\", \"content\": \"import { CliDeclaration, ResolveCliDeclaration } from \\\"./type-logic\\\";\\nimport { Writer, Exiter, ArgvProvider } from \\\"./cli-helper\\\";\\nimport { Printer } from \\\"./printer\\\";\\nimport { Report } from \\\"./report\\\";\\nimport { CompleterOptions } from \\\"./completer\\\";\\nexport declare const defaultCommand: unique symbol;\\nexport declare type CommandSet = Record<string, CommandBuilder<any>> & {\\n    [defaultCommand]?: CommandBuilder<any>;\\n};\\nexport declare type CommandHandler<D extends CliDeclaration> = (data: ResolveCliDeclaration<D>) => void;\\nexport declare const _decl: unique symbol;\\nexport declare const _subCommandSet: unique symbol;\\ndeclare const _fn: unique symbol;\\nexport declare const _aliases: unique symbol;\\ndeclare const _clone: unique symbol;\\ndeclare const _match: unique symbol;\\nexport declare class CommandBuilder<D extends CliDeclaration> {\\n    [_decl]: D;\\n    [_fn]: CommandHandler<D>;\\n    [_aliases]: string[];\\n    [_subCommandSet]: CommandSet;\\n    constructor(decl: D);\\n    [_clone]: () => CommandBuilder<D>;\\n    handle(fn: CommandHandler<D>): CommandBuilder<D>;\\n    alias(...aliases: string[]): CommandBuilder<D>;\\n    subCommands(subCommandSet: Record<string, CommandBuilder<any>>): CommandBuilder<D>;\\n    [_match]: (cmdString: string) => boolean;\\n}\\nexport declare function prepareCommandSet<C extends CommandSet>(cs: C, namePrefix?: string): C;\\nexport declare type ParseCommandSetParams = {\\n    cs: CommandSet;\\n    argv: string[];\\n    onReport: (report: Report) => void;\\n    onHelp?: (cmd: CommandBuilder<CliDeclaration>) => void;\\n};\\nexport declare function findMatchedCommand(argv: string[], cs: CommandSet): CommandBuilder<any> | null;\\nexport declare function parseCommandSet(params: ParseCommandSetParams): boolean;\\nexport declare type CreateCommandHelperParams = {\\n    writer: Writer;\\n    exiter: Exiter;\\n    argvProvider: ArgvProvider;\\n    printer: Printer;\\n    helpGeneration?: boolean;\\n};\\nexport declare type CommandHelperParams = {\\n    program?: string;\\n    description?: string;\\n    completer?: CompleterOptions | boolean;\\n};\\nexport declare const createCommandHelper: (params: CreateCommandHelperParams) => (cfg: CommandHelperParams, cs: CommandSet) => void;\\nexport declare function command<D extends CliDeclaration>(decl: D): CommandBuilder<D>;\\nexport {};\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/src/completer.d.ts\", \"content\": \"import { CommandSet } from './command';\\nimport { CliDeclaration } from './type-logic';\\nexport declare type Completion = {\\n    completion: string;\\n    description: string;\\n};\\nexport declare function completeForCliDecl(decl: CliDeclaration, argv: string[], typedText: string): Completion[];\\nexport declare function completeForCommandSet(cs: CommandSet, argv: string[], typedText: string): Completion[];\\nexport declare function tabtabCommandDeclComplete(cs: CommandSet): void;\\nexport declare type CompleterOptions = {\\n    installCmd?: string;\\n    uninstallCmd?: string;\\n    completeCmd?: string;\\n};\\nexport declare function normalizeCompleterOptions(opts: CompleterOptions): Required<CompleterOptions>;\\nexport declare function handleCompleterOptions(cs: CommandSet, cmd: string, opts: CompleterOptions | boolean, name: string | undefined, cb: Function): boolean;\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/src/decorator.d.ts\", \"content\": \"import chalk from 'chalk';\\nexport { chalk as chalkInstance };\\ndeclare type DecoratorFn = (text: string) => string;\\nexport declare const plain: {\\n    alias: (s: string) => string;\\n    type: (s: string) => string;\\n    optional: (s: string) => string;\\n    required: (s: string) => string;\\n    multiple: (s: string) => string;\\n    optionDescription: (s: string) => string;\\n    title: (s: string) => string;\\n    usageOption: (s: string) => string;\\n    command: (s: string) => string;\\n    errorLine: (s: string) => string;\\n    warningLine: (s: string) => string;\\n    invalidValue: (s: string) => string;\\n    commandPath: (s: string) => string;\\n    commandEnding: (s: string) => string;\\n    commandDescription: (s: string) => string;\\n};\\nexport declare type TextDecorator = typeof plain;\\nexport declare function defineTextDecorator<T extends Record<keyof typeof plain, DecoratorFn>>(decorators: T): T;\\nexport declare const fancy: {\\n    alias: (s: string) => string;\\n    type: (s: string) => string;\\n    optional: (s: string) => string;\\n    required: (s: string) => string;\\n    multiple: (s: string) => string;\\n    optionDescription: (s: string) => string;\\n    title: (s: string) => string;\\n    usageOption: (s: string) => string;\\n    command: (s: string) => string;\\n    errorLine: (s: string) => string;\\n    warningLine: (s: string) => string;\\n    invalidValue: (s: string) => string;\\n    commandPath: (s: string) => string;\\n    commandEnding: (s: string) => string;\\n    commandDescription: (s: string) => string;\\n};\\nexport declare const decorators: {\\n    fancy: {\\n        alias: (s: string) => string;\\n        type: (s: string) => string;\\n        optional: (s: string) => string;\\n        required: (s: string) => string;\\n        multiple: (s: string) => string;\\n        optionDescription: (s: string) => string;\\n        title: (s: string) => string;\\n        usageOption: (s: string) => string;\\n        command: (s: string) => string;\\n        errorLine: (s: string) => string;\\n        warningLine: (s: string) => string;\\n        invalidValue: (s: string) => string;\\n        commandPath: (s: string) => string;\\n        commandEnding: (s: string) => string;\\n        commandDescription: (s: string) => string;\\n    };\\n    plain: {\\n        alias: (s: string) => string;\\n        type: (s: string) => string;\\n        optional: (s: string) => string;\\n        required: (s: string) => string;\\n        multiple: (s: string) => string;\\n        optionDescription: (s: string) => string;\\n        title: (s: string) => string;\\n        usageOption: (s: string) => string;\\n        command: (s: string) => string;\\n        errorLine: (s: string) => string;\\n        warningLine: (s: string) => string;\\n        invalidValue: (s: string) => string;\\n        commandPath: (s: string) => string;\\n        commandEnding: (s: string) => string;\\n        commandDescription: (s: string) => string;\\n    };\\n};\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/src/default-cli.d.ts\", \"content\": \"import { ArgvProvider, Exiter, Writer } from './cli-helper';\\nimport { Printer } from './printer';\\nimport { CliDeclaration, ResolveCliDeclaration } from './type-logic';\\nexport declare const defaultPrinter: Printer;\\nexport declare const defaultArgvProvider: ArgvProvider;\\nexport declare const defaultExiter: Exiter;\\nexport declare const defaultWriter: Writer;\\nexport declare const setupCommands: (cfg: import(\\\"./command\\\").CommandHelperParams, cs: import(\\\"./command\\\").CommandSet) => void;\\nexport declare function cli<D extends CliDeclaration>(decl: D): ResolveCliDeclaration<D>;\\nexport declare namespace cli {\\n    var commands: (cfg: import(\\\"./command\\\").CommandHelperParams, cs: import(\\\"./command\\\").CommandSet) => void;\\n}\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/src/errors.d.ts\", \"content\": \"export declare class BaseError extends Error {\\n    className: keyof typeof allIssues;\\n}\\nexport declare class BaseWarning {\\n    className: keyof typeof allIssues;\\n    isWarning: boolean;\\n}\\ndeclare class EmptyRequiredOptionError extends BaseError {\\n    requiredOption: string;\\n    className: \\\"EmptyRequiredOptionError\\\";\\n    constructor(requiredOption: string);\\n}\\ndeclare class TypeMismatchError extends BaseError {\\n    className: \\\"TypeMismatchError\\\";\\n    expected: string;\\n    received: string;\\n    constructor(expected: string, received: string);\\n}\\ndeclare class IvalidOptionError extends BaseError {\\n    className: \\\"IvalidOptionError\\\";\\n    optionName: string;\\n    value: any;\\n    constructor(optionName: string, value: any);\\n}\\ndeclare class SomeIvalidOptionsError extends BaseError {\\n    className: \\\"SomeIvalidOptionsError\\\";\\n}\\ndeclare class IvalidSomeArguemntsError extends BaseError {\\n    className: \\\"IvalidSomeArguemntsError\\\";\\n}\\ndeclare class IvalidArguemntError extends BaseError {\\n    className: \\\"IvalidArguemntError\\\";\\n    value: any;\\n    constructor(value: any);\\n}\\ndeclare class InvalidCommand extends BaseError {\\n    className: \\\"InvalidCommand\\\";\\n    commandName: any;\\n    constructor(commandName: any);\\n}\\ndeclare class NoCommand extends BaseError {\\n    className: \\\"NoCommand\\\";\\n}\\ndeclare class IvalidInputError extends BaseError {\\n    className: \\\"IvalidInputError\\\";\\n}\\ndeclare class UnknownOptionWarning extends BaseWarning {\\n    className: \\\"UnknownOptionWarning\\\";\\n    optionName: string;\\n    constructor(optionName: string);\\n}\\nexport declare type IssueType = {\\n    [key in keyof typeof allIssues]: InstanceType<(typeof allIssues)[key]>;\\n}[keyof typeof allIssues];\\nexport declare const allIssues: {\\n    UnknownOptionWarning: typeof UnknownOptionWarning;\\n    EmptyRequiredOptionError: typeof EmptyRequiredOptionError;\\n    IvalidOptionError: typeof IvalidOptionError;\\n    IvalidSomeArguemntsError: typeof IvalidSomeArguemntsError;\\n    IvalidArguemntError: typeof IvalidArguemntError;\\n    SomeIvalidOptionsError: typeof SomeIvalidOptionsError;\\n    IvalidInputError: typeof IvalidInputError;\\n    TypeMismatchError: typeof TypeMismatchError;\\n    InvalidCommand: typeof InvalidCommand;\\n    NoCommand: typeof NoCommand;\\n};\\nexport {};\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/src/i18n.d.ts\", \"content\": \"import { allIssues } from './errors';\\nimport { TextDecorator } from './decorator';\\nimport { Issue } from './report';\\nexport declare type LocaleFn = (decorator: TextDecorator, data?: any) => string;\\nexport declare type IssueLocaleFn = (decorator: TextDecorator, issue: Issue) => string;\\ndeclare type IssueLocale = {\\n    [key in keyof typeof allIssues]: (issue: InstanceType<(typeof allIssues)[key]>, decorator: TextDecorator) => string;\\n};\\nexport declare const en_US: {\\n    code: string;\\n    texts: {\\n        title_description: (d: {\\n            alias: (s: string) => string;\\n            type: (s: string) => string;\\n            optional: (s: string) => string;\\n            required: (s: string) => string;\\n            multiple: (s: string) => string;\\n            optionDescription: (s: string) => string;\\n            title: (s: string) => string;\\n            usageOption: (s: string) => string;\\n            command: (s: string) => string;\\n            errorLine: (s: string) => string;\\n            warningLine: (s: string) => string;\\n            invalidValue: (s: string) => string;\\n            commandPath: (s: string) => string;\\n            commandEnding: (s: string) => string;\\n            commandDescription: (s: string) => string;\\n        }) => string;\\n        title_usage: (d: {\\n            alias: (s: string) => string;\\n            type: (s: string) => string;\\n            optional: (s: string) => string;\\n            required: (s: string) => string;\\n            multiple: (s: string) => string;\\n            optionDescription: (s: string) => string;\\n            title: (s: string) => string;\\n            usageOption: (s: string) => string;\\n            command: (s: string) => string;\\n            errorLine: (s: string) => string;\\n            warningLine: (s: string) => string;\\n            invalidValue: (s: string) => string;\\n            commandPath: (s: string) => string;\\n            commandEnding: (s: string) => string;\\n            commandDescription: (s: string) => string;\\n        }) => string;\\n        title_options: (d: {\\n            alias: (s: string) => string;\\n            type: (s: string) => string;\\n            optional: (s: string) => string;\\n            required: (s: string) => string;\\n            multiple: (s: string) => string;\\n            optionDescription: (s: string) => string;\\n            title: (s: string) => string;\\n            usageOption: (s: string) => string;\\n            command: (s: string) => string;\\n            errorLine: (s: string) => string;\\n            warningLine: (s: string) => string;\\n            invalidValue: (s: string) => string;\\n            commandPath: (s: string) => string;\\n            commandEnding: (s: string) => string;\\n            commandDescription: (s: string) => string;\\n        }) => string;\\n        title_commands: (d: {\\n            alias: (s: string) => string;\\n            type: (s: string) => string;\\n            optional: (s: string) => string;\\n            required: (s: string) => string;\\n            multiple: (s: string) => string;\\n            optionDescription: (s: string) => string;\\n            title: (s: string) => string;\\n            usageOption: (s: string) => string;\\n            command: (s: string) => string;\\n            errorLine: (s: string) => string;\\n            warningLine: (s: string) => string;\\n            invalidValue: (s: string) => string;\\n            commandPath: (s: string) => string;\\n            commandEnding: (s: string) => string;\\n            commandDescription: (s: string) => string;\\n        }) => string;\\n        hint_commandHint: (d: {\\n            alias: (s: string) => string;\\n            type: (s: string) => string;\\n            optional: (s: string) => string;\\n            required: (s: string) => string;\\n            multiple: (s: string) => string;\\n            optionDescription: (s: string) => string;\\n            title: (s: string) => string;\\n            usageOption: (s: string) => string;\\n            command: (s: string) => string;\\n            errorLine: (s: string) => string;\\n            warningLine: (s: string) => string;\\n            invalidValue: (s: string) => string;\\n            commandPath: (s: string) => string;\\n            commandEnding: (s: string) => string;\\n            commandDescription: (s: string) => string;\\n        }, { command }?: any) => string;\\n        opt_required: (d: {\\n            alias: (s: string) => string;\\n            type: (s: string) => string;\\n            optional: (s: string) => string;\\n            required: (s: string) => string;\\n            multiple: (s: string) => string;\\n            optionDescription: (s: string) => string;\\n            title: (s: string) => string;\\n            usageOption: (s: string) => string;\\n            command: (s: string) => string;\\n            errorLine: (s: string) => string;\\n            warningLine: (s: string) => string;\\n            invalidValue: (s: string) => string;\\n            commandPath: (s: string) => string;\\n            commandEnding: (s: string) => string;\\n            commandDescription: (s: string) => string;\\n        }) => string;\\n        opt_optional: (d: {\\n            alias: (s: string) => string;\\n            type: (s: string) => string;\\n            optional: (s: string) => string;\\n            required: (s: string) => string;\\n            multiple: (s: string) => string;\\n            optionDescription: (s: string) => string;\\n            title: (s: string) => string;\\n            usageOption: (s: string) => string;\\n            command: (s: string) => string;\\n            errorLine: (s: string) => string;\\n            warningLine: (s: string) => string;\\n            invalidValue: (s: string) => string;\\n            commandPath: (s: string) => string;\\n            commandEnding: (s: string) => string;\\n            commandDescription: (s: string) => string;\\n        }) => string;\\n        opt_multile: (d: {\\n            alias: (s: string) => string;\\n            type: (s: string) => string;\\n            optional: (s: string) => string;\\n            required: (s: string) => string;\\n            multiple: (s: string) => string;\\n            optionDescription: (s: string) => string;\\n            title: (s: string) => string;\\n            usageOption: (s: string) => string;\\n            command: (s: string) => string;\\n            errorLine: (s: string) => string;\\n            warningLine: (s: string) => string;\\n            invalidValue: (s: string) => string;\\n            commandPath: (s: string) => string;\\n            commandEnding: (s: string) => string;\\n            commandDescription: (s: string) => string;\\n        }) => string;\\n    };\\n    issues: IssueLocale;\\n};\\nexport declare type Locale = typeof en_US;\\nexport declare function declareLocale(locale: Locale): Locale;\\nexport declare const locales: {\\n    en_US: {\\n        code: string;\\n        texts: {\\n            title_description: (d: {\\n                alias: (s: string) => string;\\n                type: (s: string) => string;\\n                optional: (s: string) => string;\\n                required: (s: string) => string;\\n                multiple: (s: string) => string;\\n                optionDescription: (s: string) => string;\\n                title: (s: string) => string;\\n                usageOption: (s: string) => string;\\n                command: (s: string) => string;\\n                errorLine: (s: string) => string;\\n                warningLine: (s: string) => string;\\n                invalidValue: (s: string) => string;\\n                commandPath: (s: string) => string;\\n                commandEnding: (s: string) => string;\\n                commandDescription: (s: string) => string;\\n            }) => string;\\n            title_usage: (d: {\\n                alias: (s: string) => string;\\n                type: (s: string) => string;\\n                optional: (s: string) => string;\\n                required: (s: string) => string;\\n                multiple: (s: string) => string;\\n                optionDescription: (s: string) => string;\\n                title: (s: string) => string;\\n                usageOption: (s: string) => string;\\n                command: (s: string) => string;\\n                errorLine: (s: string) => string;\\n                warningLine: (s: string) => string;\\n                invalidValue: (s: string) => string;\\n                commandPath: (s: string) => string;\\n                commandEnding: (s: string) => string;\\n                commandDescription: (s: string) => string;\\n            }) => string;\\n            title_options: (d: {\\n                alias: (s: string) => string;\\n                type: (s: string) => string;\\n                optional: (s: string) => string;\\n                required: (s: string) => string;\\n                multiple: (s: string) => string;\\n                optionDescription: (s: string) => string;\\n                title: (s: string) => string;\\n                usageOption: (s: string) => string;\\n                command: (s: string) => string;\\n                errorLine: (s: string) => string;\\n                warningLine: (s: string) => string;\\n                invalidValue: (s: string) => string;\\n                commandPath: (s: string) => string;\\n                commandEnding: (s: string) => string;\\n                commandDescription: (s: string) => string;\\n            }) => string;\\n            title_commands: (d: {\\n                alias: (s: string) => string;\\n                type: (s: string) => string;\\n                optional: (s: string) => string;\\n                required: (s: string) => string;\\n                multiple: (s: string) => string;\\n                optionDescription: (s: string) => string;\\n                title: (s: string) => string;\\n                usageOption: (s: string) => string;\\n                command: (s: string) => string;\\n                errorLine: (s: string) => string;\\n                warningLine: (s: string) => string;\\n                invalidValue: (s: string) => string;\\n                commandPath: (s: string) => string;\\n                commandEnding: (s: string) => string;\\n                commandDescription: (s: string) => string;\\n            }) => string;\\n            hint_commandHint: (d: {\\n                alias: (s: string) => string;\\n                type: (s: string) => string;\\n                optional: (s: string) => string;\\n                required: (s: string) => string;\\n                multiple: (s: string) => string;\\n                optionDescription: (s: string) => string;\\n                title: (s: string) => string;\\n                usageOption: (s: string) => string;\\n                command: (s: string) => string;\\n                errorLine: (s: string) => string;\\n                warningLine: (s: string) => string;\\n                invalidValue: (s: string) => string;\\n                commandPath: (s: string) => string;\\n                commandEnding: (s: string) => string;\\n                commandDescription: (s: string) => string;\\n            }, { command }?: any) => string;\\n            opt_required: (d: {\\n                alias: (s: string) => string;\\n                type: (s: string) => string;\\n                optional: (s: string) => string;\\n                required: (s: string) => string;\\n                multiple: (s: string) => string;\\n                optionDescription: (s: string) => string;\\n                title: (s: string) => string;\\n                usageOption: (s: string) => string;\\n                command: (s: string) => string;\\n                errorLine: (s: string) => string;\\n                warningLine: (s: string) => string;\\n                invalidValue: (s: string) => string;\\n                commandPath: (s: string) => string;\\n                commandEnding: (s: string) => string;\\n                commandDescription: (s: string) => string;\\n            }) => string;\\n            opt_optional: (d: {\\n                alias: (s: string) => string;\\n                type: (s: string) => string;\\n                optional: (s: string) => string;\\n                required: (s: string) => string;\\n                multiple: (s: string) => string;\\n                optionDescription: (s: string) => string;\\n                title: (s: string) => string;\\n                usageOption: (s: string) => string;\\n                command: (s: string) => string;\\n                errorLine: (s: string) => string;\\n                warningLine: (s: string) => string;\\n                invalidValue: (s: string) => string;\\n                commandPath: (s: string) => string;\\n                commandEnding: (s: string) => string;\\n                commandDescription: (s: string) => string;\\n            }) => string;\\n            opt_multile: (d: {\\n                alias: (s: string) => string;\\n                type: (s: string) => string;\\n                optional: (s: string) => string;\\n                required: (s: string) => string;\\n                multiple: (s: string) => string;\\n                optionDescription: (s: string) => string;\\n                title: (s: string) => string;\\n                usageOption: (s: string) => string;\\n                command: (s: string) => string;\\n                errorLine: (s: string) => string;\\n                warningLine: (s: string) => string;\\n                invalidValue: (s: string) => string;\\n                commandPath: (s: string) => string;\\n                commandEnding: (s: string) => string;\\n                commandDescription: (s: string) => string;\\n            }) => string;\\n        };\\n        issues: IssueLocale;\\n    };\\n};\\nexport {};\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/src/option.d.ts\", \"content\": \"import { Validator, Preprocessor, BooleanValidator } from './pipeline';\\nimport { Completion } from './completer';\\ndeclare type TypeMap = {\\n    number: number;\\n    int: number;\\n    string: string;\\n    boolean: boolean;\\n    any: number | string | boolean;\\n};\\nexport declare type Types = keyof TypeMap;\\nexport declare type ResolveType<T extends Types> = TypeMap[T];\\ndeclare const optionDataKey: unique symbol;\\ndeclare type OptionCompleter = (partial: string) => Completion[];\\nexport declare type OptData<T> = {\\n    name: string;\\n    type: Types;\\n    labelName: string;\\n    description: string;\\n    isRequired: boolean;\\n    aliases: string[];\\n    isArray: boolean;\\n    defaultValue?: T;\\n    isArg?: boolean;\\n    validators: Validator<any>[];\\n    prePreprocessors: Preprocessor[];\\n    postPreprocessors: Preprocessor[];\\n    completer?: OptionCompleter;\\n};\\nexport declare function getOptData(opt: Option<any, any, any, any>): OptData<unknown>;\\nexport declare function setOptData(opt: Option<any, any, any, any>, data: OptData<any>): void;\\nexport declare function cloneOption<O extends Option<any, any, any, any>>(opt: O): O;\\nexport declare function updateOptData<O extends Option<any, any, any, any>>(opt: O, data: Partial<OptData<any>>): O;\\nexport declare function changeOptData<O extends Option<any, any, any, any>>(opt: O, data: Partial<OptData<any>>): O;\\nexport declare function option<T extends Types>(type: T): Option<T, false, false, ResolveType<T>>;\\nexport declare class Option<T extends Types, R extends boolean, A extends boolean, RT> {\\n    name: string;\\n    [optionDataKey]: OptData<RT>;\\n    private _isRequired;\\n    private _isArray;\\n    constructor(type: T);\\n    label(name: string): Option<T, R, A, RT>;\\n    alias(...aliases: string[]): Option<T, R, A, RT>;\\n    completer(completer: OptionCompleter): Option<T, R, A, RT>;\\n    description(text: string): Option<T, R, A, RT>;\\n    required(): Option<T, true, A, RT>;\\n    array(): Option<T, R, true, RT>;\\n    default(value: RT): Option<T, true, A, RT>;\\n    validate(errorMsg: string, validator: BooleanValidator<RT>): Option<T, R, A, RT>;\\n    validate(validator: Validator<RT>): Option<T, R, A, RT>;\\n    process(phase: 'pre', fn: Preprocessor<any, ResolveType<T>>): Option<T, R, A, RT>;\\n    process<FR>(phase: 'post', fn: Preprocessor<ResolveType<T>, FR>): Option<T, R, A, FR>;\\n}\\nexport declare type OptionSet = Record<string, Option<any, boolean, boolean, any>>;\\nexport {};\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/src/parser.d.ts\", \"content\": \"import { CliDeclaration, ResolveCliDeclaration } from './type-logic';\\nimport { Report } from './report';\\nexport declare function prepareCliDeclaration(decl: CliDeclaration): {\\n    decl: Required<CliDeclaration>;\\n    usedKeys: Set<string>;\\n};\\nexport declare class Parser<D extends CliDeclaration> {\\n    private optCfg;\\n    private decl;\\n    private usedKeys;\\n    constructor(decl: D);\\n    private parseOptions;\\n    private normalizeArgs;\\n    private parseArguments;\\n    parse(argv: string[] | string): {\\n        report: Report;\\n        data: ResolveCliDeclaration<D> | null;\\n    };\\n}\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/src/pipeline.d.ts\", \"content\": \"import { Report } from './report';\\nexport declare type Validator<T> = (value: T) => void;\\nexport declare type BooleanValidator<T> = (value: T) => boolean;\\nexport declare function makeValidator<T>(errorMsg: string, fn: (value: T) => boolean): Validator<T>;\\nexport declare type Preprocessor<I = any, O = any> = (value: I) => O;\\ninterface ValidationCfg {\\n    isRequired: boolean;\\n    validators: Validator<any>[];\\n    name: string;\\n    isArg?: boolean;\\n}\\ninterface OptCfg extends ValidationCfg {\\n    prePreprocessors: Preprocessor[];\\n    postPreprocessors: Preprocessor[];\\n    isArray: boolean;\\n    defaultValue?: any;\\n    isArg?: boolean;\\n}\\nexport declare function handleOption(optCfg: OptCfg, value: any, iterating?: boolean): {\\n    value: any;\\n    report: Report;\\n};\\nexport declare function handleAllOptions(optSchema: Record<string, OptCfg>, rawData: Record<string, any>, usedKeys: Set<string>): {\\n    data: any;\\n    report: Report;\\n};\\nexport {};\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/src/printer-old.d.ts\", \"content\": \"\" }, { \"filename\": \"node_modules/@types/typed-cli/src/printer.d.ts\", \"content\": \"import { Locale } from './i18n';\\nimport { TextDecorator } from './decorator';\\nimport { Report } from './report';\\nimport { CliDeclaration } from './type-logic';\\nimport { CommandSet, CommandHelperParams } from './command';\\ndeclare type PrinterParams = {\\n    locale: Locale;\\n    decorator: TextDecorator;\\n    lineEnding?: string;\\n};\\nexport declare class Printer {\\n    private locale;\\n    private decorator;\\n    private lineEnding;\\n    constructor({ locale, decorator, lineEnding }: PrinterParams);\\n    private generateOptionDescription;\\n    private generateUsage;\\n    private genenrateCommandList;\\n    generateHelpForComands(cfg: CommandHelperParams, cs: CommandSet): string;\\n    generateHelp(decl: CliDeclaration): string;\\n    private printReportLayer;\\n    stringifyReport(report: Report): string;\\n}\\nexport {};\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/src/report.d.ts\", \"content\": \"import { BaseWarning } from './errors';\\nexport declare type Issue = (Error | BaseWarning | null);\\nexport declare type Report = {\\n    issue: Issue;\\n    children: Report[];\\n};\\nexport declare function combineIssues(conclusion: Issue, issues: Issue[]): Report;\\nexport declare function isError(issue?: Issue): boolean;\\nexport declare function mergeReports(conclusion: Issue, ...reports: Report[]): Report;\\nexport declare function errorToReport(err: Error): Report;\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/src/type-logic.d.ts\", \"content\": \"import { Option, OptionSet, Types } from './option';\\nexport declare type GetPropertiyNames<T extends Record<string, unknown>, P> = {\\n    [K in keyof T]: T[K] extends P ? K : never;\\n}[keyof T];\\nexport declare type GetProperties<T extends Record<string, unknown>, P> = Pick<T, GetPropertiyNames<T, P>>;\\ndeclare type PickRequiredOpts<O extends OptionSet> = GetProperties<O, Option<any, true, boolean, any> | Option<any, boolean, true, any>>;\\ndeclare type PickNonRequiredOpts<O extends OptionSet> = GetProperties<O, Option<any, false, boolean, any>>;\\ndeclare type ResolveOptionType<O extends Option<Types, boolean, boolean, any>> = O extends Option<any, boolean, boolean, infer R> ? R : never;\\ndeclare type ResolveOption<O extends Option<Types, boolean, boolean, any>> = O extends Option<Types, boolean, true, any> ? Array<ResolveOptionType<O>> : ResolveOptionType<O>;\\ndeclare type ResolveOptionSet<O extends OptionSet> = {\\n    [key in keyof PickRequiredOpts<O>]: ResolveOption<PickRequiredOpts<O>[key]>;\\n} & {\\n    [key in keyof PickNonRequiredOpts<O>]?: ResolveOption<PickNonRequiredOpts<O>[key]>;\\n};\\nexport declare type CliDeclaration = {\\n    name?: string;\\n    options?: OptionSet;\\n    description?: string;\\n    _?: Option<Types, boolean, boolean, any>;\\n};\\nexport declare type ResolveCliDeclaration<D extends CliDeclaration> = {\\n    options: D['options'] extends OptionSet ? ResolveOptionSet<D['options']> : {};\\n    _: D['_'] extends Option<any, infer R, any, any> ? R extends true ? ResolveOption<D['_']> : ResolveOption<D['_']> | undefined : undefined;\\n};\\nexport {};\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/src/utils.d.ts\", \"content\": \"export declare function createKebabAlias(str: string): string | undefined;\\nexport declare function objMap<T, R>(obj: Record<string, T>, fn: (item: T, key: string) => R): Record<string, R>;\\nexport declare function alignTextMatrix(textMatrix: string[][], alignment?: ('left' | 'right')[]): string[][];\\nexport declare function arrayPartition<T>(array: T[], fn: (item: T, index: number, array: T[]) => boolean): [T[], T[]];\\nexport declare function tabText(text: string, prefix: string): string;\\nexport declare function findKeyCollision(keys: string[]): string | null;\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/tests/unit/cli-helper.d.ts\", \"content\": \"export {};\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/tests/unit/index.d.ts\", \"content\": \"import './utils';\\nimport './option';\\nimport './pipeline';\\nimport './parser';\\nimport './printer';\\nimport './cli-helper';\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/tests/unit/option.d.ts\", \"content\": \"export {};\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/tests/unit/parser.d.ts\", \"content\": \"export {};\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/tests/unit/pipeline.d.ts\", \"content\": \"import { Report } from '../../src/report';\\nimport { IssueType } from '../../src/errors';\\ndeclare type ReportReference = {\\n    issue: [new (...args: any[]) => IssueType, Record<string, any>];\\n    children: ReportReference[];\\n};\\nexport declare function validateReport(r: Report, ref: ReportReference): void;\\nexport {};\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/tests/unit/printer.d.ts\", \"content\": \"export {};\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/tests/unit/utils copy.d.ts\", \"content\": \"export {};\\n\" }, { \"filename\": \"node_modules/@types/typed-cli/tests/unit/utils.d.ts\", \"content\": \"export {};\\n\" }, { \"filename\": \"./bootstrap.d.ts\", \"content\": \"// import {cli as _cli, option as _option, command as _command} from 'typed-cli';\\n// import * as _presets from 'typed-cli/presets';\\n\\n// declare global {\\n//     const cli: typeof _cli;\\n//     const option: typeof _option;\\n//     const command: typeof _command;\\n//     const presets: typeof _presets;\\n// }\\n\" }];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGliLWdlbmVyYXRlZC50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvbGliLWdlbmVyYXRlZC50cz9lM2E1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBmaWxlcyA9IFt7XCJmaWxlbmFtZVwiOlwibm9kZV9tb2R1bGVzL0B0eXBlcy90eXBlZC1jbGkvaW5kZXguZC50c1wiLFwiY29udGVudFwiOlwiZXhwb3J0IHsgUGFyc2VyIH0gZnJvbSAnLi9zcmMvcGFyc2VyJztcXG5leHBvcnQgeyBQcmludGVyIH0gZnJvbSAnLi9zcmMvcHJpbnRlcic7XFxuZXhwb3J0IHsgb3B0aW9uIH0gZnJvbSAnLi9zcmMvb3B0aW9uJztcXG5leHBvcnQgeyBjcmVhdGVDbGlIZWxwZXIsIFdyaXRlciwgRXhpdGVyLCBBcmd2UHJvdmlkZXIsIENyZWF0ZUNsaUhlbHBlclBhcmFtcywgQ2xpSGVscGVyIH0gZnJvbSAnLi9zcmMvY2xpLWhlbHBlcic7XFxuZXhwb3J0IHsgY2xpLCBkZWZhdWx0QXJndlByb3ZpZGVyLCBkZWZhdWx0RXhpdGVyLCBkZWZhdWx0UHJpbnRlciwgZGVmYXVsdFdyaXRlciB9IGZyb20gJy4vc3JjL2RlZmF1bHQtY2xpJztcXG5leHBvcnQgeyBkZWNvcmF0b3JzLCBjaGFsa0luc3RhbmNlIH0gZnJvbSAnLi9zcmMvZGVjb3JhdG9yJztcXG5leHBvcnQgeyBsb2NhbGVzIH0gZnJvbSAnLi9zcmMvaTE4bic7XFxuZXhwb3J0IHsgY29tcGxldGVGb3JDb21tYW5kU2V0IH0gZnJvbSAnLi9zcmMvY29tcGxldGVyJztcXG5leHBvcnQgeyBjcmVhdGVDb21tYW5kSGVscGVyLCBjb21tYW5kLCBkZWZhdWx0Q29tbWFuZCB9IGZyb20gJy4vc3JjL2NvbW1hbmQnO1xcbmltcG9ydCAqIGFzIHByZXNldHMgZnJvbSAnLi9wcmVzZXRzJztcXG5leHBvcnQgeyBwcmVzZXRzIH07XFxuXCJ9LHtcImZpbGVuYW1lXCI6XCJub2RlX21vZHVsZXMvQHR5cGVzL3R5cGVkLWNsaS9wZy9pbmRleC5kLnRzXCIsXCJjb250ZW50XCI6XCIjISAvdXNyL2Jpbi9lbnYgbm9kZVxcbmV4cG9ydCB7fTtcXG5cIn0se1wiZmlsZW5hbWVcIjpcIm5vZGVfbW9kdWxlcy9AdHlwZXMvdHlwZWQtY2xpL3ByZXNldHMvaW5kZXguZC50c1wiLFwiY29udGVudFwiOlwiaW1wb3J0IG9uZU9mIGZyb20gJy4vb25lLW9mJztcXG5pbXBvcnQgdXJsIGZyb20gJy4vdXJsJztcXG5leHBvcnQgeyBvbmVPZiwgdXJsIH07XFxuXCJ9LHtcImZpbGVuYW1lXCI6XCJub2RlX21vZHVsZXMvQHR5cGVzL3R5cGVkLWNsaS9wcmVzZXRzL29uZS1vZi5kLnRzXCIsXCJjb250ZW50XCI6XCJpbXBvcnQgeyBPcHRpb24gfSBmcm9tICcuLi9zcmMvb3B0aW9uJztcXG5kZWNsYXJlIHR5cGUgT25lT2ZEZWNsID0gcmVhZG9ubHkgc3RyaW5nW10gfCB7XFxuICAgIFtrZXk6IHN0cmluZ106IGFueSB8IHtcXG4gICAgICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xcbiAgICAgICAgdmFsdWU/OiBhbnk7XFxuICAgIH07XFxufTtcXG5kZWNsYXJlIHR5cGUgUmVzb2x2ZU9uZU9mRGVjbFR5cGU8VCBleHRlbmRzIE9uZU9mRGVjbD4gPSBUIGV4dGVuZHMgcmVhZG9ubHkgc3RyaW5nW10gPyBUW251bWJlcl0gOiB7XFxuICAgIFtrZXkgaW4ga2V5b2YgVF06IFRba2V5XSBleHRlbmRzIHtcXG4gICAgICAgIHZhbHVlOiBpbmZlciBWO1xcbiAgICB9ID8gViA6IFRba2V5XTtcXG59W2tleW9mIFRdO1xcbmRlY2xhcmUgY29uc3Qgb25lT2Y6IDxUIGV4dGVuZHMgT25lT2ZEZWNsPihkZWNsOiBUKSA9PiBPcHRpb248XFxcInN0cmluZ1xcXCIsIGZhbHNlLCBmYWxzZSwgUmVzb2x2ZU9uZU9mRGVjbFR5cGU8VD4+O1xcbmV4cG9ydCBkZWZhdWx0IG9uZU9mO1xcblwifSx7XCJmaWxlbmFtZVwiOlwibm9kZV9tb2R1bGVzL0B0eXBlcy90eXBlZC1jbGkvcHJlc2V0cy91cmwuZC50c1wiLFwiY29udGVudFwiOlwiLy8vIDxyZWZlcmVuY2UgdHlwZXM9XFxcIm5vZGVcXFwiIC8+XFxuaW1wb3J0IHVybCBmcm9tICd1cmwnO1xcbmRlY2xhcmUgY29uc3QgdXJsT3B0aW9uOiBpbXBvcnQoXFxcIi4uL3NyYy9vcHRpb25cXFwiKS5PcHRpb248XFxcInN0cmluZ1xcXCIsIGZhbHNlLCBmYWxzZSwgdXJsLlVybFdpdGhTdHJpbmdRdWVyeT47XFxuZXhwb3J0IGRlZmF1bHQgdXJsT3B0aW9uO1xcblwifSx7XCJmaWxlbmFtZVwiOlwibm9kZV9tb2R1bGVzL0B0eXBlcy90eXBlZC1jbGkvc3JjL2NsaS1oZWxwZXIuZC50c1wiLFwiY29udGVudFwiOlwiaW1wb3J0IHsgUHJpbnRlciB9IGZyb20gJy4vcHJpbnRlcic7XFxuaW1wb3J0IHsgQ2xpRGVjbGFyYXRpb24sIFJlc29sdmVDbGlEZWNsYXJhdGlvbiB9IGZyb20gJy4vdHlwZS1sb2dpYyc7XFxuZXhwb3J0IGRlY2xhcmUgdHlwZSBXcml0ZXIgPSAoc3RyOiBzdHJpbmcsIGxvZ1R5cGU6ICdsb2cnIHwgJ2Vycm9yJykgPT4gdm9pZDtcXG5leHBvcnQgZGVjbGFyZSB0eXBlIEV4aXRlciA9IChoYXNFcnJvcnM6IGJvb2xlYW4pID0+IHZvaWQ7XFxuZXhwb3J0IGRlY2xhcmUgdHlwZSBBcmd2UHJvdmlkZXIgPSAoKSA9PiBzdHJpbmdbXTtcXG5leHBvcnQgZGVjbGFyZSB0eXBlIENsaUhlbHBlciA9IDxEIGV4dGVuZHMgQ2xpRGVjbGFyYXRpb24+KGRlY2w6IEQpID0+IFJlc29sdmVDbGlEZWNsYXJhdGlvbjxEPjtcXG5leHBvcnQgZGVjbGFyZSB0eXBlIENyZWF0ZUNsaUhlbHBlclBhcmFtcyA9IHtcXG4gICAgd3JpdGVyOiBXcml0ZXI7XFxuICAgIGV4aXRlcjogRXhpdGVyO1xcbiAgICBhcmd2UHJvdmlkZXI6IEFyZ3ZQcm92aWRlcjtcXG4gICAgcHJpbnRlcjogUHJpbnRlcjtcXG4gICAgaGVscEdlbmVyYXRpb24/OiBib29sZWFuO1xcbn07XFxuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gY3JlYXRlQ2xpSGVscGVyKHBhcmFtczogQ3JlYXRlQ2xpSGVscGVyUGFyYW1zKTogQ2xpSGVscGVyO1xcblwifSx7XCJmaWxlbmFtZVwiOlwibm9kZV9tb2R1bGVzL0B0eXBlcy90eXBlZC1jbGkvc3JjL2NvbW1hbmQuZC50c1wiLFwiY29udGVudFwiOlwiaW1wb3J0IHsgQ2xpRGVjbGFyYXRpb24sIFJlc29sdmVDbGlEZWNsYXJhdGlvbiB9IGZyb20gXFxcIi4vdHlwZS1sb2dpY1xcXCI7XFxuaW1wb3J0IHsgV3JpdGVyLCBFeGl0ZXIsIEFyZ3ZQcm92aWRlciB9IGZyb20gXFxcIi4vY2xpLWhlbHBlclxcXCI7XFxuaW1wb3J0IHsgUHJpbnRlciB9IGZyb20gXFxcIi4vcHJpbnRlclxcXCI7XFxuaW1wb3J0IHsgUmVwb3J0IH0gZnJvbSBcXFwiLi9yZXBvcnRcXFwiO1xcbmltcG9ydCB7IENvbXBsZXRlck9wdGlvbnMgfSBmcm9tIFxcXCIuL2NvbXBsZXRlclxcXCI7XFxuZXhwb3J0IGRlY2xhcmUgY29uc3QgZGVmYXVsdENvbW1hbmQ6IHVuaXF1ZSBzeW1ib2w7XFxuZXhwb3J0IGRlY2xhcmUgdHlwZSBDb21tYW5kU2V0ID0gUmVjb3JkPHN0cmluZywgQ29tbWFuZEJ1aWxkZXI8YW55Pj4gJiB7XFxuICAgIFtkZWZhdWx0Q29tbWFuZF0/OiBDb21tYW5kQnVpbGRlcjxhbnk+O1xcbn07XFxuZXhwb3J0IGRlY2xhcmUgdHlwZSBDb21tYW5kSGFuZGxlcjxEIGV4dGVuZHMgQ2xpRGVjbGFyYXRpb24+ID0gKGRhdGE6IFJlc29sdmVDbGlEZWNsYXJhdGlvbjxEPikgPT4gdm9pZDtcXG5leHBvcnQgZGVjbGFyZSBjb25zdCBfZGVjbDogdW5pcXVlIHN5bWJvbDtcXG5leHBvcnQgZGVjbGFyZSBjb25zdCBfc3ViQ29tbWFuZFNldDogdW5pcXVlIHN5bWJvbDtcXG5kZWNsYXJlIGNvbnN0IF9mbjogdW5pcXVlIHN5bWJvbDtcXG5leHBvcnQgZGVjbGFyZSBjb25zdCBfYWxpYXNlczogdW5pcXVlIHN5bWJvbDtcXG5kZWNsYXJlIGNvbnN0IF9jbG9uZTogdW5pcXVlIHN5bWJvbDtcXG5kZWNsYXJlIGNvbnN0IF9tYXRjaDogdW5pcXVlIHN5bWJvbDtcXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDb21tYW5kQnVpbGRlcjxEIGV4dGVuZHMgQ2xpRGVjbGFyYXRpb24+IHtcXG4gICAgW19kZWNsXTogRDtcXG4gICAgW19mbl06IENvbW1hbmRIYW5kbGVyPEQ+O1xcbiAgICBbX2FsaWFzZXNdOiBzdHJpbmdbXTtcXG4gICAgW19zdWJDb21tYW5kU2V0XTogQ29tbWFuZFNldDtcXG4gICAgY29uc3RydWN0b3IoZGVjbDogRCk7XFxuICAgIFtfY2xvbmVdOiAoKSA9PiBDb21tYW5kQnVpbGRlcjxEPjtcXG4gICAgaGFuZGxlKGZuOiBDb21tYW5kSGFuZGxlcjxEPik6IENvbW1hbmRCdWlsZGVyPEQ+O1xcbiAgICBhbGlhcyguLi5hbGlhc2VzOiBzdHJpbmdbXSk6IENvbW1hbmRCdWlsZGVyPEQ+O1xcbiAgICBzdWJDb21tYW5kcyhzdWJDb21tYW5kU2V0OiBSZWNvcmQ8c3RyaW5nLCBDb21tYW5kQnVpbGRlcjxhbnk+Pik6IENvbW1hbmRCdWlsZGVyPEQ+O1xcbiAgICBbX21hdGNoXTogKGNtZFN0cmluZzogc3RyaW5nKSA9PiBib29sZWFuO1xcbn1cXG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBwcmVwYXJlQ29tbWFuZFNldDxDIGV4dGVuZHMgQ29tbWFuZFNldD4oY3M6IEMsIG5hbWVQcmVmaXg/OiBzdHJpbmcpOiBDO1xcbmV4cG9ydCBkZWNsYXJlIHR5cGUgUGFyc2VDb21tYW5kU2V0UGFyYW1zID0ge1xcbiAgICBjczogQ29tbWFuZFNldDtcXG4gICAgYXJndjogc3RyaW5nW107XFxuICAgIG9uUmVwb3J0OiAocmVwb3J0OiBSZXBvcnQpID0+IHZvaWQ7XFxuICAgIG9uSGVscD86IChjbWQ6IENvbW1hbmRCdWlsZGVyPENsaURlY2xhcmF0aW9uPikgPT4gdm9pZDtcXG59O1xcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIGZpbmRNYXRjaGVkQ29tbWFuZChhcmd2OiBzdHJpbmdbXSwgY3M6IENvbW1hbmRTZXQpOiBDb21tYW5kQnVpbGRlcjxhbnk+IHwgbnVsbDtcXG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBwYXJzZUNvbW1hbmRTZXQocGFyYW1zOiBQYXJzZUNvbW1hbmRTZXRQYXJhbXMpOiBib29sZWFuO1xcbmV4cG9ydCBkZWNsYXJlIHR5cGUgQ3JlYXRlQ29tbWFuZEhlbHBlclBhcmFtcyA9IHtcXG4gICAgd3JpdGVyOiBXcml0ZXI7XFxuICAgIGV4aXRlcjogRXhpdGVyO1xcbiAgICBhcmd2UHJvdmlkZXI6IEFyZ3ZQcm92aWRlcjtcXG4gICAgcHJpbnRlcjogUHJpbnRlcjtcXG4gICAgaGVscEdlbmVyYXRpb24/OiBib29sZWFuO1xcbn07XFxuZXhwb3J0IGRlY2xhcmUgdHlwZSBDb21tYW5kSGVscGVyUGFyYW1zID0ge1xcbiAgICBwcm9ncmFtPzogc3RyaW5nO1xcbiAgICBkZXNjcmlwdGlvbj86IHN0cmluZztcXG4gICAgY29tcGxldGVyPzogQ29tcGxldGVyT3B0aW9ucyB8IGJvb2xlYW47XFxufTtcXG5leHBvcnQgZGVjbGFyZSBjb25zdCBjcmVhdGVDb21tYW5kSGVscGVyOiAocGFyYW1zOiBDcmVhdGVDb21tYW5kSGVscGVyUGFyYW1zKSA9PiAoY2ZnOiBDb21tYW5kSGVscGVyUGFyYW1zLCBjczogQ29tbWFuZFNldCkgPT4gdm9pZDtcXG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBjb21tYW5kPEQgZXh0ZW5kcyBDbGlEZWNsYXJhdGlvbj4oZGVjbDogRCk6IENvbW1hbmRCdWlsZGVyPEQ+O1xcbmV4cG9ydCB7fTtcXG5cIn0se1wiZmlsZW5hbWVcIjpcIm5vZGVfbW9kdWxlcy9AdHlwZXMvdHlwZWQtY2xpL3NyYy9jb21wbGV0ZXIuZC50c1wiLFwiY29udGVudFwiOlwiaW1wb3J0IHsgQ29tbWFuZFNldCB9IGZyb20gJy4vY29tbWFuZCc7XFxuaW1wb3J0IHsgQ2xpRGVjbGFyYXRpb24gfSBmcm9tICcuL3R5cGUtbG9naWMnO1xcbmV4cG9ydCBkZWNsYXJlIHR5cGUgQ29tcGxldGlvbiA9IHtcXG4gICAgY29tcGxldGlvbjogc3RyaW5nO1xcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xcbn07XFxuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gY29tcGxldGVGb3JDbGlEZWNsKGRlY2w6IENsaURlY2xhcmF0aW9uLCBhcmd2OiBzdHJpbmdbXSwgdHlwZWRUZXh0OiBzdHJpbmcpOiBDb21wbGV0aW9uW107XFxuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gY29tcGxldGVGb3JDb21tYW5kU2V0KGNzOiBDb21tYW5kU2V0LCBhcmd2OiBzdHJpbmdbXSwgdHlwZWRUZXh0OiBzdHJpbmcpOiBDb21wbGV0aW9uW107XFxuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gdGFidGFiQ29tbWFuZERlY2xDb21wbGV0ZShjczogQ29tbWFuZFNldCk6IHZvaWQ7XFxuZXhwb3J0IGRlY2xhcmUgdHlwZSBDb21wbGV0ZXJPcHRpb25zID0ge1xcbiAgICBpbnN0YWxsQ21kPzogc3RyaW5nO1xcbiAgICB1bmluc3RhbGxDbWQ/OiBzdHJpbmc7XFxuICAgIGNvbXBsZXRlQ21kPzogc3RyaW5nO1xcbn07XFxuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gbm9ybWFsaXplQ29tcGxldGVyT3B0aW9ucyhvcHRzOiBDb21wbGV0ZXJPcHRpb25zKTogUmVxdWlyZWQ8Q29tcGxldGVyT3B0aW9ucz47XFxuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gaGFuZGxlQ29tcGxldGVyT3B0aW9ucyhjczogQ29tbWFuZFNldCwgY21kOiBzdHJpbmcsIG9wdHM6IENvbXBsZXRlck9wdGlvbnMgfCBib29sZWFuLCBuYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQsIGNiOiBGdW5jdGlvbik6IGJvb2xlYW47XFxuXCJ9LHtcImZpbGVuYW1lXCI6XCJub2RlX21vZHVsZXMvQHR5cGVzL3R5cGVkLWNsaS9zcmMvZGVjb3JhdG9yLmQudHNcIixcImNvbnRlbnRcIjpcImltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XFxuZXhwb3J0IHsgY2hhbGsgYXMgY2hhbGtJbnN0YW5jZSB9O1xcbmRlY2xhcmUgdHlwZSBEZWNvcmF0b3JGbiA9ICh0ZXh0OiBzdHJpbmcpID0+IHN0cmluZztcXG5leHBvcnQgZGVjbGFyZSBjb25zdCBwbGFpbjoge1xcbiAgICBhbGlhczogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICB0eXBlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgIG9wdGlvbmFsOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgIHJlcXVpcmVkOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgIG11bHRpcGxlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgIG9wdGlvbkRlc2NyaXB0aW9uOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgIHRpdGxlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgIHVzYWdlT3B0aW9uOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgIGNvbW1hbmQ6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgZXJyb3JMaW5lOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgIHdhcm5pbmdMaW5lOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgIGludmFsaWRWYWx1ZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICBjb21tYW5kUGF0aDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICBjb21tYW5kRW5kaW5nOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgIGNvbW1hbmREZXNjcmlwdGlvbjogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbn07XFxuZXhwb3J0IGRlY2xhcmUgdHlwZSBUZXh0RGVjb3JhdG9yID0gdHlwZW9mIHBsYWluO1xcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIGRlZmluZVRleHREZWNvcmF0b3I8VCBleHRlbmRzIFJlY29yZDxrZXlvZiB0eXBlb2YgcGxhaW4sIERlY29yYXRvckZuPj4oZGVjb3JhdG9yczogVCk6IFQ7XFxuZXhwb3J0IGRlY2xhcmUgY29uc3QgZmFuY3k6IHtcXG4gICAgYWxpYXM6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgdHlwZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICBvcHRpb25hbDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICByZXF1aXJlZDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICBtdWx0aXBsZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICBvcHRpb25EZXNjcmlwdGlvbjogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICB0aXRsZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICB1c2FnZU9wdGlvbjogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICBjb21tYW5kOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgIGVycm9yTGluZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICB3YXJuaW5nTGluZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICBpbnZhbGlkVmFsdWU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgY29tbWFuZFBhdGg6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgY29tbWFuZEVuZGluZzogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICBjb21tYW5kRGVzY3JpcHRpb246IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG59O1xcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGRlY29yYXRvcnM6IHtcXG4gICAgZmFuY3k6IHtcXG4gICAgICAgIGFsaWFzOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICB0eXBlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICBvcHRpb25hbDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgcmVxdWlyZWQ6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgIG11bHRpcGxlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICBvcHRpb25EZXNjcmlwdGlvbjogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgdGl0bGU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgIHVzYWdlT3B0aW9uOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICBjb21tYW5kOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICBlcnJvckxpbmU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgIHdhcm5pbmdMaW5lOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICBpbnZhbGlkVmFsdWU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgIGNvbW1hbmRQYXRoOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICBjb21tYW5kRW5kaW5nOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICBjb21tYW5kRGVzY3JpcHRpb246IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgfTtcXG4gICAgcGxhaW46IHtcXG4gICAgICAgIGFsaWFzOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICB0eXBlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICBvcHRpb25hbDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgcmVxdWlyZWQ6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgIG11bHRpcGxlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICBvcHRpb25EZXNjcmlwdGlvbjogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgdGl0bGU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgIHVzYWdlT3B0aW9uOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICBjb21tYW5kOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICBlcnJvckxpbmU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgIHdhcm5pbmdMaW5lOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICBpbnZhbGlkVmFsdWU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgIGNvbW1hbmRQYXRoOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICBjb21tYW5kRW5kaW5nOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICBjb21tYW5kRGVzY3JpcHRpb246IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgfTtcXG59O1xcblwifSx7XCJmaWxlbmFtZVwiOlwibm9kZV9tb2R1bGVzL0B0eXBlcy90eXBlZC1jbGkvc3JjL2RlZmF1bHQtY2xpLmQudHNcIixcImNvbnRlbnRcIjpcImltcG9ydCB7IEFyZ3ZQcm92aWRlciwgRXhpdGVyLCBXcml0ZXIgfSBmcm9tICcuL2NsaS1oZWxwZXInO1xcbmltcG9ydCB7IFByaW50ZXIgfSBmcm9tICcuL3ByaW50ZXInO1xcbmltcG9ydCB7IENsaURlY2xhcmF0aW9uLCBSZXNvbHZlQ2xpRGVjbGFyYXRpb24gfSBmcm9tICcuL3R5cGUtbG9naWMnO1xcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGRlZmF1bHRQcmludGVyOiBQcmludGVyO1xcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGRlZmF1bHRBcmd2UHJvdmlkZXI6IEFyZ3ZQcm92aWRlcjtcXG5leHBvcnQgZGVjbGFyZSBjb25zdCBkZWZhdWx0RXhpdGVyOiBFeGl0ZXI7XFxuZXhwb3J0IGRlY2xhcmUgY29uc3QgZGVmYXVsdFdyaXRlcjogV3JpdGVyO1xcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IHNldHVwQ29tbWFuZHM6IChjZmc6IGltcG9ydChcXFwiLi9jb21tYW5kXFxcIikuQ29tbWFuZEhlbHBlclBhcmFtcywgY3M6IGltcG9ydChcXFwiLi9jb21tYW5kXFxcIikuQ29tbWFuZFNldCkgPT4gdm9pZDtcXG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBjbGk8RCBleHRlbmRzIENsaURlY2xhcmF0aW9uPihkZWNsOiBEKTogUmVzb2x2ZUNsaURlY2xhcmF0aW9uPEQ+O1xcbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBjbGkge1xcbiAgICB2YXIgY29tbWFuZHM6IChjZmc6IGltcG9ydChcXFwiLi9jb21tYW5kXFxcIikuQ29tbWFuZEhlbHBlclBhcmFtcywgY3M6IGltcG9ydChcXFwiLi9jb21tYW5kXFxcIikuQ29tbWFuZFNldCkgPT4gdm9pZDtcXG59XFxuXCJ9LHtcImZpbGVuYW1lXCI6XCJub2RlX21vZHVsZXMvQHR5cGVzL3R5cGVkLWNsaS9zcmMvZXJyb3JzLmQudHNcIixcImNvbnRlbnRcIjpcImV4cG9ydCBkZWNsYXJlIGNsYXNzIEJhc2VFcnJvciBleHRlbmRzIEVycm9yIHtcXG4gICAgY2xhc3NOYW1lOiBrZXlvZiB0eXBlb2YgYWxsSXNzdWVzO1xcbn1cXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBCYXNlV2FybmluZyB7XFxuICAgIGNsYXNzTmFtZToga2V5b2YgdHlwZW9mIGFsbElzc3VlcztcXG4gICAgaXNXYXJuaW5nOiBib29sZWFuO1xcbn1cXG5kZWNsYXJlIGNsYXNzIEVtcHR5UmVxdWlyZWRPcHRpb25FcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XFxuICAgIHJlcXVpcmVkT3B0aW9uOiBzdHJpbmc7XFxuICAgIGNsYXNzTmFtZTogXFxcIkVtcHR5UmVxdWlyZWRPcHRpb25FcnJvclxcXCI7XFxuICAgIGNvbnN0cnVjdG9yKHJlcXVpcmVkT3B0aW9uOiBzdHJpbmcpO1xcbn1cXG5kZWNsYXJlIGNsYXNzIFR5cGVNaXNtYXRjaEVycm9yIGV4dGVuZHMgQmFzZUVycm9yIHtcXG4gICAgY2xhc3NOYW1lOiBcXFwiVHlwZU1pc21hdGNoRXJyb3JcXFwiO1xcbiAgICBleHBlY3RlZDogc3RyaW5nO1xcbiAgICByZWNlaXZlZDogc3RyaW5nO1xcbiAgICBjb25zdHJ1Y3RvcihleHBlY3RlZDogc3RyaW5nLCByZWNlaXZlZDogc3RyaW5nKTtcXG59XFxuZGVjbGFyZSBjbGFzcyBJdmFsaWRPcHRpb25FcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XFxuICAgIGNsYXNzTmFtZTogXFxcIkl2YWxpZE9wdGlvbkVycm9yXFxcIjtcXG4gICAgb3B0aW9uTmFtZTogc3RyaW5nO1xcbiAgICB2YWx1ZTogYW55O1xcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25OYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkpO1xcbn1cXG5kZWNsYXJlIGNsYXNzIFNvbWVJdmFsaWRPcHRpb25zRXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xcbiAgICBjbGFzc05hbWU6IFxcXCJTb21lSXZhbGlkT3B0aW9uc0Vycm9yXFxcIjtcXG59XFxuZGVjbGFyZSBjbGFzcyBJdmFsaWRTb21lQXJndWVtbnRzRXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xcbiAgICBjbGFzc05hbWU6IFxcXCJJdmFsaWRTb21lQXJndWVtbnRzRXJyb3JcXFwiO1xcbn1cXG5kZWNsYXJlIGNsYXNzIEl2YWxpZEFyZ3VlbW50RXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xcbiAgICBjbGFzc05hbWU6IFxcXCJJdmFsaWRBcmd1ZW1udEVycm9yXFxcIjtcXG4gICAgdmFsdWU6IGFueTtcXG4gICAgY29uc3RydWN0b3IodmFsdWU6IGFueSk7XFxufVxcbmRlY2xhcmUgY2xhc3MgSW52YWxpZENvbW1hbmQgZXh0ZW5kcyBCYXNlRXJyb3Ige1xcbiAgICBjbGFzc05hbWU6IFxcXCJJbnZhbGlkQ29tbWFuZFxcXCI7XFxuICAgIGNvbW1hbmROYW1lOiBhbnk7XFxuICAgIGNvbnN0cnVjdG9yKGNvbW1hbmROYW1lOiBhbnkpO1xcbn1cXG5kZWNsYXJlIGNsYXNzIE5vQ29tbWFuZCBleHRlbmRzIEJhc2VFcnJvciB7XFxuICAgIGNsYXNzTmFtZTogXFxcIk5vQ29tbWFuZFxcXCI7XFxufVxcbmRlY2xhcmUgY2xhc3MgSXZhbGlkSW5wdXRFcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XFxuICAgIGNsYXNzTmFtZTogXFxcIkl2YWxpZElucHV0RXJyb3JcXFwiO1xcbn1cXG5kZWNsYXJlIGNsYXNzIFVua25vd25PcHRpb25XYXJuaW5nIGV4dGVuZHMgQmFzZVdhcm5pbmcge1xcbiAgICBjbGFzc05hbWU6IFxcXCJVbmtub3duT3B0aW9uV2FybmluZ1xcXCI7XFxuICAgIG9wdGlvbk5hbWU6IHN0cmluZztcXG4gICAgY29uc3RydWN0b3Iob3B0aW9uTmFtZTogc3RyaW5nKTtcXG59XFxuZXhwb3J0IGRlY2xhcmUgdHlwZSBJc3N1ZVR5cGUgPSB7XFxuICAgIFtrZXkgaW4ga2V5b2YgdHlwZW9mIGFsbElzc3Vlc106IEluc3RhbmNlVHlwZTwodHlwZW9mIGFsbElzc3Vlcylba2V5XT47XFxufVtrZXlvZiB0eXBlb2YgYWxsSXNzdWVzXTtcXG5leHBvcnQgZGVjbGFyZSBjb25zdCBhbGxJc3N1ZXM6IHtcXG4gICAgVW5rbm93bk9wdGlvbldhcm5pbmc6IHR5cGVvZiBVbmtub3duT3B0aW9uV2FybmluZztcXG4gICAgRW1wdHlSZXF1aXJlZE9wdGlvbkVycm9yOiB0eXBlb2YgRW1wdHlSZXF1aXJlZE9wdGlvbkVycm9yO1xcbiAgICBJdmFsaWRPcHRpb25FcnJvcjogdHlwZW9mIEl2YWxpZE9wdGlvbkVycm9yO1xcbiAgICBJdmFsaWRTb21lQXJndWVtbnRzRXJyb3I6IHR5cGVvZiBJdmFsaWRTb21lQXJndWVtbnRzRXJyb3I7XFxuICAgIEl2YWxpZEFyZ3VlbW50RXJyb3I6IHR5cGVvZiBJdmFsaWRBcmd1ZW1udEVycm9yO1xcbiAgICBTb21lSXZhbGlkT3B0aW9uc0Vycm9yOiB0eXBlb2YgU29tZUl2YWxpZE9wdGlvbnNFcnJvcjtcXG4gICAgSXZhbGlkSW5wdXRFcnJvcjogdHlwZW9mIEl2YWxpZElucHV0RXJyb3I7XFxuICAgIFR5cGVNaXNtYXRjaEVycm9yOiB0eXBlb2YgVHlwZU1pc21hdGNoRXJyb3I7XFxuICAgIEludmFsaWRDb21tYW5kOiB0eXBlb2YgSW52YWxpZENvbW1hbmQ7XFxuICAgIE5vQ29tbWFuZDogdHlwZW9mIE5vQ29tbWFuZDtcXG59O1xcbmV4cG9ydCB7fTtcXG5cIn0se1wiZmlsZW5hbWVcIjpcIm5vZGVfbW9kdWxlcy9AdHlwZXMvdHlwZWQtY2xpL3NyYy9pMThuLmQudHNcIixcImNvbnRlbnRcIjpcImltcG9ydCB7IGFsbElzc3VlcyB9IGZyb20gJy4vZXJyb3JzJztcXG5pbXBvcnQgeyBUZXh0RGVjb3JhdG9yIH0gZnJvbSAnLi9kZWNvcmF0b3InO1xcbmltcG9ydCB7IElzc3VlIH0gZnJvbSAnLi9yZXBvcnQnO1xcbmV4cG9ydCBkZWNsYXJlIHR5cGUgTG9jYWxlRm4gPSAoZGVjb3JhdG9yOiBUZXh0RGVjb3JhdG9yLCBkYXRhPzogYW55KSA9PiBzdHJpbmc7XFxuZXhwb3J0IGRlY2xhcmUgdHlwZSBJc3N1ZUxvY2FsZUZuID0gKGRlY29yYXRvcjogVGV4dERlY29yYXRvciwgaXNzdWU6IElzc3VlKSA9PiBzdHJpbmc7XFxuZGVjbGFyZSB0eXBlIElzc3VlTG9jYWxlID0ge1xcbiAgICBba2V5IGluIGtleW9mIHR5cGVvZiBhbGxJc3N1ZXNdOiAoaXNzdWU6IEluc3RhbmNlVHlwZTwodHlwZW9mIGFsbElzc3Vlcylba2V5XT4sIGRlY29yYXRvcjogVGV4dERlY29yYXRvcikgPT4gc3RyaW5nO1xcbn07XFxuZXhwb3J0IGRlY2xhcmUgY29uc3QgZW5fVVM6IHtcXG4gICAgY29kZTogc3RyaW5nO1xcbiAgICB0ZXh0czoge1xcbiAgICAgICAgdGl0bGVfZGVzY3JpcHRpb246IChkOiB7XFxuICAgICAgICAgICAgYWxpYXM6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICB0eXBlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgb3B0aW9uYWw6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICByZXF1aXJlZDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIG11bHRpcGxlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgb3B0aW9uRGVzY3JpcHRpb246IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICB0aXRsZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIHVzYWdlT3B0aW9uOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgY29tbWFuZDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIGVycm9yTGluZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIHdhcm5pbmdMaW5lOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgaW52YWxpZFZhbHVlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgY29tbWFuZFBhdGg6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICBjb21tYW5kRW5kaW5nOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgY29tbWFuZERlc2NyaXB0aW9uOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICB9KSA9PiBzdHJpbmc7XFxuICAgICAgICB0aXRsZV91c2FnZTogKGQ6IHtcXG4gICAgICAgICAgICBhbGlhczogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIHR5cGU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICBvcHRpb25hbDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIHJlcXVpcmVkOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgbXVsdGlwbGU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICBvcHRpb25EZXNjcmlwdGlvbjogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIHRpdGxlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgdXNhZ2VPcHRpb246IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICBjb21tYW5kOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgZXJyb3JMaW5lOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgd2FybmluZ0xpbmU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICBpbnZhbGlkVmFsdWU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICBjb21tYW5kUGF0aDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIGNvbW1hbmRFbmRpbmc6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICBjb21tYW5kRGVzY3JpcHRpb246IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgIH0pID0+IHN0cmluZztcXG4gICAgICAgIHRpdGxlX29wdGlvbnM6IChkOiB7XFxuICAgICAgICAgICAgYWxpYXM6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICB0eXBlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgb3B0aW9uYWw6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICByZXF1aXJlZDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIG11bHRpcGxlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgb3B0aW9uRGVzY3JpcHRpb246IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICB0aXRsZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIHVzYWdlT3B0aW9uOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgY29tbWFuZDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIGVycm9yTGluZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIHdhcm5pbmdMaW5lOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgaW52YWxpZFZhbHVlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgY29tbWFuZFBhdGg6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICBjb21tYW5kRW5kaW5nOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgY29tbWFuZERlc2NyaXB0aW9uOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICB9KSA9PiBzdHJpbmc7XFxuICAgICAgICB0aXRsZV9jb21tYW5kczogKGQ6IHtcXG4gICAgICAgICAgICBhbGlhczogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIHR5cGU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICBvcHRpb25hbDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIHJlcXVpcmVkOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgbXVsdGlwbGU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICBvcHRpb25EZXNjcmlwdGlvbjogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIHRpdGxlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgdXNhZ2VPcHRpb246IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICBjb21tYW5kOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgZXJyb3JMaW5lOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgd2FybmluZ0xpbmU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICBpbnZhbGlkVmFsdWU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICBjb21tYW5kUGF0aDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIGNvbW1hbmRFbmRpbmc6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICBjb21tYW5kRGVzY3JpcHRpb246IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgIH0pID0+IHN0cmluZztcXG4gICAgICAgIGhpbnRfY29tbWFuZEhpbnQ6IChkOiB7XFxuICAgICAgICAgICAgYWxpYXM6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICB0eXBlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgb3B0aW9uYWw6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICByZXF1aXJlZDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIG11bHRpcGxlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgb3B0aW9uRGVzY3JpcHRpb246IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICB0aXRsZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIHVzYWdlT3B0aW9uOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgY29tbWFuZDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIGVycm9yTGluZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIHdhcm5pbmdMaW5lOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgaW52YWxpZFZhbHVlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgY29tbWFuZFBhdGg6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICBjb21tYW5kRW5kaW5nOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgY29tbWFuZERlc2NyaXB0aW9uOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICB9LCB7IGNvbW1hbmQgfT86IGFueSkgPT4gc3RyaW5nO1xcbiAgICAgICAgb3B0X3JlcXVpcmVkOiAoZDoge1xcbiAgICAgICAgICAgIGFsaWFzOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgdHlwZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIG9wdGlvbmFsOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgcmVxdWlyZWQ6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICBtdWx0aXBsZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIG9wdGlvbkRlc2NyaXB0aW9uOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgdGl0bGU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICB1c2FnZU9wdGlvbjogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIGNvbW1hbmQ6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICBlcnJvckxpbmU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICB3YXJuaW5nTGluZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIGludmFsaWRWYWx1ZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIGNvbW1hbmRQYXRoOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgY29tbWFuZEVuZGluZzogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIGNvbW1hbmREZXNjcmlwdGlvbjogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgfSkgPT4gc3RyaW5nO1xcbiAgICAgICAgb3B0X29wdGlvbmFsOiAoZDoge1xcbiAgICAgICAgICAgIGFsaWFzOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgdHlwZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIG9wdGlvbmFsOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgcmVxdWlyZWQ6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICBtdWx0aXBsZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIG9wdGlvbkRlc2NyaXB0aW9uOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgdGl0bGU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICB1c2FnZU9wdGlvbjogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIGNvbW1hbmQ6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICBlcnJvckxpbmU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICB3YXJuaW5nTGluZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIGludmFsaWRWYWx1ZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIGNvbW1hbmRQYXRoOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgY29tbWFuZEVuZGluZzogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIGNvbW1hbmREZXNjcmlwdGlvbjogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgfSkgPT4gc3RyaW5nO1xcbiAgICAgICAgb3B0X211bHRpbGU6IChkOiB7XFxuICAgICAgICAgICAgYWxpYXM6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICB0eXBlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgb3B0aW9uYWw6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICByZXF1aXJlZDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIG11bHRpcGxlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgb3B0aW9uRGVzY3JpcHRpb246IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICB0aXRsZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIHVzYWdlT3B0aW9uOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgY29tbWFuZDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIGVycm9yTGluZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIHdhcm5pbmdMaW5lOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgaW52YWxpZFZhbHVlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgY29tbWFuZFBhdGg6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICBjb21tYW5kRW5kaW5nOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgY29tbWFuZERlc2NyaXB0aW9uOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICB9KSA9PiBzdHJpbmc7XFxuICAgIH07XFxuICAgIGlzc3VlczogSXNzdWVMb2NhbGU7XFxufTtcXG5leHBvcnQgZGVjbGFyZSB0eXBlIExvY2FsZSA9IHR5cGVvZiBlbl9VUztcXG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBkZWNsYXJlTG9jYWxlKGxvY2FsZTogTG9jYWxlKTogTG9jYWxlO1xcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGxvY2FsZXM6IHtcXG4gICAgZW5fVVM6IHtcXG4gICAgICAgIGNvZGU6IHN0cmluZztcXG4gICAgICAgIHRleHRzOiB7XFxuICAgICAgICAgICAgdGl0bGVfZGVzY3JpcHRpb246IChkOiB7XFxuICAgICAgICAgICAgICAgIGFsaWFzOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIHR5cGU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgb3B0aW9uYWw6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgbXVsdGlwbGU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgb3B0aW9uRGVzY3JpcHRpb246IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgdGl0bGU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgdXNhZ2VPcHRpb246IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgY29tbWFuZDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBlcnJvckxpbmU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgd2FybmluZ0xpbmU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgaW52YWxpZFZhbHVlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIGNvbW1hbmRQYXRoOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIGNvbW1hbmRFbmRpbmc6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgY29tbWFuZERlc2NyaXB0aW9uOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgfSkgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIHRpdGxlX3VzYWdlOiAoZDoge1xcbiAgICAgICAgICAgICAgICBhbGlhczogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICB0eXBlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIG9wdGlvbmFsOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIG11bHRpcGxlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIG9wdGlvbkRlc2NyaXB0aW9uOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIHVzYWdlT3B0aW9uOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIGNvbW1hbmQ6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgZXJyb3JMaW5lOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIHdhcm5pbmdMaW5lOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIGludmFsaWRWYWx1ZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBjb21tYW5kUGF0aDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBjb21tYW5kRW5kaW5nOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIGNvbW1hbmREZXNjcmlwdGlvbjogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIH0pID0+IHN0cmluZztcXG4gICAgICAgICAgICB0aXRsZV9vcHRpb25zOiAoZDoge1xcbiAgICAgICAgICAgICAgICBhbGlhczogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICB0eXBlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIG9wdGlvbmFsOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIG11bHRpcGxlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIG9wdGlvbkRlc2NyaXB0aW9uOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIHVzYWdlT3B0aW9uOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIGNvbW1hbmQ6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgZXJyb3JMaW5lOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIHdhcm5pbmdMaW5lOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIGludmFsaWRWYWx1ZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBjb21tYW5kUGF0aDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBjb21tYW5kRW5kaW5nOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIGNvbW1hbmREZXNjcmlwdGlvbjogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIH0pID0+IHN0cmluZztcXG4gICAgICAgICAgICB0aXRsZV9jb21tYW5kczogKGQ6IHtcXG4gICAgICAgICAgICAgICAgYWxpYXM6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgdHlwZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBvcHRpb25hbDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBtdWx0aXBsZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBvcHRpb25EZXNjcmlwdGlvbjogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICB0aXRsZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICB1c2FnZU9wdGlvbjogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBjb21tYW5kOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIGVycm9yTGluZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICB3YXJuaW5nTGluZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBpbnZhbGlkVmFsdWU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgY29tbWFuZFBhdGg6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgY29tbWFuZEVuZGluZzogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBjb21tYW5kRGVzY3JpcHRpb246IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICB9KSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgaGludF9jb21tYW5kSGludDogKGQ6IHtcXG4gICAgICAgICAgICAgICAgYWxpYXM6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgdHlwZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBvcHRpb25hbDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBtdWx0aXBsZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBvcHRpb25EZXNjcmlwdGlvbjogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICB0aXRsZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICB1c2FnZU9wdGlvbjogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBjb21tYW5kOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIGVycm9yTGluZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICB3YXJuaW5nTGluZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBpbnZhbGlkVmFsdWU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgY29tbWFuZFBhdGg6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgY29tbWFuZEVuZGluZzogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBjb21tYW5kRGVzY3JpcHRpb246IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICB9LCB7IGNvbW1hbmQgfT86IGFueSkgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIG9wdF9yZXF1aXJlZDogKGQ6IHtcXG4gICAgICAgICAgICAgICAgYWxpYXM6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgdHlwZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBvcHRpb25hbDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBtdWx0aXBsZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBvcHRpb25EZXNjcmlwdGlvbjogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICB0aXRsZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICB1c2FnZU9wdGlvbjogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBjb21tYW5kOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIGVycm9yTGluZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICB3YXJuaW5nTGluZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBpbnZhbGlkVmFsdWU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgY29tbWFuZFBhdGg6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgY29tbWFuZEVuZGluZzogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBjb21tYW5kRGVzY3JpcHRpb246IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICB9KSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgb3B0X29wdGlvbmFsOiAoZDoge1xcbiAgICAgICAgICAgICAgICBhbGlhczogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICB0eXBlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIG9wdGlvbmFsOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIG11bHRpcGxlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIG9wdGlvbkRlc2NyaXB0aW9uOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIHVzYWdlT3B0aW9uOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIGNvbW1hbmQ6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgZXJyb3JMaW5lOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIHdhcm5pbmdMaW5lOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIGludmFsaWRWYWx1ZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBjb21tYW5kUGF0aDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBjb21tYW5kRW5kaW5nOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIGNvbW1hbmREZXNjcmlwdGlvbjogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgIH0pID0+IHN0cmluZztcXG4gICAgICAgICAgICBvcHRfbXVsdGlsZTogKGQ6IHtcXG4gICAgICAgICAgICAgICAgYWxpYXM6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgdHlwZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBvcHRpb25hbDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBtdWx0aXBsZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBvcHRpb25EZXNjcmlwdGlvbjogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICB0aXRsZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICB1c2FnZU9wdGlvbjogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBjb21tYW5kOiAoczogc3RyaW5nKSA9PiBzdHJpbmc7XFxuICAgICAgICAgICAgICAgIGVycm9yTGluZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICB3YXJuaW5nTGluZTogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBpbnZhbGlkVmFsdWU6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgY29tbWFuZFBhdGg6IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICAgICAgY29tbWFuZEVuZGluZzogKHM6IHN0cmluZykgPT4gc3RyaW5nO1xcbiAgICAgICAgICAgICAgICBjb21tYW5kRGVzY3JpcHRpb246IChzOiBzdHJpbmcpID0+IHN0cmluZztcXG4gICAgICAgICAgICB9KSA9PiBzdHJpbmc7XFxuICAgICAgICB9O1xcbiAgICAgICAgaXNzdWVzOiBJc3N1ZUxvY2FsZTtcXG4gICAgfTtcXG59O1xcbmV4cG9ydCB7fTtcXG5cIn0se1wiZmlsZW5hbWVcIjpcIm5vZGVfbW9kdWxlcy9AdHlwZXMvdHlwZWQtY2xpL3NyYy9vcHRpb24uZC50c1wiLFwiY29udGVudFwiOlwiaW1wb3J0IHsgVmFsaWRhdG9yLCBQcmVwcm9jZXNzb3IsIEJvb2xlYW5WYWxpZGF0b3IgfSBmcm9tICcuL3BpcGVsaW5lJztcXG5pbXBvcnQgeyBDb21wbGV0aW9uIH0gZnJvbSAnLi9jb21wbGV0ZXInO1xcbmRlY2xhcmUgdHlwZSBUeXBlTWFwID0ge1xcbiAgICBudW1iZXI6IG51bWJlcjtcXG4gICAgaW50OiBudW1iZXI7XFxuICAgIHN0cmluZzogc3RyaW5nO1xcbiAgICBib29sZWFuOiBib29sZWFuO1xcbiAgICBhbnk6IG51bWJlciB8IHN0cmluZyB8IGJvb2xlYW47XFxufTtcXG5leHBvcnQgZGVjbGFyZSB0eXBlIFR5cGVzID0ga2V5b2YgVHlwZU1hcDtcXG5leHBvcnQgZGVjbGFyZSB0eXBlIFJlc29sdmVUeXBlPFQgZXh0ZW5kcyBUeXBlcz4gPSBUeXBlTWFwW1RdO1xcbmRlY2xhcmUgY29uc3Qgb3B0aW9uRGF0YUtleTogdW5pcXVlIHN5bWJvbDtcXG5kZWNsYXJlIHR5cGUgT3B0aW9uQ29tcGxldGVyID0gKHBhcnRpYWw6IHN0cmluZykgPT4gQ29tcGxldGlvbltdO1xcbmV4cG9ydCBkZWNsYXJlIHR5cGUgT3B0RGF0YTxUPiA9IHtcXG4gICAgbmFtZTogc3RyaW5nO1xcbiAgICB0eXBlOiBUeXBlcztcXG4gICAgbGFiZWxOYW1lOiBzdHJpbmc7XFxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XFxuICAgIGlzUmVxdWlyZWQ6IGJvb2xlYW47XFxuICAgIGFsaWFzZXM6IHN0cmluZ1tdO1xcbiAgICBpc0FycmF5OiBib29sZWFuO1xcbiAgICBkZWZhdWx0VmFsdWU/OiBUO1xcbiAgICBpc0FyZz86IGJvb2xlYW47XFxuICAgIHZhbGlkYXRvcnM6IFZhbGlkYXRvcjxhbnk+W107XFxuICAgIHByZVByZXByb2Nlc3NvcnM6IFByZXByb2Nlc3NvcltdO1xcbiAgICBwb3N0UHJlcHJvY2Vzc29yczogUHJlcHJvY2Vzc29yW107XFxuICAgIGNvbXBsZXRlcj86IE9wdGlvbkNvbXBsZXRlcjtcXG59O1xcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIGdldE9wdERhdGEob3B0OiBPcHRpb248YW55LCBhbnksIGFueSwgYW55Pik6IE9wdERhdGE8dW5rbm93bj47XFxuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gc2V0T3B0RGF0YShvcHQ6IE9wdGlvbjxhbnksIGFueSwgYW55LCBhbnk+LCBkYXRhOiBPcHREYXRhPGFueT4pOiB2b2lkO1xcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIGNsb25lT3B0aW9uPE8gZXh0ZW5kcyBPcHRpb248YW55LCBhbnksIGFueSwgYW55Pj4ob3B0OiBPKTogTztcXG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiB1cGRhdGVPcHREYXRhPE8gZXh0ZW5kcyBPcHRpb248YW55LCBhbnksIGFueSwgYW55Pj4ob3B0OiBPLCBkYXRhOiBQYXJ0aWFsPE9wdERhdGE8YW55Pj4pOiBPO1xcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIGNoYW5nZU9wdERhdGE8TyBleHRlbmRzIE9wdGlvbjxhbnksIGFueSwgYW55LCBhbnk+PihvcHQ6IE8sIGRhdGE6IFBhcnRpYWw8T3B0RGF0YTxhbnk+Pik6IE87XFxuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gb3B0aW9uPFQgZXh0ZW5kcyBUeXBlcz4odHlwZTogVCk6IE9wdGlvbjxULCBmYWxzZSwgZmFsc2UsIFJlc29sdmVUeXBlPFQ+PjtcXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBPcHRpb248VCBleHRlbmRzIFR5cGVzLCBSIGV4dGVuZHMgYm9vbGVhbiwgQSBleHRlbmRzIGJvb2xlYW4sIFJUPiB7XFxuICAgIG5hbWU6IHN0cmluZztcXG4gICAgW29wdGlvbkRhdGFLZXldOiBPcHREYXRhPFJUPjtcXG4gICAgcHJpdmF0ZSBfaXNSZXF1aXJlZDtcXG4gICAgcHJpdmF0ZSBfaXNBcnJheTtcXG4gICAgY29uc3RydWN0b3IodHlwZTogVCk7XFxuICAgIGxhYmVsKG5hbWU6IHN0cmluZyk6IE9wdGlvbjxULCBSLCBBLCBSVD47XFxuICAgIGFsaWFzKC4uLmFsaWFzZXM6IHN0cmluZ1tdKTogT3B0aW9uPFQsIFIsIEEsIFJUPjtcXG4gICAgY29tcGxldGVyKGNvbXBsZXRlcjogT3B0aW9uQ29tcGxldGVyKTogT3B0aW9uPFQsIFIsIEEsIFJUPjtcXG4gICAgZGVzY3JpcHRpb24odGV4dDogc3RyaW5nKTogT3B0aW9uPFQsIFIsIEEsIFJUPjtcXG4gICAgcmVxdWlyZWQoKTogT3B0aW9uPFQsIHRydWUsIEEsIFJUPjtcXG4gICAgYXJyYXkoKTogT3B0aW9uPFQsIFIsIHRydWUsIFJUPjtcXG4gICAgZGVmYXVsdCh2YWx1ZTogUlQpOiBPcHRpb248VCwgdHJ1ZSwgQSwgUlQ+O1xcbiAgICB2YWxpZGF0ZShlcnJvck1zZzogc3RyaW5nLCB2YWxpZGF0b3I6IEJvb2xlYW5WYWxpZGF0b3I8UlQ+KTogT3B0aW9uPFQsIFIsIEEsIFJUPjtcXG4gICAgdmFsaWRhdGUodmFsaWRhdG9yOiBWYWxpZGF0b3I8UlQ+KTogT3B0aW9uPFQsIFIsIEEsIFJUPjtcXG4gICAgcHJvY2VzcyhwaGFzZTogJ3ByZScsIGZuOiBQcmVwcm9jZXNzb3I8YW55LCBSZXNvbHZlVHlwZTxUPj4pOiBPcHRpb248VCwgUiwgQSwgUlQ+O1xcbiAgICBwcm9jZXNzPEZSPihwaGFzZTogJ3Bvc3QnLCBmbjogUHJlcHJvY2Vzc29yPFJlc29sdmVUeXBlPFQ+LCBGUj4pOiBPcHRpb248VCwgUiwgQSwgRlI+O1xcbn1cXG5leHBvcnQgZGVjbGFyZSB0eXBlIE9wdGlvblNldCA9IFJlY29yZDxzdHJpbmcsIE9wdGlvbjxhbnksIGJvb2xlYW4sIGJvb2xlYW4sIGFueT4+O1xcbmV4cG9ydCB7fTtcXG5cIn0se1wiZmlsZW5hbWVcIjpcIm5vZGVfbW9kdWxlcy9AdHlwZXMvdHlwZWQtY2xpL3NyYy9wYXJzZXIuZC50c1wiLFwiY29udGVudFwiOlwiaW1wb3J0IHsgQ2xpRGVjbGFyYXRpb24sIFJlc29sdmVDbGlEZWNsYXJhdGlvbiB9IGZyb20gJy4vdHlwZS1sb2dpYyc7XFxuaW1wb3J0IHsgUmVwb3J0IH0gZnJvbSAnLi9yZXBvcnQnO1xcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIHByZXBhcmVDbGlEZWNsYXJhdGlvbihkZWNsOiBDbGlEZWNsYXJhdGlvbik6IHtcXG4gICAgZGVjbDogUmVxdWlyZWQ8Q2xpRGVjbGFyYXRpb24+O1xcbiAgICB1c2VkS2V5czogU2V0PHN0cmluZz47XFxufTtcXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQYXJzZXI8RCBleHRlbmRzIENsaURlY2xhcmF0aW9uPiB7XFxuICAgIHByaXZhdGUgb3B0Q2ZnO1xcbiAgICBwcml2YXRlIGRlY2w7XFxuICAgIHByaXZhdGUgdXNlZEtleXM7XFxuICAgIGNvbnN0cnVjdG9yKGRlY2w6IEQpO1xcbiAgICBwcml2YXRlIHBhcnNlT3B0aW9ucztcXG4gICAgcHJpdmF0ZSBub3JtYWxpemVBcmdzO1xcbiAgICBwcml2YXRlIHBhcnNlQXJndW1lbnRzO1xcbiAgICBwYXJzZShhcmd2OiBzdHJpbmdbXSB8IHN0cmluZyk6IHtcXG4gICAgICAgIHJlcG9ydDogUmVwb3J0O1xcbiAgICAgICAgZGF0YTogUmVzb2x2ZUNsaURlY2xhcmF0aW9uPEQ+IHwgbnVsbDtcXG4gICAgfTtcXG59XFxuXCJ9LHtcImZpbGVuYW1lXCI6XCJub2RlX21vZHVsZXMvQHR5cGVzL3R5cGVkLWNsaS9zcmMvcGlwZWxpbmUuZC50c1wiLFwiY29udGVudFwiOlwiaW1wb3J0IHsgUmVwb3J0IH0gZnJvbSAnLi9yZXBvcnQnO1xcbmV4cG9ydCBkZWNsYXJlIHR5cGUgVmFsaWRhdG9yPFQ+ID0gKHZhbHVlOiBUKSA9PiB2b2lkO1xcbmV4cG9ydCBkZWNsYXJlIHR5cGUgQm9vbGVhblZhbGlkYXRvcjxUPiA9ICh2YWx1ZTogVCkgPT4gYm9vbGVhbjtcXG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBtYWtlVmFsaWRhdG9yPFQ+KGVycm9yTXNnOiBzdHJpbmcsIGZuOiAodmFsdWU6IFQpID0+IGJvb2xlYW4pOiBWYWxpZGF0b3I8VD47XFxuZXhwb3J0IGRlY2xhcmUgdHlwZSBQcmVwcm9jZXNzb3I8SSA9IGFueSwgTyA9IGFueT4gPSAodmFsdWU6IEkpID0+IE87XFxuaW50ZXJmYWNlIFZhbGlkYXRpb25DZmcge1xcbiAgICBpc1JlcXVpcmVkOiBib29sZWFuO1xcbiAgICB2YWxpZGF0b3JzOiBWYWxpZGF0b3I8YW55PltdO1xcbiAgICBuYW1lOiBzdHJpbmc7XFxuICAgIGlzQXJnPzogYm9vbGVhbjtcXG59XFxuaW50ZXJmYWNlIE9wdENmZyBleHRlbmRzIFZhbGlkYXRpb25DZmcge1xcbiAgICBwcmVQcmVwcm9jZXNzb3JzOiBQcmVwcm9jZXNzb3JbXTtcXG4gICAgcG9zdFByZXByb2Nlc3NvcnM6IFByZXByb2Nlc3NvcltdO1xcbiAgICBpc0FycmF5OiBib29sZWFuO1xcbiAgICBkZWZhdWx0VmFsdWU/OiBhbnk7XFxuICAgIGlzQXJnPzogYm9vbGVhbjtcXG59XFxuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gaGFuZGxlT3B0aW9uKG9wdENmZzogT3B0Q2ZnLCB2YWx1ZTogYW55LCBpdGVyYXRpbmc/OiBib29sZWFuKToge1xcbiAgICB2YWx1ZTogYW55O1xcbiAgICByZXBvcnQ6IFJlcG9ydDtcXG59O1xcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIGhhbmRsZUFsbE9wdGlvbnMob3B0U2NoZW1hOiBSZWNvcmQ8c3RyaW5nLCBPcHRDZmc+LCByYXdEYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LCB1c2VkS2V5czogU2V0PHN0cmluZz4pOiB7XFxuICAgIGRhdGE6IGFueTtcXG4gICAgcmVwb3J0OiBSZXBvcnQ7XFxufTtcXG5leHBvcnQge307XFxuXCJ9LHtcImZpbGVuYW1lXCI6XCJub2RlX21vZHVsZXMvQHR5cGVzL3R5cGVkLWNsaS9zcmMvcHJpbnRlci1vbGQuZC50c1wiLFwiY29udGVudFwiOlwiXCJ9LHtcImZpbGVuYW1lXCI6XCJub2RlX21vZHVsZXMvQHR5cGVzL3R5cGVkLWNsaS9zcmMvcHJpbnRlci5kLnRzXCIsXCJjb250ZW50XCI6XCJpbXBvcnQgeyBMb2NhbGUgfSBmcm9tICcuL2kxOG4nO1xcbmltcG9ydCB7IFRleHREZWNvcmF0b3IgfSBmcm9tICcuL2RlY29yYXRvcic7XFxuaW1wb3J0IHsgUmVwb3J0IH0gZnJvbSAnLi9yZXBvcnQnO1xcbmltcG9ydCB7IENsaURlY2xhcmF0aW9uIH0gZnJvbSAnLi90eXBlLWxvZ2ljJztcXG5pbXBvcnQgeyBDb21tYW5kU2V0LCBDb21tYW5kSGVscGVyUGFyYW1zIH0gZnJvbSAnLi9jb21tYW5kJztcXG5kZWNsYXJlIHR5cGUgUHJpbnRlclBhcmFtcyA9IHtcXG4gICAgbG9jYWxlOiBMb2NhbGU7XFxuICAgIGRlY29yYXRvcjogVGV4dERlY29yYXRvcjtcXG4gICAgbGluZUVuZGluZz86IHN0cmluZztcXG59O1xcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFByaW50ZXIge1xcbiAgICBwcml2YXRlIGxvY2FsZTtcXG4gICAgcHJpdmF0ZSBkZWNvcmF0b3I7XFxuICAgIHByaXZhdGUgbGluZUVuZGluZztcXG4gICAgY29uc3RydWN0b3IoeyBsb2NhbGUsIGRlY29yYXRvciwgbGluZUVuZGluZyB9OiBQcmludGVyUGFyYW1zKTtcXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZU9wdGlvbkRlc2NyaXB0aW9uO1xcbiAgICBwcml2YXRlIGdlbmVyYXRlVXNhZ2U7XFxuICAgIHByaXZhdGUgZ2VuZW5yYXRlQ29tbWFuZExpc3Q7XFxuICAgIGdlbmVyYXRlSGVscEZvckNvbWFuZHMoY2ZnOiBDb21tYW5kSGVscGVyUGFyYW1zLCBjczogQ29tbWFuZFNldCk6IHN0cmluZztcXG4gICAgZ2VuZXJhdGVIZWxwKGRlY2w6IENsaURlY2xhcmF0aW9uKTogc3RyaW5nO1xcbiAgICBwcml2YXRlIHByaW50UmVwb3J0TGF5ZXI7XFxuICAgIHN0cmluZ2lmeVJlcG9ydChyZXBvcnQ6IFJlcG9ydCk6IHN0cmluZztcXG59XFxuZXhwb3J0IHt9O1xcblwifSx7XCJmaWxlbmFtZVwiOlwibm9kZV9tb2R1bGVzL0B0eXBlcy90eXBlZC1jbGkvc3JjL3JlcG9ydC5kLnRzXCIsXCJjb250ZW50XCI6XCJpbXBvcnQgeyBCYXNlV2FybmluZyB9IGZyb20gJy4vZXJyb3JzJztcXG5leHBvcnQgZGVjbGFyZSB0eXBlIElzc3VlID0gKEVycm9yIHwgQmFzZVdhcm5pbmcgfCBudWxsKTtcXG5leHBvcnQgZGVjbGFyZSB0eXBlIFJlcG9ydCA9IHtcXG4gICAgaXNzdWU6IElzc3VlO1xcbiAgICBjaGlsZHJlbjogUmVwb3J0W107XFxufTtcXG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBjb21iaW5lSXNzdWVzKGNvbmNsdXNpb246IElzc3VlLCBpc3N1ZXM6IElzc3VlW10pOiBSZXBvcnQ7XFxuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gaXNFcnJvcihpc3N1ZT86IElzc3VlKTogYm9vbGVhbjtcXG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBtZXJnZVJlcG9ydHMoY29uY2x1c2lvbjogSXNzdWUsIC4uLnJlcG9ydHM6IFJlcG9ydFtdKTogUmVwb3J0O1xcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIGVycm9yVG9SZXBvcnQoZXJyOiBFcnJvcik6IFJlcG9ydDtcXG5cIn0se1wiZmlsZW5hbWVcIjpcIm5vZGVfbW9kdWxlcy9AdHlwZXMvdHlwZWQtY2xpL3NyYy90eXBlLWxvZ2ljLmQudHNcIixcImNvbnRlbnRcIjpcImltcG9ydCB7IE9wdGlvbiwgT3B0aW9uU2V0LCBUeXBlcyB9IGZyb20gJy4vb3B0aW9uJztcXG5leHBvcnQgZGVjbGFyZSB0eXBlIEdldFByb3BlcnRpeU5hbWVzPFQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiwgUD4gPSB7XFxuICAgIFtLIGluIGtleW9mIFRdOiBUW0tdIGV4dGVuZHMgUCA/IEsgOiBuZXZlcjtcXG59W2tleW9mIFRdO1xcbmV4cG9ydCBkZWNsYXJlIHR5cGUgR2V0UHJvcGVydGllczxUIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4sIFA+ID0gUGljazxULCBHZXRQcm9wZXJ0aXlOYW1lczxULCBQPj47XFxuZGVjbGFyZSB0eXBlIFBpY2tSZXF1aXJlZE9wdHM8TyBleHRlbmRzIE9wdGlvblNldD4gPSBHZXRQcm9wZXJ0aWVzPE8sIE9wdGlvbjxhbnksIHRydWUsIGJvb2xlYW4sIGFueT4gfCBPcHRpb248YW55LCBib29sZWFuLCB0cnVlLCBhbnk+PjtcXG5kZWNsYXJlIHR5cGUgUGlja05vblJlcXVpcmVkT3B0czxPIGV4dGVuZHMgT3B0aW9uU2V0PiA9IEdldFByb3BlcnRpZXM8TywgT3B0aW9uPGFueSwgZmFsc2UsIGJvb2xlYW4sIGFueT4+O1xcbmRlY2xhcmUgdHlwZSBSZXNvbHZlT3B0aW9uVHlwZTxPIGV4dGVuZHMgT3B0aW9uPFR5cGVzLCBib29sZWFuLCBib29sZWFuLCBhbnk+PiA9IE8gZXh0ZW5kcyBPcHRpb248YW55LCBib29sZWFuLCBib29sZWFuLCBpbmZlciBSPiA/IFIgOiBuZXZlcjtcXG5kZWNsYXJlIHR5cGUgUmVzb2x2ZU9wdGlvbjxPIGV4dGVuZHMgT3B0aW9uPFR5cGVzLCBib29sZWFuLCBib29sZWFuLCBhbnk+PiA9IE8gZXh0ZW5kcyBPcHRpb248VHlwZXMsIGJvb2xlYW4sIHRydWUsIGFueT4gPyBBcnJheTxSZXNvbHZlT3B0aW9uVHlwZTxPPj4gOiBSZXNvbHZlT3B0aW9uVHlwZTxPPjtcXG5kZWNsYXJlIHR5cGUgUmVzb2x2ZU9wdGlvblNldDxPIGV4dGVuZHMgT3B0aW9uU2V0PiA9IHtcXG4gICAgW2tleSBpbiBrZXlvZiBQaWNrUmVxdWlyZWRPcHRzPE8+XTogUmVzb2x2ZU9wdGlvbjxQaWNrUmVxdWlyZWRPcHRzPE8+W2tleV0+O1xcbn0gJiB7XFxuICAgIFtrZXkgaW4ga2V5b2YgUGlja05vblJlcXVpcmVkT3B0czxPPl0/OiBSZXNvbHZlT3B0aW9uPFBpY2tOb25SZXF1aXJlZE9wdHM8Tz5ba2V5XT47XFxufTtcXG5leHBvcnQgZGVjbGFyZSB0eXBlIENsaURlY2xhcmF0aW9uID0ge1xcbiAgICBuYW1lPzogc3RyaW5nO1xcbiAgICBvcHRpb25zPzogT3B0aW9uU2V0O1xcbiAgICBkZXNjcmlwdGlvbj86IHN0cmluZztcXG4gICAgXz86IE9wdGlvbjxUeXBlcywgYm9vbGVhbiwgYm9vbGVhbiwgYW55PjtcXG59O1xcbmV4cG9ydCBkZWNsYXJlIHR5cGUgUmVzb2x2ZUNsaURlY2xhcmF0aW9uPEQgZXh0ZW5kcyBDbGlEZWNsYXJhdGlvbj4gPSB7XFxuICAgIG9wdGlvbnM6IERbJ29wdGlvbnMnXSBleHRlbmRzIE9wdGlvblNldCA/IFJlc29sdmVPcHRpb25TZXQ8RFsnb3B0aW9ucyddPiA6IHt9O1xcbiAgICBfOiBEWydfJ10gZXh0ZW5kcyBPcHRpb248YW55LCBpbmZlciBSLCBhbnksIGFueT4gPyBSIGV4dGVuZHMgdHJ1ZSA/IFJlc29sdmVPcHRpb248RFsnXyddPiA6IFJlc29sdmVPcHRpb248RFsnXyddPiB8IHVuZGVmaW5lZCA6IHVuZGVmaW5lZDtcXG59O1xcbmV4cG9ydCB7fTtcXG5cIn0se1wiZmlsZW5hbWVcIjpcIm5vZGVfbW9kdWxlcy9AdHlwZXMvdHlwZWQtY2xpL3NyYy91dGlscy5kLnRzXCIsXCJjb250ZW50XCI6XCJleHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBjcmVhdGVLZWJhYkFsaWFzKHN0cjogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkO1xcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIG9iak1hcDxULCBSPihvYmo6IFJlY29yZDxzdHJpbmcsIFQ+LCBmbjogKGl0ZW06IFQsIGtleTogc3RyaW5nKSA9PiBSKTogUmVjb3JkPHN0cmluZywgUj47XFxuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gYWxpZ25UZXh0TWF0cml4KHRleHRNYXRyaXg6IHN0cmluZ1tdW10sIGFsaWdubWVudD86ICgnbGVmdCcgfCAncmlnaHQnKVtdKTogc3RyaW5nW11bXTtcXG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBhcnJheVBhcnRpdGlvbjxUPihhcnJheTogVFtdLCBmbjogKGl0ZW06IFQsIGluZGV4OiBudW1iZXIsIGFycmF5OiBUW10pID0+IGJvb2xlYW4pOiBbVFtdLCBUW11dO1xcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIHRhYlRleHQodGV4dDogc3RyaW5nLCBwcmVmaXg6IHN0cmluZyk6IHN0cmluZztcXG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBmaW5kS2V5Q29sbGlzaW9uKGtleXM6IHN0cmluZ1tdKTogc3RyaW5nIHwgbnVsbDtcXG5cIn0se1wiZmlsZW5hbWVcIjpcIm5vZGVfbW9kdWxlcy9AdHlwZXMvdHlwZWQtY2xpL3Rlc3RzL3VuaXQvY2xpLWhlbHBlci5kLnRzXCIsXCJjb250ZW50XCI6XCJleHBvcnQge307XFxuXCJ9LHtcImZpbGVuYW1lXCI6XCJub2RlX21vZHVsZXMvQHR5cGVzL3R5cGVkLWNsaS90ZXN0cy91bml0L2luZGV4LmQudHNcIixcImNvbnRlbnRcIjpcImltcG9ydCAnLi91dGlscyc7XFxuaW1wb3J0ICcuL29wdGlvbic7XFxuaW1wb3J0ICcuL3BpcGVsaW5lJztcXG5pbXBvcnQgJy4vcGFyc2VyJztcXG5pbXBvcnQgJy4vcHJpbnRlcic7XFxuaW1wb3J0ICcuL2NsaS1oZWxwZXInO1xcblwifSx7XCJmaWxlbmFtZVwiOlwibm9kZV9tb2R1bGVzL0B0eXBlcy90eXBlZC1jbGkvdGVzdHMvdW5pdC9vcHRpb24uZC50c1wiLFwiY29udGVudFwiOlwiZXhwb3J0IHt9O1xcblwifSx7XCJmaWxlbmFtZVwiOlwibm9kZV9tb2R1bGVzL0B0eXBlcy90eXBlZC1jbGkvdGVzdHMvdW5pdC9wYXJzZXIuZC50c1wiLFwiY29udGVudFwiOlwiZXhwb3J0IHt9O1xcblwifSx7XCJmaWxlbmFtZVwiOlwibm9kZV9tb2R1bGVzL0B0eXBlcy90eXBlZC1jbGkvdGVzdHMvdW5pdC9waXBlbGluZS5kLnRzXCIsXCJjb250ZW50XCI6XCJpbXBvcnQgeyBSZXBvcnQgfSBmcm9tICcuLi8uLi9zcmMvcmVwb3J0JztcXG5pbXBvcnQgeyBJc3N1ZVR5cGUgfSBmcm9tICcuLi8uLi9zcmMvZXJyb3JzJztcXG5kZWNsYXJlIHR5cGUgUmVwb3J0UmVmZXJlbmNlID0ge1xcbiAgICBpc3N1ZTogW25ldyAoLi4uYXJnczogYW55W10pID0+IElzc3VlVHlwZSwgUmVjb3JkPHN0cmluZywgYW55Pl07XFxuICAgIGNoaWxkcmVuOiBSZXBvcnRSZWZlcmVuY2VbXTtcXG59O1xcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIHZhbGlkYXRlUmVwb3J0KHI6IFJlcG9ydCwgcmVmOiBSZXBvcnRSZWZlcmVuY2UpOiB2b2lkO1xcbmV4cG9ydCB7fTtcXG5cIn0se1wiZmlsZW5hbWVcIjpcIm5vZGVfbW9kdWxlcy9AdHlwZXMvdHlwZWQtY2xpL3Rlc3RzL3VuaXQvcHJpbnRlci5kLnRzXCIsXCJjb250ZW50XCI6XCJleHBvcnQge307XFxuXCJ9LHtcImZpbGVuYW1lXCI6XCJub2RlX21vZHVsZXMvQHR5cGVzL3R5cGVkLWNsaS90ZXN0cy91bml0L3V0aWxzIGNvcHkuZC50c1wiLFwiY29udGVudFwiOlwiZXhwb3J0IHt9O1xcblwifSx7XCJmaWxlbmFtZVwiOlwibm9kZV9tb2R1bGVzL0B0eXBlcy90eXBlZC1jbGkvdGVzdHMvdW5pdC91dGlscy5kLnRzXCIsXCJjb250ZW50XCI6XCJleHBvcnQge307XFxuXCJ9LHtcImZpbGVuYW1lXCI6XCIuL2Jvb3RzdHJhcC5kLnRzXCIsXCJjb250ZW50XCI6XCIvLyBpbXBvcnQge2NsaSBhcyBfY2xpLCBvcHRpb24gYXMgX29wdGlvbiwgY29tbWFuZCBhcyBfY29tbWFuZH0gZnJvbSAndHlwZWQtY2xpJztcXG4vLyBpbXBvcnQgKiBhcyBfcHJlc2V0cyBmcm9tICd0eXBlZC1jbGkvcHJlc2V0cyc7XFxuXFxuLy8gZGVjbGFyZSBnbG9iYWwge1xcbi8vICAgICBjb25zdCBjbGk6IHR5cGVvZiBfY2xpO1xcbi8vICAgICBjb25zdCBvcHRpb246IHR5cGVvZiBfb3B0aW9uO1xcbi8vICAgICBjb25zdCBjb21tYW5kOiB0eXBlb2YgX2NvbW1hbmQ7XFxuLy8gICAgIGNvbnN0IHByZXNldHM6IHR5cGVvZiBfcHJlc2V0cztcXG4vLyB9XFxuXCJ9XTsiXSwibWFwcGluZ3MiOiI7O0FBQUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/lib-generated.ts\n");

/***/ }),

/***/ "./src/monaco-setup.ts":
/*!*****************************!*\
  !*** ./src/monaco-setup.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// const parseTmTheme = require('monaco-themes').parseTmTheme;\nconst themes = __importStar(__webpack_require__(/*! ./monaco-themes/ */ \"./src/monaco-themes/index.ts\"));\nconst lib_generated_1 = __webpack_require__(/*! ./lib-generated */ \"./src/lib-generated.ts\");\nconst samples = __importStar(__webpack_require__(/*! ./samples-generated */ \"./src/samples-generated.ts\"));\nfunction waitForCallback() {\n    const w = window;\n    return new Promise(resolve => {\n        if (w.monaco) {\n            resolve(w.monaco);\n        }\n        w.monacoLoaded = (m) => {\n            resolve(m);\n        };\n    });\n}\nconst note = document.querySelector('#notification');\nlet timerId;\nfunction notify(str) {\n    note.textContent = str;\n    note.style.opacity = '0.9';\n    clearTimeout(timerId);\n    timerId = setTimeout(() => {\n        note.style.opacity = '0';\n    }, 2000);\n}\nfunction ctrlSNotify() {\n    if (sessionStorage.getItem('ctrl-s-note-shown')) {\n        notify(`Old habits die hard, right ;)`);\n    }\n    else {\n        notify(`The code is saved automatically, you don't have to do it by hand`);\n        sessionStorage.setItem('ctrl-s-note-shown', 'true');\n    }\n}\nasync function init() {\n    const monaco = await waitForCallback();\n    const themeSelector = document.querySelector('#code-theme');\n    for (const [name, theme] of Object.entries(themes)) {\n        const o = document.createElement('option');\n        o.innerText = `Theme: ${name}`;\n        o.value = name;\n        themeSelector.appendChild(o);\n        monaco.editor.defineTheme(name, theme);\n    }\n    themeSelector.onchange = () => {\n        monaco.editor.setTheme(themeSelector.value);\n        localStorage.setItem('code-theme', themeSelector.value);\n    };\n    const savedTheme = localStorage.getItem('code-theme') || 'monokai';\n    themeSelector.value = savedTheme;\n    monaco.editor.setTheme(savedTheme);\n    const sampleSelector = document.querySelector('#sample-select');\n    for (const [name, theme] of Object.entries(samples)) {\n        const o = document.createElement('option');\n        o.innerText = `Sample: ${name}`;\n        o.value = name;\n        o.selected = name === 'basic';\n        sampleSelector.appendChild(o);\n    }\n    sampleSelector.onchange = () => {\n        const code = localStorage.getItem(`sample-code[${sampleSelector.value}]`) || samples[sampleSelector.value].code;\n        model.setValue(code);\n        localStorage.setItem('code-sample', sampleSelector.value);\n        updateTitle();\n    };\n    document.querySelector('#discard').onclick = () => {\n        const sampleName = sampleSelector.value;\n        if (confirm(`Are you sure you want to discard changes in \"${sampleName}\" sample?`)) {\n            const code = samples[sampleName].code;\n            model.setValue(code);\n        }\n    };\n    const encodeCode = (str) => {\n        return btoa(encodeURIComponent(str));\n    };\n    const decodeCode = (str) => {\n        return decodeURIComponent(atob(str));\n    };\n    const copyToClipboard = (str) => {\n        try {\n            const cp = document.querySelector('#clipboard');\n            cp.value = str;\n            cp.select();\n            document.execCommand('copy');\n            notify('The link is coppied to clipboard');\n        }\n        catch (e) {\n            alert('Failed to copy to clipboard: ' + e.message);\n        }\n    };\n    function share() {\n        const encoded = encodeCode(model.getValue());\n        const link = window.location.toString().replace(/#.*$/, '') + `#share-${encoded}`;\n        copyToClipboard(link);\n    }\n    document.querySelector('#share').onclick = () => {\n        share();\n    };\n    document.querySelector('.win-code').onkeydown = (e) => {\n        if (e.code === 'KeyS' && e.ctrlKey) {\n            e.preventDefault();\n            share();\n        }\n    };\n    monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions({\n        noSemanticValidation: true,\n        noSyntaxValidation: false\n    });\n    monaco.languages.typescript.typescriptDefaults.setCompilerOptions({\n        target: monaco.languages.typescript.ScriptTarget.ES2015,\n        allowSyntheticDefaultImports: true,\n        esModuleInterop: true,\n        module: monaco.languages.typescript.ModuleKind.CommonJS,\n        allowNonTsExtensions: true\n    });\n    lib_generated_1.files.forEach(({ content, filename }) => {\n        monaco.languages.typescript.typescriptDefaults.addExtraLib(content, 'file:///' + filename);\n    });\n    const model = monaco.editor.createModel(`import {cli} from 'typed-cli';\\n`, 'typescript', monaco.Uri.parse('file:///main.ts'));\n    monaco.editor.create(document.getElementById(\"code\"), {\n        language: \"javascript\",\n        model: model\n    });\n    function updateTitle() {\n        const elm = document.querySelector('.win-code .win-header');\n        elm.textContent = (isSampleChanged() ? '● ' : '') + `~/work/${sampleSelector.value}.ts - IDE`;\n    }\n    function isSampleChanged() {\n        const sampleText = samples[sampleSelector.value].code;\n        const actualText = model.getValue();\n        return sampleText !== actualText;\n    }\n    const shareBtn = document.querySelector('#share');\n    const discardBtn = document.querySelector('#discard');\n    model.onDidChangeContent(() => {\n        localStorage.setItem(`sample-code[${sampleSelector.value}]`, model.getValue());\n        updateTitle();\n        const changed = isSampleChanged();\n        shareBtn.style.display = changed ? 'block' : 'none';\n        discardBtn.style.display = changed ? 'block' : 'none';\n    });\n    if (window.location.hash) {\n        try {\n            const choosenSample = 'share_sample';\n            sampleSelector.value = choosenSample;\n            const codeFragment = /#share-([^\\-]*)/.exec(window.location.hash.toString());\n            if (!codeFragment) {\n                throw new Error('invalid hash');\n            }\n            const code = decodeCode(codeFragment[1]);\n            localStorage.setItem(`sample-code[${choosenSample}]`, code);\n            sampleSelector.onchange(null);\n        }\n        catch (e) {\n            alert('failed to open the link');\n            const choosenSample = localStorage.getItem('code-sample') || 'basic';\n            sampleSelector.value = choosenSample;\n            sampleSelector.onchange(null);\n        }\n    }\n    else {\n        const choosenSample = localStorage.getItem('code-sample') || 'basic';\n        sampleSelector.value = choosenSample;\n        sampleSelector.onchange(null);\n    }\n    return {\n        setText: (text) => model.setValue(text),\n        getText: () => model.getValue(),\n    };\n}\nexports.init = init;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/monaco-setup.ts\n");

/***/ }),

/***/ "./src/monaco-themes/index.ts":
/*!************************************!*\
  !*** ./src/monaco-themes/index.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.monokai = {\n    \"base\": \"vs-dark\",\n    \"inherit\": true,\n    \"rules\": [\n        {\n            \"foreground\": \"75715e\",\n            \"token\": \"comment\"\n        },\n        {\n            \"foreground\": \"e6db74\",\n            \"token\": \"string\"\n        },\n        {\n            \"foreground\": \"ae81ff\",\n            \"token\": \"constant.numeric\"\n        },\n        {\n            \"foreground\": \"ae81ff\",\n            \"token\": \"constant.language\"\n        },\n        {\n            \"foreground\": \"ae81ff\",\n            \"token\": \"constant.character\"\n        },\n        {\n            \"foreground\": \"ae81ff\",\n            \"token\": \"constant.other\"\n        },\n        {\n            \"foreground\": \"f92672\",\n            \"token\": \"keyword\"\n        },\n        {\n            \"foreground\": \"f92672\",\n            \"token\": \"storage\"\n        },\n        {\n            \"foreground\": \"66d9ef\",\n            \"fontStyle\": \"italic\",\n            \"token\": \"storage.type\"\n        },\n        {\n            \"foreground\": \"a6e22e\",\n            \"fontStyle\": \"underline\",\n            \"token\": \"entity.name.class\"\n        },\n        {\n            \"foreground\": \"a6e22e\",\n            \"fontStyle\": \"italic underline\",\n            \"token\": \"entity.other.inherited-class\"\n        },\n        {\n            \"foreground\": \"a6e22e\",\n            \"token\": \"entity.name.function\"\n        },\n        {\n            \"foreground\": \"fd971f\",\n            \"fontStyle\": \"italic\",\n            \"token\": \"variable.parameter\"\n        },\n        {\n            \"foreground\": \"f92672\",\n            \"token\": \"entity.name.tag\"\n        },\n        {\n            \"foreground\": \"a6e22e\",\n            \"token\": \"entity.other.attribute-name\"\n        },\n        {\n            \"foreground\": \"66d9ef\",\n            \"token\": \"support.function\"\n        },\n        {\n            \"foreground\": \"66d9ef\",\n            \"token\": \"support.constant\"\n        },\n        {\n            \"foreground\": \"66d9ef\",\n            \"fontStyle\": \"italic\",\n            \"token\": \"support.type\"\n        },\n        {\n            \"foreground\": \"66d9ef\",\n            \"fontStyle\": \"italic\",\n            \"token\": \"support.class\"\n        },\n        {\n            \"foreground\": \"f8f8f0\",\n            \"background\": \"f92672\",\n            \"token\": \"invalid\"\n        },\n        {\n            \"foreground\": \"f8f8f0\",\n            \"background\": \"ae81ff\",\n            \"token\": \"invalid.deprecated\"\n        },\n        {\n            \"foreground\": \"cfcfc2\",\n            \"token\": \"meta.structure.dictionary.json string.quoted.double.json\"\n        },\n        {\n            \"foreground\": \"75715e\",\n            \"token\": \"meta.diff\"\n        },\n        {\n            \"foreground\": \"75715e\",\n            \"token\": \"meta.diff.header\"\n        },\n        {\n            \"foreground\": \"f92672\",\n            \"token\": \"markup.deleted\"\n        },\n        {\n            \"foreground\": \"a6e22e\",\n            \"token\": \"markup.inserted\"\n        },\n        {\n            \"foreground\": \"e6db74\",\n            \"token\": \"markup.changed\"\n        },\n        {\n            \"foreground\": \"ae81ffa0\",\n            \"token\": \"constant.numeric.line-number.find-in-files - match\"\n        },\n        {\n            \"foreground\": \"e6db74\",\n            \"token\": \"entity.name.filename.find-in-files\"\n        }\n    ],\n    \"colors\": {\n        \"editor.foreground\": \"#F8F8F2\",\n        \"editor.background\": \"#272822\",\n        \"editor.selectionBackground\": \"#49483E\",\n        \"editor.lineHighlightBackground\": \"#3E3D32\",\n        \"editorCursor.foreground\": \"#F8F8F0\",\n        \"editorWhitespace.foreground\": \"#3B3A32\",\n        \"editorIndentGuide.activeBackground\": \"#9D550FB0\",\n        \"editor.selectionHighlightBorder\": \"#222218\"\n    }\n};\nexports.chromeDevTools = {\n    \"base\": \"vs\",\n    \"inherit\": true,\n    \"rules\": [\n        {\n            \"foreground\": \"c41a16\",\n            \"token\": \"string\"\n        },\n        {\n            \"foreground\": \"1c00cf\",\n            \"token\": \"constant.numeric\"\n        },\n        {\n            \"foreground\": \"aa0d91\",\n            \"token\": \"keyword\"\n        },\n        {\n            \"foreground\": \"000000\",\n            \"token\": \"keyword.operator\"\n        },\n        {\n            \"foreground\": \"aa0d91\",\n            \"token\": \"constant.language\"\n        },\n        {\n            \"foreground\": \"990000\",\n            \"token\": \"support.class.exception\"\n        },\n        {\n            \"foreground\": \"000000\",\n            \"token\": \"entity.name.function\"\n        },\n        {\n            \"fontStyle\": \"bold underline\",\n            \"token\": \"entity.name.type\"\n        },\n        {\n            \"fontStyle\": \"italic\",\n            \"token\": \"variable.parameter\"\n        },\n        {\n            \"foreground\": \"007400\",\n            \"token\": \"comment\"\n        },\n        {\n            \"foreground\": \"ff0000\",\n            \"token\": \"invalid\"\n        },\n        {\n            \"background\": \"e71a1100\",\n            \"token\": \"invalid.deprecated.trailing-whitespace\"\n        },\n        {\n            \"foreground\": \"000000\",\n            \"background\": \"fafafafc\",\n            \"token\": \"text source\"\n        },\n        {\n            \"foreground\": \"aa0d91\",\n            \"token\": \"meta.tag\"\n        },\n        {\n            \"foreground\": \"aa0d91\",\n            \"token\": \"declaration.tag\"\n        },\n        {\n            \"foreground\": \"000000\",\n            \"fontStyle\": \"bold\",\n            \"token\": \"support\"\n        },\n        {\n            \"foreground\": \"aa0d91\",\n            \"token\": \"storage\"\n        },\n        {\n            \"fontStyle\": \"bold underline\",\n            \"token\": \"entity.name.section\"\n        },\n        {\n            \"foreground\": \"000000\",\n            \"fontStyle\": \"bold\",\n            \"token\": \"entity.name.function.frame\"\n        },\n        {\n            \"foreground\": \"333333\",\n            \"token\": \"meta.tag.preprocessor.xml\"\n        },\n        {\n            \"foreground\": \"994500\",\n            \"fontStyle\": \"italic\",\n            \"token\": \"entity.other.attribute-name\"\n        },\n        {\n            \"foreground\": \"881280\",\n            \"token\": \"entity.name.tag\"\n        }\n    ],\n    \"colors\": {\n        \"editor.foreground\": \"#000000\",\n        \"editor.background\": \"#FFFFFF\",\n        \"editor.selectionBackground\": \"#BAD6FD\",\n        \"editor.lineHighlightBackground\": \"#0000001A\",\n        \"editorCursor.foreground\": \"#000000\",\n        \"editorWhitespace.foreground\": \"#B3B3B3F4\"\n    }\n};\nexports.github = {\n    \"base\": \"vs\",\n    \"inherit\": true,\n    \"rules\": [\n        {\n            \"foreground\": \"999988\",\n            \"fontStyle\": \"italic\",\n            \"token\": \"comment\"\n        },\n        {\n            \"foreground\": \"999999\",\n            \"fontStyle\": \"bold\",\n            \"token\": \"comment.block.preprocessor\"\n        },\n        {\n            \"foreground\": \"999999\",\n            \"fontStyle\": \"bold italic\",\n            \"token\": \"comment.documentation\"\n        },\n        {\n            \"foreground\": \"999999\",\n            \"fontStyle\": \"bold italic\",\n            \"token\": \"comment.block.documentation\"\n        },\n        {\n            \"foreground\": \"a61717\",\n            \"background\": \"e3d2d2\",\n            \"token\": \"invalid.illegal\"\n        },\n        {\n            \"fontStyle\": \"bold\",\n            \"token\": \"keyword\"\n        },\n        {\n            \"fontStyle\": \"bold\",\n            \"token\": \"storage\"\n        },\n        {\n            \"fontStyle\": \"bold\",\n            \"token\": \"keyword.operator\"\n        },\n        {\n            \"fontStyle\": \"bold\",\n            \"token\": \"constant.language\"\n        },\n        {\n            \"fontStyle\": \"bold\",\n            \"token\": \"support.constant\"\n        },\n        {\n            \"foreground\": \"445588\",\n            \"fontStyle\": \"bold\",\n            \"token\": \"storage.type\"\n        },\n        {\n            \"foreground\": \"445588\",\n            \"fontStyle\": \"bold\",\n            \"token\": \"support.type\"\n        },\n        {\n            \"foreground\": \"008080\",\n            \"token\": \"entity.other.attribute-name\"\n        },\n        {\n            \"foreground\": \"0086b3\",\n            \"token\": \"variable.other\"\n        },\n        {\n            \"foreground\": \"999999\",\n            \"token\": \"variable.language\"\n        },\n        {\n            \"foreground\": \"445588\",\n            \"fontStyle\": \"bold\",\n            \"token\": \"entity.name.type\"\n        },\n        {\n            \"foreground\": \"445588\",\n            \"fontStyle\": \"bold\",\n            \"token\": \"entity.other.inherited-class\"\n        },\n        {\n            \"foreground\": \"445588\",\n            \"fontStyle\": \"bold\",\n            \"token\": \"support.class\"\n        },\n        {\n            \"foreground\": \"008080\",\n            \"token\": \"variable.other.constant\"\n        },\n        {\n            \"foreground\": \"800080\",\n            \"token\": \"constant.character.entity\"\n        },\n        {\n            \"foreground\": \"990000\",\n            \"token\": \"entity.name.exception\"\n        },\n        {\n            \"foreground\": \"990000\",\n            \"token\": \"entity.name.function\"\n        },\n        {\n            \"foreground\": \"990000\",\n            \"token\": \"support.function\"\n        },\n        {\n            \"foreground\": \"990000\",\n            \"token\": \"keyword.other.name-of-parameter\"\n        },\n        {\n            \"foreground\": \"555555\",\n            \"token\": \"entity.name.section\"\n        },\n        {\n            \"foreground\": \"000080\",\n            \"token\": \"entity.name.tag\"\n        },\n        {\n            \"foreground\": \"008080\",\n            \"token\": \"variable.parameter\"\n        },\n        {\n            \"foreground\": \"008080\",\n            \"token\": \"support.variable\"\n        },\n        {\n            \"foreground\": \"009999\",\n            \"token\": \"constant.numeric\"\n        },\n        {\n            \"foreground\": \"009999\",\n            \"token\": \"constant.other\"\n        },\n        {\n            \"foreground\": \"dd1144\",\n            \"token\": \"string - string source\"\n        },\n        {\n            \"foreground\": \"dd1144\",\n            \"token\": \"constant.character\"\n        },\n        {\n            \"foreground\": \"009926\",\n            \"token\": \"string.regexp\"\n        },\n        {\n            \"foreground\": \"990073\",\n            \"token\": \"constant.other.symbol\"\n        },\n        {\n            \"fontStyle\": \"bold\",\n            \"token\": \"punctuation\"\n        },\n        {\n            \"foreground\": \"000000\",\n            \"background\": \"ffdddd\",\n            \"token\": \"markup.deleted\"\n        },\n        {\n            \"fontStyle\": \"italic\",\n            \"token\": \"markup.italic\"\n        },\n        {\n            \"foreground\": \"aa0000\",\n            \"token\": \"markup.error\"\n        },\n        {\n            \"foreground\": \"999999\",\n            \"token\": \"markup.heading.1\"\n        },\n        {\n            \"foreground\": \"000000\",\n            \"background\": \"ddffdd\",\n            \"token\": \"markup.inserted\"\n        },\n        {\n            \"foreground\": \"888888\",\n            \"token\": \"markup.output\"\n        },\n        {\n            \"foreground\": \"888888\",\n            \"token\": \"markup.raw\"\n        },\n        {\n            \"foreground\": \"555555\",\n            \"token\": \"markup.prompt\"\n        },\n        {\n            \"fontStyle\": \"bold\",\n            \"token\": \"markup.bold\"\n        },\n        {\n            \"foreground\": \"aaaaaa\",\n            \"token\": \"markup.heading\"\n        },\n        {\n            \"foreground\": \"aa0000\",\n            \"token\": \"markup.traceback\"\n        },\n        {\n            \"fontStyle\": \"underline\",\n            \"token\": \"markup.underline\"\n        },\n        {\n            \"foreground\": \"999999\",\n            \"background\": \"eaf2f5\",\n            \"token\": \"meta.diff.range\"\n        },\n        {\n            \"foreground\": \"999999\",\n            \"background\": \"eaf2f5\",\n            \"token\": \"meta.diff.index\"\n        },\n        {\n            \"foreground\": \"999999\",\n            \"background\": \"eaf2f5\",\n            \"token\": \"meta.separator\"\n        },\n        {\n            \"foreground\": \"999999\",\n            \"background\": \"ffdddd\",\n            \"token\": \"meta.diff.header.from-file\"\n        },\n        {\n            \"foreground\": \"999999\",\n            \"background\": \"ddffdd\",\n            \"token\": \"meta.diff.header.to-file\"\n        },\n        {\n            \"foreground\": \"4183c4\",\n            \"token\": \"meta.link\"\n        }\n    ],\n    \"colors\": {\n        \"editor.foreground\": \"#000000\",\n        \"editor.background\": \"#F8F8FF\",\n        \"editor.selectionBackground\": \"#B4D5FE\",\n        \"editor.lineHighlightBackground\": \"#FFFEEB\",\n        \"editorCursor.foreground\": \"#666666\",\n        \"editorWhitespace.foreground\": \"#BBBBBB\"\n    }\n};\nexports.monoindustrial = {\n    \"base\": \"vs-dark\",\n    \"inherit\": true,\n    \"rules\": [\n        {\n            \"foreground\": \"666c68\",\n            \"background\": \"151c19\",\n            \"token\": \"comment\"\n        },\n        {\n            \"foreground\": \"c23b00\",\n            \"token\": \"storage\"\n        },\n        {\n            \"foreground\": \"c23b00\",\n            \"token\": \"support.type\"\n        },\n        {\n            \"foreground\": \"ffffff\",\n            \"background\": \"151c19\",\n            \"token\": \"string.unquoted.embedded\"\n        },\n        {\n            \"foreground\": \"ffffff\",\n            \"background\": \"151c19\",\n            \"token\": \"text source\"\n        },\n        {\n            \"foreground\": \"ffffff\",\n            \"background\": \"151c19\",\n            \"token\": \"string.unquoted\"\n        },\n        {\n            \"foreground\": \"e9470000\",\n            \"background\": \"1a0700\",\n            \"token\": \"constant.character.escaped\"\n        },\n        {\n            \"foreground\": \"e9470000\",\n            \"background\": \"1a0700\",\n            \"token\": \"string source - string.unquoted.embedded\"\n        },\n        {\n            \"foreground\": \"e9470000\",\n            \"background\": \"1a0700\",\n            \"token\": \"string string source\"\n        },\n        {\n            \"foreground\": \"c23800\",\n            \"background\": \"1a0700\",\n            \"token\": \"string - string source\"\n        },\n        {\n            \"foreground\": \"c23800\",\n            \"background\": \"1a0700\",\n            \"token\": \"string source string\"\n        },\n        {\n            \"foreground\": \"c23800\",\n            \"background\": \"1a0700\",\n            \"token\": \"meta.scope.heredoc\"\n        },\n        {\n            \"foreground\": \"e98800\",\n            \"token\": \"constant.numeric\"\n        },\n        {\n            \"foreground\": \"648bd2\",\n            \"token\": \"variable.language\"\n        },\n        {\n            \"foreground\": \"648bd2\",\n            \"token\": \"variable.other\"\n        },\n        {\n            \"foreground\": \"e98800\",\n            \"token\": \"constant\"\n        },\n        {\n            \"foreground\": \"a8b3ab\",\n            \"background\": \"161d1a\",\n            \"token\": \"other.preprocessor\"\n        },\n        {\n            \"foreground\": \"a8b3ab\",\n            \"background\": \"161d1a\",\n            \"token\": \"entity.name.preprocessor\"\n        },\n        {\n            \"foreground\": \"a8b3ab\",\n            \"token\": \"entity.name.function\"\n        },\n        {\n            \"foreground\": \"a8b3ab\",\n            \"token\": \"keyword.operator\"\n        },\n        {\n            \"foreground\": \"a8b3ab\",\n            \"token\": \"keyword.other.name-of-parameter\"\n        },\n        {\n            \"foreground\": \"9a2f00\",\n            \"token\": \"entity.name.class\"\n        },\n        {\n            \"foreground\": \"648bd2\",\n            \"token\": \"variable.parameter\"\n        },\n        {\n            \"foreground\": \"666c68\",\n            \"token\": \"storage.type.method\"\n        },\n        {\n            \"foreground\": \"a39e64\",\n            \"token\": \"keyword\"\n        },\n        {\n            \"foreground\": \"a39e64\",\n            \"token\": \"storage.type.function.php\"\n        },\n        {\n            \"foreground\": \"ffffff\",\n            \"background\": \"990000ad\",\n            \"token\": \"invalid\"\n        },\n        {\n            \"foreground\": \"000000\",\n            \"background\": \"ffd0d0\",\n            \"token\": \"invalid.trailing-whitespace\"\n        },\n        {\n            \"foreground\": \"588e60\",\n            \"token\": \"support.function\"\n        },\n        {\n            \"foreground\": \"5778b6\",\n            \"token\": \"support.class\"\n        },\n        {\n            \"foreground\": \"5778b6\",\n            \"token\": \"support.type\"\n        },\n        {\n            \"foreground\": \"5778b6\",\n            \"token\": \"entity.name\"\n        },\n        {\n            \"foreground\": \"c87500\",\n            \"token\": \"support.constant\"\n        },\n        {\n            \"foreground\": \"5879b7\",\n            \"token\": \"support.other.variable\"\n        },\n        {\n            \"foreground\": \"68685b\",\n            \"token\": \"declaration.xml-processing\"\n        },\n        {\n            \"foreground\": \"888888\",\n            \"token\": \"declaration.doctype\"\n        },\n        {\n            \"foreground\": \"888888\",\n            \"token\": \"declaration.doctype.DTD\"\n        },\n        {\n            \"foreground\": \"a65eff\",\n            \"token\": \"declaration.tag\"\n        },\n        {\n            \"foreground\": \"a65eff\",\n            \"token\": \"entity.name.tag\"\n        },\n        {\n            \"foreground\": \"909993\",\n            \"token\": \"entity.other.attribute-name\"\n        },\n        {\n            \"foreground\": \"90999380\",\n            \"token\": \"punctuation\"\n        },\n        {\n            \"foreground\": \"7642b7\",\n            \"token\": \"entity.other.inherited-class\"\n        },\n        {\n            \"foreground\": \"ffffff\",\n            \"background\": \"00000059\",\n            \"token\": \"meta.scope.changed-files.svn\"\n        },\n        {\n            \"foreground\": \"ffffff\",\n            \"background\": \"00000059\",\n            \"token\": \"markup.inserted.svn\"\n        },\n        {\n            \"foreground\": \"ffffff\",\n            \"background\": \"00000059\",\n            \"token\": \"markup.changed.svn\"\n        },\n        {\n            \"foreground\": \"ffffff\",\n            \"background\": \"00000059\",\n            \"token\": \"markup.deleted.svn\"\n        },\n        {\n            \"background\": \"78807b0a\",\n            \"token\": \"meta.section\"\n        },\n        {\n            \"background\": \"78807b0a\",\n            \"token\": \"meta.section meta.section\"\n        },\n        {\n            \"background\": \"78807b0a\",\n            \"token\": \"meta.section meta.section meta.section\"\n        }\n    ],\n    \"colors\": {\n        \"editor.foreground\": \"#FFFFFF\",\n        \"editor.background\": \"#222C28\",\n        \"editor.selectionBackground\": \"#91999466\",\n        \"editor.lineHighlightBackground\": \"#0C0D0C40\",\n        \"editorCursor.foreground\": \"#FFFFFF\",\n        \"editorWhitespace.foreground\": \"#666C6880\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/monaco-themes/index.ts\n");

/***/ }),

/***/ "./src/samples-generated.ts":
/*!**********************************!*\
  !*** ./src/samples-generated.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.basic = { \"code\": \"import {cli, option, presets} from 'typed-cli';\\n\\nconst data = cli({\\n    name: 'calc',\\n    description: 'Calculate expressions',\\n    options: {\\n        operation: presets.oneOf(['+', '-', '*', '/'] as const)\\n            .alias('o')\\n            .required()\\n            .description('opeartion to be applied'),\\n        round: option('boolean').alias('r').description('rounds the result'),\\n    },\\n    _: option('number').array()\\n});\\n\\nconst operatorMap = {\\n    '+': (prev: number, cur: number) => prev + cur,\\n    '/': (prev: number, cur: number) => prev / cur,\\n    '-': (prev: number, cur: number) => prev - cur,\\n    '*': (prev: number, cur: number) => prev * cur,\\n};\\n\\n// Type safe!\\n// n1: number\\n// n2: number\\n// (place a cursor on a variable to see its type)\\nconst [n1, n2] = data._;\\n\\n// Type safe!\\n// op: '+' | '-' | '*' | '/'\\nconst op = data.options.operation;\\n\\nconsole.log(`Calculating: ${n1} ${op} ${n2} = ${[n1, n2].reduce(operatorMap[op])}`);\\n\", \"name\": \"basic\", \"description\": \"basic cli usage\" };\nexports.git = { \"code\": \"import {cli, option, command} from 'typed-cli';\\n\\ncli.commands({\\n    program: 'git',\\n    description: 'Git is a free and open source distributed'\\n            + ' version control system designed to handle everything'\\n            + ' from small to very large projects with speed and efficiency.',\\n    completer: true,\\n}, {\\n    // reset\\n    reset: command({\\n        description: 'Reset current HEAD to the specified state',\\n        options: {\\n            hard: option('boolean').description('Resets the index and working tree'),\\n            soft: option('boolean').description('Does not touch the index file or the working tree at all'),\\n            mixed: option('boolean').description('Resets the index but not the working tree'),\\n        }\\n    })\\n        .handle(data => console.log('executing reset with params:', data)),\\n\\n    // checkout\\n    checkout: command({\\n        description: 'Switch branches or restore working tree files',\\n        options: {\\n            b: option('boolean').description('causes a new branch to be created '),\\n        },\\n        _: option('string').required()\\n    })\\n        .handle(data => console.log('executing checkout with params:', data))\\n})\\n\\n\", \"name\": \"git\", \"description\": \"pseudo git\" };\nexports.help = { \"code\": \"import {cli, defaultCommand, command} from 'typed-cli';\\nimport chalk from 'chalk';\\n\\ncli.commands({\\n    program: 'help',\\n    description: 'outputs the manual for this demo',\\n    completer: true,\\n}, {\\n    // default\\n    [defaultCommand]: command({\\n        description: 'output',\\n    }).handle(data => {\\n        console.log(`This is a pseudo terminal. It's ${chalk.underline('interactive')}!`);\\n        console.log('Supported shortcuts:');\\n        console.log('Ctrl+C (reject input), Ctrl+K (clear terminal) etc.');\\n        console.log(`To see more shortcuts - type ${chalk.yellow('help shortcuts')}`);\\n        console.log('Type some keys and commands to play around.');\\n        console.log(`Code editor below is ${chalk.underline('interactive')} as well!`);\\n    }),\\n\\n    // shortcuts\\n    shortcuts: command({\\n        description: 'outputs available shortcuts in this demo terminal',\\n    }).handle(data => {\\n        console.log(chalk.bold('Ctrl+C       ') + chalk.dim(' - reject input'));\\n        console.log(chalk.bold('Ctrl+K       ') + chalk.dim(' - clear terminal'));\\n        console.log(chalk.bold('Shift+Insert ') + chalk.dim(' - paste into terminal from clipboard'));\\n        console.log(chalk.bold('Tab          ') + chalk.dim(' - command completions'));\\n        console.log(chalk.bold('Arrow Up/Down') + chalk.dim(' - comand history navigation'));\\n    }),\\n});\\n\", \"name\": \"help\", \"description\": \"output the manual for this demo\" };\nexports.history = { \"code\": \"import {cli, option} from 'typed-cli';\\n\\nconst data = cli({\\n    name: 'history',\\n    description: 'mananges shell history',\\n    options: {\\n        clear: option('boolean')\\n            .alias('c')\\n            .description('clears the history'),\\n    }\\n});\\n\\nif (data.options.clear) {\\n    historyMgr.clear();\\n} else {\\n    historyMgr.items.forEach(item => console.log(item));\\n}\\n\", \"name\": \"history\", \"description\": \"mananges shell history\" };\nexports.share_sample = { \"code\": \"const data = cli({});\\n\\nconsole.log('not shared');\\n\", \"name\": \"share_sample\", \"description\": \"pseudo sample placeholder for sharing\" };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2FtcGxlcy1nZW5lcmF0ZWQudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3NhbXBsZXMtZ2VuZXJhdGVkLnRzP2JmYjQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGJhc2ljID0ge1wiY29kZVwiOlwiaW1wb3J0IHtjbGksIG9wdGlvbiwgcHJlc2V0c30gZnJvbSAndHlwZWQtY2xpJztcXG5cXG5jb25zdCBkYXRhID0gY2xpKHtcXG4gICAgbmFtZTogJ2NhbGMnLFxcbiAgICBkZXNjcmlwdGlvbjogJ0NhbGN1bGF0ZSBleHByZXNzaW9ucycsXFxuICAgIG9wdGlvbnM6IHtcXG4gICAgICAgIG9wZXJhdGlvbjogcHJlc2V0cy5vbmVPZihbJysnLCAnLScsICcqJywgJy8nXSBhcyBjb25zdClcXG4gICAgICAgICAgICAuYWxpYXMoJ28nKVxcbiAgICAgICAgICAgIC5yZXF1aXJlZCgpXFxuICAgICAgICAgICAgLmRlc2NyaXB0aW9uKCdvcGVhcnRpb24gdG8gYmUgYXBwbGllZCcpLFxcbiAgICAgICAgcm91bmQ6IG9wdGlvbignYm9vbGVhbicpLmFsaWFzKCdyJykuZGVzY3JpcHRpb24oJ3JvdW5kcyB0aGUgcmVzdWx0JyksXFxuICAgIH0sXFxuICAgIF86IG9wdGlvbignbnVtYmVyJykuYXJyYXkoKVxcbn0pO1xcblxcbmNvbnN0IG9wZXJhdG9yTWFwID0ge1xcbiAgICAnKyc6IChwcmV2OiBudW1iZXIsIGN1cjogbnVtYmVyKSA9PiBwcmV2ICsgY3VyLFxcbiAgICAnLyc6IChwcmV2OiBudW1iZXIsIGN1cjogbnVtYmVyKSA9PiBwcmV2IC8gY3VyLFxcbiAgICAnLSc6IChwcmV2OiBudW1iZXIsIGN1cjogbnVtYmVyKSA9PiBwcmV2IC0gY3VyLFxcbiAgICAnKic6IChwcmV2OiBudW1iZXIsIGN1cjogbnVtYmVyKSA9PiBwcmV2ICogY3VyLFxcbn07XFxuXFxuLy8gVHlwZSBzYWZlIVxcbi8vIG4xOiBudW1iZXJcXG4vLyBuMjogbnVtYmVyXFxuLy8gKHBsYWNlIGEgY3Vyc29yIG9uIGEgdmFyaWFibGUgdG8gc2VlIGl0cyB0eXBlKVxcbmNvbnN0IFtuMSwgbjJdID0gZGF0YS5fO1xcblxcbi8vIFR5cGUgc2FmZSFcXG4vLyBvcDogJysnIHwgJy0nIHwgJyonIHwgJy8nXFxuY29uc3Qgb3AgPSBkYXRhLm9wdGlvbnMub3BlcmF0aW9uO1xcblxcbmNvbnNvbGUubG9nKGBDYWxjdWxhdGluZzogJHtuMX0gJHtvcH0gJHtuMn0gPSAke1tuMSwgbjJdLnJlZHVjZShvcGVyYXRvck1hcFtvcF0pfWApO1xcblwiLFwibmFtZVwiOlwiYmFzaWNcIixcImRlc2NyaXB0aW9uXCI6XCJiYXNpYyBjbGkgdXNhZ2VcIn1cblxuZXhwb3J0IGNvbnN0IGdpdCA9IHtcImNvZGVcIjpcImltcG9ydCB7Y2xpLCBvcHRpb24sIGNvbW1hbmR9IGZyb20gJ3R5cGVkLWNsaSc7XFxuXFxuY2xpLmNvbW1hbmRzKHtcXG4gICAgcHJvZ3JhbTogJ2dpdCcsXFxuICAgIGRlc2NyaXB0aW9uOiAnR2l0IGlzIGEgZnJlZSBhbmQgb3BlbiBzb3VyY2UgZGlzdHJpYnV0ZWQnXFxuICAgICAgICAgICAgKyAnIHZlcnNpb24gY29udHJvbCBzeXN0ZW0gZGVzaWduZWQgdG8gaGFuZGxlIGV2ZXJ5dGhpbmcnXFxuICAgICAgICAgICAgKyAnIGZyb20gc21hbGwgdG8gdmVyeSBsYXJnZSBwcm9qZWN0cyB3aXRoIHNwZWVkIGFuZCBlZmZpY2llbmN5LicsXFxuICAgIGNvbXBsZXRlcjogdHJ1ZSxcXG59LCB7XFxuICAgIC8vIHJlc2V0XFxuICAgIHJlc2V0OiBjb21tYW5kKHtcXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnUmVzZXQgY3VycmVudCBIRUFEIHRvIHRoZSBzcGVjaWZpZWQgc3RhdGUnLFxcbiAgICAgICAgb3B0aW9uczoge1xcbiAgICAgICAgICAgIGhhcmQ6IG9wdGlvbignYm9vbGVhbicpLmRlc2NyaXB0aW9uKCdSZXNldHMgdGhlIGluZGV4IGFuZCB3b3JraW5nIHRyZWUnKSxcXG4gICAgICAgICAgICBzb2Z0OiBvcHRpb24oJ2Jvb2xlYW4nKS5kZXNjcmlwdGlvbignRG9lcyBub3QgdG91Y2ggdGhlIGluZGV4IGZpbGUgb3IgdGhlIHdvcmtpbmcgdHJlZSBhdCBhbGwnKSxcXG4gICAgICAgICAgICBtaXhlZDogb3B0aW9uKCdib29sZWFuJykuZGVzY3JpcHRpb24oJ1Jlc2V0cyB0aGUgaW5kZXggYnV0IG5vdCB0aGUgd29ya2luZyB0cmVlJyksXFxuICAgICAgICB9XFxuICAgIH0pXFxuICAgICAgICAuaGFuZGxlKGRhdGEgPT4gY29uc29sZS5sb2coJ2V4ZWN1dGluZyByZXNldCB3aXRoIHBhcmFtczonLCBkYXRhKSksXFxuXFxuICAgIC8vIGNoZWNrb3V0XFxuICAgIGNoZWNrb3V0OiBjb21tYW5kKHtcXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnU3dpdGNoIGJyYW5jaGVzIG9yIHJlc3RvcmUgd29ya2luZyB0cmVlIGZpbGVzJyxcXG4gICAgICAgIG9wdGlvbnM6IHtcXG4gICAgICAgICAgICBiOiBvcHRpb24oJ2Jvb2xlYW4nKS5kZXNjcmlwdGlvbignY2F1c2VzIGEgbmV3IGJyYW5jaCB0byBiZSBjcmVhdGVkICcpLFxcbiAgICAgICAgfSxcXG4gICAgICAgIF86IG9wdGlvbignc3RyaW5nJykucmVxdWlyZWQoKVxcbiAgICB9KVxcbiAgICAgICAgLmhhbmRsZShkYXRhID0+IGNvbnNvbGUubG9nKCdleGVjdXRpbmcgY2hlY2tvdXQgd2l0aCBwYXJhbXM6JywgZGF0YSkpXFxufSlcXG5cXG5cIixcIm5hbWVcIjpcImdpdFwiLFwiZGVzY3JpcHRpb25cIjpcInBzZXVkbyBnaXRcIn1cblxuZXhwb3J0IGNvbnN0IGhlbHAgPSB7XCJjb2RlXCI6XCJpbXBvcnQge2NsaSwgZGVmYXVsdENvbW1hbmQsIGNvbW1hbmR9IGZyb20gJ3R5cGVkLWNsaSc7XFxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcXG5cXG5jbGkuY29tbWFuZHMoe1xcbiAgICBwcm9ncmFtOiAnaGVscCcsXFxuICAgIGRlc2NyaXB0aW9uOiAnb3V0cHV0cyB0aGUgbWFudWFsIGZvciB0aGlzIGRlbW8nLFxcbiAgICBjb21wbGV0ZXI6IHRydWUsXFxufSwge1xcbiAgICAvLyBkZWZhdWx0XFxuICAgIFtkZWZhdWx0Q29tbWFuZF06IGNvbW1hbmQoe1xcbiAgICAgICAgZGVzY3JpcHRpb246ICdvdXRwdXQnLFxcbiAgICB9KS5oYW5kbGUoZGF0YSA9PiB7XFxuICAgICAgICBjb25zb2xlLmxvZyhgVGhpcyBpcyBhIHBzZXVkbyB0ZXJtaW5hbC4gSXQncyAke2NoYWxrLnVuZGVybGluZSgnaW50ZXJhY3RpdmUnKX0hYCk7XFxuICAgICAgICBjb25zb2xlLmxvZygnU3VwcG9ydGVkIHNob3J0Y3V0czonKTtcXG4gICAgICAgIGNvbnNvbGUubG9nKCdDdHJsK0MgKHJlamVjdCBpbnB1dCksIEN0cmwrSyAoY2xlYXIgdGVybWluYWwpIGV0Yy4nKTtcXG4gICAgICAgIGNvbnNvbGUubG9nKGBUbyBzZWUgbW9yZSBzaG9ydGN1dHMgLSB0eXBlICR7Y2hhbGsueWVsbG93KCdoZWxwIHNob3J0Y3V0cycpfWApO1xcbiAgICAgICAgY29uc29sZS5sb2coJ1R5cGUgc29tZSBrZXlzIGFuZCBjb21tYW5kcyB0byBwbGF5IGFyb3VuZC4nKTtcXG4gICAgICAgIGNvbnNvbGUubG9nKGBDb2RlIGVkaXRvciBiZWxvdyBpcyAke2NoYWxrLnVuZGVybGluZSgnaW50ZXJhY3RpdmUnKX0gYXMgd2VsbCFgKTtcXG4gICAgfSksXFxuXFxuICAgIC8vIHNob3J0Y3V0c1xcbiAgICBzaG9ydGN1dHM6IGNvbW1hbmQoe1xcbiAgICAgICAgZGVzY3JpcHRpb246ICdvdXRwdXRzIGF2YWlsYWJsZSBzaG9ydGN1dHMgaW4gdGhpcyBkZW1vIHRlcm1pbmFsJyxcXG4gICAgfSkuaGFuZGxlKGRhdGEgPT4ge1xcbiAgICAgICAgY29uc29sZS5sb2coY2hhbGsuYm9sZCgnQ3RybCtDICAgICAgICcpICsgY2hhbGsuZGltKCcgLSByZWplY3QgaW5wdXQnKSk7XFxuICAgICAgICBjb25zb2xlLmxvZyhjaGFsay5ib2xkKCdDdHJsK0sgICAgICAgJykgKyBjaGFsay5kaW0oJyAtIGNsZWFyIHRlcm1pbmFsJykpO1xcbiAgICAgICAgY29uc29sZS5sb2coY2hhbGsuYm9sZCgnU2hpZnQrSW5zZXJ0ICcpICsgY2hhbGsuZGltKCcgLSBwYXN0ZSBpbnRvIHRlcm1pbmFsIGZyb20gY2xpcGJvYXJkJykpO1xcbiAgICAgICAgY29uc29sZS5sb2coY2hhbGsuYm9sZCgnVGFiICAgICAgICAgICcpICsgY2hhbGsuZGltKCcgLSBjb21tYW5kIGNvbXBsZXRpb25zJykpO1xcbiAgICAgICAgY29uc29sZS5sb2coY2hhbGsuYm9sZCgnQXJyb3cgVXAvRG93bicpICsgY2hhbGsuZGltKCcgLSBjb21hbmQgaGlzdG9yeSBuYXZpZ2F0aW9uJykpO1xcbiAgICB9KSxcXG59KTtcXG5cIixcIm5hbWVcIjpcImhlbHBcIixcImRlc2NyaXB0aW9uXCI6XCJvdXRwdXQgdGhlIG1hbnVhbCBmb3IgdGhpcyBkZW1vXCJ9XG5cbmV4cG9ydCBjb25zdCBoaXN0b3J5ID0ge1wiY29kZVwiOlwiaW1wb3J0IHtjbGksIG9wdGlvbn0gZnJvbSAndHlwZWQtY2xpJztcXG5cXG5jb25zdCBkYXRhID0gY2xpKHtcXG4gICAgbmFtZTogJ2hpc3RvcnknLFxcbiAgICBkZXNjcmlwdGlvbjogJ21hbmFuZ2VzIHNoZWxsIGhpc3RvcnknLFxcbiAgICBvcHRpb25zOiB7XFxuICAgICAgICBjbGVhcjogb3B0aW9uKCdib29sZWFuJylcXG4gICAgICAgICAgICAuYWxpYXMoJ2MnKVxcbiAgICAgICAgICAgIC5kZXNjcmlwdGlvbignY2xlYXJzIHRoZSBoaXN0b3J5JyksXFxuICAgIH1cXG59KTtcXG5cXG5pZiAoZGF0YS5vcHRpb25zLmNsZWFyKSB7XFxuICAgIGhpc3RvcnlNZ3IuY2xlYXIoKTtcXG59IGVsc2Uge1xcbiAgICBoaXN0b3J5TWdyLml0ZW1zLmZvckVhY2goaXRlbSA9PiBjb25zb2xlLmxvZyhpdGVtKSk7XFxufVxcblwiLFwibmFtZVwiOlwiaGlzdG9yeVwiLFwiZGVzY3JpcHRpb25cIjpcIm1hbmFuZ2VzIHNoZWxsIGhpc3RvcnlcIn1cblxuZXhwb3J0IGNvbnN0IHNoYXJlX3NhbXBsZSA9IHtcImNvZGVcIjpcImNvbnN0IGRhdGEgPSBjbGkoe30pO1xcblxcbmNvbnNvbGUubG9nKCdub3Qgc2hhcmVkJyk7XFxuXCIsXCJuYW1lXCI6XCJzaGFyZV9zYW1wbGVcIixcImRlc2NyaXB0aW9uXCI6XCJwc2V1ZG8gc2FtcGxlIHBsYWNlaG9sZGVyIGZvciBzaGFyaW5nXCJ9Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBRUE7QUFFQTtBQUVBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/samples-generated.ts\n");

/***/ }),

/***/ "./src/term-setup.ts":
/*!***************************!*\
  !*** ./src/term-setup.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst xterm_1 = __webpack_require__(/*! xterm */ \"./node_modules/xterm/lib/public/Terminal.js\");\nconst fit = __importStar(__webpack_require__(/*! xterm/lib/addons/fit/fit */ \"./node_modules/xterm/lib/addons/fit/fit.js\"));\nconst typed_cli_1 = __webpack_require__(/*! typed-cli */ \"../cli/index.js\");\nconst ansiEscapes = __importStar(__webpack_require__(/*! ansi-escapes */ \"./node_modules/ansi-escapes/index.js\"));\nconst historyMgr_1 = __webpack_require__(/*! ./historyMgr */ \"./src/historyMgr.ts\");\nxterm_1.Terminal.applyAddon(fit);\ntyped_cli_1.chalkInstance.enabled = true;\ntyped_cli_1.chalkInstance.level = 16;\nconst w = window;\nconst term = new xterm_1.Terminal({\n    cursorBlink: true\n});\nconst themes = {\n    obsidian: [\"#000000\", \"#a60001\", \"#00bb00\", \"#fecd22\", \"#3a9bdb\", \"#bb00bb\", \"#00bbbb\", \"#bbbbbb\", \"#555555\", \"#ff0003\", \"#93c863\", \"#fef874\", \"#a1d7ff\", \"#ff55ff\", \"#55ffff\", \"#ffffff\", \"#283033\", \"#cdcdcd\"],\n    broadcast: [\"#000000\", \"#da4939\", \"#519f50\", \"#ffd24a\", \"#6d9cbe\", \"#d0d0ff\", \"#6e9cbe\", \"#ffffff\", \"#323232\", \"#ff7b6b\", \"#83d182\", \"#ffff7c\", \"#9fcef0\", \"#ffffff\", \"#a0cef0\", \"#ffffff\", \"#2b2b2b\", \"#e6e1dc\"],\n    nordLight: [\"#353535\", \"#E64569\", \"#89D287\", \"#DAB752\", \"#439ECF\", \"#D961DC\", \"#64AAAF\", \"#B3B3B3\", \"#535353\", \"#E4859A\", \"#A2CCA1\", \"#E1E387\", \"#6FBBE2\", \"#E586E7\", \"#96DCDA\", \"#DEDEDE\", \"#ebeaf2\", \"#004f7c\"],\n    novel: [\"#000000\", \"#cc0000\", \"#009600\", \"#d06b00\", \"#0000cc\", \"#cc00cc\", \"#0087cc\", \"#cccccc\", \"#808080\", \"#cc0000\", \"#009600\", \"#d06b00\", \"#0000cc\", \"#cc00cc\", \"#0087cc\", \"#ffffff\", \"#dfdbc3\", \"#3b2322\"]\n};\nconst applyTheme = (theme) => {\n    const [black, red, green, yellow, blue, magneta, cyan, white, brightBlack, brightRed, brightGreen, brightYellow, brightBlue, brightMagneta, brightCyan, brightWhite, background, foreground] = theme;\n    term.setOption('theme', {\n        black, red, green, yellow, blue, magneta, cyan, white,\n        brightBlack, brightRed, brightGreen, brightYellow, brightBlue, brightMagneta, brightCyan, brightWhite,\n        background, foreground, cursor: foreground, cursorAccent: background\n    });\n};\nconst themeSelector = document.querySelector('#term-theme');\nfor (const [name] of Object.entries(themes)) {\n    const o = document.createElement('option');\n    o.innerText = `Theme: ${name}`;\n    o.value = name;\n    themeSelector.appendChild(o);\n}\nthemeSelector.onchange = () => {\n    applyTheme(themes[themeSelector.value]);\n    localStorage.setItem('term-theme', themeSelector.value);\n};\nconst savedTheme = localStorage.getItem('term-theme') || 'obsidian';\nthemeSelector.value = savedTheme;\nthemeSelector.onchange(null);\nterm.focus();\nw.term = term;\nterm.open(document.getElementById('terminal'));\nfit.fit(term);\n// term.setOption('fontFamily', 'Source Code Pro');\nterm.setOption('fontFamily', 'monospace');\nterm.setOption('allowTransparency', true);\n// term.setOption('theme', { background: '#0f3642' });\nvar shellprompt = `${typed_cli_1.chalkInstance.green('user@pc')}:${typed_cli_1.chalkInstance.blue('~/work')}$ `;\nconst promptsize = 16;\nexports.prompt = function () {\n    term.write('\\r\\n' + shellprompt);\n};\nconst getCursorX = () => {\n    return term._core.buffer.x;\n};\n// term.writeln('This is a pseudo terminal');\n// term.writeln('Supported shortcuts: Ctrl+C (reject input), Ctrl+K (clear terminal), Shift+Insert (paste)');\n// term.writeln('Type some keys and commands to play around.');\n// term.writeln('');\n// prompt();\nlet reader = (str) => { console.log(str); };\nlet tabHandler = (str) => { console.log('tab'); };\nlet buf = '';\nconst historyMgr = new historyMgr_1.HistoryMgr();\nwindow.historyMgr = historyMgr;\n// window.h = historyMgr;\nfunction replaceText(text) {\n    buf = text;\n    term.write(ansiEscapes.eraseLine);\n    term.write('\\r');\n    term.write(shellprompt);\n    term.write(text);\n}\nterm.on('key', function (key, ev) {\n    // console.log(key);\n    var printable = (!ev.altKey && !ev.ctrlKey && !ev.metaKey);\n    if (key === '\\t') {\n        tabHandler(buf);\n        return;\n    }\n    if (key === '\\u0003') {\n        buf = '';\n        exports.prompt();\n        return;\n    }\n    if (key === '\\u000b') {\n        buf = '';\n        term.clear();\n        return;\n    }\n    if (ev.keyCode == 13) {\n        const t = buf;\n        buf = '';\n        reader(t);\n        if (t.trim() !== '') {\n            historyMgr.push(t);\n            // saveToHistory(t, historyPos);\n            // historyPos = history.length + 1;\n        }\n        // history.push(t);\n        exports.prompt();\n    }\n    else if (ev.keyCode == 8) {\n        if (getCursorX() > promptsize + Math.max(0, buf.length - 1)) {\n            buf = buf.slice(0, -1);\n            term.write('\\b \\b');\n        }\n    }\n    else if (printable) {\n        if (ev.code === 'ArrowUp') {\n            replaceText(historyMgr.goUp(buf));\n        }\n        if (ev.code === 'ArrowDown') {\n            replaceText(historyMgr.goDown(buf));\n        }\n        if (ev.code !== 'ArrowUp' && ev.code !== 'ArrowDown') {\n            if (ev.code === 'ArrowLeft' || ev.code === 'ArrowRight') {\n                term.write(key);\n            }\n            else if (getCursorX() > promptsize + buf.length - 1) {\n                term.write(key);\n            }\n        }\n        if (key.length === 1 && getCursorX() > promptsize + buf.length - 1) {\n            buf += key;\n        }\n    }\n});\nterm.on('paste', function (data, ev) {\n    term.write(data);\n});\nfunction writeLn(text) {\n    term.writeln(text);\n}\nexports.writeLn = writeLn;\nfunction write(text) {\n    term.write(text);\n}\nexports.write = write;\nfunction onRead(fn) {\n    reader = fn;\n}\nexports.onRead = onRead;\nfunction onTab(fn) {\n    tabHandler = fn;\n}\nexports.onTab = onTab;\nfunction setBuf(str) {\n    buf = str;\n}\nexports.setBuf = setBuf;\nfunction getCursorPos() {\n    return new Promise((resolve, reject) => {\n        const listener = term.onData(data => {\n            const matched = /^\\u001b\\[(\\d+);(\\d+)R$/.exec(data);\n            if (!matched) {\n                return;\n            }\n            const [y, x] = matched.slice(1).map(i => Number(i) - 1);\n            resolve({ x, y });\n            listener.dispose();\n        });\n        term.write(ansiEscapes.cursorGetPosition);\n    });\n}\nexports.getCursorPos = getCursorPos;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/term-setup.ts\n");

/***/ }),

/***/ "./tabtab-mock.js":
/*!************************!*\
  !*** ./tabtab-mock.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90YWJ0YWItbW9jay5qcy5qcyIsInNvdXJjZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./tabtab-mock.js\n");

/***/ })

/******/ });