export const files = [{"filename":"node_modules/@types/typed-cli/index.d.ts","content":"export { Parser } from './src/parser';\nexport { Printer } from './src/printer';\nexport { option } from './src/option';\nexport { createCliHelper, Writer, Exiter, ArgvProvider, CreateCliHelperParams, CliHelper } from './src/cli-helper';\nexport { cli, defaultArgvProvider, defaultExiter, defaultPrinter, defaultWriter } from './src/default-cli';\nexport { decorators, chalkInstance } from './src/decorator';\nexport { locales } from './src/i18n';\nexport { completeForCommandSet } from './src/completer';\nexport { createCommandHelper, command } from './src/command';\n"},{"filename":"node_modules/@types/typed-cli/pg/index.d.ts","content":"#! /usr/bin/env node\nexport {};\n"},{"filename":"node_modules/@types/typed-cli/presets/url.d.ts","content":"/// <reference types=\"node\" />\nimport url from 'url';\ndeclare const urlOption: import(\"../src/option\").Option<\"string\", false, false, url.UrlWithStringQuery>;\nexport default urlOption;\n"},{"filename":"node_modules/@types/typed-cli/src/cli-helper.d.ts","content":"import { Printer } from './printer';\nimport { CliDeclaration, ResolveCliDeclaration } from './type-logic';\nexport declare type Writer = (str: string, logType: 'log' | 'error') => void;\nexport declare type Exiter = (hasErrors: boolean) => void;\nexport declare type ArgvProvider = () => string[];\nexport declare type CliHelper = <D extends CliDeclaration>(decl: D) => ResolveCliDeclaration<D>;\nexport declare type CreateCliHelperParams = {\n    writer: Writer;\n    exiter: Exiter;\n    argvProvider: ArgvProvider;\n    printer: Printer;\n    helpGeneration?: boolean;\n};\nexport declare function createCliHelper(params: CreateCliHelperParams): CliHelper;\n"},{"filename":"node_modules/@types/typed-cli/src/command.d.ts","content":"import { CliDeclaration, ResolveCliDeclaration } from \"./type-logic\";\nimport { Writer, Exiter, ArgvProvider } from \"./cli-helper\";\nimport { Printer } from \"./printer\";\nimport { Report } from \"./report\";\nimport { CompleterOptions } from \"./completer\";\nexport declare const defaultCommand: unique symbol;\nexport declare type CommandSet = Record<string, CommandBuilder<any>> & {\n    [defaultCommand]?: CommandBuilder<any>;\n};\nexport declare type CommandHandler<D extends CliDeclaration> = (data: ResolveCliDeclaration<D>) => void;\nexport declare const _decl: unique symbol;\nexport declare const _subCommandSet: unique symbol;\ndeclare const _fn: unique symbol;\nexport declare const _aliases: unique symbol;\ndeclare const _clone: unique symbol;\ndeclare const _match: unique symbol;\nexport declare class CommandBuilder<D extends CliDeclaration> {\n    [_decl]: D;\n    [_fn]: CommandHandler<D>;\n    [_aliases]: string[];\n    [_subCommandSet]: CommandSet;\n    constructor(decl: D);\n    [_clone]: () => CommandBuilder<D>;\n    handle(fn: CommandHandler<D>): CommandBuilder<D>;\n    alias(...aliases: string[]): CommandBuilder<D>;\n    subCommands(subCommandSet: Record<string, CommandBuilder<any>>): CommandBuilder<D>;\n    [_match]: (cmdString: string) => boolean;\n}\nexport declare function prepareCommandSet<C extends CommandSet>(cs: C, namePrefix?: string): C;\nexport declare type ParseCommandSetParams = {\n    cs: CommandSet;\n    argv: string[];\n    onReport: (report: Report) => void;\n    onHelp?: (cmd: CommandBuilder<CliDeclaration>) => void;\n};\nexport declare function findMatchedCommand(argv: string[], cs: CommandSet): CommandBuilder<any> | null;\nexport declare function parseCommandSet(params: ParseCommandSetParams): boolean;\nexport declare type CreateCommandHelperParams = {\n    writer: Writer;\n    exiter: Exiter;\n    argvProvider: ArgvProvider;\n    printer: Printer;\n    helpGeneration?: boolean;\n};\nexport declare type CommandHelperParams = {\n    program?: string;\n    description?: string;\n    completer?: CompleterOptions | boolean;\n};\nexport declare const createCommandHelper: (params: CreateCommandHelperParams) => (cfg: CommandHelperParams, cs: CommandSet) => void;\nexport declare function command<D extends CliDeclaration>(decl: D): CommandBuilder<D>;\nexport {};\n"},{"filename":"node_modules/@types/typed-cli/src/completer.d.ts","content":"import { CommandSet } from './command';\ndeclare type Completion = {\n    completion: string;\n    description: string;\n};\nexport declare function completeForCommandSet(cs: CommandSet, argv: string[], typedText: string): Completion[];\nexport declare function tabtabCommandDeclComplete(cs: CommandSet): void;\nexport declare type CompleterOptions = {\n    installCmd?: string;\n    uninstallCmd?: string;\n    completeCmd?: string;\n};\nexport declare function normalizeCompleterOptions(opts: CompleterOptions): Required<CompleterOptions>;\nexport declare function handleCompleterOptions(cs: CommandSet, cmd: string, opts: CompleterOptions | boolean, name: string | undefined, cb: Function): boolean;\nexport {};\n"},{"filename":"node_modules/@types/typed-cli/src/decorator.d.ts","content":"import chalk from 'chalk';\nexport { chalk as chalkInstance };\ndeclare type DecoratorFn = (text: string) => string;\nexport declare const plain: {\n    alias: (s: string) => string;\n    type: (s: string) => string;\n    optional: (s: string) => string;\n    required: (s: string) => string;\n    multiple: (s: string) => string;\n    optionDescription: (s: string) => string;\n    title: (s: string) => string;\n    usageOption: (s: string) => string;\n    command: (s: string) => string;\n    errorLine: (s: string) => string;\n    warningLine: (s: string) => string;\n    invalidValue: (s: string) => string;\n    commandPath: (s: string) => string;\n    commandEnding: (s: string) => string;\n    commandDescription: (s: string) => string;\n};\nexport declare type TextDecorator = typeof plain;\nexport declare function defineTextDecorator<T extends Record<keyof typeof plain, DecoratorFn>>(decorators: T): T;\nexport declare const fancy: {\n    alias: (s: string) => string;\n    type: (s: string) => string;\n    optional: (s: string) => string;\n    required: (s: string) => string;\n    multiple: (s: string) => string;\n    optionDescription: (s: string) => string;\n    title: (s: string) => string;\n    usageOption: (s: string) => string;\n    command: (s: string) => string;\n    errorLine: (s: string) => string;\n    warningLine: (s: string) => string;\n    invalidValue: (s: string) => string;\n    commandPath: (s: string) => string;\n    commandEnding: (s: string) => string;\n    commandDescription: (s: string) => string;\n};\nexport declare const decorators: {\n    fancy: {\n        alias: (s: string) => string;\n        type: (s: string) => string;\n        optional: (s: string) => string;\n        required: (s: string) => string;\n        multiple: (s: string) => string;\n        optionDescription: (s: string) => string;\n        title: (s: string) => string;\n        usageOption: (s: string) => string;\n        command: (s: string) => string;\n        errorLine: (s: string) => string;\n        warningLine: (s: string) => string;\n        invalidValue: (s: string) => string;\n        commandPath: (s: string) => string;\n        commandEnding: (s: string) => string;\n        commandDescription: (s: string) => string;\n    };\n    plain: {\n        alias: (s: string) => string;\n        type: (s: string) => string;\n        optional: (s: string) => string;\n        required: (s: string) => string;\n        multiple: (s: string) => string;\n        optionDescription: (s: string) => string;\n        title: (s: string) => string;\n        usageOption: (s: string) => string;\n        command: (s: string) => string;\n        errorLine: (s: string) => string;\n        warningLine: (s: string) => string;\n        invalidValue: (s: string) => string;\n        commandPath: (s: string) => string;\n        commandEnding: (s: string) => string;\n        commandDescription: (s: string) => string;\n    };\n};\n"},{"filename":"node_modules/@types/typed-cli/src/default-cli.d.ts","content":"import { ArgvProvider, Exiter, Writer } from './cli-helper';\nimport { Printer } from './printer';\nimport { CliDeclaration, ResolveCliDeclaration } from './type-logic';\nexport declare const defaultPrinter: Printer;\nexport declare const defaultArgvProvider: ArgvProvider;\nexport declare const defaultExiter: Exiter;\nexport declare const defaultWriter: Writer;\nexport declare const setupCommands: (cfg: import(\"./command\").CommandHelperParams, cs: import(\"./command\").CommandSet) => void;\nexport declare function cli<D extends CliDeclaration>(decl: D): ResolveCliDeclaration<D>;\nexport declare namespace cli {\n    var commands: (cfg: import(\"./command\").CommandHelperParams, cs: import(\"./command\").CommandSet) => void;\n}\n"},{"filename":"node_modules/@types/typed-cli/src/errors.d.ts","content":"export declare class BaseError extends Error {\n    className: keyof typeof allIssues;\n}\nexport declare class BaseWarning {\n    className: keyof typeof allIssues;\n    isWarning: boolean;\n}\ndeclare class EmptyRequiredOptionError extends BaseError {\n    requiredOption: string;\n    className: \"EmptyRequiredOptionError\";\n    constructor(requiredOption: string);\n}\ndeclare class TypeMismatchError extends BaseError {\n    className: \"TypeMismatchError\";\n    expected: string;\n    received: string;\n    constructor(expected: string, received: string);\n}\ndeclare class IvalidOptionError extends BaseError {\n    className: \"IvalidOptionError\";\n    optionName: string;\n    value: any;\n    constructor(optionName: string, value: any);\n}\ndeclare class SomeIvalidOptionsError extends BaseError {\n    className: \"SomeIvalidOptionsError\";\n}\ndeclare class IvalidSomeArguemntsError extends BaseError {\n    className: \"IvalidSomeArguemntsError\";\n}\ndeclare class IvalidArguemntError extends BaseError {\n    className: \"IvalidArguemntError\";\n    value: any;\n    constructor(value: any);\n}\ndeclare class InvalidCommand extends BaseError {\n    className: \"InvalidCommand\";\n    commandName: any;\n    constructor(commandName: any);\n}\ndeclare class NoCommand extends BaseError {\n    className: \"NoCommand\";\n}\ndeclare class IvalidInputError extends BaseError {\n    className: \"IvalidInputError\";\n}\ndeclare class UnknownOptionWarning extends BaseWarning {\n    className: \"UnknownOptionWarning\";\n    optionName: string;\n    constructor(optionName: string);\n}\nexport declare type IssueType = {\n    [key in keyof typeof allIssues]: InstanceType<(typeof allIssues)[key]>;\n}[keyof typeof allIssues];\nexport declare const allIssues: {\n    UnknownOptionWarning: typeof UnknownOptionWarning;\n    EmptyRequiredOptionError: typeof EmptyRequiredOptionError;\n    IvalidOptionError: typeof IvalidOptionError;\n    IvalidSomeArguemntsError: typeof IvalidSomeArguemntsError;\n    IvalidArguemntError: typeof IvalidArguemntError;\n    SomeIvalidOptionsError: typeof SomeIvalidOptionsError;\n    IvalidInputError: typeof IvalidInputError;\n    TypeMismatchError: typeof TypeMismatchError;\n    InvalidCommand: typeof InvalidCommand;\n    NoCommand: typeof NoCommand;\n};\nexport {};\n"},{"filename":"node_modules/@types/typed-cli/src/i18n.d.ts","content":"import { allIssues } from './errors';\nimport { TextDecorator } from './decorator';\nimport { Issue } from './report';\nexport declare type LocaleFn = (decorator: TextDecorator, data?: any) => string;\nexport declare type IssueLocaleFn = (decorator: TextDecorator, issue: Issue) => string;\ndeclare type IssueLocale = {\n    [key in keyof typeof allIssues]: (issue: InstanceType<(typeof allIssues)[key]>, decorator: TextDecorator) => string;\n};\nexport declare const en_US: {\n    code: string;\n    texts: {\n        title_description: (d: {\n            alias: (s: string) => string;\n            type: (s: string) => string;\n            optional: (s: string) => string;\n            required: (s: string) => string;\n            multiple: (s: string) => string;\n            optionDescription: (s: string) => string;\n            title: (s: string) => string;\n            usageOption: (s: string) => string;\n            command: (s: string) => string;\n            errorLine: (s: string) => string;\n            warningLine: (s: string) => string;\n            invalidValue: (s: string) => string;\n            commandPath: (s: string) => string;\n            commandEnding: (s: string) => string;\n            commandDescription: (s: string) => string;\n        }) => string;\n        title_usage: (d: {\n            alias: (s: string) => string;\n            type: (s: string) => string;\n            optional: (s: string) => string;\n            required: (s: string) => string;\n            multiple: (s: string) => string;\n            optionDescription: (s: string) => string;\n            title: (s: string) => string;\n            usageOption: (s: string) => string;\n            command: (s: string) => string;\n            errorLine: (s: string) => string;\n            warningLine: (s: string) => string;\n            invalidValue: (s: string) => string;\n            commandPath: (s: string) => string;\n            commandEnding: (s: string) => string;\n            commandDescription: (s: string) => string;\n        }) => string;\n        title_options: (d: {\n            alias: (s: string) => string;\n            type: (s: string) => string;\n            optional: (s: string) => string;\n            required: (s: string) => string;\n            multiple: (s: string) => string;\n            optionDescription: (s: string) => string;\n            title: (s: string) => string;\n            usageOption: (s: string) => string;\n            command: (s: string) => string;\n            errorLine: (s: string) => string;\n            warningLine: (s: string) => string;\n            invalidValue: (s: string) => string;\n            commandPath: (s: string) => string;\n            commandEnding: (s: string) => string;\n            commandDescription: (s: string) => string;\n        }) => string;\n        title_commands: (d: {\n            alias: (s: string) => string;\n            type: (s: string) => string;\n            optional: (s: string) => string;\n            required: (s: string) => string;\n            multiple: (s: string) => string;\n            optionDescription: (s: string) => string;\n            title: (s: string) => string;\n            usageOption: (s: string) => string;\n            command: (s: string) => string;\n            errorLine: (s: string) => string;\n            warningLine: (s: string) => string;\n            invalidValue: (s: string) => string;\n            commandPath: (s: string) => string;\n            commandEnding: (s: string) => string;\n            commandDescription: (s: string) => string;\n        }) => string;\n        hint_commandHint: (d: {\n            alias: (s: string) => string;\n            type: (s: string) => string;\n            optional: (s: string) => string;\n            required: (s: string) => string;\n            multiple: (s: string) => string;\n            optionDescription: (s: string) => string;\n            title: (s: string) => string;\n            usageOption: (s: string) => string;\n            command: (s: string) => string;\n            errorLine: (s: string) => string;\n            warningLine: (s: string) => string;\n            invalidValue: (s: string) => string;\n            commandPath: (s: string) => string;\n            commandEnding: (s: string) => string;\n            commandDescription: (s: string) => string;\n        }, { command }?: any) => string;\n        opt_required: (d: {\n            alias: (s: string) => string;\n            type: (s: string) => string;\n            optional: (s: string) => string;\n            required: (s: string) => string;\n            multiple: (s: string) => string;\n            optionDescription: (s: string) => string;\n            title: (s: string) => string;\n            usageOption: (s: string) => string;\n            command: (s: string) => string;\n            errorLine: (s: string) => string;\n            warningLine: (s: string) => string;\n            invalidValue: (s: string) => string;\n            commandPath: (s: string) => string;\n            commandEnding: (s: string) => string;\n            commandDescription: (s: string) => string;\n        }) => string;\n        opt_optional: (d: {\n            alias: (s: string) => string;\n            type: (s: string) => string;\n            optional: (s: string) => string;\n            required: (s: string) => string;\n            multiple: (s: string) => string;\n            optionDescription: (s: string) => string;\n            title: (s: string) => string;\n            usageOption: (s: string) => string;\n            command: (s: string) => string;\n            errorLine: (s: string) => string;\n            warningLine: (s: string) => string;\n            invalidValue: (s: string) => string;\n            commandPath: (s: string) => string;\n            commandEnding: (s: string) => string;\n            commandDescription: (s: string) => string;\n        }) => string;\n        opt_multile: (d: {\n            alias: (s: string) => string;\n            type: (s: string) => string;\n            optional: (s: string) => string;\n            required: (s: string) => string;\n            multiple: (s: string) => string;\n            optionDescription: (s: string) => string;\n            title: (s: string) => string;\n            usageOption: (s: string) => string;\n            command: (s: string) => string;\n            errorLine: (s: string) => string;\n            warningLine: (s: string) => string;\n            invalidValue: (s: string) => string;\n            commandPath: (s: string) => string;\n            commandEnding: (s: string) => string;\n            commandDescription: (s: string) => string;\n        }) => string;\n    };\n    issues: IssueLocale;\n};\nexport declare type Locale = typeof en_US;\nexport declare function declareLocale(locale: Locale): Locale;\nexport declare const locales: {\n    en_US: {\n        code: string;\n        texts: {\n            title_description: (d: {\n                alias: (s: string) => string;\n                type: (s: string) => string;\n                optional: (s: string) => string;\n                required: (s: string) => string;\n                multiple: (s: string) => string;\n                optionDescription: (s: string) => string;\n                title: (s: string) => string;\n                usageOption: (s: string) => string;\n                command: (s: string) => string;\n                errorLine: (s: string) => string;\n                warningLine: (s: string) => string;\n                invalidValue: (s: string) => string;\n                commandPath: (s: string) => string;\n                commandEnding: (s: string) => string;\n                commandDescription: (s: string) => string;\n            }) => string;\n            title_usage: (d: {\n                alias: (s: string) => string;\n                type: (s: string) => string;\n                optional: (s: string) => string;\n                required: (s: string) => string;\n                multiple: (s: string) => string;\n                optionDescription: (s: string) => string;\n                title: (s: string) => string;\n                usageOption: (s: string) => string;\n                command: (s: string) => string;\n                errorLine: (s: string) => string;\n                warningLine: (s: string) => string;\n                invalidValue: (s: string) => string;\n                commandPath: (s: string) => string;\n                commandEnding: (s: string) => string;\n                commandDescription: (s: string) => string;\n            }) => string;\n            title_options: (d: {\n                alias: (s: string) => string;\n                type: (s: string) => string;\n                optional: (s: string) => string;\n                required: (s: string) => string;\n                multiple: (s: string) => string;\n                optionDescription: (s: string) => string;\n                title: (s: string) => string;\n                usageOption: (s: string) => string;\n                command: (s: string) => string;\n                errorLine: (s: string) => string;\n                warningLine: (s: string) => string;\n                invalidValue: (s: string) => string;\n                commandPath: (s: string) => string;\n                commandEnding: (s: string) => string;\n                commandDescription: (s: string) => string;\n            }) => string;\n            title_commands: (d: {\n                alias: (s: string) => string;\n                type: (s: string) => string;\n                optional: (s: string) => string;\n                required: (s: string) => string;\n                multiple: (s: string) => string;\n                optionDescription: (s: string) => string;\n                title: (s: string) => string;\n                usageOption: (s: string) => string;\n                command: (s: string) => string;\n                errorLine: (s: string) => string;\n                warningLine: (s: string) => string;\n                invalidValue: (s: string) => string;\n                commandPath: (s: string) => string;\n                commandEnding: (s: string) => string;\n                commandDescription: (s: string) => string;\n            }) => string;\n            hint_commandHint: (d: {\n                alias: (s: string) => string;\n                type: (s: string) => string;\n                optional: (s: string) => string;\n                required: (s: string) => string;\n                multiple: (s: string) => string;\n                optionDescription: (s: string) => string;\n                title: (s: string) => string;\n                usageOption: (s: string) => string;\n                command: (s: string) => string;\n                errorLine: (s: string) => string;\n                warningLine: (s: string) => string;\n                invalidValue: (s: string) => string;\n                commandPath: (s: string) => string;\n                commandEnding: (s: string) => string;\n                commandDescription: (s: string) => string;\n            }, { command }?: any) => string;\n            opt_required: (d: {\n                alias: (s: string) => string;\n                type: (s: string) => string;\n                optional: (s: string) => string;\n                required: (s: string) => string;\n                multiple: (s: string) => string;\n                optionDescription: (s: string) => string;\n                title: (s: string) => string;\n                usageOption: (s: string) => string;\n                command: (s: string) => string;\n                errorLine: (s: string) => string;\n                warningLine: (s: string) => string;\n                invalidValue: (s: string) => string;\n                commandPath: (s: string) => string;\n                commandEnding: (s: string) => string;\n                commandDescription: (s: string) => string;\n            }) => string;\n            opt_optional: (d: {\n                alias: (s: string) => string;\n                type: (s: string) => string;\n                optional: (s: string) => string;\n                required: (s: string) => string;\n                multiple: (s: string) => string;\n                optionDescription: (s: string) => string;\n                title: (s: string) => string;\n                usageOption: (s: string) => string;\n                command: (s: string) => string;\n                errorLine: (s: string) => string;\n                warningLine: (s: string) => string;\n                invalidValue: (s: string) => string;\n                commandPath: (s: string) => string;\n                commandEnding: (s: string) => string;\n                commandDescription: (s: string) => string;\n            }) => string;\n            opt_multile: (d: {\n                alias: (s: string) => string;\n                type: (s: string) => string;\n                optional: (s: string) => string;\n                required: (s: string) => string;\n                multiple: (s: string) => string;\n                optionDescription: (s: string) => string;\n                title: (s: string) => string;\n                usageOption: (s: string) => string;\n                command: (s: string) => string;\n                errorLine: (s: string) => string;\n                warningLine: (s: string) => string;\n                invalidValue: (s: string) => string;\n                commandPath: (s: string) => string;\n                commandEnding: (s: string) => string;\n                commandDescription: (s: string) => string;\n            }) => string;\n        };\n        issues: IssueLocale;\n    };\n};\nexport {};\n"},{"filename":"node_modules/@types/typed-cli/src/option.d.ts","content":"import { Validator, Preprocessor, BooleanValidator } from './pipeline';\ndeclare type TypeMap = {\n    number: number;\n    int: number;\n    string: string;\n    boolean: boolean;\n    any: number | string | boolean;\n};\nexport declare type Types = keyof TypeMap;\nexport declare type ResolveType<T extends Types> = TypeMap[T];\ndeclare const optionDataKey: unique symbol;\nexport declare type OptData<T> = {\n    name: string;\n    type: Types;\n    labelName: string;\n    description: string;\n    isRequired: boolean;\n    aliases: string[];\n    isArray: boolean;\n    defaultValue?: T;\n    isArg?: boolean;\n    validators: Validator<any>[];\n    prePreprocessors: Preprocessor[];\n    postPreprocessors: Preprocessor[];\n};\nexport declare function getOptData(opt: Option<any, any, any, any>): OptData<unknown>;\nexport declare function setOptData(opt: Option<any, any, any, any>, data: OptData<any>): void;\nexport declare function cloneOption<O extends Option<any, any, any, any>>(opt: O): O;\nexport declare function updateOptData<O extends Option<any, any, any, any>>(opt: O, data: Partial<OptData<any>>): O;\nexport declare function changeOptData<O extends Option<any, any, any, any>>(opt: O, data: Partial<OptData<any>>): O;\nexport declare function option<T extends Types>(type: T): Option<T, false, false, ResolveType<T>>;\nexport declare class Option<T extends Types, R extends boolean, A extends boolean, RT> {\n    name: string;\n    [optionDataKey]: OptData<RT>;\n    private _isRequired;\n    private _isArray;\n    constructor(type: T);\n    label(name: string): Option<T, R, A, RT>;\n    alias(...aliases: string[]): Option<T, R, A, RT>;\n    description(text: string): Option<T, R, A, RT>;\n    required(): Option<T, true, A, RT>;\n    array(): Option<T, R, true, RT>;\n    default(value: RT): Option<T, true, A, RT>;\n    validate(errorMsg: string, validator: BooleanValidator<RT>): Option<T, R, A, RT>;\n    validate(validator: Validator<RT>): Option<T, R, A, RT>;\n    process(phase: 'pre', fn: Preprocessor<any, ResolveType<T>>): Option<T, R, A, RT>;\n    process<FR>(phase: 'post', fn: Preprocessor<ResolveType<T>, FR>): Option<T, R, A, FR>;\n}\nexport declare type OptionSet = Record<string, Option<any, boolean, boolean, any>>;\nexport {};\n"},{"filename":"node_modules/@types/typed-cli/src/parser.d.ts","content":"import { CliDeclaration, ResolveCliDeclaration } from './type-logic';\nimport { Report } from './report';\nexport declare function prepareCliDeclaration(decl: CliDeclaration): {\n    decl: Required<CliDeclaration>;\n    usedKeys: Set<string>;\n};\nexport declare class Parser<D extends CliDeclaration> {\n    private optCfg;\n    private decl;\n    private usedKeys;\n    constructor(decl: D);\n    private parseOptions;\n    private normalizeArgs;\n    private parseArguments;\n    parse(argv: string[] | string): {\n        report: Report;\n        data: ResolveCliDeclaration<D> | null;\n    };\n}\n"},{"filename":"node_modules/@types/typed-cli/src/pipeline.d.ts","content":"import { Report } from './report';\nexport declare type Validator<T> = (value: T) => void;\nexport declare type BooleanValidator<T> = (value: T) => boolean;\nexport declare function makeValidator<T>(errorMsg: string, fn: (value: T) => boolean): Validator<T>;\nexport declare type Preprocessor<I = any, O = any> = (value: I) => O;\ninterface ValidationCfg {\n    isRequired: boolean;\n    validators: Validator<any>[];\n    name: string;\n    isArg?: boolean;\n}\ninterface OptCfg extends ValidationCfg {\n    prePreprocessors: Preprocessor[];\n    postPreprocessors: Preprocessor[];\n    isArray: boolean;\n    defaultValue?: any;\n    isArg?: boolean;\n}\nexport declare function handleOption(optCfg: OptCfg, value: any, iterating?: boolean): {\n    value: any;\n    report: Report;\n};\nexport declare function handleAllOptions(optSchema: Record<string, OptCfg>, rawData: Record<string, any>, usedKeys: Set<string>): {\n    data: any;\n    report: Report;\n};\nexport {};\n"},{"filename":"node_modules/@types/typed-cli/src/printer-old.d.ts","content":""},{"filename":"node_modules/@types/typed-cli/src/printer.d.ts","content":"import { Locale } from './i18n';\nimport { TextDecorator } from './decorator';\nimport { Report } from './report';\nimport { CliDeclaration } from './type-logic';\nimport { CommandSet, CommandHelperParams } from './command';\ndeclare type PrinterParams = {\n    locale: Locale;\n    decorator: TextDecorator;\n    lineEnding?: string;\n};\nexport declare class Printer {\n    private locale;\n    private decorator;\n    private lineEnding;\n    constructor({ locale, decorator, lineEnding }: PrinterParams);\n    private generateOptionDescription;\n    private generateUsage;\n    private genenrateCommandList;\n    generateHelpForComands(cfg: CommandHelperParams, cs: CommandSet): string;\n    generateHelp(decl: CliDeclaration): string;\n    private printReportLayer;\n    stringifyReport(report: Report): string;\n}\nexport {};\n"},{"filename":"node_modules/@types/typed-cli/src/report.d.ts","content":"import { BaseWarning } from './errors';\nexport declare type Issue = (Error | BaseWarning | null);\nexport declare type Report = {\n    issue: Issue;\n    children: Report[];\n};\nexport declare function combineIssues(conclusion: Issue, issues: Issue[]): Report;\nexport declare function isError(issue?: Issue): boolean;\nexport declare function mergeReports(conclusion: Issue, ...reports: Report[]): Report;\nexport declare function errorToReport(err: Error): Report;\n"},{"filename":"node_modules/@types/typed-cli/src/type-logic.d.ts","content":"import { Option, OptionSet, Types } from './option';\nexport declare type GetPropertiyNames<T extends Record<string, unknown>, P> = {\n    [K in keyof T]: T[K] extends P ? K : never;\n}[keyof T];\nexport declare type GetProperties<T extends Record<string, unknown>, P> = Pick<T, GetPropertiyNames<T, P>>;\ndeclare type PickRequiredOpts<O extends OptionSet> = GetProperties<O, Option<any, true, boolean, any> | Option<any, boolean, true, any>>;\ndeclare type PickNonRequiredOpts<O extends OptionSet> = GetProperties<O, Option<any, false, boolean, any>>;\ndeclare type ResolveOptionType<O extends Option<Types, boolean, boolean, any>> = O extends Option<any, boolean, boolean, infer R> ? R : never;\ndeclare type ResolveOption<O extends Option<Types, boolean, boolean, any>> = O extends Option<Types, boolean, true, any> ? Array<ResolveOptionType<O>> : ResolveOptionType<O>;\ndeclare type ResolveOptionSet<O extends OptionSet> = {\n    [key in keyof PickRequiredOpts<O>]: ResolveOption<PickRequiredOpts<O>[key]>;\n} & {\n    [key in keyof PickNonRequiredOpts<O>]?: ResolveOption<PickNonRequiredOpts<O>[key]>;\n};\nexport declare type CliDeclaration = {\n    name?: string;\n    options?: OptionSet;\n    description?: string;\n    _?: Option<Types, boolean, boolean, any>;\n};\nexport declare type ResolveCliDeclaration<D extends CliDeclaration> = {\n    options: D['options'] extends OptionSet ? ResolveOptionSet<D['options']> : {};\n    _: D['_'] extends Option<any, infer R, any, any> ? R extends true ? ResolveOption<D['_']> : ResolveOption<D['_']> | undefined : undefined;\n};\nexport {};\n"},{"filename":"node_modules/@types/typed-cli/src/utils.d.ts","content":"export declare function createKebabAlias(str: string): string | undefined;\nexport declare function objMap<T, R>(obj: Record<string, T>, fn: (item: T) => R): Record<string, R>;\nexport declare function alignTextMatrix(textMatrix: string[][], alignment?: ('left' | 'right')[]): string[][];\nexport declare function arrayPartition<T>(array: T[], fn: (item: T, index: number, array: T[]) => boolean): [T[], T[]];\nexport declare function tabText(text: string, prefix: string): string;\nexport declare function findKeyCollision(keys: string[]): string | null;\n"},{"filename":"node_modules/@types/typed-cli/tests/unit/cli-helper.d.ts","content":"export {};\n"},{"filename":"node_modules/@types/typed-cli/tests/unit/index.d.ts","content":"import './utils';\nimport './option';\nimport './pipeline';\nimport './parser';\nimport './printer';\nimport './cli-helper';\n"},{"filename":"node_modules/@types/typed-cli/tests/unit/option.d.ts","content":"export {};\n"},{"filename":"node_modules/@types/typed-cli/tests/unit/parser.d.ts","content":"export {};\n"},{"filename":"node_modules/@types/typed-cli/tests/unit/pipeline.d.ts","content":"import { Report } from '../../src/report';\nimport { IssueType } from '../../src/errors';\ndeclare type ReportReference = {\n    issue: [new (...args: any[]) => IssueType, Record<string, any>];\n    children: ReportReference[];\n};\nexport declare function validateReport(r: Report, ref: ReportReference): void;\nexport {};\n"},{"filename":"node_modules/@types/typed-cli/tests/unit/printer.d.ts","content":"export {};\n"},{"filename":"node_modules/@types/typed-cli/tests/unit/utils copy.d.ts","content":"export {};\n"},{"filename":"node_modules/@types/typed-cli/tests/unit/utils.d.ts","content":"export {};\n"},{"filename":"./bootstrap.d.ts","content":"import {cli as _cli, option as _option, command as _command} from 'typed-cli';\n\ndeclare global {\n    const cli: typeof _cli;\n    const option: typeof _option;\n    const command: typeof _command;\n}\n"}];